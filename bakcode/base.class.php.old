<?php
use com\zhubajie\pay\interfaces\RefundServiceClient;
use com\zhubajie\pay\dataobject\pay\PayChn;
use com\zhubajie\pay\dataobject\pay\ChargeAmountType;

use com\zhubajie\user\interfaces\MallServiceClient;
use com\zhubajie\task\interfaces\TaskServiceClient;

/**
 * 任务类
 */
abstract class zbj_service_task_base extends zbj_components_baseservice {
	private $appid = '';
	private $secret = '';
	//当前业务ID
	protected $id;

	//当前对象主数据表
	protected $marter_table = 'zbj_model_mk_task';

	//请求交易号
	protected $trade_no = '';

	//任务一些特殊数据
	static private $tsk_map_data = array();

	public function __construct($id = 0) {
		parent::__construct();

		$this->id = $id;
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
    }

	/**
	 * 创建任务
	 * @param array $data 数据集
	 * @param array $files 附件
	 * @param array $ext 技能
	 * @param array $params 其他参数:together和谁在一起,多维数组;
	 * @param mix(int|false)
	 */
	public function create($data, $files = array(), $ext = array(), $params = array()) {

        if(isset($params['union'])){//shenfeng 联盟统计信息 2015-07-30
            $union = $params['union'];
            unset($params['union']);
        }else{
            $union = "";
        }

		//必要的验证数据
		//code....

		//检查必要的数据
		//if(empty($data['catalog2id']) || empty($data['catalog_id']) || empty($data['title'])) {
		//	$this->setError(0,'缺少必要的参数');
		//	return false;
		//}

		if(empty($data['title'])) {
			$this->setError(0,'缺少必要的参数');
			return false;
		}

		/*//检查内容是否含违规信息
		if (SFilter::checkey($data['task_cont.content'].$data['title'], 1)) {
			$this->setError(-10,'您填写的内容和标题不能包含违规信息');
			return false;
		}*/
		//检查内容是否含有联系方式
		//if (SFilter::contacts($data['task_cont.content'].$data['title'])) {
			//$this->setError(-10,'您填写的内容和标题不能包含联系方式');
			//return false;
		//}

		$tag = $data['tag'];
		$friends = $data['friends'];
		$allotdata = $data['allotinfo'];
		unset($data['allotinfo']);
		unset($data['tag']);
		unset($data['friends']);

		//数据都合法
		if($this->set($data) === false) {
			$this->setError(0,'设置属性失败，原因'.$this->getError());
			return false;
		}
		
		//兼容处理标签和分类
		if($tag){
			//标签转分类
			$this->tag2catalog($tag);
		}else{
			//分类转标签
			$tag = $this->catalog2tag($data);
		}
		
		//任务初始状态
		$user = new zbj_service_user($this->get('user_id'));
		$data['day'] = $data['day'] > 0 ? $data['day'] : 7;
		
		$this->set('state', 0);
		if(in_array($data['mode'],array(10,13))) {
			//免费需求直接更新用户发布数
			//仅仅针对勾选了隐私的需求，需要用户确认是否支付才能发布 2013.2.6  by zhutao
			if($data['was_nosearch'] == 0) {
				$user->set('count.t_ok_num',$user->get('count.t_ok_num')+1);
				//@todo $user->set('count.free_post_num',$user->get('count.free_post_num')+1);
				$this->set('state',2);
				$this->set('sort',$this->_time);
				$this->set('starttime',$this->_time);
				$this->set('startymd',date('Y-m-d',$this->_time));
				$this->set('endtime',$this->_time+$data['day']*86400);
				$this->set('endymd',date('Y-m-d',$this->_time+$data['day']*86400));
				$feedMsg = 1;
				$issend = 1;//是否发送邀请通知
			}else{
				$this->set('state',1);
				$issend = 0;
			}
		}
		
		// 可以发布草稿
		if(isset($data['state'])) {
			$this->set('state', $data['state']);
			if($data['state'] < 2) {
				$this->set('sort', 0);
				$this->set('starttime', 0);
				$this->set('startymd', 0);
				$this->set('endtime', 0);
				$this->set('endymd', 0);
			}
		}

		//任务托管状态
		$this->set('hosted',0);

		//默认不保证选稿
		$this->set('isgpay', intval($data['isgpay']));
		if($data['allot'] == 3) $this->set('isgpay',1);

		//任务时间
		$this->set('createtime',$this->_time);
		$this->set('createymd',date('Y-m-d',$this->_time));
		$this->set('cpo_ishide', 1);//默认发布不进列表

		//增值服务状态
		$this->set('was_nosearch',0);
		$this->set('was_showorks',0);
		$this->set('was_promotion',0);

		$ip = zbj_lib_BaseUtils::getIp();
		if($data['task_info.task_source'] != 6){
			if(!$user->isAllowPost()) {
				$this->setError(0,'用户被禁止该操作');
				return false;
			}
		}

		//默认时间
		if($this->get('day') <= 0) {
			$this->set('day',7);
		}

		//ip
		if($this->get('task_info.ip') == '') {
			$this->set('task_info.ip',$ip);
		}

		//发贴默认值
		if(is_array($this->get('task_info.option'))) {
			$info_option = $this->get('task_info.option');
		}
		$info_option['lastoperation'] = array('dateline'=>$this->_time,'type'=>4,'user_id'=>$this->get('user_id'),'nickname'=>$this->get('nickname'));
		$info_option['was_nosearch'] = $data['was_nosearch'];
		$this->set('task_info.option',serialize($info_option));

		//默认邀请人数
		$this->set('task_info.invite',20);

		//推广员
		if($data['mode'] != 13) {
			$this->set('uncode', $user->getUserUnCode());
			$this->set('uncode_extid', $user->getUserUnCode(true));
		}

		//默认全部需要审核
		$this->set('isaudit', 1);
		if($this->get('mode') == 13){ // 招标
			$this->set('audit_state', 0); // 所有招标，必须审核
		}

		//默认诚意金规则
		$this->set('cyj_id', 1);

		//起始价格
		if($this->get('amount')) {
			$this->set('task_opis.first_amount', $this->get('amount'));
		}
		if($_SERVER["HTTP_REFERER"]){
			$this->set('task_opis.from_url', zbj_lib_BaseUtils::getStr($_SERVER["HTTP_REFERER"]));
		}
		$this->set('task_opis.hosted_numth', (int)$user->get('count.hosted_numth'));
		//400001 表示来自微信发布的需求
		if($data['task_info.from_cid'] == 400001){
			$this->set('task_info.task_source',6);
		}
		$this->set('task_opis.from_manager_id',intval($_COOKIE['_kfid']));

        if(intval($_COOKIE['_kfid'])!=0){
            //added by shenfeng 2015-04-29 如果是代发的需要把额外的代发人员所属部门写入数据库
            //thrift 从boss拿当前from_manager_id所属的部门
            zbj_lib_ApiClient::init($this->appid,$this->secret);
            $api = new com\zhubajie\boss\interfaces\userServiceClient(null);
            zbj_lib_ApiClient::build($api);
            $tp_re = $api->getGroupID(intval($_COOKIE['_kfid']),2);
            if($tp_re){
                $this->set('task_opis.from_manager_department_id',$tp_re);
            }
        }

		//任务分类表数据
		if($this->get('catalog2id')) {

			$catalog_model = zbj_model_api::get('zbj_model_mk_catalog', $this->get('catalog2id'));
			$catalog_result = $catalog_model->get();
			$catalog_data = array(
				array(
					'catalog_id'=>$this->get('catalog_id'),
					'catalog2id'=>$this->get('catalog2id'),
					'cname'=>$catalog_result['cname'],
				));

			//冗余的分类数据
			$this->set('task_info.catelog_key', (string)$this->getCataLogToStr($catalog_data));

			//是否需要交接源文件
			//$this->set('task_info.isupfile', (int)$catalog_result['isupfile']);

			//是否橱窗显示
			//$this->set('task_info.ispic', (int)$catalog_result['ispic']);

			//交易模式
			//$this->set('type', (int)$catalog_result['task_type']);

			//指定分类的诚意金规则
			$this->set('cyj_id', $catalog_result['cyj_id']);
		}
		//新类目
		if($this->get('category_id')) {
			$cataModel = zbj_model_api::get('zbj_model_mk_category', $this->get('category_id'));
			$cataModel_result = $cataModel->get();
			$this->set('task_info.isupfile', (int)$cataModel_result['isupfile']);
		}

		//如果非悬赏，不需要审核和橱窗模式
		if ($this->get('mode') > 0){
			$this->set('task_info.ispic', 0);
		}
		if($this->get('mode') == 13){
			$this->set('task_opis.special_type',3); // 新招标0佣金
			if($this->get('category1id')==12){ // 网建
				$this->set('task_opis.special_type',1); // 网建专场
			}
		}
		//计件任务不以橱窗展示
		if ($this->get('allot') == 3) {
			$this->set('task_info.ispic', 0);
		}

		//如果为微博模式，时间传入is_weibo字段
		if($this->get('type') == 2 && empty($data['is_weibo'])) {
			$this->setError(0,'没有指定微博类型');
			return false;
		}

		//推广联盟 (new)
		$adunion_info = $this->getAdunionInfo();
		if ($adunion_info !== false) {
			$this->set('task_opis.adunion', $adunion_info['adunion']);
			$this->set('task_opis.adunion_lead_id', $adunion_info['lead_id']);
		}

		//冗余技能数据
		$this->set('task_info.skill', (string)$this->getSkillToStr($ext));

		//和谁在一起
		$together_num = (int)count($params['together']);
		if($together_num > 0) {
			$this->set('task_info.together_num', $together_num);
		}
		$this->setWorkFirst();
		try {
			//开始事务
			$this->_beginTransaction('mk');
			$this->_beginTransaction('mb');

			//保存主表
			if($this->save($this->marter_table) !== true) {
				throw new Exception('主表保存失败，原因'.$this->getError());
			}

			$task_id = $this->model()->lastInsertId();
			$this->set('task_info.task_id',$task_id);
			$this->set('task_cont.task_id',$task_id);
			$this->set('task_opis.task_id',$task_id);
            if($data['task_mobileinfo.skey']){
                $this->set('task_mobileinfo.task_id',$task_id);
            }

			if($this->save() !== true) {
				throw new Exception('副表保存失败，原因'.$this->getError());
			}
			//保存标签
			if($this->saveTag($task_id, $tag) === false){
				throw new Exception($this->getError());
			}
			//邀请好友
			if($friends){
				if($this->inviteFriend($task_id, $friends, $issend) === false){
					throw new Exception($this->getError());
				}
			}
			//附件
			if($this->addFiles($task_id, $files) !== true) {
				throw new Exception('附件保存失败，原因'.$this->getError());
			}

			//技能
			if($this->addExtand($task_id, $ext) !== true) {
				throw new Exception('扩展属性保存失败，原因'.$this->getError());
			}

			//创建分类关系表，满足以前数据库结构设计
			if($this->addCataLog($task_id, $catalog_data) !==true) {
				throw new Exception('新增分类对应表失败，原因'.$this->getError());
			}

			//更新用户任务提交数
			$user->set('count.t_num',$user->get('count.t_num')+1);
			if($user->save() === false) {
				throw new Exception('更新用户数据失败，原因'.$user->getError());
			}

			//更新客户资料
			if($user->upUserPerson() === false) {
				//throw new Exception('登记客户资料失败，原因'.$user->getError());
			}

			//更新和谁在一起
			if($together_num > 0 && !$this->addTogether($task_id, $params['together'])) {
				throw new Exception('和谁在一起更新失败，原因'.$this->getError());
			}
			if(in_array($data['allot'], array(2,3))){
				if($this->addAllot($task_id, $allotdata) === false){
					throw new Exception('设置分配模式错误，原因'.$this->getError());
				}
			}

			//提交事务
			$this->_commit('mk');
			$this->_commit('mb');

			zbj_lib_Api::taskCreated($task_id);

			if($feedMsg == 1){
				$feed = new zbj_service_feed();
				$feed->add($task_id, 1);
				$this->model()->uptaskScore();
				$this->model()->upTaskSearch($task_id);
			}
			$link = new zbj_service_links();
			$link->findKeywords($task_id, 1);
			//发布统计
			$mdlAnalysis = new zbj_model_mk_taskanalysis();
			$mdlAnalysis->pubSuccess($task_id, $user);
			//对后台代发任务发送短信
			if(intval($_COOKIE['_kfid']) > 0 && $user->getAuthMobile()) {
				$data = array();
				$data['tplkey'] = "com.zhubajie.trade.task.behalf";
				$data['t_userid'] = $user->get('user_id');
				$data['t_nickname'] = $user->get('nickname');//"一孔信息科技工作室";
				//$data['f_userid'] = $user->get('user_id');
				//$data['f_nickname'] = $user->get('nickname');//"一孔信息科技工作室";
				$data['cat_id'] = '';	//类别ID
				$data['title'] = '代雇主填单通知';
				$data['mobile'] = $user->getAuthMobile();
				$data['task_id'] = $task_id;
				$msg = new SSendmsg();
				$msg->sendMsgNew($data);
			}

			$this->setId($task_id);			

			//检查需求是否需要交易合同
			$agreestatus = $this->getAgreementStatus();
			if(!in_array($agreestatus, array(4,5))){
				$this->initTaskAgreement();					
			}

			// 编辑日志
			$this->addTaskEditLog($data);

            $this->SpreadTask($task_id,$union);//shenfeng 联盟统计 2015-07-30

			return $task_id;
		} catch(Exception $e) {
			//回滚事务
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 插入附件
	 * @param int $task_id 任务ID
	 * @param array $files 附件数据
	 * @return boolean
	 */
	public function addFiles($task_id, $files = array()) {

		$files = (array) $files;
		$model = $this->model('task_file');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		foreach($files as $val) {
			$val['task_id'] = $task_id;
			if(!$model->insert($val)) {
				$this->setError(0,'附件保存失败,'.$model->getError().$model->getDbError());
				return false;
			}
		}
		return true;
	}

	/**
	 * 删除附件
	 * @param string $id 多个用逗号分隔
	 * @return boolean
	 */
	public function delFiles($id = '') {
		$model = $this->model('task_file');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		if(empty($this->id)) {
			$this->setError(0,'没有设置对象ID');
			return false;
		}
		if(empty($id)) {
			//删除全部
			$r = $model->delete($this->model()->getRelationsCondition('task_file').' = '.$this->id.' and task_id = '.$this->id);
		}else {

			//数据合法性
			if(!preg_match("/^[,\d]+$/",$id)){
				$this->setError(0,'数据格式有误');
				return false;
			}
			$r = $model->delete($model->primarykey()." in($id) and task_id = $this->id");
		}
		return $r === false?false:true;
	}

	/**
	 * 新增任务扩展属性
	 * @param int $task_id 任务ID
	 * @param array $ext 扩展数据
	 * @return boolean
	 */
	public function addExtand($task_id, $ext = array()) {

		$ext = (array) $ext;

		$model = $this->model('task_e2v');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
                
		foreach($ext as $val) {
                    //增加悬赏类textarea扩展属性值处理方式 by hetianxing
                    if(isset($val['textarea']) && count($val['textarea'])>0){
                        $mdl = $this->model('task_e2v_textarea');
                        if(!is_object($mdl)) {
                            $this->setError(0,'没有找到对象关系');
                            return false;
                        }
                        $val['textarea']['task_id'] = $task_id;
                        if(!$mdl->insert($val['textarea'])) {
                                $this->setError(0,'扩展保存失败,'.$mdl->getError().$mdl->getDbError());
                                return false;
                        }
                    }else{
			$val['task_id'] = $task_id;
			$val['val_name'] = (string)$val['val_name'];
			if(!$model->insert($val)) {
				$this->setError(0,'扩展保存失败,'.$model->getError().$model->getDbError());
				return false;
			}
		}
			
		}
		return true;
	}

	/**
	 * 删除扩展属性
	 * @param string $id 多个用逗号分隔
	 * @return boolean
	 */
	public function delExtand($id = '') {

		//数据合法性

		$model = $this->model('task_e2v');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		if(empty($this->id)) {
			$this->setError(0,'没有设置对象ID');
			return false;
		}

		if(empty($id)) {
			//删除全部
			$r = $model->delete($this->model()->getRelationsCondition('task_e2v').' = '.$this->id.' and task_id = '.$this->id);
		}else {
			//数据合法性
			if(!preg_match("/^[,\d]+$/",$id)){
				$this->setError(0,'数据格式有误');
				return false;
			}

			$r = $model->delete($model->primarykey()." in($id) and task_id = $this->id");
		}
		return $r === false?false:true;
	}

	/**
	 * 新增任务分类属性表
	 * @param int $task_id 任务ID
	 * @param array $ext 扩展数据
	 * @param boolean $is_check 是否检查重复
	 * @return boolean
	 */
	public function addCataLog($task_id, $data = array(), $is_check = false) {

		$data = (array) $data;
		$model = $this->model('task_catalog');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		foreach($data as $val) {

			if($is_check) {
				//检查是否已经存在
				if($model->selectOne(array('task_id'=>$task_id,'catalog2id'=>$val['catalog2id']), 'class_id')) {
					continue;
				}
			}
			$val['task_id'] = $task_id;
			if(!$model->insert($val)) {
				$this->setError(0,'任务分类表保存失败,'.$model->getError().$model->getDbError());
				return false;
			}
		}
		return true;
	}

	/**
	 * 新增任务分配模式
	 * @param int $task_id 任务ID
	 * @param array $ext 扩展数据
	 * @return boolean
	 */
	public function addAllot($task_id, $data = array()) {

		$data = (array) $data;
		$model = $this->model('task_allot');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		foreach($data as $val) {
			$val['task_id'] = $task_id;
			if(!$model->insert($val)) {
				$this->setError(0,'任务分配表保存失败,'.$model->getError());
				return false;
			}
		}
		return true;
	}

	/**
	 * 删除任务分配模式
	 * @param string $id 多个用逗号分隔
	 * @return boolean
	 */
	public function delAllot($id = '') {

		$model = $this->model('task_allot');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		if(empty($this->id)) {
			$this->setError(0,'没有设置对象ID');
			return false;
		}

		if(empty($id)) {
			//删除全部
			$r = $model->delete($this->model()->getRelationsCondition('task_allot').' = '.$this->id.' and task_id = '.$this->id);
		}else {
			//数据合法性
			if(!preg_match("/^[,\d]+$/",$id)){
				$this->setError(0,'数据格式有误');
				return false;
			}

			$r = $model->delete($model->primarykey()." in($id) and task_id = $this->id");
		}
		return $r === false?false:true;
	}

	/**
	 * 删除任务分类属性
	 * @param string $id 多个用逗号分隔
	 * @return boolean
	 */
	public function delCataLog($id = '') {

		$model = $this->model('task_catalog');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		if(empty($this->id)) {
			$this->setError(0,'没有设置对象ID');
			return false;
		}

		if(empty($id)) {
			//删除全部
			$r = $model->delete($this->model()->getRelationsCondition('task_catalog').' = '.$this->id.' and task_id = '.$this->id);
		}else {
			//数据合法性
			if(!preg_match("/^[,\d]+$/",$id)){
				$this->setError(0,'数据格式有误');
				return false;
			}

			$r = $model->delete($model->primarykey()." in($id) and task_id = $this->id");
		}
		return $r === false?false:true;
	}

	/**
	 * 检查指定用户ID是否为任务发布者
	 * @param int $user_id 当前用户ID
	 * @return boolean
	 */
	public function isAuthor($user_id) {
		return $user_id == $this->get('user_id')?true:false;
	}

	/**
	 * 检查当前任务是否允许操作
	 * @return boolean
	 */
	public function isAllowHandle() {
		return $this->get('open_state') || $this->get('isfrozen')?false:true;
	}

	/**
	 * 编辑任务属性,提供第一步操作,为托管赏金前使用
	 * 不支持属性:state,hosted
	 * @param 	array 	$data 数据集
	 * @param	array	$params	附加参数
	 * @param blooean
	 */
	public function edit($data = array(), $params=array()) {

		//部分属性禁止更改
		$is_hosted = isset($data['hosted']);
		unset($data['task_id']);
		if($data['hosted'] == 1) {
			$this->setError(0,'部分属性禁止更改，请使用相对应的方法2');
			return false;
		}

		$tag = $data['tag'];
		$friends = $data['friends'];
		unset($data['tag']);
		unset($data['friends']);
		//兼容处理标签和分类
		if($tag){
			//标签转分类
			$this->tag2catalog($tag);
		}else{
			//分类转标签
			// $tag = $this->catalog2tag($data);
		}
		if($params['isadmin']!=1 && isset($data['audit_state'])){
			unset($data['audit_state']);
		}
		if($params['isadmin']!=1 && isset($data['task_info.pub_type']) && $this->get('task_info.pub_type')>=8){
			unset($data['task_info.pub_type']);
		}
		//如果分类发生改变
		if(isset($data['catalog2id']) && $data['catalog2id'] != $this->get('catalog2id')) {

			$catalog_model = zbj_model_api::get('zbj_model_mk_catalog', $data['catalog2id']);
			$catalog_result = $catalog_model->get();
			$catalog_data = array(
				array(
					'catalog_id'=>$catalog_result['pid'],
					'catalog2id'=>$catalog_result['catalog_id'],
					'cname'=>$catalog_result['cname'],
				));

			//更新分类
			$this->editCataLog($catalog_data, false);

			//是否需要交接源文件
			$data['task_info.isupfile'] = (int)$catalog_result['isupfile'];

			//交易模式
			$data['type'] = (int)$catalog_result['task_type'];

			//如果交易模式不支持微博任务
			if($data['type'] != 2) {
				$data['is_weibo'] = 0;
			}

			//如果为微博模式，时间传入is_weibo字段
			if($data['type'] == 2 && empty($data['is_weibo'])) {
				$this->setError(0,'没有指定微博类型');
				return false;
			}

			//是否橱窗显示
			$data['task_info.ispic'] = (int)$catalog_result['ispic'];

			//如果非悬赏模式，不需要审核及橱窗显示
			if ($data['mode'] > 0) {
				$data['task_info.ispic'] = 0;
			}

			//诚意金规则
			$data['cyj_id'] = $catalog_result['cyj_id'];
		}
		//新版类目改变
		if(isset($data['category_id']) && $data['category_id'] != $this->get('category_id')) {
			if($this->get('hosted') == 1){
				$oMdlSort = new zbj_model_lg_usersort();
				$hostedtime = $this->get('hosted_time');
				$oMdlSort->update("task_id={$this->id}",array('hosted_time'=>$hostedtime,'category_id'=>$data['category_id']));
				$srvUser = new zbj_service_user($this->get('task_info.succeed_user_id'));
				$srvUser->addSearchQueue(1,'U');
			}
			$cataModel = zbj_model_api::get('zbj_model_mk_category', $data['category_id']);
		//	$this->set('task_info.isupfile', (int)$cataModel->getData('isupfile'));
			$data['task_info.isupfile'] = (int)$cataModel->getData('isupfile');
			$this->setWorkFirst($data['category_id']);
			unset($data['task_info.ispic']);
		}
		//对于购买了屏蔽搜索引擎的任务，托管前先标注后台不要通过审核
		if(isset($data['task_info.option']) && $this->get('task_info.pub_type')!=9){
			$option = unserialize($data['task_info.option']);
			if($option['was_nosearch']==1 && $this->get('hosted') != 1){
				$data['task_opis.nopass'] = 381;
				$data['manager_id2'] = '0';
				$data['manager_name2'] = '';
				$data['audit_state'] = 3;
				$this->addTaskActionLog('购买了屏蔽搜索引擎，但还未付款，禁止后台审核',1);
			}else{
				if($this->get('task_opis.nopass') != '0'){
					$this->addTaskActionLog('修改任务，取消屏蔽搜索引擎功能',1);
				}
				$data['task_opis.nopass'] = 0;
			}
		}
		//如果模式发生改变
		if(isset($data['mode']) && $data['mode'] != $this->get('mode')){
			if(!in_array($data['mode'], array(11,12,13))){
				if($data['task_info.option']){
					$option = @unserialize($data['task_info.option']);
				}else{
					$option = @unserialize($this->get('task_info.option'));
				}
				if(empty($option)){
					$this->setError(0,'获取需求扩展数据失败');
					return false;
				}
				unset($option['agree_step']);
				$data['task_info.option'] = serialize($option);
			}
		}

		$specialType = $this->get('task_opis.special_type');
		$taskModel = $data['mode']?$data['mode']:$this->get('mode');
		$taskCate2id = $data['category1id']?$data['category1id']:$this->get('category1id');

		//分类变了，重置专场标记
		if(isset($data['category1id']) || isset($data['mode'])){
			$tasksignModel = zbj_model_api::get('zbj_model_mk_tasksign');
			$tasksign = $tasksignModel->selectOne("task_id='{$this->id}'",'user_id');

			$recmdModel = zbj_model_api::get('zbj_model_mk_recommend');
		    $recmd = $recmdModel->selectOne("task_id='{$this->id}'",'id');
		}
		if(isset($data['category1id']) && $data['category1id']!=$this->get('category1id') && in_array($specialType,array(1,3))){
		    if(!empty($tasksign)){
		    	$this->setError(0,'需求已经有服务商参与，不可以更改类目');
				return false;
		    }
		    if(!empty($recmd)){
		    	$this->setError(0,'需求已推荐给服务商，不可以更改类目');
				return false;
		    }
		    if($specialType==1 && $data['category1id']!=12){
		    	$data['task_opis.special_type'] = $taskModel==13?3:0; // 转普通0佣金
		    }
		    if($specialType==3 && $data['category1id']==12){
		    	$data['task_opis.special_type'] = $taskModel==13?1:0; // 转网建
		    }
		}
		//有专场标记，但模式变了，异常
		if(isset($data['mode']) && $data['mode']!=$this->get('mode') && in_array($specialType,array(1,2,3))){
		    if(!empty($tasksign)){
		    	$this->setError(0,'需求已经有服务商参与，不可以更改模式');
				return false;
		    }
		    if(!empty($recmd)){
		    	$this->setError(0,'需求已推荐给服务商，不可以更改模式');
				return false;
		    }
			if($specialType ==2 && $taskModel==13){
				$this->setError(0,'logo专场，不可以更改为招标模式');
				return false;
			}
		    if($taskModel==13){
		    	$data['task_opis.special_type'] = 3;
		    }
		    if($taskModel==13 && $taskCate2id==12){
		    	$data['task_opis.special_type'] = 1;
		    }
		    if($taskModel != 13){
		    	$data['task_opis.special_type'] = 0;
		    }
		}
		// 从其他模式改招标
		if(isset($data['mode']) && $data['mode']==13 && $specialType==0){
		    if(!empty($tasksign) && $this->get('mode')!=13){
		    	$this->setError(0,'需求已经有服务商参与，不可以更改为招标模式');
				return false;
		    }
		    if(empty($tasksign)){
				$data['task_opis.special_type'] = $taskCate2id==12?1:3;
		    }
		}
		// 通知搜索引擎更新
		if((isset($data['task_info.is_mall']) && $data['task_info.is_mall']!=$this->get('task_info.is_mall')) ||
			(isset($data['amount']) && $data['amount']!=$this->get('amount')) ||
			(isset($data['mode']) && $data['mode'] != $this->get('mode')) ||
			(isset($data['category_id']) && $data['category_id'] != $this->get('category_id')) ||
			(isset($data['state']) && $data['state'] != $this->get('state')) ||
			(isset($data['title']) && $data['title'] != $this->get('title'))
			){
			$this->model()->upTaskSearch($this->id);
		}
		//数据都合法
		if($this->set($data) === false) {
			$this->setError(0,'设置属性失败，原因'.$this->getError());
			return false;
		}

		//保存标签
		if($tag){
			if($this->saveTag($this->id, $tag, 1) === false){
				$this->setError(0, $this->getError());
				return false;
			}
		}
		//邀请好友
		if($friends){
			if($this->inviteFriend($this->id, $friends) === false){
				throw new Exception($this->getError());
			}
		}

		//推广员
		if($data['mode'] == 13) {
			$this->set('uncode', 0);
			$this->set('uncode_extid', 0);
		} else {
			$user = new zbj_service_user($this->get('user_id'));
			$this->set('uncode', $user->getUserUnCode());
			$this->set('uncode_extid', $user->getUserUnCode(true));
		}

		//对于未支付的任务可以修改默认分配模式
		if($this->get('task_info.ispay') == 0) {

			if(isset($data['mode']) && !isset($data['paytype_id']) && $data['mode'] == 0) {
				//二八分成
				$this->set('paytype_id', 1);
			}else if(isset($data['mode']) && !isset($data['paytype_id'])) {
				//免佣金
				//$this->set('paytype_id', 3); @todo 注释免佣金
			}
		}
		if($data['task_cont.content']) $addLink = 1;
		if($this->save() !== true) {
			$this->setError(0,'保存失败，，原因'.$this->getError());
			return false;
		}
		
		//检查需求是否需要交易合同
		$agreestatus = $this->getAgreementStatus();
		if(!in_array($agreestatus, array(4,5))){
			$this->initTaskAgreement();					
		}
		
		if($addLink == 1){
			$link = new zbj_service_links();
			$link->findKeywords($this->id, 1);
		}


		/*
		 *$test=new zbj_service_allot_taskcheck();
		 *$a=$test->checkNeedPushPool(array('task_id'=>$this->id));
		 *var_dump($a);
		 *die();
		 */
		zbj_lib_Api::taskEdited($this->id);
		
		// 编辑日志
		$this->addTaskEditLog($data,array('mgrid'=>$params['mgrid'],'mgrname'=>$params['mgrname']));
		
		return true;
	}

	/**
	 * 编辑任务附件
	 * @param array $new_files 新的附件
	 * @param string $del_id 删除的附件,多个以逗号分开
	 * @param blooean
	 */
	public function editFiles($new_files, $del_id = '') {
		if(!empty($new_files) && is_array($new_files)) {
			if($this->addFiles($this->id, $new_files) !== true) {
				$this->setError(0,'添加附件失败 '.$this->getError());
				return false;
			}
		}

		if(!empty($del_id)) {
			if($this->delFiles($del_id) !== true) {
				$this->setError(0,'删除附件失败 '.$this->getError());
				return false;
			}
		}

		return true;
	}

	/**
	 * 编辑扩展属性
	 * 将删除旧的属性，增加新的属性
	 * @param array $data 新的扩展属性
	 * @param blooean
	 */
	public function editExtand($data = array()) {

		//清除以前的扩展
		$this->delExtand();

		//更细技能冗余数据
		$this->set('task_info.skill', (string)$this->getSkillToStr($data));
		$this->save();

		//新增扩展
		return $this->addExtand($this->id, $data);
	}

	/**
	 * 编辑任务分类属性
	 * 将删除旧的属性，增加新的属性
	 * @param array $data 新的扩展属性
	 * @param boolean $is_clear 是否清除原来的分类
	 * @param blooean
	 */
	public function editCataLog($data = array(), $is_clear = true) {

		//清除以前的扩展
		if($is_clear)$this->delCataLog();

		//冗余的分类数据
		$this->set('task_info.catelog_key', (string)$this->getCataLogToStr($data));
		$this->save();

		//新增扩展
		return $this->addCataLog($this->id, $data, $is_clear?false:true);
	}

	/**
	 * 赏金分配模式
	 * 将删除旧的属性，增加新的属性
	 * @param array $data 新的扩展属性
	 * @param int $allot 1单人中标，2多人中标，3计件中标
	 * @param int $is_weibo 是否为微博任务
	 * @param blooean
	 */
	public function editAllot($data = array(), $allot = 0, $is_weibo = 0) {

		$data_new = array();

		//检查中标模式是否正确
		if($allot == 1){
			//单人中标

		}elseif($allot == 2) {
			//多人中标
			$num=(string)lib_BaseUtils::array_sum_key($data, 'amount');
			if( 1 != $num) {
				$this->setError(0, '多人中标模式赏金分配比例不正确');
				return false;
			}

			//组织数据
			foreach($data as $row){
				$item = array(
					'allot_name'=>'多人中标',
					'num'=>$row['num'],
					'class'=>$row['class'],
					'amount'=>$row['amount']
				);
				$data_new[] = $item;
			}
		}elseif($allot == 3) {

			//兼容原来数据结构
			if(count($data) == 1) {
				$data_tmp = $data[0];
				unset($data);
				$data = $data_tmp;
			}

			if($is_weibo) {
				//微博任务
			}else if($this->get('amount') != ($data['num'] * $data['amount'])) {
				//计件中标
				$this->setError(0,'计件中标模式赏金分配总额错误');
				return false;
			}

			//组织数据
			if($is_weibo) {
				foreach($data as $row){
					$item = array(
						'allot_name' => '微博营销',
						'amount'     => $row['amount'],
						'class'      => $row['class'],
					);
					$data_new[] = $item;
				}
			}else {
				$item=array(
					'allot_name'=>'计件中标',
					'num'=>$data['num'],
					'amount'=>$data['amount']
				);
				$data_new[] = $item;
			}
		}else{
			$this->setError(0,'未匹配相关中标模式');
			return false;
		}

		//清除以前的扩展
		$this->delAllot();

		//新增扩展
		return $this->addAllot($this->id, $data_new);
	}

	/**
	 * 前台发布第二步，修改任务模式，金额，赏金分配模式，创建订单,修改订单
	 * 成功后返回订单ID,失败返回false
	 * @param array $data 数据集
	 * @param array $allot 任务分配模式
	 * @param order_id|false
	 */
	public function pubTaskTwo($data, $allot = array()) {

		//部分属性禁止更改
		//状态
		$is_state = isset($data['state']);

		//托管状态
		$is_hosted = isset($data['hosted']);

		//任务ID
		$is_task_id = isset($data['task_id']);

		$is_catalog2id = isset($data['catalog2id']);

		if($is_state || $is_hosted || $is_task_id || $is_catalog2id) {
			$this->setError(0,'部分属性禁止更改，请使用相对应的方法');
			return false;
		}

		if($this->get('catalog2id') == 134 and $data['day']>2){
			//$this->setError(-1,'为保证您的需求完成效果，注册推广类需求发布周期不超过2天');
			//return false;
		}

		//必要的参数
		if(!isset($data['mode'], $data['amount'], $data['endymd'], $data['endtime'], $data['allot'])) {
			//$this->setError(0,'缺少必要的参数');
			//return false;
		}

		//检查状态
		if($this->get('state')>1 || $this->get('hosted') == 1) {
			$this->setError(0,'当前任务状态不允许修改');
			return false;
		}

		//检查赏金分配方案
		if(($data['allot'] == 2 || $data['allot'] == 3) && empty($allot)) {
			$this->setError(0,'请提供赏金分配模式');
			return false;
		}

		//如果是计件任务或发贴模式，默认为保证选稿
		if($data['allot'] == 3 || $this->get('type') == 1) {
			$data['isgpay'] = 1;
		}

		//$data['state'] = 1;

		//更新起始价格
		if($this->get('amount') == 0) {
			$data['task_opis.first_amount'] = $data['amount'];
		}

		try {
			//开始事务
			$this->_beginTransaction('mk');
			$this->_beginTransaction('fn');
			$this->_beginTransaction('mb');

			//数据都合法
			if($this->edit($data) !== true) {
				$this->setError(0,'设置属性失败，原因'.$this->getError());
				return false;
			}

			//更新订单
			$order_id = $this->upTaskPubOrder();
			if($order_id === false) {
				throw new Exception('订单更新失败，原因'.$this->getError());
			}

			//赏金分配模式
			if($this->editAllot($allot, $this->get('allot'), $this->get('is_weibo')) !== true) {
				throw new Exception('保存分配模式失败，原因'.$this->getError());
			}

			//更新用户交易提醒冗余
			$user_buy = new zbj_service_user($this->get('user_id'));
			$user_buy->addSynNoRead('no_pay_cyj,no_pay_reward');

			$this->_commit('fn');
			$this->_commit('mb');
			$this->_commit('mk');

			return $order_id;
		} catch(Exception $e) {
			$this->setError(0, $e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('fn');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 转换比稿单人模式
	 *
	 * @var int
	 */
	const CONVERT_MODE_FREE = 1;

	/**
	 * 转换计件模式
	 *
	 * @var int
	 */
	const CONVERT_MODE_ALLOT = 2;

	/**
	 * 转换招标模式
	 *
	 * @var int
	 */
	const CONVERT_MODE_NEWBID = 3;

	/**
	 * 转换微博模式
	 *
	 * @var int
	 */
	const CONVERT_MODE_WEIBO = 4;

	/**
	 * 转换短信模式
	 *
	 * @var int
	 */
	const CONVERT_MODE_SMS = 5;

	/**
	 * 悬赏多人模式
	 *
	 * @var int
	 */
	const CONVERT_MODE_CONTEST = 6;

	/**
	 *
	 * @param int $convert_mode 目标模式 1 比稿 2 计件 3 招标 4 微博 5 短信 6 多人
	 * @param array $task_data 任务数据
	 * @param array $allot_data 分配数据
	 * @return boolean|int 成功返回订单ID
	 */
	public function convertMode(
		$convert_mode = 0, array $task_data = array(), $allot_data = array()) {

		if($this->getId() < 1) {
			$this->setError(0, '任务ID无效');
			return false;
		}

		// 任务
		$src_task = $this->get();
		$fix_task = array(
			'state' => $src_task['state'],
			'open_state' => $src_task['open_state']
		);

		if($src_task == NULL) {
			$this->setError(0, '任务不存在，模式无法转换');
			return false;
		}

// 		if($src_task['hosted'] == 1) {
// 			$this->setError(0, '任务已托管，模式无法转换');
// 			return false;
// 		}

		if(!in_array($src_task['mode'], array(10, 13))) {
			$this->setError(0, '转换只限定于比稿和招标');
			return false;
		}

		// 清理禁止修改参数
		if($task_data) {
			unset(
				$task_data['mode'], $task_data['amount'], $task_data['allot'],
				$task_data['hosted'], $task_data['user_id'],
				$task_data['endymd'], $task_data['endtime'],
				$task_data['category_id'], $task_data['category1id'],
				$task_data['category2id'], $task_data['state']);
		}

		$srv_task = NULL;
		// 检查模式转换
		switch($convert_mode) {
			case self::CONVERT_MODE_FREE:
				$allot_data = array();
				$task_data += array(
					'mode' => 10,
					'type' => 0,
					'is_weibo' => 0,
					'paytype_id' => 1,
					'allot' => 1
				);
				// 悬赏模式，仅用户托管后可见
				//if($src_task['mode'] == 13) {
				//	$fix_task['state'] = 1;
				//}
				if($src_task['mode'] == 13 and $src_task['hosted']==0) {
					$fix_task['state'] = 1;
				}
				$srv_task = new zbj_service_task_free($this->getId());
				break;
			case self::CONVERT_MODE_NEWBID:
				$allot_data = array();
				$task_data += array(
					'mode' => 13,
					'type' => 0,
					'is_weibo' => 0,
					'paytype_id' => 6,
					'allot' => 1,
				);
				// 招标模式，审核后可见
				//if($src_task['mode'] == 10) {
				//	$fix_task['state'] = $src_task['audit_state'] == 1
				//		? 2 : 1;
				//}
				if($src_task['mode'] == 10 and $src_task['hosted']==0) {
					$fix_task['state'] = 2;
				}
				$srv_task = new zbj_service_task_newbid($this->getId());
				break;
			default:
				$this->setError(0, '不支持的转换目标模式');
				return false;
		}

		// 订单
		$srv_order = NULL;
		$order_data = $data_info = array();
		$last_order = $this->getPubOrder();
		$amount = 0;

		if($last_order) {

			$src_order_data = unserialize($last_order['option']);
			$src_order_data && $src_order_data = $src_order_data['orderdata'];
			$order_data = array(
				'title' => $last_order['title'],
				'product_pkid'=> $last_order['product_pkid'],
				'user_id' => $last_order['user_id'],
				'nickname' => $last_order['nickname'],
				'mtype' => $last_order['mtype'],
				'state' => 0);

			if(is_array($src_order_data)) {
				foreach($src_order_data as $order) {
					if($order['stype'] == 30) {
						$amount = $order['price'];
					}
				}
			}
		}

		// 转换
		try {
			$srv_task->_beginTransaction('mk');
			$srv_task->_beginTransaction('fn');
			$srv_task->_beginTransaction('mb');

			$srv_task->setTransaction(false);

			// 基本属性
			if($srv_task->edit($task_data) !== true) {
				throw new Exception($srv_task->getError());
			}

			// 赏金分配模式
			if($srv_task->editAllot($allot_data, $task_data['allot'],
					$task_data['is_weibo']) !== true) {
				throw new Exception('分配模式转换失败，原因：'.$srv_task->getError());
			}

			// 订单转换
			if($last_order) {
// 				$srv_order->setTransaction(false);
// 				var_dump($srv_order);
// 				exit;
// 				if($srv_order->editorder(array('ptype'=>$srv_task->getTaskToOrderMode()))==true){
// 					throw new Exception("修改订单失败原因：".$srv_order->getError());
// 				}
// 				$sale = new zbj_service_deal();
// 				$sale->setType($last_order['ptype']);
// 				$order=$sale->order($last_order['order_id']);
				$m_order=zbj_model_api::get('zbj_model_fn_order',$last_order['order_id']);
				$option=unserialize($m_order->getData('option'));
				if($option['orderdata']){
					foreach($option['orderdata'] as $key=>$val){
						if($m_order->getData('ptype')==$val['ptype']){
							$option['orderdata'][$key]['ptype']=$srv_task->getTaskToOrderMode();
							$m_order->set('option',serialize($option));
						}
					}
				}
				$m_order->set('ptype',$srv_task->getTaskToOrderMode());
				if($m_order->save()!==true){
					throw new Exception("修改订单失败");
				}
				$m_orderdata=new zbj_model_fn_orderdata();
				$datarow=$m_orderdata->selectOne(array('stype'=>30,'order_id'=>$last_order['order_id']));
				$m_orderdata->setPkid($datarow['data_id']);
				$m_orderdata->set('ptype',$srv_task->getTaskToOrderMode());
				if($m_orderdata->save()!==true){
					throw new Exception("修改订单详情失败");
				}
// 				if($order->editorder(array('ptype'=>$srv_task->getTaskToOrderMode()))==true){
// 					throw new Exception("修改订单失败原因：".$srv_order->getError());
// 				}
// 				if($srv_order->cancelOrder(0) !== true) {
// 					throw new Exception(
// 						'订单关闭失败，原因：'.$srv_order->getError());
// 				}

// 				$order_id = $srv_task->createMixOrder(
// 					$order_data, $data_info, $amount);
// 				if($order_id == false) {
// 					throw new Exception(
// 						'订单建立失败，原因：'.$srv_task->getError());
// 				}
			}

			// 修正任务状态
			$srv_task->set($fix_task);
			$srv_task->save();

			// 交易提醒
			$srv_user = new zbj_service_user($src_task['user_id']);
			$srv_user->addSynNoRead('no_pay_cyj,no_pay_reward');

			$srv_task->setTransaction(true);

			$srv_task->_commit('fn');
			$srv_task->_commit('mb');
			$srv_task->_commit('mk');

			return true;
		} catch(Exception $e) {
			$this->setError(0, $e->getMessage());
			try {
				$srv_task->setTransaction(true);
				$srv_task->_rollBack('mk');
				$srv_task->_rollBack('fn');
				$srv_task->_rollBack('mb');
			} catch(Exception $ex) {}
			return false;
		}
	}

	/**
	 * 更新任务发布订单
	 * @param array $data $data['price]表示订单金额
	 * @return boolean
	 */
	public function upTaskPubOrder($data = array()) {

		//检查是否存在订单
		$orders = $this->getPubOrder();
		if($orders === false) {
			//$this->setError(0,'获取订单信息失败');
			//return false;
		}
		$order_id = (int)$orders['order_id'];

		//实例化订单
		//实例化一个交易
		$sale = new zbj_service_deal();

		//设置交易的产品类型,悬赏=1，招标=2,6速配
		$ptype = $this->getTaskToOrderMode();
		$sale->setType($ptype);

		//订单的金额
		$amount = $data['price'] ? $data['price'] : $this->getTaskAmount();

		if($order_id === 0) {
			//需要创建新订单

			$order=$sale->Order();

			//关闭事务
			$order->setTransaction(false);

			$stype = 30;
			$mtype = 2;
			$order_info = array(
				'ptype'=>$ptype,
				'stype'=>$stype,
				'mtype'=>$mtype,
				'title'=>$this->get('title'),
				'product_pkid'=>$this->id,
				'user_id'=>$this->get('user_id'),
				'nickname'=>$this->get('nickname'),
				'isexchange_file'=>(int)$this->get('task_info.isupfile'),
				'channel_id'=>(int)$this->get('channel_id'),
				'option'=>$data['option']
			);

			//创建订单信息
			$order_data=array(
				array(
					'title'=>$this->get('title'),
					'ptype'=>$ptype,
					'stype'=>$stype,
					'mtype'=>1,     //设置交易类型 交易类型：0及时到账,1担保交易,2综合类型
					'product_pkid'=>$this->id,
					'user_id'=>$this->get('user_id'),
					'nickname'=>$this->get('nickname'),
					'price'=>$amount,
					'at_price'=>$amount,
					'num'=>1,
				)
			);
			$order_id = $order->createOrder($order_info, $order_data);

			if(0 >= $order_id) {
				$this->setError(0,'创建订单失败，原因'.$order->getError());
				return false;
			}

		}else {

			//如果订单已经交易成功，不能修改
			if($orders['state'] == 1) {
				$this->setError(0, '订单已经完成交易，不能被修改');
				return false;
			}

			//已经支付的订单不允许修改
			if($orders['ispay'] == 1) {

				//$this->setError(0, '订单已经支付，请取消支付后修改');
				//return false;
			}else {

				//修改订单
				$order=$sale->Order($order_id);
				//关闭事务
				$order->setTransaction(false);

				$order_data = $order->getTaskOrderData();
				if(empty($order_data)) {
					$this->setError(0,'获取订单信息失败2，原因'.$order->getError());
					return false;
				}
				$order_data['title'] = $this->get('title');
				$order_data['ptype'] = $ptype;
				$order_data['price'] = $amount;
				$order_data['at_price'] = $amount;
				if($order->upOrderProdcut($order_data['data_id'], $order_data) !== true) {
					$this->setError(0,'更新订单失败，原因'.$order->getError());
					return false;
				}
				$order_info = array(
					'channel_id'=>$this->get('channel_id'),
					'ptype'=>$ptype
				);
				if($data['option']){
					$order_option = $order->getOrderOption();
					$order_option['select_info'] = $data['option']['select_info'];
					$order_info['option'] = $order_option;
				}
				if($order->upOrder($order_info) !== true) {
					$this->setError(0,'更新订单频道失败');
					return false;
				}

				//更新频道ID
				//$model_order = zbj_model_api::get('zbj_model_fn_order', $order_id);
				//$model_order->set('channel_id', $this->get('channel_id'));
				//$model_order->set('ptype', $ptype);
				//if($model_order->save() === false) {
				//	$this->setError(0,'更新订单频道失败');
				//	return false;
				//}
			}
		}
		return $order_id;
	}


	/**
	 * 获取发布任务的订单信息
	 * @return array|false
	 */
	public function getPubOrder(){
		$condition=array('product_pkid'=>$this->id,'stype'=>30);
		$ptype = $this->getTaskToOrderMode();
		$condition['ptype'] = $ptype;

		$model = zbj_model_api::get('zbj_model_fn_order');
		$rs=$model->selectOne($condition,'*',null,'order by order_id desc');
		if($rs === false) {
			return false;
		}else if(empty($rs)) {
			return array();
		}else {
			return $rs;
		}
	}

	/**
	 * 获取发布任务的订单流水号
	 * @return int|false
	 */
	public function getPubOrderId(){
		$rs = $this->getPubOrder();
		if($rs === false) {
			return false;
		}else if(empty($rs)) {
			return 0;
		}else {
			return $rs['order_id'];
		}
	}

	/**
	 * 获取任务单个中标的订单信息
	 *
	 * @param int $works_id 指定稿件ID
	 * @param int $state 指定订单状态
	 * @return array|false
	 */
	public function getOneWinOrder($works_id = NULL, $order_state = NULL) {

		$ptype = $this->getTaskToOrderMode();

		if($works_id === NULL) {
			$model = zbj_model_api::get('zbj_model_fn_order');

			$condition = array(
				'product_pkid'=>$this->id,
				'stype'=>16,
				'ptype'=>$ptype
			);

			if($order_state === NULL)
				$condition[] = 'state in (0,1)';
			else
				$condition[] = 'state='. (int)$order_state;

			$result = $model->selectOne($condition, '*', null, 'order by order_id desc');

		}else {
			$condition = array(
				'fn_order_data.stype'		=>16,
				'fn_order_data.ptype'		=>$ptype,
				'fn_order_data.product_pkid'	=>$works_id,
				'fn_order.state'		=>(int)$order_state,
				'fn_order.product_pkid'		=>$this->id,
			);
			$item = array('fn_order.*');
			$leftjoin = array(
				'fn_order'=>'fn_order.order_id = fn_order_data.order_id',
			);
			$model = zbj_model_api::get('zbj_model_fn_orderdata');
			$result = $model->selectOne($condition, $item, '', '', $leftjoin);
		}

		return empty($result) ? false : $result;
	}


	/**
	 * 获取速配任务发布金额
	 * @return int
	 */
	public function getMatchTaskAmount() {
		return $this->getSignMatchAmount();
	}


	/**
	 * 获取当前任务需要缴纳或违约的保证金
	 * 如果成功返回金额，如果失败返回false
	 *
	 * @paran int $role 0雇主，1服务商
	 * @paran int $type 0发布/参与的诚意金，1违约的诚意金
	 * @return float|false
	 */
	public function getSignMatchAmount($role = 0, $type = 0) {

		$cyj = $this->get('task_cyj.*');

		if(empty($cyj)) {
			return false;
		}

		if($type == 1) {

			//违约的诚意金
			if($role ==1) {
				$amount = $cyj['sell_cyj_breach'];
			}else {
				$amount = $cyj['buy_cyj_breach'];
			}
		}else {

			//参与的诚意金
			if($role ==1) {
				$amount = $cyj['sell_cyj'];
			}else {
				$amount = $cyj['buy_cyj'];
			}

		}
		return $amount;
	}


	/**
	 * 获取当前任务初始状态需要支付的金额
	 * @return int
	 */
	public function getTaskAmount() {
		switch($this->get('mode')) {
		case '1':	//招标
		case '2':
		case '3':
		case '4':
		case '5':
			$amount = 0;
			break;
		case '6':	//速配任务
			$amount = $this->getMatchTaskAmount();
			break;
		default:
			$amount = $this->get('amount');	//悬赏
		}
		return $amount;
	}


	/**
	 * 获取任务类型对应的订单产品类型
	 * @return int
	 */
	public function getTaskToOrderMode(){
		if($this->get('mode')==0){
			//悬赏任务
			$type=1;
		}elseif($this->get('mode')==1){
			//招标任务
			$type=2;
		}elseif($this->get('mode')==2){
			//雇佣
			$type=3;
		}elseif($this->get('mode')==3){
			//服务买卖
			$type=4;
		}elseif($this->get('mode')==4){
			$type=11;
		}elseif($this->get('mode') == 5){
			//作品买卖
			$type = 5;
		}elseif($this->get('mode') == 6){
			//新速配
			$type=17;
		}elseif($this->get('mode') == 7){
			//新雇佣
			$type=18;
		}elseif($this->get('mode') == 8){
			//新服务买卖
			$type=19;
		}elseif($this->get('mode') == 9){
			//新作品
			$type=20;
		}elseif($this->get('mode') == 10){
			//新免费需求
			$type=23;
		}elseif($this->get('mode') == 11){
			//T5服务交易
			$type=24;
		}elseif($this->get('mode') == 12){
			//T5 雇佣交易
			$type=25;
		}elseif($this->get('mode') == 13){
			//T6招标交易
			$type=28;
		}else{
			$type=0;
		}
		return $type;
	}

	/**
	 *获取任务的发票总金额
	 */
	public function getBillAmount() {
		if ($this->get('state') != 4) return 0;
		return round(floatval($this->getTaskPayWinFee()) + floatval($this->getTaskServFee()) + floatval($this->getTaskWasFee()), 2);
	}
	/**
	 * 申请纸制发票
	 * 返回：数组，ispay=1已经支付,ispay=0未支付,pay_url=收银台地址
	 *
	 * @param array $data 开票的信息
	 * @param array $params 扩展参数,aotupay=1自动余额支付
	 * @return array('ispay'= N,'pay_url'=>N, 'bill_id'=>N);
	 */
	public function regBill($data = array(), $params = array()) {
		//强制主库
		$this->setDbEntry();

		//检查数据
		if(empty($data)) {
			$this->setError(0,'请提供开票信息');
			return false;
		}

		if(empty($data['title'])) {
			$this->setError(0, '未指定发票抬头');
			return false;
		}

		//检查是否已经申请开票
		if($this->isInvoice()) {
			$this->setError(0, '已经申请开票');
			return false;
		}

		//检查是否有开票资格
		if(!$this->isAllowBill()) {
			$this->setError(0, $this->getError('code') == -5 ? $this->getError() : '当前交易状态暂不支持开票');
			return false;
		}

		//发票类型
		$type = $this->getBillType();

		$bill_data = array();
		$bill_data['title'] = $data['title'];
		$bill_data['service_name'] = $this->get('title');
		$bill_data['baid'] = $data['baid'];
		$bill_data['recipients'] = $data['recipients'];
		$bill_data['address'] = $data['address'];
		$bill_data['zip'] = $data['zip'];
		$bill_data['tel'] = $data['tel'];
		$bill_data['options'] = $data['options'];
		$bill_data['post_type'] = (int)$data['post_type'];
		$bill_data['remark'] = (string)$data['remark'];
		$bill_data['gt_id'] = (int)$data['gt_id'];
		$bill_data['taxinfo'] = $data['taxinfo'];
		//增值税电子发票
		$bill_data['is_elec_bill'] = (int)$data['is_elec_bill'];
		
		//创建收货地址是否默认
		$bill_data['setdefault'] = (int)$data['setdefault'];

		//默认为不进入开票流程
		$bill_data['bill_state'] = -1;

		//交易结束计算税金
		if($this->get('state') == 4) {

			//发票直接进入流程
			$bill_data['bill_state'] = 0;

			//代开金额
			$amount_user = (float)$this->getTaskPayWinFee();

			//平台费用
			$amount_plat = (float)$this->getTaskServFee();

			//增值服务金额
			$amount_added = (float)$this->getTaskWasFee();

			//折扣金额（优惠券）
			$discount = (float)$this->getDiscountFee();
			if($discount ===  false){
				$this->setError(0, '计算折扣金额失败');
				return false;
			}
			
			//税金
			$tax = $amount_user * $this->getTaxPoint($amount_user);

			//开票金额
			$amount = $amount_user + $amount_plat + $amount_added;


			if(empty($amount)) {
				$this->setError(0, '获取开票金额失败');
				return false;
			}

			if($amount_user) {
				$wk_user = $this->getTaskUserCardInfo($amount_user);

				if(empty($wk_user)) {
					$this->setError(0, '获取服务商信息失败');
					return false;
				}

				//威客用户ID
				$wk_userid = $wk_user['user_id'];

				//威客昵称
				$wk_nickname = $wk_user['nickname'];

				//威客真实姓名
				$wk_name = $wk_user['truename'];

				//威客身份证
				$wk_cardid = $wk_user['cardid'];

				$bill_data['wk_userid'] = $wk_userid;
				$bill_data['wk_nickname'] = $wk_nickname;
				$bill_data['wk_name'] = $wk_name;
				$bill_data['wk_cardid'] = $wk_cardid;
			}

			$bill_data['amount'] = $amount;
			$bill_data['amount_user'] = $amount_user;
			$bill_data['amount_plat'] = $amount_plat;
			$bill_data['amount_added'] = $amount_added;
			$bill_data['amount_discount'] = $discount;
			$bill_data['tax'] = $tax;

			//交易结束时间
			$task_endtime = $this->get('task_info.close_time');
			$bill_data['task_endtime'] = (int)$task_endtime;

		}

		//检查是否已经有开票数据
		//如果有开票数据，检查状态，如果未审核可以修改
		if($billing_data = $this->getBillInfo()) {
			//更新发票信息

			if(!in_array($billing_data['bill_state'], array(-1,0,1)) || $billing_data['is_pay'] == 1 || $billing_data['is_audited'] == 1 || $billing_data['fn_state'] == 1) {
				$this->setError(0,'当前状态不允许修改');
				return false;
			}
			$bill_data['is_net'] 	= 0;
			$bill_data['setdefault'] = 0;

			$bill =  new zbj_service_bill($billing_data['bill_id']);
			$id = $bill->getId();
			if($bill->edit($bill_data) !== true) {
				$this->setError(0,'更新发票信息失败 '. $bill->getError());
				return false;
			}

		}else {
			//新增发票
			$bill_data['user_id'] = $this->get('user_id');
			$bill_data['nickname'] = $this->get('nickname');
			$bill_data['service_id'] = $this->id;
			$bill_data['sign'] = sprintf('%010d', $this->id);

			$bill =  new zbj_service_bill();
			if(($id = $bill->create($type, $bill_data)) === false) {
				$this->setError(0,'新增发票信息失败 '. $bill->getError());
				return false;
			}

			//更新对象
			$bill->setId($id);
		}

		if($amount_user){
			//代开金额应该减去服务商自开金额[临时使用，服务化以后弃用，改由服务端计算此部分]
			$seller_amount = zbj_model_api::get('zbj_model_mb_bill')->query("SELECT sum(amount) as count FROM `mb_bill_seller_detail` WHERE bill_id='{$id}' and status != 2 and invoice_type='0'");
			if($seller_amount && $seller_amount[0]['count']){
				$amount_user = round($amount_user - $seller_amount[0]['count'],2);
				$tax = $amount_user * $this->getTaxPoint($amount_user);
				$bill =  new zbj_service_bill($id);

				$bill_data_up = array();
				$bill_data_up['amount_user'] = $amount_user;
				$bill_data_up['tax'] = $tax;
				if($bill->edit($bill_data_up) == false){
					$this->setError(0,'更新发票信息失败2 '. $bill->getError());
					return false;
				}
			}
		}

		$r = array();

		if($bill->isPay()) {
			$r['ispay'] = 1;
			$r['bill_id'] = $id;
		}else {
			$pay_data = $bill->createPayUrl($params);

			if($pay_data === false) {
				$this->setError(0,'创建支付地址出错 '. $bill->getError());
				return false;
			}

			if($pay_data === true) {
				//支付成功
				$r['ispay'] = 1;
				$r['bill_id'] = $id;
			}else if(is_array($pay_data)) {
				$r['ispay'] = 0;
				$r['bill_id'] = $id;
				$r['pay_url'] = $pay_data['url'];
				$r['pay_id'] = $pay_data['did'];
			}else {
				$this->setError(0,'支付信息失败 '. $bill->getError());
				return false;
			}
		}

		return $r;
	}


	/**
	 * 申请电子发票
	 * 返回：数组，ispay=1已经支付,ispay=0未支付,pay_url=收银台地址
	 *
	 * @param 	array 	$data 开票的信息
	 * @return array('ispay'= N,'pay_url'=>N, 'bill_id'=>N);
	 */
	public function regNetBill($data) {
		//强制主库
		$this->setDbEntry();

		//检查数据
		if(empty($data)) {
			$this->setError(0,'请提供开票信息');
			return false;
		}

		if(empty($data['title'])) {
			$this->setError(0, '未指定发票抬头');
			return false;
		}

		//检查是否已经申请开票
		if($this->isInvoice()) {
			$this->setError(0, '已经申请开票');
			return false;
		}

		//检查是否有开票资格
		if(!$this->isAllowBill()) {
			$this->setError(0, $this->getError('code') == -5 ? $this->getError() : '当前交易状态暂不支持开票');
			return false;
		}

		// 非雇佣交易不允许开电子发票
		if(!in_array($this->get('mode'),array(11,12))){
			$this->setError(0, '只支持雇佣交易开据电子发票');
			return false;
		}

		$bill_data = array();
		$bill_data['title'] = $data['title'];
		$bill_data['service_name'] = $this->get('title');
		$bill_data['options'] = $data['options'];
		$bill_data['post_type'] = 0;
		$bill_data['remark'] = (string)$data['remark'];
		$bill_data['taxinfo'] = $data['taxinfo'];

		//默认为不进入开票流程
		$bill_data['bill_state'] = -1;

		//交易结束计算税金
		if($this->get('state') == 4) {
			//发票直接进入流程
			$bill_data['bill_state'] = 0;

			//交易结束时间
			$task_endtime = $this->get('task_info.close_time');
			$bill_data['task_endtime'] = (int)$task_endtime;

			$payFee = $this->getTaskPayFee();
			if(empty($payFee) || !is_array($payFee)) {
				$this->setError(0, '获取开票金额失败');
				return false;
			}
		}else{
			// 默认税金
			$payFee = array(
				'zbjAmount'	=> 0,
				'zbjTax'	=> 0,
				'vkAmount'	=> 0,
				'vkTax'		=> 0,
				'addAmount'	=> 0,
				'discount'	=> 0,
				'zbjPlate'	=> 0,
				'zbjPlateTax'	=> 0,
			);
		}

		$bill_data['amount'] = round($payFee['vkAmount'] + $payFee['zbjAmount'], 2);
		$bill_data['amount_user'] = 0 ; //没有代开电票 $payFee['vkAmount'];
		$bill_data['amount_plat'] = $payFee['zbjAmount'];
		$bill_data['amount_added'] = $payFee['addAmount'];
		$bill_data['amount_discount'] = $payFee['discount'];
		$bill_data['tax'] = round($payFee['vkTax'] , 2); //vk税金

		$worksModel = zbj_model_api::get('zbj_model_mk_works');
		$vkuser = $worksModel->selectOne(array('task_id'=>$this->id,'issuccess'=>1),'user_id');
		if(empty($vkuser['user_id']) || !is_numeric($vkuser['user_id'])) {
			$this->setError(0, '获取服务商信息失败');
			return false;
		}
		$userModel = new zbj_service_user($vkuser['user_id']);
		$bill_data['wk_userid'] = $vkuser['user_id'];
		$bill_data['wk_nickname'] = $userModel->get('nickname');

		//检查是否已经有开票数据
		if($oldbill = $this->getBillInfo()) {//如果有开票数据，检查状态，如果未审核可以修改
			//更新发票信息
			if(!in_array($oldbill['bill_state'], array(-1,1,2)) || ($oldbill['is_pay']==1 && $oldbill['freight']>0) || $oldbill['fn_state'] == 1) {
				$this->setError(0,'当前状态不允许修改');
				return false;
			}
			$bill_data['is_net'] = 1;
			$bill =  new zbj_service_bill($oldbill['bill_id']);
			$id = $bill->getId();

			$time = time();
			$billTaxModel = new zbj_model_mb_billtax();

			// 取纳税人信息
			$zbjid = zbj_lib_Constant::YUANJIAN_ZBJ_USERID;  // 这里是我们平台的帐号
			$taxPayerModel = new zbj_model_mb_billtaxpayer();

			$zbjTax = $taxPayerModel->selectOne("user_id='{$zbjid}'",'taxpayer_id,state,destroyed');
			$zbjTaxPayID = $zbjTax['taxpayer_id'];
			if(empty($zbjTaxPayID)){
				$this->setError(0, '获取猪八戒纳税人id号失败');
				return false;
			}else if(intval($zbjTax['state']) !== 0){
				$this->setError(0, '猪八戒的开票状态异常');
				return false;
			}else if(intval($zbjTax['destroyed']) !== 0){
				$this->setError(0, '猪八戒的开票功能已被停止');
				return false;
			}
			// 获取服务商纳税人、马甲
			$wkTaxPayer = $bill->_getTaxPayerVest($vkuser['user_id'],$payFee['vkAmount']);
			$wkTaxUID = $wkTaxPayer['user_id'];
			$wkTaxPayID = $wkTaxPayer['taxpayer_id'];
			if(empty($wkTaxUID) || empty($wkTaxPayID)){
				$this->setError(0, $wkTaxPayer['msg']);
				return false;
			}

			unset($bill_data['is_pay']);

			try{
				$this->_beginTransaction('mb');

				if($bill->set($bill_data) === false) {
					throw new Exception('设置发票属性失败，原因'.$bill->getError());
				}

				if($bill->save() !== true) {
					throw new Exception('发票保存失败，原因'.$bill->getError());
				}

				if($oldbill['bill_state']==1 && $oldbill['is_net']==0){ // 之前是纸制发票，并取消了
					// 创建电子发票子订单
					
					$zbj_bill_amount = $payFee['zbjPlate'];
					$zbj_bill_amount_tax = $payFee['zbjPlateTax'];
					$discount_remain = $payFee['discount'];
					if($discount_remain > 0){
						if($discount_remain > $zbj_bill_amount){
							$discount_remain = $discount_remain - $zbj_bill_amount;
							$zbj_bill_amount = 0;
							$zbj_bill_amount_tax = 0;
						}else{
							$zbj_bill_amount = $zbj_bill_amount - $discount_remain;
							//重新计算税
							$zbj_bill_amount_tax = $zbj_bill_amount * $this->getTaxPoint();
							$discount_remain = 0;
						}
					}
					// 没有金额，可以不用开
					if($zbj_bill_amount > 0){
						$data1 = array(
							'bill_id'	=> $id,
							'buyer_id'	=> $oldbill['user_id'],
							'seller_id'	=> $zbjid,
							'taxpayer_id'	=> $zbjTaxPayID,
							'in_amount'		=> round($zbj_bill_amount,2),
							'tax_amount'	=> round($zbj_bill_amount_tax,2),
							'key1'			=> zbj_lib_BaseUtils::getPayNoid(),
							'key2'			=> zbj_lib_BaseUtils::getPayNoid(),
							'create_ymd'	=> date('Y-m-d',$time),
							'create_time'	=> $time,
							'pay_state'		=> 0,
							'state'			=> 0
						); // 猪帐户
	
						if($billTaxModel->insert($data1) == false){
							throw new Exception('创建发票失败[1]'. $billTaxModel->getError());
						}
					}
					
					$fl_bill_amount = $payFee['vkAmount'];
					$fl_bill_amount_tax = $payFee['vkTax'];
					if($discount_remain > 0){
						if($discount_remain > $fl_bill_amount){
							$discount_remain = $discount_remain - $fl_bill_amount;
							$fl_bill_amount = 0;
							$fl_bill_amount_tax = 0;
						}else{
							$fl_bill_amount = $fl_bill_amount - $discount_remain;
							//重新计算税
							$fl_bill_amount_tax = $fl_bill_amount * $this->getTaxPoint();
							$discount_remain = 0;
						}
					}
					
					if($fl_bill_amount > 0){
						$data2 = array(
							'bill_id'	=> $id,
							'buyer_id'	=> $oldbill['user_id'],
							'seller_id'	=> $wkTaxUID,
							'taxpayer_id'	=> $wkTaxPayID,
							'in_amount'		=> round($fl_bill_amount,2),
							'tax_amount'	=> round($fl_bill_amount_tax,2),
							'key1'			=> zbj_lib_BaseUtils::getPayNoid(),
							'key2'			=> zbj_lib_BaseUtils::getPayNoid(),
							'create_ymd'	=> date('Y-m-d',$time),
							'create_time'	=> $time,
							'pay_state'		=> 0,
							'state'			=> 0
						); // 服务商
						if($billTaxModel->insert($data2) == false){
							throw new Exception('创建发票失败[2]'. $billTaxModel->getError());
						}
					}
					
					//因折扣金额引起的，服务商开给猪网的暂时不开
					
				}
				//更新交易状态,及税金记录
				$task = new zbj_service_task(intval($oldbill['service_id']));
				$task = $task->init();
				if($task->regBillOk() !== true) {
					throw new Exception('更新交易的发票状态失败');
				}

				$this->_commit('mb');
			}catch(Exception $e){
				$this->_rollBack('mb');
				$this->setError(0, $e->getMessage());
				return false;
			}

			if($bill_data['bill_state'] === 0) { // 进入正常的开票流程
				//如果任务已结束，则创建电子发票
				if($bill->createNetBilling($id) === false) {
					$this->setError(0,'生成电子发票失败！请联系客服人员！');
					return false;
				}
			}
		}else {
			//新增发票
			$bill_data['user_id'] = $this->get('user_id');
			$bill_data['nickname'] = $this->get('nickname');
			$bill_data['service_id'] = $this->id;
			$bill_data['sign'] = sprintf('%010d', $this->id);

			//发票类型
			$type = $this->getBillType();

			$bill =  new zbj_service_bill();
			if(($id = $bill->createNetBill($type, $bill_data,$payFee)) === false) {
				$this->setError(0,'新增发票信息失败 '. $bill->getError());
				return false;
			}

			//更新对象
			$bill->setId($id);
		}

		$r = array();

		$r['ispay'] = 1;
		$r['bill_id'] = $id;

		return $r;
	}

	/**
	 * 保储用户填写的电子发票信息
	 * @param	array	$taxinfo
	 * @return bool
	 * */
	public function saveUserTaxInfo($taxinfo){
		// 处理申请开票时填写的用户基本信息 $taxinfo
		if(!is_array($taxinfo) || empty($taxinfo)){
			$this->setError(0,'获取提交的开票信息失败');
			return false;
		}
		$billTaxInfoModel = new zbj_model_mb_billtaxinfo();
		$infodata = $billTaxInfoModel->selectOne("user_id='{$taxinfo['userid']}' and taxpayer_type='{$taxinfo['utype']}'",'*');
		if(is_numeric($infodata['ti_id'])){ // 更新
			$tmpdata = array('data'=>json_encode($taxinfo),'usedtime'=>time());
			if(($rs = $billTaxInfoModel->update("ti_id='{$infodata['ti_id']}'",$tmpdata)) == false){
				$this->setError(0,'更新发票关联信息失败'. $billTaxInfoModel->getError());
				return false;
			}
		}else{ // 插入
			$tmpdata = array(
				'user_id'	=> $taxinfo['userid'],
				'taxpayer_type'	=> $taxinfo['utype'],
				'data'	=> json_encode($taxinfo),
				'usedtime'	=> time()
			);
			if(($rs = $billTaxInfoModel->insert($tmpdata)) == false){
				$this->setError(0,'存储发票关联信息失败'. $billTaxInfoModel->getError());
				return false;
			}
		}
		return true;
	}

	/**
	 * 更新发票代开信息
	 *
	 * @return boolean
	 */
	public function upBill() {

		//强制主库
		$this->setDbEntry();

		//检查是否已经申请开票
		if(!$this->isInvoice()) {
			$this->setError(0, '未申请开票');
			return false;
		}

		//如果有开票数据，检查状态，如果未审核可以修改
		$billing_data = $this->getBillInfo();

		if(empty($billing_data)) {
			$this->setError(0, '获取发票信息失败');
			return false;
		}

		$bill_id = $billing_data['bill_id'];

		//交易结束计算税金
		if($this->get('state') != 4) {
			$this->setError(0, '交易状态有误');
			return false;
		}

		if($bill_data['bill_state'] != -1) {
			$this->setError(0, '发票状态有误');
			//return false;
		}

		$bill_data = array();

		//发票直接进入流程
		$bill_data['bill_state'] = 0;

		//代开金额
		$amount_user = (float)$this->getTaskPayWinFee();

		//平台费用
		$amount_plat = (float)$this->getTaskServFee();

		//增值服务金额
		$amount_added = (float)$this->getTaskWasFee();

		//折扣金额（优惠券）
		$discount = (float)$this->getDiscountFee();
		if($discount ===  false){
			$this->setError(0, '计算折扣金额失败');
			return false;
		}
		
		//开票金额
		$amount = $amount_user + $amount_plat + $amount_added;

		if(empty($amount)) {
			$this->setError(0, '获取开票金额失败');
			return false;
		}

		//代开金额应该减去服务商自开金额[临时使用，服务化以后弃用，改由服务端计算此部分]
		$seller_amount = zbj_model_api::get('zbj_model_mb_bill')->query("SELECT sum(amount) as count FROM `mb_bill_seller_detail` WHERE bill_id='{$bill_id}' and status != 2".($billing_data['is_net']?" and invoice_type='1'":" and invoice_type='0'"));
		if($seller_amount && $seller_amount[0]['count']){
			$amount_user = round($amount_user - $seller_amount[0]['count'],2);
		}

		//税金
		$tax = $amount_user * $this->getTaxPoint($amount_user);


		if($amount_user) {

			$wk_user = $this->getTaskUserCardInfo($amount_user);

			if(empty($wk_user)) {
				$this->setError(0, '获取服务商信息失败');
				return false;
			}

			//威客用户ID
			$wk_userid = $wk_user['user_id'];

			//威客昵称
			$wk_nickname = $wk_user['nickname'];

			//威客真实姓名
			$wk_name = $wk_user['truename'];

			//威客身份证
			$wk_cardid = $wk_user['cardid'];

			$bill_data['wk_userid'] = $wk_userid;
			$bill_data['wk_nickname'] = $wk_nickname;
			$bill_data['wk_name'] = $wk_name;
			$bill_data['wk_cardid'] = $wk_cardid;
		}

		$bill_data['amount'] = $amount;
		$bill_data['amount_user'] = $amount_user;
		$bill_data['amount_plat'] = $amount_plat;
		$bill_data['amount_added'] = $amount_added;
		$bill_data['amount_discount'] = $discount;
		$bill_data['tax'] = $tax;

		//交易结束时间
		$task_endtime = $this->get('task_info.close_time');
		$bill_data['task_endtime'] = (int)$task_endtime;

		$bill =  new zbj_service_bill($bill_id);
		if($bill->edit($bill_data) === false) {
			$this->setError(0,'新增发票信息失败 '. $bill->getError());
			return false;
		}

		//更新服务商代开票记录
		if($amount_user) {

			if(!$bill->upRealUser()) {
				$this->setError(0,'更新代开记录失败 '. $bill->getError());
				return false;
			}

			//更新服务商冻结状态
			if(!$this->regBillOk()) {
				$this->setError(0,'更新服务商税金冻结状态失败 '. $this->getError());
				return false;
			}
		}

		return true;
	}


	/**
	 * 取消发票
	 * 暂时不能取消申请
	 *
	 * @return boolean
	 */
	public function cancelBill() {

		//强制主库
		$this->setDbEntry();

		//检查是否已经申请开票
		if(!$this->isInvoice()) {
			$this->setError(0, '还没有申请开票');
			return false;
		}

		$this->set('bill_state', 0);
		if($this->save() !== true) {
			$this->setError(0, '保存失败');
			return false;
		}

		//日志
		$this->addTaskActionLog('雇主取消了发票');

		return true;
	}

	/**
	 * 获取任务的发票信息
	 * 查询失败返回false
	 * @return array|false
	 */
	public function getBillInfo() {
		$model = zbj_model_api::get('zbj_model_mb_bill');
		$rs = $model->selectOne(array('service_id'=>$this->id, 'type'=>$this->getBillType()));
		if($rs === false) {
			return false;
		}else {
			return (array)$rs;
		}
	}

	/**
	 * 获取发票的TYPE类型值
	 * @return int
	 */
	public function getBillType() {
		switch($this->get('mode')) {
		case 0:	//需求
		case 1:	//需求
		case 6:	//需求
		case 10:	//需求
			$type = 0;
			break;
		case 3:	//购买服务
		case 5:	//购买服务
		case 8:	//购买服务
		case 11:	//购买服务
			$type = 1;
			break;
		case 2:	//雇佣
		case 4:	//雇佣
		case 7:	//雇佣
		case 12:	//雇佣
			$type = 2;
			break;
		default:
			$type = 0;
		}
		return $type;
	}

	/**
	 * 检查是否已经开票
	 * @return boolean
	 */
	public function isInvoice() {
		return $this->get('bill_state') == 1 ? true : false;
	}

	/***
	 *放弃发票
	 *@return bool  是否设置成功
	 */
	public function setNoBill() {
		if ( $this->isAllowNoBill() === false) {
			return false;
		}

		if ( $this->isNoBill() ) {
			return true;
		}

		try {

			$binfo = $this->getBillInfo();
			$bill_id = (int) $binfo['bill_id'];
			$srvBill = new zbj_service_bill($bill_id);
			$srvBill->setTransaction(false);

			$this->_beginTransaction('fn');
			$this->_beginTransaction('mb');
			$this->_beginTransaction('mk');

			//解冻税金 -> 改为任务结束后计划任务调用noBillRefund执行

			//取消发票
			if ($bill_id > 0) {
				$is_no_bill = true;
				if ($srvBill->cancel($is_no_bill) === false) {
					throw new Exception('取消发票失败，失败原因：' . $srvBill->getError());
				}
			}

			//保存状态
			$this->set('bill_state', 2);
			if ( $this->save() === false ) {
				throw new Exception('保存放弃发票状态失败, 失败原因:'. $this->getError());
			}

			if ($binfo) {
				$task_action_log_msg = " 原发票号#{$binfo['bill_id']}";
				if (!$binfo['is_pay']) {
					$task_action_log_msg .= '未支付';
				} elseif ($binfo['state'] == -1) {
					$task_action_log_msg .= '未进入流程';
				} elseif ($binfo['state'] == 1) {
					$task_action_log_msg .= '雇主取消';
				} elseif ($binfo['state'] == 2) {
					$task_action_log_msg .= '申请被拒';
				}
			}
			$this->addTaskActionLog("雇主放弃了发票{$task_action_log_msg}");

			$this->_commit('fn');
			$this->_commit('mb');
			$this->_commit('mk');
		} catch (Exception $e) {
			$this->_rollBack('fn');
			$this->_rollBack('mb');
			$this->_rollBack('mk');
			$this->setError(0, $e->getMessage());
			return false;
		}
		return true;
	}

	/**
	 *获取任务税金冻结情况 不传参数查询所有状态
	 *@param int $state 税金状态 0冻结 1扣除 2退回
	 *@return array
	 */
	public function getBillFund($state=NULL) {
		if ($this->get('allot') == 3) return array();
		$condition['task_id'] = $this->id;
		if ($state !== NULL) $condition['state'] = (int) $state;
		$mdl = zbj_model_api::get('zbj_model_mb_billfund');
		$mdl->setDbEntry();
		return $mdl->select($condition)->items;
	}

	/***
	 *是否放弃发票
	 *@return bool
	 */
	public function isNoBill() {
		return in_array((int)$this->get('bill_state'), array(2,3)) ? true : false;
	}

	/***
	 *取消发弃发票
	 *@return bool
	 */
	public function cancelNoBill() {
		if ($this->isNoBill() === false) {
			$this->setError(0, '没有放弃发票');
			return false;
		}

		//查询税金是否已经退回
		if ($this->getBillFund(2)) {
			$this->setError(0, '税金已经退回无法取消放弃发票');
			return false;
		}

		$this->set('bill_state', 0);
		if ( $this->save() === false ) {
			$this->setError(0, '保存任务发票状态失败');
			return false;
		}

		$this->addTaskActionLog('取消放弃发票', false);

		return $this;
	}

	/***
	 *放弃发票退税金
	 *@return bool
	 */
	public function noBillRefund() {

		if ( ! $this->isNoBill() ) {
			$this->setError(0, '没有放弃发票， 不支持的请求');
			return false;
		}

		if ($this->get('bill_state') == 3) { //已经处理
			return true;
		}

		if ($this->get('allot') == 3) {
			$this->setError(0, '计件任务没有冻结税金，不需要解冻税金');
			return false;
		}

		try {

			$binfo = $this->getBillInfo();
			$bill_id = (int) $binfo['bill_id'];
			$srvBill = new zbj_service_bill($bill_id);
			$srvBill->setTransaction(false);

			$this->_beginTransaction('fn');
			$this->_beginTransaction('mb');
			$this->_beginTransaction('mk');

			//解冻税金
			//$fund_state = 0; //取所有再筛选已冻结和已扣除的
			$bill_funds = $this->getBillFund();

			foreach($bill_funds as $fund) {
				if (in_array(intval($fund['state']), array(0,1)) && $srvBill->taxRefund($fund['fund_id']) === false) {
					throw new Exception("解冻服务商[{$fund['nickname']}]冻结的税金失败,原因：". $srvBill->getError());
				}
			}

			//保存状态
			$this->set('bill_state', 3);
			if ( $this->save() === false ) {
				throw new Exception('保存任务发票状态失败, 失败原因:'. $this->getError());
			}

			if ($bill_funds) {
				$this->addTaskActionLog('因放弃发票解冻服务商税金', false);
			}

			$this->_commit('fn');
			$this->_commit('mb');
			$this->_commit('mk');
		} catch (Exception $e) {
			$this->_rollBack('fn');
			$this->_rollBack('mb');
			$this->_rollBack('mk');
			$this->setError(0, $e->getMessage());
			return false;
		}
	}

	/***
	 *是否允许放弃发票
	 *
	 */
	public function isAllowNoBill() {
		if ($this->isInvoice()) {
			$binfo = $this->getBillInfo();
			if ( in_array((int)$binfo['bill_state'], array(-1,1,2)) && $binfo['fn_state'] == 0 && $binfo['post_num'] == 0 && $binfo['post_state'] == 0) {
				return true;
			}
			$this->setError(0, '您已经申请了发票, 当前发票状态不允许放弃发票');
			return false;
		}

		$no_bill_endtime = strtotime("-80 day");
		if($this->get('state') == 4 && $no_bill_endtime >= $this->get('task_info.close_time')) {
			$this->setError(0, '交易结束超过80天，不支持放弃发票');
			return false;
		}
		return true;
	}

	/**
	 * 是否允许开票
	 * 返回：允许开票true，不允许false(-1:交易未结束,-2交易结束超过90天, -3为支付担保金，-4交易退款, -5放弃发票);
	 *
	 * @return boolean
	 */
	public function isAllowBill() {

		if($this->get('hosted') != 1) {
			$this->setError(-3, '未支付担保金不支持开票');
			return false;
		}

		//检查是否有开票资格
		if(!in_array($this->get('state'), array(2,3,4))) {
			$this->setError(-1, '当前交易状态，暂不支持开票');
			return false;
		}

		//检查是否消费
		if($this->get('state') == 4  && 0 >= $this->get('at_amount') && $this->getBillAmount() <= 0) {
			$this->setError(-4, '交易未产生支付费用，暂不支持开票');
			return false;
		}

		//检查交易是否超过90天
		$bill_reg_endtime = strtotime("-90 day");
		if($this->get('state') == 4 && $bill_reg_endtime >= $this->get('task_info.close_time')) {
			$this->setError(-2, '交易结束超过90天，不支持开票');
			return false;
		}

		if ( $this->isNoBill() ) {
			$this->setError(-5, '您已经放弃了发票, 如需申请开票请联系客服');
			return false;
		}

		return true;
	}

	/**
	 * 获取一个有身份认证的中标会员
	 * 抽取20个中标会员，如果中标会员无一实名认证，随机匹配一个认证过的用户
	 * @return array mb_info 结构
	 */
	public function getTaskUserCardInfo($amount) {

		//提取中标会员
		$list = array();

		$model = zbj_model_api::get('zbj_model_mk_works');
		$model->setLimit(20);

		if($this->get('mode') == 11 || $this->get('mode') == 12 || $this->get('allot') == 1 || $this->get('allot') == 2 || $this->get('allot') == 3) {
			$list = $model->select(array('task_id'=>$this->id,'issuccess'=>1),"user_id")->items;
		}

		foreach($list as $row){
			$user_id_as[] = $row['user_id'];
		}

		$bill = new zbj_service_bill();
		$params = array('amount'=>$amount);
		if(!empty($user_id_as)) {
			$params['uids'] = join(',', $user_id_as);
		}
		$real_user = $bill->getRealUser($params);
		if(empty($real_user)) {
			$this->setError(0, '获取认证信息 '. $bill->getError());
			return false;
		}

		return $real_user;
	}


	/**
	 * 检查是否允许编辑
	 * @param int $type 0发布流程中,1任务最终页
	 * @return boolean
	 */
	public function isAllowEdit($type = 0) {

		if(empty($this->id)) {
			$this->setError(0,'缺少业务ID');
			return false;
		}

		//锁定
		if(!$this->isAllowHandle()) {
			$this->setError(0,'任务被锁定，不能编辑');
			return false;
		}

		//是否锁定
		if(!$this->isAllowPost($this->get('user_id'))) {
			$this->setError(0,'账号不允许次操作');
			return false;
		}

		if($type === 0) {
			//任务发布流程中

			//状态
			if($this->get('hosted') == 1) {
				$this->setError(0,'任务已托管，不能编辑');
				return false;
			}

			//订单
			$order = $this->getPubOrder();
			if($order['ispay'] == 1) {
				$this->setError(0,'订单已支付，不能编辑');
				return false;
			}

		}else {
			//任务发布后最终页

			//状态
			if($this->get('state') > 2) {
				$this->setError(0,'已经开始工作，不能编辑需求');
				return false;
			}
		}

		return true;
	}

	/**
	 * 是否允许提交任务
	 */
	public function isAllowPost($user_id = 0) {

		//账号是否被锁定
		$user = new zbj_service_user($user_id);
		if($user->get('locks') == 1) {
			$this->setError(0,'账号被锁定');
			return false;
		}

		//IP是否被锁定
		if(SFilter::checkIp()) {
			$this->setError(0,'被禁止访问');
			return false;
		}
		return true;
	}

	/**
	 * 添加任务操作日志
	 * @param string $log 日志内容
	 * @param boolean $isbuyer true 是否为客户自己操作，false为后台客服操作
	 * @param int $state 任务状态
	 * @return boolean
	 */
	public function addTaskActionLog($log, $isbuyer = true ,$state = -1) {
		if(empty($log)) return true;
		$model = zbj_model_api::get('zbj_model_mk_taskactionlog');

		$item = array(
			"task_id"       => $this->id,
			"subject"       => $log,
			"user_id"       => $this->get("user_id"),
			"nickname"      => $this->get("nickname"),
			"dateline"      => $this->_time,
			"dateymd"       => date("Y-m-d",$this->_time),
			"ip"            => zbj_lib_BaseUtils::getIp(),
			"isbuyer"       => (int)$isbuyer,
		);
		if ($state == -1) {
			$item["state"] = $this->get("state");
		} else {
			$item["state"] = $state;
		}

		$r = $model->insert($item);

		if($r <= 0) {
			$this->setError(0,'保存失败,'.$model->getError().$model->getDbError());
			return false;
		}else {
			return true;
		}
	}

	/**
	 * 验证用户技能是否匹配任务分类的必要技能
	 * @param object $user 用户对象
	 * @return boolean
	 */
	public function isMatchCatalogSkill($user) {

		//获取分类的必备技能
		$catalog_skill = (array)$this->getCatalogSkill();

		//如果没有限制技能，直接返回成功
		if(empty($catalog_skill))return true;

		//获取用户技能
		$user_skill = (array)$user->getMany('user_skill');
		//如果用户没有设置技能，直接返回失败
		if(empty($user_skill))return false;

		foreach($catalog_skill as $row) {
			foreach($user_skill as $row2) {
				if($row['skill_id'] == $row2['skill_id'] && $row['skill_id'] >0 ) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * 获取任务所属分类的必备技能
	 * @return array
	 */
	public function getCatalogSkill() {
		$model = zbj_model_api::get('zbj_model_mk_catalogskill');
		return $model->select(array('catalog_id'=>$this->get('catalog2id')))->items;
	}

	/**
	 * 获取任务扩展属性所关联的技能
	 * @return array
	 */
	public function getTaskSkill() {

		//任务所需技能
		$task_skill = array();

		$task_ext = (array)$this->getMany('task_e2v');

		$model_v2s = zbj_model_api::get('zbj_model_mk_catalogextv2s');
		foreach($task_ext as $row) {
			$result = (array)$model_v2s->select(array('ext_id'=>$row['ext_id'],'val_id'=>$row['val_id']))->items;
			foreach($result as $result_row) {
				$task_skill[$row['ext_id']]['skill'][] = $result_row;
				$task_skill[$row['ext_id']]['ext_name'] = $row['ext_name'];
			}
		}

		return $task_skill;
	}

	/**
	 * 验证用户技能是否匹配任务扩展属性所关联技能
	 * @return boolean
	 */
	public function isMatchTaskSkill($user) {

		//获取任务扩展属性关联的技能
		$task_skill = $this->getTaskSkill();
		if(empty($task_skill)) {
			//如果任务没有限制，直接返回
			return true;
		}

		//获得用户的技能
		$user_skill = (array)$user->getMany('user_skill');

		//如果用户没有设置技能,直接返回
		if(empty($user_skill))return false;

		$auth = array();

		foreach($task_skill as $key=>$task_row) {

			$auth[$key]['auth'] = false;
			$auth[$key]['data'] = $task_row;

			foreach($task_row['skill'] as $task_skill_row) {

				foreach($user_skill as $user_row) {
					if($user_row['skill_id'] == $task_skill_row['skill_id']) {
						//符合条件
						$auth[$key]['auth'] = true;
						break 2;
					}
				}
			}

		}

		foreach($auth as $key=>$val){
			if($val['auth'] == false) {
				$this->setError(0, '不满足扩展属性:"'.$val['data']['ext_name'].'"技能要求');
				return false;
			}
		}

		return true;
	}

	/**
	 * 获取任务的分配模式
	 * @return array
	 */
	public function getPayType(){
		return $this->get('task_paytype.*');
	}

	/**
	 * 插入当前任务到任务推广列表
	 * @param $day 订单里指定的推广天数的数量
	 * @return int|false
	 */
	public function addTaskHot($day){

		$model = zbj_model_api::get('zbj_model_mk_tasknewhot');

		//先清除过期的
		$model->delete(array("endtime<" . ($this->_time-86400*3) ));
		//
		$aHot = $model->selectOne(array("task_id"=>$this->id),"endtime");
		if($aHot) {
			$tmptime=max($this->_time,$aHot["endtime"]);
			$result = $model->update(array("task_id"=>$this->id),array('time'=>$this->_time, 'endtime'=>$tmptime + $day * 86400));
		}else{
			$data=array(
				'task_id'=>$this->id,
				'time'=>$this->_time,
				'endtime'=>$this->_time+$day*86400,//结束时间
			);
			$result = $model->insert($data);
		}

		return $result === false ? false : true;
	}

	/**
	 * 通过增值服务ID，设置当前的任务增值服务
	 */
	public function setTaskService($sid){
		$field=$this->getSidToField($sid);
		if(empty($field))return false;
		$this->set($field);
	}

	/**
	 * 检查指定服务是否存在
	 */
	public function isBuyService($sid){
		$field=$this->getSidToField($sid);
		if(empty($field))return false;
		foreach($field as $key=>$val){
			if($this->get($key)==1){
				return true;
			}
		}
		return false;
	}


	/**
	 *添加优质服务
	 */
	public function addQualityTask($data) {
		if ($this->isAllowQualitTask() === false) return false;

		if ($this->isQualityTask() === true) {
			$this->setError(0, '已经加入优质任务'); return false;
		}

		if (intval($data['channel_id']) <= 0) {
			$this->setError(0, '没有设置channel_id'); return false;
		}
		if (intval($data['catalog2id']) <= 0) {
			$this->setError(0, '没有设置catalog2id'); return false;
		}

		$works_id = $data['works_id'];
		if ( empty($works_id) || intval($works_id) <= 0 ) {
			$this->setError(0, '没有设置主稿件id'); return false;
		}
		$works_info = $this->getTaskWorksInfo($works_id);
		if ($works_info === false) {
			$this->setError(0, '设置主稿件信息失败'.$this->getError()); return false;
		}
		$data['works_nickname'] = $works_info['nickname'];
		$data['works_userid'] = $works_info['user_id'];
		$data['works_pic'] = $data['works_pic'] ? $data['works_pic'] : $works_info['works_pic'];
		if ( empty($data['works_pic']) ) {
			$this->setError(0, '设置主稿件信息失败 无法获取主稿件图片地址'); return false;
		}

		$data['is_show'] = (int) $data['is_show'];
		$data['is_top'] = (int) $data['is_top'];
		$data['is_task_top'] = (int) $data['is_task_top'];
		$data['is_list'] = (int) $data['is_list'];
		if ( !  ( in_array($data['is_show'], array(0,1)) && in_array($data['is_top'], array(0,1)) && in_array($data['is_list'], array(0,1)) && in_array($data['is_task_top'], array(0,1) ) ) ) {
			$this->setError(0, '参数错误'); return false;
		}

		//处理冗余
		$options = $this->checkQualityTaskOptions($data['options']);
		if ($options === false) {
			$this->setError(0, '添加出错'.$this->getError()); return false;
		}
		if ($data['is_task_top'] == 1) {
			if (empty($options['task']['highlight'])) {
				$this->setError(0, '添加出错,没有设置案例特点'); return false;
			}
		} else {
			unset($options['task']['highlight']);
		}
		$data['options'] = serialize($options);

		$data['task_id'] = $this->id;
		$data['user_id'] = $this->get('user_id');
		$data['nickname'] = $this->get('nickname');
		$data['starttime'] = $this->get('starttime');

		$mdl = zbj_model_api::get('zbj_model_mk_qualitytask');
		return $mdl->insert($data);
	}

	/**
	 *修改优质服务
	 */
	public function editQualityTask($data) {
		if ($this->isQualityTask() === false) {
			$this->setError(0, '还没有加入优质任务'); return false;
		}

		//不允许修改的数据
		unset($data['qid']);
		unset($data['task_id']);
		unset($data['user_id']);
		unset($data['nickname']);
		unset($data['starttime']);
		unset($data['works_nickname']);
		unset($data['works_userid']);

		if (isset($data['is_top']) && ! in_array((int) $data['is_top'], array(0,1)) ) {
			$this->setError(0, 'is_top参数错误'); return false;
		}
		if (isset($data['is_task_top']) && ! in_array((int) $data['is_task_top'], array(0,1)) ) {
			$this->setError(0, 'is_task_top参数错误'); return false;
		}
		if (isset($data['is_list']) && ! in_array((int) $data['is_list'], array(0,1)) ) {
			$this->setError(0, 'is_list参数错误'); return false;
		}
		if (isset($data['is_show']) && ! in_array((int) $data['is_show'], array(0,1)) ) {
			$this->setError(0, 'is_show参数错误'); return false;
		}


		//检查处理冗余
		if ( isset($data['options']) ) {
			$options = $this->checkQualityTaskOptions($data['options']);
			if ($options === false) return false;
			if ($data['is_task_top'] == 1) {
				if (empty($options['task']['highlight'])) {
					$this->setError(0, '修改出错,没有设置案例特点'); return false;
				}
			} else {
				unset($options['task']['highlight']);
			}
			$data['options'] = serialize($options);
		}

		//检查主稿件id
		if ( isset($data['works_id']) ) {
			$works_info = $this->getTaskWorksInfo($data['works_id']);
			if ($works_info === false) {
				$this->setError(0, '修改主稿件信息失败 '. $this->getError()); return false;
			}
			$data['works_nickname'] = $works_info['nickname'];
			$data['works_userid'] = $works_info['user_id'];
			$data['works_pic'] = $data['works_pic'] ? $data['works_pic'] : $works_info['works_pic'];
			if ( empty($data['works_pic']) ) {
				$this->setError(0, '修改主稿件信息失败 无法获取主稿件图片地址'); return false;
			}
		}

		$mdl = zbj_model_api::get('zbj_model_mk_qualitytask');
		return $mdl->update("task_id={$this->id}", $data);
	}

	/**
	 *获取该任务下某稿件的信息
	 */
	private function getTaskWorksInfo($works_id) {
		$works_id = intval($works_id);
		if ($works_id <= 0) {
			$this->setError(0, '无法获取稿件id');
			return false;
		}
		$srv= new zbj_service_works($works_id);
		if ($srv->get('task_id') != $this->id) {
			$this->setError(0, "稿件#{$works_id}不属于当前任务");
			return false;
		}
		if ($srv->get('open_state') == 1) {
			$this->setError(0, "稿件#{$works_id}被屏蔽");
			return false;
		}
		$works_info = $srv->get();
		$files = $srv->getImgFiles();
		$works_info['works_pic'] = (string) $files[0]['filename'];
		return $srv->get();
	}


	/**
	 *检查优质任务冗余数据
	 */
	private function checkQualityTaskOptions($options) {
		if ( is_string($options) ) {
			$options = unserialize($options);
			if ( $options === false) {
				$this->setError(0, '冗余数据有误，无法反序列化还原数据'); return false;
			}
		}
		if ( $options && ! is_array($options) ) {
			$this->setError(0, '冗余数据有误,格式不正确'); return false;
		}
		$new_options['task']['title'] = $this->get('title');
		$new_options['task']['cont'] = zbj_lib_BaseUtils::getUbbStr($this->get('task_cont.content'), 100);
		$new_options['task']['works_num'] = $this->get('works_num');
		$new_options['task']['at_amount'] = $this->get('at_amount');
		$new_options['task']['hosted_amount'] = $this->get('hosted_amount');

		if ($options['task']['highlight']) {
			$new_options['task']['highlight'] = mb_substr($options['task']['highlight'], 0, 50);
		}

		if ($options['works']) {
			foreach($options['works'] as $k =>$v) {
				$works_id = intval($v['works_id']);
				if ($works_id > 0) {
					$works_info = $this->getTaskWorksInfo($works_id);
					if ($works_info === false) {
						$this->setError(0, '冗余数据中的稿件信息有误，'. $this->getError()); return false;
					}
					if ( empty($v['works_pic']) || !is_string($v['works_pic'])) {
						$this->setError(0, "稿件#{$works_id}没有设置图片"); return false;
					}
					$new_options['works'][] = array(
						'works_userid'=>$works_info['user_id'],
						'works_id'=>$works_id,
						'works_pic'=>$v['works_pic']
					);
				}
			}
		}
		return $new_options;
	}


	/**
	 * 获取优质任务数据
	 */
	public function getQualityTaskInfo() {
		$mdl = zbj_model_api::get('zbj_model_mk_qualitytask');
		$rslt = $mdl->selectOne("task_id={$this->id}");
		if ($rslt) {
			$rslt['options'] = unserialize($rslt['options']);
		}
		return $rslt;
	}

	/**
	 *是否是优质任务
	 *
	 */
	public function isQualityTask() {
		return $this->getQualityTaskInfo() ? true : false;
	}
	public function isAllowQualitTask( ) {
		if ($this->get('state') < 3) {
			$this->setError(0, '当前任务状态不允许添加操作'); return false;
		}

		if ($this->get('hosted') != 1) {
			$this->setError(0, '未交担保金任务不允许添加操作'); return false;
		}
		if ($this->get('isfrozen') == 1) {
			$this->setError(0, '冻结任务不允许添加'); return false;
		}
		if ($this->get('open_state') == 1) {
			$this->setError(0, '屏蔽任务不允许添加'); return false;
		}
		return true;
	}

	/**
	 * 设置增值服务
	 * @param int $sid 服务ID
	 * @return array
	 */
	public function getSidToField($sid){

		switch($sid){
		case 3: //标题加粗
			$field=array('was_courier'=>1);
			break;
		case 4: //隐藏任务
			$field=array('was_nosearch'=>1);
			break;
		case 5: //隐藏交稿
			$field=array('was_showorks'=>1);
			break;
		case 77://需求置顶
			$field=array('was_promotion'=>1);
			break;
		case 6: //推广任务
			$field=array('was_promotion'=>1);
			break;
		case 7: //标题高亮
			$field=array('was_high'=>1);
			break;
		case 8: //服务套餐
			$field=array('was_courier'=>1,'was_promotion'=>1,'was_high'=>1,'was_pack'=>1);
			break;
		case 661:// 隐私套餐
			$field = array('was_nosearch'=>1,'was_showorks'=>1);
			break;
		default:
			$field='';
		}
		return $field;
	}

	/**
	 * 获取任务号
	 * @return int
	 */
	public function getLastNoId() {
		return $this->id;
	}

	/**
	 * 获取当前任务扩展属性中，用于人才技能的扩展属性
	 * @return array|false
	 */
	public function getSkillExt() {

		$list = array();
		$task_skill = (array) $this->getMany('task_e2v');
		foreach($task_skill as $row) {
			//检查是否用于技能匹配
			$model_ext = zbj_model_api::get('zbj_model_mk_catalogext', $row['ext_id']);
			$ext_data = $model_ext->get();
			//如果当前扩展属性没有用于用户技能，跳过
			if($ext_data['is_member'] != 1) continue;

			$list[] = $row;
		}
		return $list;
	}

	/**
	 * 返回任务扩展属性
	 * ext_id => array(val_id => val_name),
	 * ext_id => val_name
	 *
	 * @return array
	 */
	public function getExtVal() {
		if(!$this->id) {
			return array();
		}

		$val_list = array();
		$list = $this->getMany('task_e2v');
		if($list) {
			foreach($list as $val) {
				$val_list[$val['ext_id']][$val['val_id']] = $val['val_name'];
			}
		}

		return $val_list;
	}

	/**
	 * 生成分类冗余数据
	 * @return array
	 */
	public function getCataLogToStr($data = array()) {
		$key = array();
		foreach($data as $row) {
			$row['catalog_id']>0?$key[] = $row['catalog_id']:'';
			$row['catalog2id']>0?$key[] = $row['catalog2id']:'';
		}
		return empty($key)?'':join(',', $key);
	}

	/**
	 * 生成技能冗余数据
	 * @return array
	 */
	public function getSkillToStr($data = array()) {
		$key = array();
		foreach((array)$data as $row) {
			$key[] = $row['ext_id'].':'.$row['val_id'];
		}
		return empty($key)?'':join(',', $key);
	}

	/**
	 * 写入推广员日志表
	 * @param array $data 数据
	 * @return boolean
	 */
	public function upUnionIncome($data) {

		$task_id = $data['task_id'];
		$works_id = $data['works_id'];

		//推广员ID
		$user_id = $data['user_id'];

		//被推广的ID
		$target_uid = $data['target_uid'];

		$data['addtime'] = $this->_time;
		$data['addymd'] = date('Y-m-d', $this->_time);
		$data['income_time'] = $this->_time;
		$data['income_ymd'] = date('Y-m-d', $this->_time);
		$data['unpayymd'] = date('Y-m-d', $this->_time);

		if(empty($task_id) || empty($user_id) || empty($target_uid)) {
			$this->setError(0,'缺少数据');
			return false;
		}

		$model = zbj_model_api::get('zbj_model_mb_unionincome');

		$condtion = array(
			'user_id'=>$user_id,
			'target_uid'=>$target_uid,
		);

		if(in_array($data['utype'],array(1,5,6))) {

			$condtion['task_id'] = $task_id;
			$condtion['utype'] = $data['utype'];

			$result = $model->selectOne($condtion, 'union_id');
			if(0 >= $result['union_id']) {
				//插入
				$r = $model->insert($data);
			}else {
				//更新
				unset($data['addtime']);
				unset($data['addymd']);
				$r = $model->update(array('union_id'=>$result['union_id']), $data);
			}
		}else if ($data['utype'] == 2) {

			$condtion['works_id'] = $works_id;
			$condtion['utype'] = 2;

			$result = $model->selectOne($condtion, 'union_id');
			if(0 >= $result['union_id']) {
				//插入
				$r = $model->insert($data);
			}else {
				//更新
				unset($data['addtime']);
				unset($data['addymd']);
				$r = $model->update(array('union_id'=>$result['union_id']), $data);
			}
		}else {
			return false;
		}

		return $r === false?false:true;
	}

	/**
	 * 获取赏金分配记录
	 * @return array
	 */
	public function getTaskAllotModel() {
		return (array)$this->getMany('task_allot');
	}

	/**
	 * 更新任务的浏览次数，客户浏览时间，任务健康度
	 * @param int $userid 当前用户ID
	 * @return boolean
	 */
	public function upTaskBrowse($userid = 0) {

		//10个用户浏览才会更新数据库
		$cacheName = 'task.model.task.upTaskBrowse.view_'.$this->id;

		$data = array();
		$cache = new zbj_lib_cache('memcache');

		if(!empty($cache)) {
			$data = $cache->get($cacheName);
			$data['views']++;

			if($this->isAuthor($userid)){
				//客户浏览
				$data['view_time'] = $this->_time;
			}
			$cache->del($cacheName);//不删除之前的不能够重新set
			if($data['views'] >= 50) {
				$data['views'] += $this->get('views');
				$this->set($data);
				$data['views'] = 0;
			}
			$cache->set($cacheName, $data);
		}else {

			$data['views'] = 1 + $this->get('views');
			if($this->isAuthor($userid)){
				//客户浏览
				$data['view_time'] = $this->_time;
				//健康度更新
			}
			$this->set($data);
		}
		return $this->save();
	}

	/**
	 * 更新健康度
	 * @return boolean
	 */
	public function upTaskHealth() {

		$a_task = $this->get();

		if ($a_task["state"] < 3) {	//未选稿时才更新健康度
			//浏览
			$view_time = $a_task["view_time"];
			$time_interval = $this->_time - $view_time;
			$health_view = 5-floor($time_interval/86400);

			//评价
			$option = unserialize($this->get("task_info.option"));
			if($this->get('type') == 1) {
				//如果是发贴比赛
				$works_num = $a_task["post_num"];
				$review_num= (int)($option['posts']['invalid_num']+$option['posts']['effective_num']);
			}else{
				$works_num = $a_task["works_num"];
				$review_num = isset($option["works"]["review_num"]) ? $option["works"]["review_num"] : 0;

			}
			//
			if ($works_num<=0){
				$health_review = 5;
			} else {
				$health_review = 5-(floor((($works_num-$review_num)/$works_num)*5)) ;
			}

			if ($health_view<0) $health_view = 0;
			if ($health_review<0) $health_review = 0;
			$health = $health_view + $health_review;
			$this->set('health', $health);
			return $this->save();

		}
		return true;
	}

	/**
	 * 更新雇主稿件浏览情况
	 * @param string $works_ids 稿件号,多个用逗号隔开
	 * @return boolean
	 */
	public function upBuyerViewWorks($works_ids){

		if(empty($works_ids)) return false;

		if(preg_match("/[^\d,]+/", $works_ids)) {
			//格式不对
			return false;
		}

		$model = zbj_model_api::get('zbj_model_mk_works');

		if (is_numeric($works_ids)){
			$condition = "works_id = ".$works_ids;
		} else {
			$condition = "works_id in(".$works_ids.")";
		}

		$r = $model->update($condition,array("isview"=>1));
		return $r === false?false:true;
	}

	/**
	 * 更新任务副表的序列化冗余字段
	 * @param array $field  需要更新的字段
	 * @return boolean
	 */
	public function upTaskInfoOption($fields){
		if (!is_array($fields)) return false;
		$model = zbj_model_api::get('zbj_model_mk_works');
		$task_option = $this->getTaskInfoOption();
		if(empty($task_option)) return false;
		
		$upinfo = false;
		$condition = array('task_id'=>$this->getId(),'open_state'=>0);
		if(in_array('works_num', $fields)){
			$fields = array('works_num','other');
		}else{
			$fields = array('other');
		}
		foreach ($fields as $value){
			if($value == 'works_num'){
				$all_count = $model->select($condition,"COUNT(0) as count,type","group by type")->items;
				if($all_count){
					$works_num = 0;
					foreach ($all_count as $v){
						$v['type'] = $v['type']<=10 ? 10 : $v['type'];
						$task_option["works"][$value.$v['type']] = $v["count"];
						$works_num += $v['count'];
					}
					$this->set('works_num', $works_num);
				}else{
					$task_option["works"] = array();
//					$this->set('works_num', 0);
				}
			}else{
				$all_count = $model->selectOne($condition,"sum(issuccess) as success_num,sum(isappraise) as review_num,sum(iseliminate) as dieout_num,sum(isalternative) as option_num,sum(isview) as view_num,sum(isteam) as team_num");
				$condition['ft_invalid'] = 21;
				$invalid_count = $model->selectOne($condition, "COUNT(1) invalid_num");
				if($invalid_count['invalid_num'] > 0) {
					$all_count['invalid_num'] = $invalid_count['invalid_num'];
				}
				if ($all_count){
					$task_option["works"]['success_num'] = (int)$all_count['success_num'];  //中标
					$task_option["works"]['review_num'] = (int)$all_count['review_num'];    //评价
					$task_option["works"]['dieout_num'] = (int)$all_count['dieout_num'];    //淘汰
					$task_option["works"]['option_num'] = (int)$all_count['option_num'];    //备选
					$task_option["works"]['view_num'] = (int)$all_count['view_num'];        //雇主浏览
					$task_option["works"]['team_num'] = (int)$all_count['team_num'];        //团队
					$task_option["works"]['invalid_num'] = (int)$all_count['invalid_num'];  //无效
                    $task_option['works']['avaliable_num'] = $this->get('works_num') - $all_count['dieout_num'] - $all_count['invalid_num'];    //有效
				}else{
					$task_option["works"] = array();
//					$this->set('works_num', 0);
				}
			}
		}
		$task_option = serialize($task_option);
		$this->set("task_info.option", $task_option);
		if(($back = $this->save()) !== false){
			$this->model()->upTaskSearch($this->getId(),'U');
		}
		return $back;
	}

	/**
	 * 获取任务副表的序列化冗余字段
	 * @return array
	 */
	public function getTaskInfoOption(){
		return unserialize(stripcslashes($this->get('task_info.option')));
	}

	/**
	 * 检查该任务是否隐藏任务稿件
	 * 由当前任务分类决定，可以在后台分类管理设置
	 * 仅对稿件列表有效，稿件附件在竞标期仅对客户开放，选稿后全部公开。
	 *  @return int
	 */
	public function isHideFile() {
		$cat = $this->get('catalog.*');
		if(empty($cat)) return 0;
		return $cat['ishidefile'];
	}

	/**
	 * 获取当前任务的主二级分类
	 * @return array
	 */
	public function getTask2CataLogInfo() {
		return $this->get('catalog.*');
	}


	/**
	 * 检查指定用户是否上传交稿
	 * @param int $userid 用户ID
	 * @return mix 如果存在返回交稿数量
	 */
	public function isUserUpload($userid) {
		$model = zbj_model_api::get('zbj_model_mk_tasksign');
		$rs = $model->selectOne(array("task_id"=>$this->id,"user_id"=>$userid), 'works_num,isworks');
		if($rs['isworks']==1){
			return $rs['works_num'];
		}else{
			return false;
		}
	}

	/**
	 * 检查是否为中标卖家
	 * @param int $userid 当前用户ID
	 * return boolean
	 */
	public function isBidUser($userid = 0){

		$userid = (int)$userid;

		if(empty($userid))return false;

		$model = zbj_model_api::get('zbj_model_mk_works');

		$result = $model->selectOne(array('task_id'=>$this->id, 'issuccess'=>1, 'user_id'=>$userid), 'count(1) as num');

		return $result['num'] ? true:false;
	}

	/**
	 * 是否开启评论
	 * return boolean
	 */
	public function isOpenComment() {
		if(lib_Constant::TASK_COMMENT_STATE==1 && $this->get('task_info.isban_comment') == 0)//isban_comment 为1时关闭，为0时打开
			return true;
		else
			return false;
	}

	/**
	 * 发布任务评论
	 * @param int $type     评论类型 0:普通用户留言,1客户留言,2为客服人员留言
	 * @param string $content 评论内容
	 * @param int $userid 用户ID
	 * @param string $nickname 用户昵称
	 * return int|false
	 */
	public function addTaskComment($type = 0, $content , $userid = 0, $nickname = '') {

		if ($type != 2){
			if($this->isOpenComment()==false){
				$this->setError(0,'该任务已经关闭评论');
				return false;
			}
		}
		$item=array(
			'task_id'=>$this->id,
			'user_id'=>"$userid",
			'nickname'=>"$nickname",
			'createtime'=>$this->_time,
			'ip'=>zbj_lib_BaseUtils::getIp(),
			'content'=>$content,
			'type'=>$type,
		);

		$model = zbj_model_api::get('zbj_model_mk_taskcomment');
		$id = $model->insert($item);
		if($id <= 0) {
			$this->setError(0,'评论插入数据失败');
			return false;
		}

		//更新任务评论总数
		$this->set('comment_num', $this->get('comment_num') + 1);
		$this->save();
		return $id;
	}

	/**
	 * 获取当前的增值业务购买情况
	 * @param int $type 0=购买的增值业务,1=还可以购买的增值业务
	 * @return array
	 */
	public function getTaskService($type = 0) {

		$data=array();

		if($type==0){           //购买的增值业务

			//服务套餐
			$iswaspack=$this->get('was_pack');
			if($iswaspack==1){       //购买了服务套餐
				$data[] = $this->getServices(8);
			}else{

				//标题加粗
				$was_courier=$this->get('was_courier');
				if($was_courier==1)$data[]=$this->getServices(3);

				//标题高亮
				$was_high=$this->get('was_high');
				if($was_high==1)$data[]=$this->getServices(7);

				//任务推广
				$was_promotion=$this->get('was_promotion');
				if($was_promotion==1)$data[]=$this->getServices(6);
			}
			//任务隐藏
			$was_nosearch=$this->get('was_nosearch');
			if($was_nosearch==1)$data[]=$this->getServices(4);

			//稿件隐藏
			$was_showorks=$this->get('was_showorks');
			if($was_showorks==1)$data[]=$this->getServices(5);

		}elseif($type==1){      //还可以使用的增值业务

			//标题加粗
			//$was_courier=$this->getTask('was_courier');
			//if($was_courier==0)$data[]=$this->getServices(3);

			//标题高亮
			//$was_high=$this->getTask('was_high');
			//if($was_high==0)$data[]=$this->getServices(7);

			//任务推广
			$was_promotion=$this->get('was_promotion');
			//if($was_promotion==0)$data[]=$this->getServices(6); 修改时间 2011-2-24 16:19:03
			$data[]=$this->getServices(6);//推广 可以购买多次

			//服务套餐
			//if(count($data)==3){
			//      $data[]=$this->getServices(8);
			//}

			//任务隐藏
			//$was_nosearch=$this->getTask('was_nosearch');
			//if($was_nosearch==0)$data[]=$this->getServices(4);

			//稿件隐藏
			$was_showorks=$this->get('was_showorks');
			if($was_showorks==0)$data[]=$this->getServices(5);
		}

		return $data;
	}

	/**
	 * 获取指定增值业务ID数据
	 * @param int $sid 服务ID
	 * @param int $packid 包ID
	 * @return array
	 */
	public function getServices($sid, $packid = 0){
		if($packid == 0) {
			$model = new zbj_model_fn_servicetype($sid);
			return $model->get();
		} else {
			$item = 'fn_service_type.*, fn_service_pack_detail.discount_price, fn_service_pack_detail.option';
			$cond = array(
				'fn_service_pack_detail.service_id' => $sid,
				'fn_service_pack_detail.pack_id' => $packid);
			$join = array(
				'fn_service_type' =>
				'fn_service_pack_detail.service_id = fn_service_type.service_id');
			$model = new zbj_model_fn_servicepackdetail();
			$service = $model->selectOne($cond, $item, '', '', $join);
			if($service) {
				$service['amount'] = $service['discount_price'];
				$service['option'] && $service['option'] = unserialize($service['option']);
			}
			return $service;
		}
	}

	/**
	 *
	 * @param int $packid
	 * @return Ambigous <boolean, array>
	 */
	public function getPackServices($packid) {
		$cond = array('pack_id' => $packid);
		$model = new zbj_model_fn_servicepackdetail();
		return $model->select($cond)->items;
	}

	/**
	 * 任务补充需求
	 * @param string $content 内容
	 * @param string $files 附件
	 * @return int|false
	 */
	public function addAbout($content, $files=""){

		if(empty($content))return false;

		$item=array(
			'task_id'=>$this->id,
			'dateline'=>$this->_time,
			'content'=>$content,
			'files' =>$files,
			'ip'=>zbj_lib_BaseUtils::getIp(),
		);
		$model = zbj_model_api::get('zbj_model_mk_taskadditional');
		return $model->insert($item);
	}

	/**
	 * 获取任务的健康度 1=好,2中,3差
	 * @return int
	 */
	public function getTaskHealth(){
		$health=$this->get('health');
		if($health==0){
			return 1;
		}elseif($health>7){
			return 1;
		}elseif($health<4){
			return 3;
		}else{
			return 2;
		}
	}

	/**
	 * 获取指定用户的最后交稿
	 * return array
	 */
	public function getLastWorks($userid){
		$userid = (int)$userid;
		if(empty($userid)) return false;
		$model = zbj_model_api::get('zbj_model_mk_works');
		return $model->selectOne(array('task_id'=>$this->id, 'user_id'=>$userid),'*',null,'order by works_id desc');
	}

	/**
	 * 检查该任务是否存在订单
	 * return boolean
	 */
	public function isOrder() {
		$ptype=$this->getTaskToOrderMode();
		$model = zbj_model_api::get('zbj_model_fn_order');
		$rs=$model->selectOne(array('product_pkid'=>$this->id,'ptype'=>$ptype));
		if(empty($rs))
			return false;
		else
			return true;
	}


	/**
	 * 返回当前任务购买推广的天数
	 * @return int
	 */
	public function getPromotionOrderDay() {
		$model = zbj_model_api::get('zbj_model_fn_orderdata');
		$ptype=$this->getTaskToOrderMode();
		$condition=array('product_pkid'=>$this->id,'stype'=>6,'ptype'=>$ptype);
		$rs=$model->selectOne($condition,'sum(num) as day');
		if(empty($rs))
			return false;
		else
			return $rs['day'];
	}

	/**
	 * 删除补充要求
	 * @return boolean
	 */
	public function delTaskAboutLog($id) {
		$model = zbj_model_api::get('zbj_model_mk_taskadditional', $id);
		return $model->del();
	}

	/**
	 * 获取所有补充要求
	 * @return array
	 */
	public function getTaskAboutLog() {
		$model = zbj_model_api::get('zbj_model_mk_taskadditional');
		$result = $model->select(array('task_id'=>$this->id), '*', null, 'order by additional_id desc')->items;
		if ($result) {
			foreach ($result as $key => $value) {
				if ($value['files']) {
					$result[$key]['files'] = unserialize($value['files']);
				}
			}
		}
		return $result;
	}

	/**
	 * 获取补充需求总数
	 */
	public function getTaskAboutCount(){
		$model = zbj_model_api::get('zbj_model_mk_taskadditional');
		$rs=$model->selectOne(array('task_id'=>$this->id),'count(additional_id) as num');
		return $rs['num'];
	}

	/**
	 * 获取没有支付的增值服务订单
	 */
	public function getBuyServiceOrder(){
		$model = zbj_model_api::get('zbj_model_fn_order');
		$rs=$model->selectOne(array('product_pkid'=>$this->id,'stype'=>31,'state'=>0,'ptype'=>22),'order_id',null,'order by order_id asc');
		if(empty($rs))
			return false;
		else
			return $rs['order_id'];
	}

	/**
	 * 特殊情况，更新订单的任务状态
	 */
	public function setTaskOrderState(){
		$model = zbj_model_api::get('zbj_model_fn_order');
		$ptype=$this->getTaskToOrderMode();
		return $model->update(array('product_pkid'=>$this->id,'stype'=>30,'state'=>0,'ptype'=>$ptype),array('task_state'=>$this->get('state')));
	}

	/**
	 * 关闭所有该任务的没有完成的订单
	 * @params int $closeType 0=正常选稿关闭,1=任务中止关闭
	 * @params boolean $isbt 是否支持事务
	 * @return boolean
	 */
	public function closeTaskOrder($closeType=0, $isbt = true) {

		$ptype=$this->getTaskToOrderMode();

		$sale = new zbj_service_deal();
		$sale->setType($ptype);

		if($closeType==0){

			//关闭所有增值服务订单
			$condition=array('product_pkid'=>$this->id,'state'=>0,'ptype'=>$ptype);
			$condition[]="stype in (31)";

			//获取当前任务的订单
			$model = zbj_model_api::get('zbj_model_fn_order');
			$order_list=$model->select($condition,'order_id')->items;

			foreach($order_list as $row) {
				//cancelOrder;
				unset($order);
				$order=$sale->Order($row['order_id']);
				//是否支持事务
				$order->setTransaction($isbt);
				if($order->cancelOrder(0)!==true){
					$this->setError(0,'取消订单失败 '.$row['order_id']);
					return false;
				}
			}

			//标记发布任务订单完成状态
			$condition=array('product_pkid'=>$this->id,'state'=>0,'ptype'=>$ptype);
			$condition[]="stype in (30)";
			$order_list=$model->select($condition,'order_id')->items;
			foreach($order_list as $row){
				//cancelOrder;
				unset($order);
				$order=$sale->Order($row['order_id']);
				//是否支持事务
				$order->setTransaction($isbt);
				if($order->completeOrder()!==true){
					$this->setError(0,'主订单更新失败 '.$row['order_id']);
					return false;
				}
			}

			//其他未支付的订单全部关闭
		}else{
		}

		return true;
	}

	/**
	 * 获取任务中标订单中需要进一步处理的订单
	 * int $user_id 用户id，为0时，为雇主订单,否则为雇主订单
	 * @return int
	 */
	public function getUnhandleOrder($user_id = 0){
		$ptype=$this->getTaskToOrderMode();
		$condition = array(
			"stype"=>16,
			"product_pkid"=>$this->id,
			"state"=>0,
			"ptype"=>$ptype,
		);
		if ($user_id){
			$condition["sl_user_id"] = $user_id;
			$condition["exchange_file_state"] = 0;
		} else {
			$condition["iscfpay"] = 0;
		}
		$model = zbj_model_api::get('zbj_model_fn_order');
		$a_num = $model->selectOne($condition,"COUNT(0) AS num");
		return $a_num["num"];
	}

	/**
	 * 获取单人中标模式的中标订单
	 * @return array
	 */
	public function getWorksOnlyOrder(){
		$ptype=$this->getTaskToOrderMode();
		$condition = array(
			"stype"=>16,
			"product_pkid"=>$this->id,
			"ptype"=>$ptype,
		);
		//$condition[] = "state<2";
		$model = zbj_model_api::get('zbj_model_fn_order');
		$a_order = $model->selectOne($condition);
		return $a_order;
	}

	/**
	 * 获取任务操作日志
	 * @param int $page
	 * @param int $limit
	 * @param string $orderby
	 * @return array
	 */
	public function getTaskActionLogList($page=1,$limit=20,$orderby=""){

		$model = zbj_model_api::get('zbj_model_mk_taskactionlog');
		$model->setCount(true);
		$model->setPage($page);
		$model->setLimit($limit);
		$condition = array(
			"task_id" => $this->id,
		);
		return $model->select($condition,$item="*",$groupby="",$orderby);
	}

	/*
	 * 获取任务下的选稿订单
	 * @return array
	 */
	public function getTaskOkOrder(){
		$model = zbj_model_api::get('zbj_model_fn_order');
		$ptype=$this->getTaskToOrderMode();
		$r = $model->select("product_pkid={$this->id} and stype=16 and state=0 and ptype=$ptype")->items;
		if($r === false) {
			$this->setError(0, '查询数据失败 '. $model->getDbError());
			return false;
		}
		return $r;
	}

	/**
	 * 获取当前悬赏任务的不可用余额记录
	 * @return array
	 */
	public function getTaskUnbalance() {
		//fn_user_unbalance

		//获取发布任务的订单
		$order_id=$this->getPubOrderId();
		if(empty($order_id)){
			$this->setError(0,"无法获取订单");
			return false;
		}

		$model = zbj_model_api::get('zbj_model_fn_userunbalance');
		return $model->selectOne(array("order_id"=>$order_id,"user_id"=>$this->get('user_id')),null,null,'order by unbalance_id desc');
	}

	/**
	 * 获取任务的增值服务费
	 * @return int|false
	 */
	public function getTaskWasFee() {
		$amount=0;
		$ptype=$this->getTaskToOrderMode();
		$condition=array();
		$condition[]="fn_order.ispay=1 and fn_order_data.stype in(3,4,5,6,7,8,33,34,77,80,81,82,83,84,85,86,87,88,98,99,107,108,660,661) and fn_order_data.product_pkid=".$this->id;
		$condition[] = $ptype==23 ? 'fn_order_data.ptype IN (1,2,17,23,22)' : "fn_order_data.ptype IN (22, {$ptype})"; //t5兼容t4转过来的任务
		$leftjoin=array('fn_order'=>'fn_order_data.order_id=fn_order.order_id');
		$model = zbj_model_api::get('zbj_model_fn_orderdata');
		$rs = $model->selectOne($condition,'sum(fn_order_data.price*fn_order_data.num) as total',null,null,$leftjoin);
		$amount = (float)$rs['total'];

		//计算延长选稿期费用
		$day_price = $this->getServices(34);
		$model = zbj_model_api::get('zbj_model_mk_taskaddamount');
		$rs2 = (array) $model->selectOne(array('task_id'=>$this->id,'type'=>2), 'sum(day) as num');
		$amount2 = (float) $rs2['num'] * $day_price['amount'];

		return round((float)($amount + $amount2), 2);
	}


	/**
	 * 获取任务中各自获得的赏金
	 * 实际支付中标赏金=任务中标订单-退款金额+系统选稿的奖金
	 * @return array|false
	 */
	public function getTaskPayFee() {
		/*
		$ptype=$this->getTaskToOrderMode();
		$condition=array('stype'=>16,'product_pkid'=>$this->id,'state'=>1,'ptype'=>$ptype);

		$model = zbj_model_api::get('zbj_model_fn_order');
		$rs=$model->selectOne($condition, 'sum(at_price) as total_price,sum(refund_amount) as total_refund');

		$zbjInAmount = $zbjTax = $vkInAmount = $vkTax = 0;

		$p = $this->getPayType();

		if(empty($p) || !is_array($p)){
			$this->setError(0,'获取任务赏金分配模式失败');
			return false;
		}

		$totalAmount = round(($rs['total_price'] - $rs['total_refund']), 2);
		$vkInAmount = round($totalAmount * $p['option_accept'] , 2);
		$zbjInAmount = round($totalAmount - $vkInAmount , 2);
		*/

		//vk金额
		$vkInAmount = (float)$this->getTaskPayWinFee();

		//平台费用
		$zbjInAmount = (float)$this->getTaskServFee();

		//增值服务金额
		$addAmount = (float)$this->getTaskWasFee();

		//折扣金额（优惠券）
		$discount = (float)$this->getDiscountFee();
		
		//税金
	//	$tax = $vkInAmount * $this->getTaxPoint();

		//$taxPoint = $this->getTaxPoint();
		
		return array(
			'zbjAmount'	=> $zbjInAmount,
			'zbjTax'	=> round($zbjInAmount * $this->getTaxPoint($zbjInAmount),2),
			'vkAmount'	=> $vkInAmount,
			'vkTax'	=> round($vkInAmount * $this->getTaxPoint($vkInAmount),2),
			'addAmount'	=> round($addAmount,2),
			'discount'	=> round($discount,2),
			'zbjPlate'	=> round($zbjInAmount+$addAmount, 2),
			'zbjPlateTax'	=> round(($zbjInAmount+$addAmount)*$this->getTaxPoint($zbjInAmount+$addAmount), 2),
		);
	}



	/**
	 * 获取任务收取的平台服务费
	 * 未考虑退款的情况
	 * @return float|false
	 */
	public function getTaskServFee() {

		//获取奖金分类规则
		$p=$this->getPayType();
		if(empty($p)){
			$this->setError(0,'无法获取任务赏金分配模式');
			return false;
		}

		$charge = 0;

		if($this->get('mode') == 0) {

			//悬赏任务
			if($this->get('allot') == 1 || $this->get('allot') == 2) {

				//单人，多人中标
				//只要保证选稿，收取服务费
				if($this->get('isgpay') == 1) {
					$charge = round($this->get('amount') * (1 - $p['option_accept']), 2);
				}

			}else if ($this->get('allot') == 3) {

				//计件中标
				//按照实际支出来支付服务费
				//获取中标支出
				$amount = $this->getTaskPayWinFee();

				//计算任务实际费用
				$task_amount = $amount / $p['option_accept'];

				//任务金额不能超出实际金额
				$task_amount = $task_amount > $this->get('amount')?$this->get('amount'):$task_amount;

				//计算出提成
				$charge = (float)$task_amount - $amount;

			}
		}else if(in_array($this->get('mode'), array(1,2,3,4,5,6,7,8,9))) {

			//招标及其他类型
			//只要开始工作，收取服务费
			$order = $this->getWorksOnlyOrder();

			if($order['isaccept_buy'] == 1 && $order['isaccept_sl'] == 1) {
				$charge = round($order['price'] * (1 - $p['option_accept']), 2);
			}

		}else if($this->get('mode') == 10) { //新付费需求
			if ($this->get('task_info.close_time') > 1387209600) { //时间截为2013-12-17 00:00:00 //2014－03－04改为读取task_opis计算好的平台费用
				$charge = round($this->get('task_opis.platform_income'), 2);
			} else {
				//确保refund_amount维护准确
				$charge = round(($this->get('hosted_amount') - $this->get('task_info.refund_amount')) * (1 - $p['option_accept']), 2);
			}
		}else if(in_array($this->get('mode'), array(11,12,13))) { //雇佣，服务购买,新招标
			if ($this->get('task_info.close_time') > 1387209600) { //时间截为2013-12-17 00:00:00 //2014－03－04改为读取task_opis计算好的平台费用
				$charge = round($this->get('task_opis.platform_income'), 2);
			} else {
				$order = $this->getWorksOnlyOrder();
				$charge = round(($order['price'] - $order['refund_amount']) * (1 - $p['option_accept']), 2);
			}
		}

		return $charge > 0 ? $charge : 0;
	}

	/**
	 * 获取任务支付的中标赏金
	 * 实际支付中标赏金=任务中标订单-退款金额+系统选稿的奖金
	 * @return float|false
	 */
	public function getTaskPayWinFee() {
		$amount=0;
		$ptype=$this->getTaskToOrderMode();
		$condition=array('stype'=>16,'product_pkid'=>$this->id,'state'=>1);
		if ($ptype == 23 && $this->get('allot') == 3) { //兼容计件任务转过来的
			$condition[] = '`ptype` in (1,23)';
		} else{
			$condition['ptype'] = $ptype;
		}
		$model = zbj_model_api::get('zbj_model_fn_order');
		$rs=$model->selectOne($condition, 'sum(price) as total_price,sum(refund_amount) as total_refund');
		if(empty($rs)){
			//$this->setError(0,'无法获取任务奖金');
			//return false;
		}else{
			$p = $this->getPayType();
			if(in_array((int)$this->get('mode'), array(11,12,13))) { //at_price/price为任务金额
				$amount = round( ($rs['total_price'] - $rs['total_refund']) * $p['option_accept'], 2);
			} else {
				if ($this->get('task_info.close_time') > 1406736001) { //2014-07-31 00:00:01 update_pay
					$amount = round( ($rs['total_price'] - $rs['total_refund']) * $p['option_accept'], 2); //140730 update_pay
				} else {
					$amount = round( ($rs['total_price'] - $rs['total_refund'] * $p['option_accept']), 2); //悬赏的at_price/price是扣除平台费后的金额
				}
			}
		}

		//检查是否有系统选稿
		if($this->get('is_sysselect') == 1) {
			//获取系统选稿的金额
			$sys_amount = $this->getSysSelectAmount($amount);
			if($sys_amount === false){
				$this->setError(0,'获取系统选稿金额错误 '.$this->getError());
				return false;
			}
			$amount += $sys_amount;
		}

		return $amount > 0 ? $amount : 0;
	}


	/**
	 * 获取当前任务系统选稿支出金额
	 * @param $normalAmount 正常的选稿金额
	 * @return float
	 */
	public function getSysSelectAmount($normalAmount = 0) {
		$amount=0;

		//临时指定任务系统选稿支出
		if($this->getId() == 1754305) {
			return 80;
		}

		if($this->get('is_sysselect') != 1) {
			return 0;
		}

		$condition = array(
			"task_id"       =>$this->id,
			"open_state"    =>0,
			"is_sysselect"  =>1,
			"is_sys_reward" =>1,
			"is_sysselect_pay"=>1,
		);
		$model = zbj_model_api::get('zbj_model_mk_works');
		$a_works_list = $model->selectOne($condition,'count(1) as num');
		if (0<$a_works_list['num']){
			//分配给系统选稿的赏金
			$un=$this->getTaskUnbalance();
			if(empty($un)){
				$this->setError(0,'无法获取任务不可用余额记录');
				return false;
			}

			//获取正常的选稿金额
			// 			$ptype=$this->getTaskToOrderMode();
			// 			$condition=array('ptype'=>$ptype,'stype'=>16,'product_pkid'=>$this->id,'state'=>1);
			// 			$model = zbj_model_api::get('zbj_model_fn_order');
			// 			define(DEBUG, 1);
			// 			$rs=$model->selectOne($condition,'sum(at_price) as num');
			$unbalance=$un['amount']-$normalAmount;
			if(0>=$unbalance){
				$this->setError(0,'系统选稿剩余奖金分配错误');
				return false;
			}
			if ($this->get('state') == 4) {
				if (0<$unbalance && $unbalance < 500){
					$shouldPayNum = 5;
				} elseif (500<=$unbalance && $unbalance < 2000 ){
					$shouldPayNum = 10;
				} else{//大于等于2000
					$shouldPayNum = 20;
				}
			} else {
				$sysselector = new zbj_model_mk_sysselector($this->id);
				$shouldPayNum = $sysselector->getNeedNum($unbalance);//应该分给n个人
			}
			if(0>=$shouldPayNum){
				$this->setError(0,'无法获取分配模式');
				return false;
			}
			$price = @($unbalance/$shouldPayNum);     //每个人应该分得a元
			$price = substr(sprintf("%01.3f",$price),0,-1);
			$amount = $price*$a_works_list['num'];
		}
		return (float)$amount;
	}

	/**
	 * 增加专题相关业务统计日志
	 * @param int $ct_type_id 来自哪个专题
	 * @return boolean
	 */
	public function addCountTaskLog($ct_type_id = 0) {
		if(empty($ct_type_id) || empty($this->id)) return false;
		$model = zbj_model_api::get('zbj_model_mk_cttask');
		return $model->insert(array(
			'dateline'=>$this->_time,
			'ymd'=>date('Y-m-d',$this->_time),
			'type'=>0,
			'pkid'=>$this->id,
			'ct_type_id'=>$ct_type_id
		));
	}

	/**
	 * 获取任务分类属性下拉菜单
	 * @param int $id 当前根分类ID
	 * @param int $nowid 当前选中的ID
	 * @param string $abce 前缀字符
	 * @return string
	 */
	function getCatalogSelectTree($id = 0, $nowid = 0, $abce = '') {

		$o=' order by pid asc,catalog_id asc';
		$model = zbj_model_api::get('zbj_model_mk_catalog');
		$cats = $model->select("pid > 0", 'catalog_id,pid,cname', '', $o)->items;
		foreach($cats  as $array) {

			if($nowid == $array['catalog_id']) {
				$output.= "<OPTION value=\"".$array['catalog_id']."\" selected>".$abce.">&nbsp;".$array['cname']."</OPTION>\n";
			} else {
				$output.= "<OPTION value=\"".$array['catalog_id']."\">".$abce.">&nbsp;".$array['cname']."</OPTION>\n";
			}
		}

		return $output;

		$o=' order by catalog_id asc';
		$id=(int)$id;
		$model = zbj_model_api::get('zbj_model_mk_catalog');
		$cats = $model->select("pid=$id", 'catalog_id,pid,cname', '', $o);
		$cat_1=$cats->items;
		$l2_count = 0;
		$abce.="&nbsp;&nbsp;";
		if($cat_1){
			foreach($cat_1 as $array){
				if($nowid == $array['catalog_id']) {
					if(0 == $array['pid']) {
						$output.= "<OPTION value=\"".$array['catalog_id']."\" selected >≡".$array['cname']."≡</OPTION>\n";
					}else
						$output.= "<OPTION value=\"".$array['catalog_id']."\" selected>".$abce.">&nbsp;".$array['cname']."</OPTION>\n";
				}else {
					if(0==$array['pid']) {
						$output.= "<OPTION value=\"".$array['catalog_id']."\" >≡".$array['cname']."≡</OPTION>\n";
					} else
						$output.= "<OPTION value=\"".$array['catalog_id']."\">".$abce.">&nbsp;".$array['cname']."</OPTION>\n";
				}
				$output.=self::getCatalogSelectTree($array['catalog_id'], $nowid, $abce);
			}
		}
		return $output;
	}

	/**
	 * 后台，修改任务模式，金额，赏金分配模式，创建订单,修改订单
	 * 成功后返回订单ID,失败返回false
	 * @param array $data 数据集
	 * @param array $allot 任务分配模式
	 * @param order_id|false
	 */
	public function cpEditTask($data, $allot = array()) {

		//部分属性禁止更改
		//状态
		$is_state = isset($data['state']);

		//托管状态
		$is_hosted = isset($data['hosted']);

		//任务ID
		$is_task_id = isset($data['task_id']);

		if($is_state || $is_hosted || $is_task_id ) {
			$this->setError(0, '部分属性禁止更改，请使用相对应的方法');
			return false;
		}

		//检查状态
		if($this->get('state')>1 || $this->get('hosted') == 1) {

			//该状态某些字段不允许修改
			if(isset($data['mode'], $data['amount'])) {
				$this->setError(0, '部分参数不能修改');
				return false;
			}
		}

		//如果是草稿，直接切换到新任务
		if($this->get('state') == 0) {
			$data['state'] = 1;
		}

		//检查赏金分配方案
		if(($data['allot'] == 2 || $data['allot'] == 3) && empty($allot)) {
			$this->setError(0, '请提供赏金分配模式');
			return false;
		}

		//原来属性
		$channel_id = $this->get('channel_id');

		//诚意金
		$cyj_id = $this->get('cyj_id');

		//任务模式
		$mode = $this->get('mode');

		try {
			//开始事务
			$this->_beginTransaction('mk');
			$this->_beginTransaction('fn');
			$this->_beginTransaction('mb');

			//数据都合法
			if($this->edit($data) !== true) {
				throw new Exception('设置属性失败，原因'.$this->getError());
				return false;
			}

			//获取订单
			$orders = $this->getPubOrder();

			//如果是招标已支付，不能修改为其他模式
			if($mode != $this->get('mode') && $orders['ispay'] == 1) {
				throw new Exception('订单已支付，请取消已支付的发布订单后修改为其他交易模式');
			}

			//如果是已经支付的速配任务，切换时不能更换诚意金规则
			if($cyj_id != $this->get('cyj_id') && $mode == 6 && $orders['ispay'] == 1) {
				throw new Exception('已支付的速配任务不能更改诚意金规则,可能2各分类诚意金规则不一致所致');
			}

			//更新订单
			$order_id = $this->upTaskPubOrder();
			if($order_id === false) {
				throw new Exception('订单更新失败，原因'.$this->getError());
			}

			//赏金分配模式
			if(!empty($allot)) {
				if($this->editAllot($allot, $this->get('allot'), $this->get('is_weibo')) !== true) {
					throw new Exception('保存分配模式失败，原因'.$this->getError());
				}
			}

			$this->_commit('fn');
			$this->_commit('mb');
			$this->_commit('mk');

			return true;
		} catch(Exception $e) {
			$this->setError(0, $e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('fn');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 任务延期
	 * @param int $day 延期时间
	 * @return boolean
	 */
	public function upExtension($day){

		if(0>=$day){
			$this->setError(0,'时间参数错误');
			return false;
		}

		if ($this->get('allot') ==3 && $this->get('ext_num')>0) {
			$this->setError(0,'计件任务只能延期一次');
			return false;
		}
		$endtime=$this->get("endtime")>=$this->_time?$this->get("endtime")+$day*86400:$this->_time+$day*86400;
		$endymd=date("Y-m-d",$endtime);

		//更新选稿时间
		$ext_selectime=$endtime+(zbj_lib_Constant::TASK_SELECT_DAY*86400);

		$item=array(
			'task_id'=>$this->id,
			'user_id'=>$this->get('user_id'),
			'nickname'=>$this->get('nickname'),
			'dateline'=>$this->_time,
			'dateymd'=>date('Y-m-d', $this->_time),
			'ip'=>zbj_lib_BaseUtils::getIp(),
			'type'=>1,
			'day'=>$day,
		);

		$model = zbj_model_api::get('zbj_model_mk_taskaddamount');
		$add_id = $model->insert($item);

		if(0 >= $add_id) {
			$this->setError(0, '添加记录失败');
			return false;
		}

		$this->set('ext_selectime', $ext_selectime);
		$this->set('endtime', $endtime);
		$this->set('endymd', $endymd);
		$this->set('ext_num', $this->get('ext_num') + 1);
		$this->set('ext_time', $this->_time);

		if($this->save() !== true) {
			$this->setError(0, '更新任务失败');
			return false;
		}

		$this->addTaskActionLog('成功延期：'.$day.'天');
		return true;
	}

	/**
	 * 更新报名表
	 * @param object $user 用户对象
	 * @return boolean
	 */
	public function upSign($user) {

		$data = array();


		$works_model = zbj_model_api::get('zbj_model_mk_works');
		if($this->get('type') == 1) {
			//发帖比赛
			$works = $works_model->selectOne(array('task_id'=>$this->id, 'user_id'=>$user->getId()),'ft_effective as success_num, ft_all as num');
			$isworks=1;
			$works_num = $works['num'];
			$success_num = $works['success_num'];

		}else{
			//普通任务
			$works = $works_model->selectOne(array('task_id'=>$this->id,'user_id'=>$user->getId(),'open_state'=>0),'count(1) as num,sum(issuccess) as num2,sum(isalternative) as num3,sum(is_tks) as num4,sum(iseliminate) as num5,sum(ft_invalid) as num6');

			// 派单FIX 保证屏蔽后，派单状态正确
			$sign = $this->getUserSign($user->getId());
			$isworks = $sign['isworks'] == 1 ? 1 : ($works["num"]>0?1:0);

			$works_num = $works['num'];
			$success_num = $works["num2"]>0?$works['num2']:0;
			$data['alternative_num'] = $works["num3"]>0?$works['num3']:0;
			$data['tks_num'] = $works["num4"]>0?$works['num4']:0;
			$data['eliminate_num'] = $works["num5"]>0?$works['num5']:0;
			$data['invalid_num'] = $works["num6"]>20 ? intval($works['num6']/21):0;
		}
		/**
		// 无效稿件
		$count = $works_model->selectOne(array(
			'task_id' => $this->id,
			'user_id' => $user->getId(),
			'ft_invalid' => 21),
			'COUNT(1) AS invalid_num');
		$data['invalid_num'] = $count['invalid_num'];

		// 淘汰稿件
		$count = $works_model->selectOne(array(
			'task_id' => $this->id,
			'user_id' => $user->getId(),
			'iseliminate' => 1),
			'COUNT(1) AS eliminate_num');
		$data['eliminate_num'] = $count['eliminate_num'];
		*/
		$data['isworks'] = (int)$isworks;
		$data['works_num'] = (int)$works_num;
		$data['success_num'] = (int)$success_num;
		if($this->isVipTask() and $data['works_num']>0) $data['vip_num'] = 1;
		if($this->upSignInfo($user->getId(), $data) === false) {
			$this->setError(0,'更新失败 '. $this->getError());
			return false;
		}

		//更新任务已加雇主计划的用户缓存
		$xiaobao_mem_key = "task.zhubajie.com.detail.filter.userids.{$this->id}";
		$cache = new zbj_lib_cache('memcache');
		$xiaobao_userids = $cache->get($xiaobao_mem_key);
		if ( empty($xiaobao_userids) ) {
			$xiaobao_userids = array();
		}
		$srvsecurity = new zbj_service_security();
		$srvsecurity_status = $srvsecurity->getSecurityUserByUserId($user->getId());
		if ( $srvsecurity_status['issecurityuser'] == '1' ) {
			if ( !in_array($user->getId(), $xiaobao_userids) ) {
				$xiaobao_userids[] = $user->getId();
				$cache->set($xiaobao_mem_key, $xiaobao_userids,3600);
			}
		}

		return true;
	}

	/**
	 * 检查指定用户是否报名
	 * @param int $userid 用户ID
	 * @return boolean
	 */
	public function isUserSign($userid) {

		if($this->getUserSign($userid)) {
			return true;
		}else{
			return false;
		}
	}

	/**
	 * 获取报名数据
	 * @param int $userid 用户ID
	 * @return array
	 */
	public function getUserSignId($userid) {
		if($sign = $this->getUserSign($userid)) {
			return $sign['sign_id'];
		}else{
			return false;
		}
	}

	/**
	 * 获取报名数据
	 * @param int $userid 用户ID
	 * @return array
	 */
	public function getUserSign($userid) {

		$userid = (int)$userid;
		if(empty($userid))return false;

		$model = zbj_model_api::get('zbj_model_mk_tasksign');
		return $model->selectOne(array("task_id"=>$this->id, "user_id"=>$userid));
	}

	/**
	 * 报名参加任务
	 * @param object $user 用户对象
	 * @param int $from    0来自报名,1来自交稿
	 * @param boolean $is_success   是否中标
	 * @return boolean
	 */
	public function addSign($user, $from = 0, $is_success = false, $isinvite=0) {

		try {
			//检查是否报名
			if($this->isUserSign($user->getId())) {
				throw new Exception('已经报名过了');
			}

			$item=array(
				'task_id'=>$this->id,
				'user_id'=>$user->getId(),
				'nickname'=>$user->get('nickname'),
				'dateline'=>$this->_time,
				'dateymd'=>date('Y-m-d', $this->_time),
				'ip'=>zbj_lib_BaseUtils::getIp(),
				'works_num'=>$from==0?0:1,
				'isworks'=>$from==0?0:1,
				'works_lasttime'=>$from==0?0:$this->_time,
				'success_num'=> $is_success?1:0,
				'vip_num'=>0
			);
			if($this->isVipTask()) $item['vip_num'] = 1;
			$item['isinvite'] = intval($isinvite);
			$model = zbj_model_api::get('zbj_model_mk_tasksign');
			$sign_id = $model->insert($item);

			if($sign_id === false) {
				throw new Exception('插入数据时失败');
			}

			//更新报名总数
			if($isinvite == 0){
				$this->set('sign_num', $this->get('sign_num') + 1);
				if($this->save() === false) {
					throw new Exception('任务更新失败');
				}
			}
			$this->addUseWebim($user->getId());
			return $sign_id;
		}catch(Exception $e) {
			$this->setError(0, $e->getMessage());
			return false;
		}
	}

	/**
	 * 会员是否有资格参与当前任务
	 * @param object $user 用户对象
	 * @return boolean
	 */
	public function isAllowSign($user) {

		//任务状态
		if($this->get('state') != 2) {
			$this->setError(0,'当前需求状态不允许操作');
			return false;
		}

		//自己不能参加自己的任务
		if($user->getId() == $this->get('user_id')) {
			$this->setError(0,'自己不能参加自己的需求');
			return false;
		}

		//任务时间
		if($this->_time > $this->get('endtime')) {
			//$this->setError(0,'需求已经到期，不能继续投标');
			//return false;
		}

		//账号状态
		if($this->isAllowPost($user->getId()) !== true) {
			$this->setError(0,'账号被限制不允许此操作');
			return false;
		}

		//是否已经成为服务商
		//$expand = $user->get("info.options")?unserialize($user->get("info.options")):array();
		//$expand2 = $user->get("info.expand")?unserialize($user->get("info.expand")):array();
		//$isfws = $expand['isfws'] || $expand2['isfws'];
		/*$fwstaskModel = zbj_model_api::get("zbj_model_mb_fwstask");
		$isfwsRs = $fwstaskModel->selectOne("stauts>0 and task_id=1 and user_id ='{$user->get("info.user_id")}'");
		$isfws = $isfwsRs?1:$user->get("info.isfws");
		if(!$isfws) {
			$this->setError(-8, '该交易只允许服务商进行投标,您还未申请为服务商');
			return false;
		}*/

		/*分类是否需要实名认证
		if($this->get('catalog.need_rname') && !($user->get('realstatus') == 2 || $user->get('bankstatus') == 2)) {
			$this->setError(-1, '需要实名或银行卡认证后才能参与 '.$this->getError());
			return false;
		}
		*/

		//分类是否需要手机认证
		if($user->get('mobilestatus') != 1) {
			$this->setError(-2, '需要手机认证才能参与 '.$this->getError());
			return false;
		}

		//计件任务强制实名认证用户参加
		//if($this->get('allot') == 3 && !($user->get('realstatus') == 2 || $user->get('bankstatus') == 2 || $user->get('mobilestatus') == 1)) {
		//	$this->setError(-1, '计件任务需要手机认证、实名认证或银行卡认证通过任意一项后才能参与 '.$this->getError());
		//	return false;
		//}

		//任务是否限制身份认证
		if($this->get('task_info.isban_rz') && !($user->get('realstatus') == 2 || $user->get('bankstatus') == 2)) {
			$this->setError(-1, '需要实名或银行卡认证后才能参与 '.$this->getError());
			return false;
		}

		//参与条件
		$isauth = $user->get('info.isauth');
		$realtype = $user->get('info.realtype');

		//要求认证类型
		$is_sv_personal = $this->get('task_info.is_sv_personal');

		//工作室认证取消
		//$is_sv_studio = $this->get('task_info.is_sv_studio');

		$is_sv_company = $this->get('task_info.is_sv_company');

		//是否必须要服务商
		$is_sv = $is_sv_personal == 1 || $is_sv_company == 1;

		if($is_sv) {

			//是否是符合类型的认证服务商
			if(!((($is_sv_personal == 1 && $realtype == 1) || ($is_sv_company == 1 && $realtype == 2)) && $isauth == 1)) {
				$this->setError(-3, '认证服务商才能参与,或认证类服务商类型和任务要求服务商类型不一致');
				return false;
			}

			//检查用户当前保证金是否充足
			$min_deposit = $user->getMinDeposit();
			if($user->getAuthDeposit() < $min_deposit) {
				$this->setError(-7, '认证服务商保证金不足，请保证可用最低保证金:'.$min_deposit.'元');
				return false;
			}
		}

		//任务能力等级要求

		//获取当前用户等级
		$user_level = $user->getAbilityLevel();
		if($this->get('task_info.abl_level') && $this->get('task_info.abl_level') > $user_level) {
			$this->setError(-4, '需要能力等级为猪'.$user_level.'戒及以上才能参与 '.$this->getError());
			return false;
		}
		if($user_level == 0){
			$quotamodel = new zbj_model_mb_quotanums();
			$quotacondi = array('user_id'=>$user->get('user_id'),'quota_type'=>1,'ymd'=>date("Y-m-d",$this->_time));
			$quota = $quotamodel->selectOne($quotacondi, "nums");
			if($quota['nums']>10){
				$this->setError(-10, "由于能力等级限制，您每天只能投标10次，请明天再来。");
				return false;
			}
		}

		//分类的技能要求
		//临时取消分类的技能要求,观察是否因此影响到投标积极性 2011.11.17 17:45
		/**
		if($this->get('catalog.is_skill') && !$this->isMatchCatalogSkill($user)) {
			$this->setError(-5, '不符合任务分类的技能要求 '.$this->getError());
			return false;
		}
		 */

		//获取任务所需技能
		/*if(!$this->isMatchTaskSkill($user)) {
			$this->setError(-6, $this->getError());
			return false;
		}*/

		return true;
	}

	/**
	 * 匹配该任务最适合的服务商
	 * @param int $num 服务商数量
	 * @param int $offset 偏移数量
	 * @return array
	 */
	public function getMatchUser($num = 20, $offset = 0) {

		$cache_name = 'zbj.service.task.base.getTopService.top';

		$solr = new SSolr(zbj_lib_Constant::TALENT_SEARCH_IP, '8080', '/solr/core1');

		if (!$solr->ping()) {
			return false;
		}

		//条件
		$condtion = array();

		//二级分类

		//分类是否需要实名认证
		if($this->get('catalog.need_rname')) {
			$condtion[] = '(realstatus:2 OR bankstatus:2)';
		}

		//分类是否需要手机认证
		if($this->get('catalog.need_mobile')) {
			$condtion[] = 'mobilestatus:1';
		}

		//任务是否限制身份认证
		if($this->get('task_info.isban_rz')) {
			$condtion[] = '(realstatus:2 OR bankstatus:2)';
		}

		//要求认证类型
		$is_sv_personal = $this->get('task_info.is_sv_personal');

		//工作室认证取消
		//$is_sv_studio = $this->get('task_info.is_sv_studio');

		$is_sv_company = $this->get('task_info.is_sv_company');

		//是否必须要服务商
		$is_sv = $is_sv_personal == 1 || $is_sv_company == 1;

		if($is_sv) {

			$condtion[] = 'isauth:1';

			//是否是符合类型的认证服务商
			if($is_sv_personal && $is_sv_company) {
				$condtion[] = '(realtype:1 OR realtype:2)';
			}else if($is_sv_personal) {
				$condtion[] = 'realtype:1';
			}else {
				$condtion[] = 'realtype:2';
			}

		}

		//获取当前用户等级
		if($this->get('task_info.abl_level')) {
			$ability = zbj_lib_BaseUtils::getLevelToAbility($this->get('task_info.abl_level'));
			$condtion[] = "ability:[$ability TO *]";
		}


		//任务分类及任务本身对技能的要求
		$skill= array();
		$task_skill = (array)$this->getTaskSkill();
		if(!empty($task_skill)) {
			//获取任务扩展属性关联的技能

			foreach($task_skill as $row) {
				foreach($row['skill'] as $row_row) {
					$skill[] = $row_row['skill_id'];
				}
			}

		}else if($this->get('catalog.is_skill')) {
			//分类的技能要求
			$catalog_skill = (array)$this->getCatalogSkill();

			foreach($catalog_skill as $row) {
				$skill[] = $row['skill_id'];
			}
		}

		if(!empty($skill)) {
			$condtion[] = "cata1:".join(' ', $skill);
		}

		$where = join(' AND ', $condtion);

		$where = $where ? $where : 'isauth:1';

		$result = $solr->search($where, $offset, $num, array('sort'=>'isauth desc,orderscore desc,lastordernum desc,ability desc,user_id asc'));

		$i=0;
		if($result->response->docs){
			foreach ( $result->response->docs as $item => $fields ) {
				foreach ( $fields as $key => $value ) {
					$data[$i][$key]=$value;
				}
				$i++;
			}
		}

		return $data;

	}

	/**
	 * 返点
	 */
	public function getRebateAmount($amount) {
		return $amount * 0.1;
	}

	/**
	 * 任务设置能力值及现金奖励
	 * 最大倍数不能超过2倍
	 * @param int $cash 奖励的比例 例如额外奖励10%的值是10;
	 * @param int $ability 额外奖励的能力值比例,按百分比;值100就是最终得到2倍的能力值,150最终得到2.5倍能力值
	 * @return boolean
	 */
	public function setTaskReward($cash = NULL, $ability = NULL) {

		if($cash === NULL && $ability === NULL) {
			$this->setError(0, '请设置奖励方式');
			return false;
		}

		//读取主表
		$this->setDbEntry();

		if($this->get('state') != 2) {
			$this->setError(0, '当前任务状态不允许此操作');
			return false;
		}

		//计件不支持此功能
		if($this->get('allot') == 3) {
			$this->setError(0, '计件任务不支持该功能');
			return false;
		}

		//检查是否已经有选择订单
		if($this->getOneWinOrder()) {
			$this->setError(0, '任务已开始选稿，不能使用奖励配置');
			return false;
		}

		$log = '设置了任务奖励为：';

		if($cash !== NULL) {
			//设置奖励比例
			$cash = (int)$cash;

			if(200 < $cash) {
				$this->setError(0, '奖励不能任务的2倍');
				return false;
			}else if (0 > $cash) {
				$this->setError(0, '奖励不能为负值');
				return false;
			}


			$this->set('task_info.reward_cash', $cash);

			$log .= '现金额外奖励'.$cash.'%';
		}

		if($ability !== NULL) {
			//设置能力值奖励比例

			$ability = (int)$ability;

			if(200 < $ability) {
				$this->setError(0, '奖励不能超过2倍');
				return false;
			}else if (0 > $ability) {
				$this->setError(0, '奖励不能为负值');
				return false;
			}

			$this->set('task_info.reward_ability', $ability);

			$log .= ' 能力值额外奖励'.$ability.'%';


		}

		//写入日志
		$this->addTaskActionLog($log, false);

		return $this->save();
	}

	/**
	 * 设置交易号
	 * @return string
	 */
	public function setTradeNo($trade_no = NULL) {
		if($trade_no === NULL)
			$trade_no = zbj_lib_BaseUtils::getPayNoid();
		return $this->trade_no = $trade_no;
	}

	/**
	 * 获取交易号
	 * @return string
	 */
	public function getTradeNo() {
		return $this->trade_no;
	}

	/**
	 * 更新报名表数据
	 * @param int $user_id 用户ID
	 * @param array $sign_info 报名数据
	 * @return boolean
	 */
	public function upSignInfo($user_id, $sign_info = array()) {

		if(isset($sign_info['sign_id'])) {
			$sign_id = $sign_info['sign_id'];
		}else {
			//检查是否报名
			if(!($sign_id = $this->getUserSignId($user_id))) {
				$user = new zbj_service_user($user_id);
				if(($sign_id = self::addSign($user)) == false) {
					$this->setError(0,'插入报名数据时失败'. $this->getError());
					return false;
				}
			}
		}

		if(empty($sign_id)) {
			$this->setError(0, '报名参数错误');
			return false;
		}
		if(empty($sign_info)) {
			return true;
		}

		$sign_model = zbj_model_api::get('zbj_model_mk_tasksign', $sign_id);

		foreach($sign_info as $key=>$val) {
			$sign_model->set($key, $val);
		}

		return $sign_model->save();
	}

	/**
	 * 获取指定资金需要的服务费
	 * @return float
	 */
	public function getCharge($amount) {

		$p = $this->getPayType();
		if(empty($p)){
			$this->setError(0,'无法获取任务赏金分配模式');
			return false;
		}

		$charge = round($amount * (1 - $p['option_accept']), 2);

		if($charge >= $amount) {
			$this->setError(0,'服务费金额过大');
			return false;
		}

		return $charge;
	}

	/**
	 * 获取任务税点
	 * @param float $all_income 服务商单任务总收入（非本次打款金额），没有填写，默认按最高税率征收 
	 * @return float
	 */
	public function getTaxPoint($all_income = false) {				
		if($all_income === false && $this->get('allot')<=1){
			$order = $this->getOneWinOrder(null,null);
			if(empty($order['order_id'])){
				$all_income = intval($all_income);
			//	throw new Exception('提取中标订单信息失败');
			}else{
				$refunded = in_array($order['refund_state'],array(1,2))?$order['refund_amount']:0;
				$all_income = round($order['at_price']-$refunded,2);
			}
		}
		
		$all_income = $all_income<=0?20001:$all_income;	// 默认以最高税点收取
		
		if($all_income <= 500){
			$tax = 0.047621;
		}else if($all_income > 500 && $all_income <= 20000){
			$tax = 0.047621;
		}else{
			$tax = 0.186097;
		}
		/*
		if($this->get('paytype_id') == 3){
			$bill = $this->getBillInfo();
			if($bill){
				if($bill['is_net'] == 1){
					$tax = 0.0384466;
				}
			}else{
				if(empty($order)){
					$order = $this->getOneWinOrder(null,null);
				}
				if($order['sl_user_id']){
					$payUser = new zbj_service_user($order['sl_user_id']);
					if($payUser->isVirtualTaxpayer() === true){
						$tax = 0.0384466;
					}
				}
			}
		}
		*/
		
		return $tax;
	}


	/**
	 * 转为悬赏任务
	 * @param $isBuy true雇主操作   false后台操作
	 * @param $catalog array  分类相关属性 雇佣需要
	 * @return $taskID int 新的任务号
	 */
	protected function createContest($isBuy=true,$catalog=array()){
		$task = $this->get();
		$task["task_cont.content"] = $this->get('task_cont.content');
		//取得任务附件
		$fileList  = $this->getMany('task_file');
		foreach($fileList as $k => $v){
			unset($fileList[$k]['file_id']);
			unset($fileList[$k]['task_id']);
		}
		$task_info = $this->get('task_info.*');
		unset($task['task_id']);
		unset($task['noid']);
		$task["mode"] = 0;
		$task['industry_id'] = $catalog['industry_id']?$catalog['industry_id']:$task['industry_id'];
		$task['channel_id'] = $catalog['channel_id']?$catalog['channel_id']:$task['channel_id'];
		$task['catalog_id'] = $catalog['catalog_id']?$catalog['catalog_id']:$task['catalog_id'];
		$task['catalog2id'] = $catalog['catalog2id']?$catalog['catalog2id']:$task['catalog2id'];
		$task["state"] = 0;
		$task["works_num"] = 0;
		$task["sign_num"] = 0;
		$task["ispublicity"] = 0;
		$task["publicity_outime"] = 0;
		$task["bill_state"] = 0;
		//$task["manager_id"] = 0;
		//$task["manager_name"] = '';
		//$task["m_is_at"] = 0;
		$option['works']['dieout_num']  =  0;
		$option['works']['option_num']  =  0;
		$option['works']['success_num'] =  0;
		$option['works']['review_num']  =  0;
		$task["task_info.option"] = $option;
		$task["createtime"] = $this->_time;
		$task["createymd"] = date("Y-m-d",$this->_time);
		$newTask = new zbj_service_task_contest();
		$taskID = $newTask->create($task,$fileList);
		if($taskID === false){
			$this->setError(0,"任务创建失败原因:".$newTask->getError());
			return false;
		}
		$task['allot'] = 1;
		$task['paytype_id'] = 1;
		$task['isgpay'] = 1;
		$task['task_info.is_sv_personal'] = $task_info['is_sv_personal'];
		$task['task_info.is_sv_company']  = $task_info['is_sv_company'];
		$task['task_info.isban_rz'] 	  = $task_info['isban_rz'];
		$task['task_info.abl_level'] 	  = $task_info['abl_level'];
		//更改其它一些属性
		unset($task['state']);
		unset($task['hosted']);
		unset($task['catalog2id']);
		$contenstTask = new zbj_service_task_contest($taskID);
		if ($contenstTask->pubTaskTwo($task) === false){
			$this->setError(0,"更改失败:原因".$contenstTask->getError());
			return false;
		} else {
			//更新统计
			$oldOption = $this->get("task_info.option");
			$oldOption = unserialize($oldOption);
			$oldOption['t_task_id'] = $taskID;
			$this->set("task_info.option",serialize($oldOption));
			$this->set("task_opis.t_task_id",$taskID);
			$this->save();
			//更新统计
			$contenstTask->set("task_opis.f_task_id",$this->id);
			$contenstTask->save();
			//添加任务日志
			$this->addTaskActionLog("该任务被转为悬赏任务：任务号：{$taskID}",$isBuy);
			$contenstTask->addTaskActionLog("该任务是由{$this->id}号转模式。",$isBuy);
			return $taskID;
		}
	}

	/**
	 * 更新用户表情
	 * @param object $user 用户对象
	 * @return boolean
	 */
	public function visitor($user, $face_type = 0) {

		$data = array();
		$user_id = $user->getId();
		$nickname = $user->get('nickname');

		if(empty($user_id) || empty($nickname)) {
			$this->setError(0, '无法获取用户信息');
			return false;
		}

		$model = zbj_model_api::get('zbj_model_mk_taskvisitor');

		if($visitor = $model->selectOne(array('task_id'=>$this->id, 'user_id'=>$user_id), 'visitor_id,face_type')) {
			if($face_type != $visitor['face_type']) {
				$model->setPkId($visitor['visitor_id']);
				$model->set('face_type', $face_type);
			}
		}else {
			$model->set('task_id', $this->id);
			$model->set('face_type', $face_type);
			$model->set('dateline', $this->_time);
			$model->set('dateymd', date('Y-m-d', $this->_time));
			$model->set('user_id', $user_id);
			$model->set('nickname', $nickname);
			$model->set('ip', zbj_lib_BaseUtils::getIp());
		}

		return $model->save() === false ? false : true;
	}

	/**
	 * 添加和谁在一起
	 * @param int $task_id 任务ID
	 * @param array $users 数据
	 * @return boolean
	 */
	public function addTogether($task_id, $data = array()) {

		$data = (array) $data;
		$model = $this->model('task_together');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		foreach($data as $val) {
			$val['task_id'] = $task_id;
			$val['dateline'] = $this->_time;
			$val['dateymd'] = date('Y-m-d', $this->_time);
			if(!$model->insert($val)) {
				$this->setError(0,'保存失败,'.$model->getError().$model->getDbError());
				return false;
			}
		}
		return true;
	}

	/**
	 * 返回任务的赏金支付比例
	 * @return folat
	 */
	function getTaskPayTypePer(){
		$model = zbj_model_api::get('zbj_model_mk_taskpaytype');
		$paytype_id = $this->get("paytype_id");
		$rs = $model->selectOne("paytype_id={$paytype_id}");
		return $rs['option_accept'];
	}

	/**
	 * ==================
	 * 以下为T5新增方法
	 * @author 继安
	 * ==================
	 */
	/**
	 * 标签转分类
	 * @param array $tag
	 * @return boolean
	 */
	function tag2catalog($tag = array()){
		$this->set("industry_id", intval($this->get("industry_id")));
		$this->set("channel_id", intval($this->get("channel_id")));
		$this->set("catalog_id", intval($this->get("catalog_id")));
		$this->set("catalog2id", intval($this->get("catalog2id")));
		if(intval($this->get('category_id'))==0 && $tag){
			foreach ($tag as $v){
				$srvTag = new zbj_service_tag($v['tag_id']);
				if($srvTag->get('catalog2id')){
					$this->set("category1id", $srvTag->get('industry_id'));
					$this->set("category2id", $srvTag->get('channel_id'));
					$this->set("category_id", $srvTag->get('catalog2id'));
					break;
				}
			}
		}
		return true;
	}

	/**
	 * 分类转标签
	 * @param array $catalog
	 * @return array
	 */
	function catalog2tag($catalog = array()){
		if($catalog['category_id'] > 0){
			$category = new zbj_service_category($catalog['category_id']);
			return (array)$category->getTag();
		}
		return array();
	}

	/**
	 * 处理任务的邀请
	 * @param array $friendArr
	 * @param int 是否立即发送
	 * @return boolean
	 */
	function inviteFriend($task_id, $friendArr = array(), $issend = 1){
		if(!$friendArr){
			return true;
		}
		$inviteModel = new zbj_model_mk_taskinvite();
		foreach ($friendArr as $k=>$v){
			$f = new zbj_model_mb_followuser();
			$rs = array();
			$rs = $f->selectOne("follow_user_id={$v['friend_id']} and user_id={$v['user_id']}", '*');
			$iRs = $inviteModel->selectOne("task_id=$task_id and user_id={$v['friend_id']}");
			if($rs['user_id'] and !$iRs){
				$invite = array();
				$invite['task_id'] = $task_id;
				$invite['user_id'] = $rs['follow_user_id'];
				$invite['nickname'] = $rs['follow_nickname'];
				$invite['i_user_id'] = $rs['user_id'];
				$invite['i_nickname'] = $rs['nickname'];
				$invite['dateline'] = $this->_time;
				$invite['dateymd'] = date("Y-m-d", $this->_time);
				$invite['state'] = ($issend == 1) ? 0 : 2;
				if($inviteModel->insert($invite) === false){
					$this->setError(0, $inviteModel->getDbError());
					return false;
				}
			}
		}
		$numRs = $inviteModel->selectOne("task_id=$task_id", "count(*) as num");
		$this->setId($task_id);
		$this->set("task_info.invited", $numRs['num']);
		$this->save();
		return true;
	}

	/**
	 * 保存任务标签
	 * @param int $task_id
	 * @param array $tag
	 * @param int $isDel 0不删除之前的 1删除
	 * @return boolean
	 */
	function saveTag($task_id, $tag = array(), $isDel = 0){
		$model = $this->model('task_tag');
		if(!is_object($model)) {
			$this->setError(0,'没有找到对象关系');
			return false;
		}
		if($isDel == 1){
			$model->delete(array('task_id'=>$task_id));
		}
		if($tag){
			$errNum = 0;
			$succNum = 0;
			foreach($tag as $val) {
				$val = array('tag_id' => $val['tag_id']);
				//检查是否已经存在
				if($model->selectOne(array('task_id'=>$task_id,'tag_id'=>(int)$val['tag_id']), 'task_tag_id')) {
					$errNum++;
					continue;
				}
				$val['task_id'] = $task_id;
				if(!$model->insert($val)) {
					$this->setError(0,'任务标签表保存失败,'.$model->getError().$model->getDbError());
					return false;
				}
				$succNum++;
				if($succNum>=5){
					break;
				}
				if($errNum>0){
					$this->setError(-10, "有{$errNum}个标签存在重复");
				}
			}
			//重新推送
			$feed = new zbj_service_feed();
			$feed->update($task_id, 1);
		}
		$this->model()->upTaskSearch($task_id,'U_T');
		return true;
	}

	/**
	 * 获取任务的标签信息
	 * @return array $tagArr
	 */
	function getTaskTag(){
		$tag = $this->getMany("task_tag");
		$tagArr = array();
		if($tag){
			foreach($tag as $k=>$v){
				$srvTag = new zbj_service_tag($v['tag_id']);
				if ($srvTag->get('tag_id')) {
					$tagArr[$k]['tid'] = $srvTag->get('tag_id');
					$tagArr[$k]['name'] = $srvTag->get('tag_name');
				}
			}
		}
		return $tagArr;
	}

	/**
	 * 更新用户最后一次对任务的操作
	 * @param object $srvUser 操作用户对象
	 * @param int $type 1评论 2交稿 3收藏 4发布
	 * @return boolean
	 */
	function setLastOperation($srvUser, $type){
		$taskOption = $this->get('task_info.option');
		$taskOption = unserialize($taskOption);
		$mode = $this->get('mode');
		if(!in_array($mode,array(11,12)) && empty($taskOption)){
		//	$this->setError(0, '获取需求扩展数据失败');
		//	return false;
		}
		$taskOption['lastoperation'] = array('dateline'=>$this->_time,'type'=>$type,'user_id'=>$srvUser->get('user_id'),'nickname'=>$srvUser->get('nickname'));
		$this->set('task_info.option', serialize($taskOption));
		if($this->save() === false){
			$this->setError(0, '更新最后操作错误'.$this->getError());
			return false;
		}
		$this->model()->upTaskSearch($this->id,"U");
		return true;
	}

	/**
	 * 获取收藏任务的人的列表
	 */
	function getTaskFav() {
		$model = zbj_model_api::get('zbj_model_mb_fav');
		return $model->select('type=3 and objectid='.$this->id)->items;
	}

	/**
	 * 创建更新任务的动态
	 * @param string $m 可选add，update
	 */
	function taskFeed($m = 'add', $task_id=0){
		$task_id = $this->id ? $this->id : $task_id;
		if(in_array($m, array('add','update'))){
			$srvFeed = new zbj_service_feed();
			if($srvFeed->$m($task_id, 1) === false){
				$this->setError(0, $srvFeed->getError());
				return false;
			}
		}else{
			$this->setError(0, '参数错误');
			return false;
		}
		return true;
	}

	/**
	 * 获取任务附件中的1张图片
	 */
	function getOnePicFile(){
		if($this->id){
			return $this->model("task_file")->selectOne("task_id={$this->id} and filext in ('jpg','gif')","","","order by file_id asc");
		}
		return false;
	}

	/**
	 * 添加计划任务通知
	 * @param int $type 参考wiki
	 */
	function corntabSendMsg($type){
		$sendMsg = new zbj_model_mk_tasksendmsg();
		return $sendMsg->add($this->id, $type);
	}

	/**
	 * 获取中标订单中分期支付后剩余的金额（含除了0.8的）
	 * @param int $order_id
	 * @return int
	 */
	function getOrderPaySum($order_id){
		$sale=new zbj_service_deal();
		$type = $this->getTaskToOrderMode();
		$sale->setType($type);
		$order=$sale->Order($order_id);
		if(!$order->get('order_id')){
			$this->setError(0, "获取订单出错");return false;
		}
		$imDB = new zbj_model_mk_installment();
		$sum = $imDB->getOrderPaySum($order_id);
		$accept = $this->getPayType();
		if($accept === false){
			return 0;
		}
		$sum = sprintf('%0.2f', $order->get('at_price')-$sum);

		//2014.7.24 730_update_pay
		//return round($sum / $accept['option_accept'], 2);
		return round($sum, 2);
	}

	/**
	 * 将需求增加到威客奖金的计算队列
	 * @return boolean
	 */
	public function addRewardCron($order_id = 0) {
		//验证交易模式
		if(!in_array($this->get('mode'), array(1,6,7,8,9,11,12))) {
			if($this->isVipTask() === false){
				$this->setError(0, '不支持的交易模式');
				return false;
			}
		}
		//验证交易模式
		if($this->get('paytype_id') != 1) {
			//$this->setError(0, '该交易不是2/8分成交易');
			//return false;
		}
		//验证交易时间
		$startime = 1356969600;	//13年1月1日
		//$startime = 1356796800;		//12年12月30日
		if($startime > $this->get('createtime')) {
			$this->setError(0, '时间小于13年1月1日，不参与计划');
			return false;
		}
		if($this->get('hosted_time') < '1385596800' && $this->_time < '1391184000'){
			$data = array('task_id'=>$this->id,'order_id'=>$order_id, 'dateline'=>$this->_time);
			$model = zbj_model_api::get('zbj_model_mb_cronreward');
			if($model->insert($data) === false) {
				$this->setError(0, '插入服务商奖金队列数据失败');
				return false;
			}
			return true;
		}
		return false;
	}

	/**
	 * 计算该需求的威客奖金
	 * 目前只支持一对一模式
	 * 需要1月30日支持多人，计件 code...
	 *
	 * @return boolean
	 */
	public function matchReward($order_id = 0) {

		//月度返点
		$month_proportion = 0.6;
		//年度返点
		$year_proportion = 0.4;

		//验证交易状态
		if($this->get('state') !=4 ) {
			$this->setError(0, '交易未结束');
			return false;
		}

		//验证交易模式
		if(!in_array($this->get('mode'), array(1,6,7,8,9,11,12))) {
			if($this->isVipTask() === false){
				$this->setError(0, '不支持的交易模式');
				return false;
			}
		}

		//不支持多人中标
		//if($this->get('allot') != 1) {
		//	$this->setError(0, '暂不支持多人和计件');
		//	return false;
		//}

		//验证交易时间
		$startime = 1356969600; //13年1月1日
		//$startime = 1356796800;               //12年12月30日
		if($startime > $this->get('createtime')) {
			$this->setError(0, '时间小于13年1月1日，不参与计划');
			return false;
		}

		//获取中标订单
		$orderinfo = $this->getOneWinOrder(NULL, 1);
		if(empty($orderinfo)) {
			$this->setError(0, '无法获取完成交易的中标订单');
			return false;
		}

		//获取交易中中标的评价记录
		$evaluaction = $this->getOneWinEvaluaction();
		if(empty($evaluaction) && $this->id != 2959083) {
			$this->setError(0, '无法获取评价记录 '. $this->getError());
			return false;
		}

		//获得收入金额
		//注意T4，T5的不同
		//注意：悬赏奖金计算有问题，price为80%,一对一这种方式没问题
		$income = round($orderinfo['price'] - $orderinfo['refund_amount']);

		if(0.01 > $income) {
			$this->setError(0, '获得奖金金额低于0.01元');
			return false;
		}

		$model_reward = zbj_model_api::get('zbj_model_mb_reward');
		//检查重复
		if($model_reward->selectOne(array('task_id'=>$this->id))) {
			$this->setError(0, '该交易已经返点');
			return false;
		}

		//获取用户返点比例
		$user = new zbj_service_user($orderinfo['sl_user_id']);
		$user_proportion = $user->getRewardProportion($evaluaction['has_ability']);
		$reward = round($income * $user_proportion, 2);

		$month_reward = round($reward * $month_proportion, 2);
		$year_reward = $reward - $month_reward;

		$data = array(
			'user_id'=>$orderinfo['sl_user_id'],
			'nickname'=>$orderinfo['sl_nickname'],
			'dateline'=>$this->_time,
			'dateymd'=>date('Y-m-d', $this->_time),
			'mode'=>$this->get('mode'),
			'task_id'=>$this->id,
			'title'=>$this->get('title'),
			'reward'=>$reward,
			'reward_month'=>$month_reward,
			'reward_year'=>$year_reward,
			'month_state'=>0,
			'year_state'=>0,
			'state'=>0,
			'order_id'=>$order_id,
		);

		if($user->addReward($data) === false) {
			$this->setError(0, '插入失败 '. $this->getError());
			return false;
		}

		return true;
	}

	/**
	 * 获取指定用户、稿件的评价记录
	 * 警告：目前只支持一对一模式
	 *
	 * @param array $params 自定义参数，$conditon自定义条件
	 * @return array
	 */
	public function getOneWinEvaluaction($params = array()) {
		$model = zbj_model_api::get('zbj_model_mb_evaluation');
		$condtion = (array)$params['condition'];
		$condition['task_id'] = $this->id;
		$condition['type'] = 2;
		$result = $model->selectOne($condition);
		if($result === false) {
			$this->setError(0, '查询失败');
			return false;
		}
		return $result;
	}

	/**
	 * 添加自动打款日志
	 * @param int $order_id
	 * @param float $amount
	 * @param int $type 1公示打款 2申请付款
	 * @param int $sid
	 */
	function addAutoPaymentLog($order_id, $amount, $type, $sid=0){
		$data = array();
		$data['task_id'] = $this->id;
		$data['order_id'] = intval($order_id);
		$data['amount'] = $amount;
		$data['type'] = intval($type);
		$data['sid'] = intval($sid);
		switch ($type){
		case 1://公示打款
			$data['do_time'] = $this->get('publicity_outime');
			$data['do_ymd'] = date('Y-m-d', $data['do_time']);
			break;
		case 2://申请付款7天
			$sLogModel = zbj_model_api::get('zbj_model_mk_workssourcelog',$sid);
			$do_time = $sLogModel->getData('dateline');
			$dayTime = 604800;
			// if($this->_time>'1391011200' && $this->_time<'1391702400'){
			// 	$dayTime = 864000;//春节期间10天
			// }
			if($this->_time>='1443628800' && $this->_time<'1444233600'){
				$dayTime = 864000;//国庆期间10天
			}
			if($this->_time>='1424016000' && $this->_time<'1424793600'){
				$dayTime = 864000;//春节期间10天
			}
			$data['do_time'] = $do_time > 0 ? $do_time+$dayTime : $this->_time+$dayTime;
			$data['do_ymd'] = date('Y-m-d', $data['do_time']);
			break;
		default:
			return true;
		}
		$data['state'] = 0;
		$model = zbj_model_api::get('zbj_model_mk_crontaskpayment');
		if($model->insert($data) === false){
			$this->setError(0, $model->getDbError());
			return false;
		}
		return true;
	}

	/**
	 * 指定订单中等待支付的金额
	 * @param int $order_id 订单号
	 */
	function sumCronPayAmount($order_id){
		$model = zbj_model_api::get('zbj_model_mk_crontaskpayment');
		$condi = array('task_id'=>$this->id,'order_id'=>$order_id,'state'=>0);
		$condi['type'] = $this->get('mode') == 13 ? 2 : 1;
		$rs = $model->selectOne($condi,"sum(amount) as amount");
		return round($rs['amount'], 2);
	}

	/**
	 * 创建置顶需求
	 * @param int $order_id
	 * @param array $data e.g. array(array('tag_id'=>2,'day'=>1),array('tag_id'=>5,'day'=>3)) 为空时只做删除处理
	 */
	public function createAddPaidListing($order_id,$data = array()){
		if (empty($order_id) || empty($this->id)){
			$this->setError(0,'参数不完整');
			return false;
		}
		//删除以前的
		$mdl_taskpaidlisting = zbj_model_api::get('zbj_model_mk_taskpaidlisting');
		$condition = array(
			'order_id' => $order_id,
			'task_id' => $this->id,
			'state' => 0,
		);
		if ($mdl_taskpaidlisting->delete($condition) === false){
			return false;
		}
		if (!empty($data)){
			$tag_list_byid = array();
			foreach ($data as $k => $v){
				$srv_tag = new zbj_service_tag($v['tag_id']);
				if (!$srv_tag->get()){
					$this->setError(0,'至少有一个标签ID找不到对应的标签');
					return false;
				}
				$day = (int) $v['day'];
				if (empty($day)){
					$this->setError(0,'至少有一个标签的天数为空');
					return false;
				}
				$tag_list_byid[$v['tag_id']]['day'] = $v['day'] + $tag_list_byid[$v['tag_id']]['day'];//天数，重复的ID会被合并
				$tag_list_byid[$v['tag_id']]['fee'] = $srv_tag->getPaidListFee();
				if($v['type'] > 0) $tag_list_byid[$v['tag_id']]['fee'] = $tag_list_byid[$v['tag_id']]['fee'] * 2;
				$tag_list_byid[$v['tag_id']]['type'] = intval($v['type']);
			}
			$insert_data = array();
			foreach ($tag_list_byid as $tag_id => $tag){
				$mdl_taskpaidlisting->set('task_id',$this->id);
				$mdl_taskpaidlisting->set('tag_id',$tag_id);
				$mdl_taskpaidlisting->set('order_id',$order_id);
				$mdl_taskpaidlisting->set('day',$tag['day']);
				$mdl_taskpaidlisting->set('fee',$tag['fee'] * $tag['day']);
				$mdl_taskpaidlisting->set('type',$tag['type']);
				if ($mdl_taskpaidlisting->save(false) === false){
					$this->setError(0,'至少有一个置顶记录保存失败');
					return false;
				}
			}
		}
		return true;
	}

	/**
	 * 奖置顶需求设为成功
	 */
	public function setPaidListingSuccess($order_id){
		if (empty($order_id) || empty($this->id)){
			$this->setError(0,'参数不完整');
			return false;
		}
		$mdl_taskpaidlisting = zbj_model_api::get('zbj_model_mk_taskpaidlisting');
		$condtion = array(
			'order_id' => $order_id,
			'state' => 0,
			'task_id' => $this->id,
		);
		$mdl_taskpaidlisting->setDbEntry(true);
		$taskpaidlisting_list = $mdl_taskpaidlisting->select($condtion)->items;
		if (!empty($taskpaidlisting_list)){
			foreach ($taskpaidlisting_list as $v){
				$tag_id = $v['tag_id'];
				if ( in_array($v['tag_id'], array(24245, 24246)) ) {
					$srv_tag = new zbj_service_tag($tag_id);
					$start_time = $srv_tag->getErliestPaidListingTime($left_num,$this->id, $v['type']);
				} else {
					$srv_vir = new zbj_service_categoryguide($tag_id);
					$start_time = $srv_vir->getEarliestTopListingTime( $v['task_id'], $left_num );
				}
				$srv_tag = new zbj_service_tag($tag_id);
				$start_time = $srv_tag->getErliestPaidListingTime($left_num,$this->id, $v['type']);
				/*//检查当前任务在标签下有没有置顶
				$condtion = array(
					'task_id' => $this->id,
					'state' => 1,
					'tag_id' => $tag_id,
				);
				$orderby = 'ORDER BY listing_id DESC';
				$paidlisted = $mdl_taskpaidlisting->selectOne($condtion,'end_time','',$orderby);
				if (!empty($paidlisted)){
					if ($paidlisted['end_time'] > $start_time){
						$start_time = $paidlisted['end_time']+1;
					}
				}*/
				$day = $v['day'];
				$end_time = $start_time + (86400 * $day);
				$mdl_taskpaidlisting->setPkid($v['listing_id']);
				$mdl_taskpaidlisting->set('start_time',$start_time);
				$mdl_taskpaidlisting->set('start_ymd',date('Y-m-d',$start_time));
				$mdl_taskpaidlisting->set('end_time',$end_time);
				$mdl_taskpaidlisting->set('end_ymd',date('Y-m-d',$end_time));
				$mdl_taskpaidlisting->set('state',1);
				if ($mdl_taskpaidlisting->save() === false){
					$this->setError(0,'设置顶需求失败');
					return false;
				}
				if ($start_time <= $this->_time){
					//清空缓存
					$cache = new zbj_lib_cache('memcache');
					$cache_name = 'www.app.controller.tasklist.paid_list_tag_id.'.$tag_id;
					$cache->set($cache_name, '');
					$cache->del($cache_name);
				}
			}
			return true;
		} else {
			$this->setError(0,'没有找到置顶记录');
			return false;
		}
	}

	/**
	 * 处理该交易发票冻结税金
	 *
	 * $param object $user zbj_service_user对象
	 * @param float $tax 税金
	 * @param float $task_amount 获得收益
	 * @return boolean
	 */
	public function freezeBill($user, $tax, $task_amount, $is_last_pay=false) {

		$user_id = $user->get('user_id');
		$nickname = $user->get('nickname');
		$real_type = $user->getRealType();
		$tax = round($tax, 2);

		if(0 >= $tax) {
			$this->setError(0 ,'发票税金不能低于0元');
			return false;
		}

		if(empty($user_id)) {
			$this->setError(0 ,'用户不存在');
			return false;
		}

		$model_billfund = zbj_model_api::get('zbj_model_mb_billfund');
		$model_billfund->setDbEntry();
		$condition = array('task_id'=>$this->id, 'user_id'=>$user_id);
		$result = $model_billfund->selectOne($condition, 'fund_id,state,amount,realtype');

		//检查发票记录
		if($result === false) {
			$this->setError(0 ,'冻结税金查询失败');
			return false;
		}

		$fund_id = (int)$result['fund_id'];
		if($fund_id) {
			//存在
			if($result['state'] != 0) {
				$this->setError(0 ,'税金冻结状态错误');
				return false;
			}
			$up_data = array(
				'amount' => round($result['amount'] + $tax, 2),
			);
			if ($result['realtype'] != $real_type) $up_data['realtype'] = $real_type;
			if($model_billfund->update(array('fund_id'=>$fund_id), $up_data) === false) {
				$this->setError(0 ,'更新冻结记录失败 '. $model_billfund->getDbError());
				return false;
			}

		}else {
			//创建
			$data = array(
				'user_id'=>$user_id,
				'nickname'=>$nickname,
				'dateline'=>$this->_time,
				'dateymd'=>date('Y-m-d', $this->_time),
				'amount'=>$tax,
				'task_id'=>$this->id,
				'task_title'=>$this->get('title'),
				'realtype' => $real_type,
			);
			$fund_id = $model_billfund->insert($data);
			if($fund_id === false) {
				$this->setError(0 ,'添加冻结记录失败 '. $model_billfund->getDbError());
				return false;
			}
		}

		if ($is_last_pay) {
			$up_data2 = array();
			$up_data2['task_endtime'] = $this->_time;
			$up_data2['task_endymd'] = $this->_ymd;
			if($model_billfund->update(array('task_id'=>$this->id), $up_data2) === false) {
				$this->setError(0 ,'更新冻结记录的任务结束时间失败 '. $model_billfund->getDbError());
				return false;
			}
		}

		$log = array();
		$log['fund_id'] = $fund_id;
		$log['user_id'] = $user_id;
		$log['nickname'] = $nickname;
		$log['task_id'] = $this->id;
		$log['task_title'] = $this->get('title');
		$log['type'] = 0;
		$log['dateline'] = $this->_time;
		$log['dateymd'] = date('Y-m-d', $this->_time);
		$log['tax'] = $tax;
		$log['tas_amount'] = round($task_amount, 2);

		$model_billfund_log = zbj_model_api::get('zbj_model_mb_billfundlog');
		$model_billfund_log->insert($log);

		//更新用户税金冗余
		$user = new zbj_service_user($user_id);
		$user->upBillCount();

		return true;
	}

	/**
	 * 更新发票状态及发票税金冻结记录
	 *
	 * @return boolean
	 */
	public function regBillOk() {

		//强制主库
		$this->setDbEntry();

		//更新发票状态
		if(!$this->isInvoice()) {
			$this->set('bill_state', 1);
		}

		//如果是交易结束开票，就扣除威客税金
		if($this->get('state') == 4) {

			//更新发票冻结状态
			$model_billfund = zbj_model_api::get('zbj_model_mb_billfund');

			$condition = array('task_id'=>$this->id);
			$result = $model_billfund->select($condition)->items;

			//检查发票记录
			if($result === false) {
				$this->setError(0 ,'冻结税金查询失败');
				return false;
			}

			$ids = $log = array();
			$model_billfund_log = zbj_model_api::get('zbj_model_mb_billfundlog');
			foreach($result as $row) {
				if($row['state'] != 0 ) {
					continue;
				}

				//添加日志
				$log['fund_id'] = $row['fund_id'];
				$log['user_id'] = $row['user_id'];
				$log['nickname'] = $row['nickname'];
				$log['task_id'] = $row['task_id'];
				$log['task_title'] = $row['task_title'];
				$log['type'] = 2;
				$log['dateline'] = $this->_time;
				$log['dateymd'] = date('Y-m-d', $this->_time);
				$log['tax'] = $row['amount'];
				$model_billfund_log->insert($log);


				$ids[] = $row['fund_id'];
			}

			//更新发票税金冻结状态
			$data = array(
				'state'=>1,
				'uptime'=>$this->_time,
				'upymd'=>date('Y-m-d', $this->_time)
			);

			if(!empty($ids)) {
				$id = join(',', $ids);
				if($model_billfund->update("fund_id in ($id)", $data) === false) {
					$this->setError(0 ,'更新发票冻结状态失败');
					return false;
				}

				$usv = new zbj_service_user($this->get('user_id'));
				//更新用户总税金
				if ($this->get('allot') != 3) { //通知税金扣除
					$need_send = true;
					$other['buyer_user_id'] = $this->get('user_id');
					$other['task_id'] = $result[0]['task_id'];
					$other['task_title'] = $result[0]['task_title'];
					$other['brandname']=$usv->getBrandName();
					if (in_array($this->get('mode'), array(11,12))) {
						$iden = 'srvseller';
						$tpl = array(12,0,0);
						$tplkey = "com.zhubajie.trade.sseller.tax.deduct";
					} else {
						$iden = 'seller';
						$tpl = array(16,0,0);
						$tplkey = "com.zhubajie.trade.seller.tax.deduct";
					}
				} else {
					$need_send = false;
				}
				foreach($result as $row) {
					$user = new zbj_service_user($row['user_id']);
					$user->upBillCount();
					if ($need_send) {
						zbj_service_taskmsg::sendmsgnew($user, $iden,$tplkey, "{$other['task_id']}号需求的税金已扣除", array_merge($other, array('amount'=>$row['amount'])));
					}

				}
			}
		}

		return $this->save();
	}

	/**
	 * 检查服务商是否可以申请支付
	 * @return boolean true表示可以申请
	 */
	 function isAllowApplyPay($wid){
		if($this->get('state') != 3 or $this->get('publicity_outime') > $this->_time){
			$this->setError(0, "公示未结束");return false;
		}
		$sLogModel = new zbj_model_mk_workssourcelog();
		$condi = array('task_id'=>$this->id,'works_id'=>$wid, 'type'=>5,'state'=>0);
		if($sLogModel->selectOne($condi)) return false;
		$srvWorks = new zbj_service_works($wid);
		//悬赏单人，招标上传
		if($this->isNeedUpFile() && !$srvWorks->getWorkSourcefile()){
			$this->setError(0, "你需要先上传源文件才能申请付款");return false;
		}
		return true;
	 }

	 /**
	 * 添加服务交易记录和日志
	 * @param int $role 0雇主1威客
	 * @param int $type 1购买2修改金额3支付4工作5提醒付款8评价9取消交易 10发起交易合同，11同意合同
	 * @param array $option
	 */
	function addTradeLog($role=0, $type, $option=array()){
		$model = zbj_model_api::get('zbj_model_fn_order');
		$order =  $model->selectOne(array('product_pkid'=>$this->id,'stype'=>16));
		switch ($type){
			case 1:
				$log = "将成交价已被修改为￥{$option['amount']}";
				break;
			case 2:
				$log = "修改金额";
				break;
			case 3:
				$log = "支付担保金{$option['amount']}";
				break;
			case 4:
				$log = "同意工作";
				break;
			case 5:
				$log = "付款{$option['amount']}";
				break;
			case 8:
				$log = "给出了评价";
				break;
			case 9:
				$log = "取消了交易";
				break;
			case 10:
				$log = "发起交易合同";
				break;
			case 11:
				$log = "同意交易合同";
				break;
			case 12:
				$log = '退还履约保证金';
				break;
			default:
				$this->setError(0,"类型错误");
				return false;
		}
		$data = array();
		$data['role'] = $role;
		$data['type'] = $type;
		$data['state'] = $option['state'] ? $option['state'] : 0;
		$data['task_id'] = $this->id;
		$data['order_id'] = $order['order_id'];
		$data['dateline'] = $this->_time;
		$data['dateymd'] = date('Y-m-d',$this->_time);
		$data['isshow'] = $option['isshow'] ? $option['isshow'] : 1;
		$option['user_id'] = $order['user_id'];
		$option['nickname'] = $order['nickname'];
		$option['sl_user_id'] = $order['sl_user_id'];
		$option['sl_nickname'] = $order['sl_nickname'];
		$data['options'] = serialize($option);
		$model = new zbj_model_mk_tasktradelog();
		if($model->insert($data) === false){
			$this->setError(0, "添加日志出错".$model->getDbError());return false;
		}
		$this->addTaskActionLog($log,$role+1);
		return true;
	}

	/**
	 * 检查是否为专场需求
	 */
	function checkSpecialTask(){
		if($this->get('catalog2id') >0 && $this->get('was_pack')>0 && $this->get('createtime')>'1371116070'){
			return $this->get('catalog2id');
		}
		return false;
	}

	/**
	 * 检查是否是vip需求
	 */
	function isVipTask(){
		if($this->get('was_pack') == 0 && $this->get('industry_id') >0 && $this->get('isadvc') == 1 && $this->get('createtime')>'1356969600'){
			return $this->get('industry_id');
		}
		return false;
	}

	/**
	 * 检查任务是否邀请某人
	 * @param int $user_id
	 */
	function checkIsInvite($user_id, $type=1){
		$model = new zbj_model_mb_recommendaction();
		$rs = $model->selectOne(array('task_id'=>$this->id,'action_type'=>$type,'user_id'=>$user_id));
		if($rs['action_id']>0){
			return $rs;
		}
		return false;
	}

	/**
	 * 获取任务推荐的威客ID
	 */
	function getTaskRecommendUser(){
		$model = new zbj_model_mb_recommendaction();
		$rs = $model->select(array('task_id'=>$this->id),"user_id,max(action_type) as action_type,task_id","group by user_id")->items;
	}

	/**
	 * 设置是否为比稿优先
	 */
	 function setWorkFirst($cid = 0){
		$cid = $cid ? $cid : $this->get('category_id');
		$model = zbj_model_api::get('zbj_model_mk_category', $cid);
		$this->set('task_info.ispic',0);
		if($model->getData('is_work_first') == 0){
			$this->set('task_info.ispic',2);
		}
		if($model->getData('ispic') == 1){
			$this->set('task_info.ispic',10);
		}
	 }

	/**
	 *是否已经进入google分析
	 */
	public function isGoogleAnalyticsSent($is_new = false) {
		//强制主库
		$this->setDbEntry();

		$option = $this->get('task_info.option');
		$option = $option ? unserialize($option) : $option;
		if (!$option) return false;
		if (time() - $this->get('createtime') > 86400) return true; //超过一天不再处理
		$check_key = $is_new ?  'is_google_analytics_sent_new' : 'is_google_analytics_sent';
		return isset($option[$check_key]);
	}

	/**
	 *设置已经进入google分析
	 */
	public function setGoogleAnalyticsSent($is_new = false) {
		$option = $this->get('task_info.option');
		$option = $option ? unserialize($option) : array();
		if(empty($option)){
			return false;
		}
		$check_key = $is_new ?  'is_google_analytics_sent_new' : 'is_google_analytics_sent';
		$option[$check_key] = time();
		$this->set('task_info.option', serialize($option));
		return $this->save();
	}
	//后台统计使用
	function addSellerLog($user_id,$type,$amount = 0){
		$sellerlog = new zbj_model_mk_sellerlog();
		$sellerlog->addLog($user_id,$type,$this->get('task_id'),$this->get('category_id'),$amount);
	}

	/**
	 * 记录推荐拒绝日志
	 *
	 * @param int $user_id
	 * @param int $task_id
	 * @param int $refuse_type
	 * @param string $refuse_reason
	 * @return boolean
	 */
	public function addRecommendRefuseLog($user_id, $task_id, $refuse_type, $refuse_reason) {
		$log = array(
			'user_id' => $user_id,
			'task_id' => $task_id,
			'refuse_type' => $refuse_type,
			'refuse_reason' => $refuse_reason,
			'dateline' => $this->_time,
			'dateymd' => date('Y-m-d', $this->_time));

		$mdl_refuse = new zbj_model_mb_recommendrefuselog();
		return $mdl_refuse->insert($log) > 0 ? true : false;
	}

	/**
	 * 返回当前需求置顶稿件数量
	 *
	 * @return number
	 */
	public function getTopWorksCount() {
		if($this->getId() < 1) {
			return 0;
		}

		$cond = "task_id = {$this->getId()}";
		$item = 'works_id,appraise';

		$md_work = new zbj_model_mk_works();
		$result = $md_work->select($cond, $item)->items;
		if(!$result) return 0;

		foreach($result as $temKey=>$temValue){
			if($temValue['appraise']!=10){
				unset($result[$temKey]);
			}
		}
		return count($result);
	}

	/**
	 * 返回当前需求推荐稿件数量
	 *
	 * @return number
	 */
	public function getRcmdWorksCount($user_id = 0) {
		if($this->getId() < 1) {
			return 0;
		}

		$cond = "task_id = {$this->getId()} AND isgold = 1";
		if($user_id) {
			$cond .= " AND user_id = '{$user_id}'";
		}
		$item = 'COUNT(1) cnt';

		$md_work = new zbj_model_mk_works();
		$result = $md_work->selectOne($cond, $item);
		return $result ? $result['cnt'] : 0;
	}

	/**
	 * 获取当前任务稿件列表
	 * @param array $params 数据 condition:条件,orderby:排序,field:字段,limit:条数,page:页数
	 * @return array
	 */
	public function getWorkList($params = array(), $filter = '', $sort = '') {

		$condition = (string)$params['condition'];
		$orderby = (string)$params['orderby'];
		$groupby = (string)$params['groupby'];
		$field = (string)$params['field'];
		$limit = (int)$params['limit'];
		$page = (int)$params['page'];
		$limit = $limit <=0 || $limit >= 40 ? 18 : $limit;
		$page = $page <=0 ? 1 : $page;
		$field = empty($field) ? '*' : $field;

		if(!preg_match('/task\_id\s*=[\s\'"]*'. $this->id. '/i', $condition)) {
			$condition .= empty($condition) ? 'task_id='. $this->id : ' and task_id='. $this->id;
		}

		$use_mongo = false;
		$mongo = false;
		$use_new_mongo_api = true;
		// 2013-01-01以后完成任务查询mongo
// 		if($this->get('createtime') <= 1356969600 && $this->get('state') == 4) {
// 			if ( $use_new_mongo_api ) {
// 				$use_mongo = true;
// 			}else {
// 				$mongo = new Smongo();
// 				if($mongo->_error == NULL) {
// 					$use_mongo = true;
// 				}
// 			}
// 		} else {
// 			$use_mongo = false;
// 		}
		//取消调用Mongo by 哪吒 2015年4月13日
		$use_mongo = false;
		if(!$use_mongo) {
			//有数据库处理
			$mdlWorks = zbj_model_api::get('zbj_model_mk_works');
			$mdlWorks->setPage($page);
			$mdlWorks->setLimit($limit);
			$works_data = $mdlWorks->select($condition, $field, $groupby, $orderby)->items;

			//T除已经被屏蔽的评价
			$mdlWorksComment = zbj_model_api::get('zbj_model_mk_workscomment');
			$worksCommentData = $mdlWorksComment->select(array('task_id'=>$this->id, 'state'=>1), 'comment_id')->items;
			$worksCommentDataArray = array();
			if($worksCommentData){
				foreach($worksCommentData  as $wcd){
					$worksCommentDataArray[] = $wcd['comment_id'];
				}
				foreach($works_data as &$wd){
					$wd['option'] = unserialize($wd['option']);
					if($wd['option']['buyer_comment']) {
						foreach($wd['option']['buyer_comment'] as &$obc) {
							if(in_array($obc['comment_id'], $worksCommentDataArray)) {
								$obc['state'] = 1;
							}
						}
					}
					$wd['option'] = serialize($wd['option']);
				}
			}

			return $works_data;
		}else {
			if ( $use_new_mongo_api ) {
				$sort_array = array('1'=>'time_desc', '2'=>'time_asc', '3'=>'ability_desc', '4'=>'ability_asc');
				if ( $sort ) {
					$sort = isset($sort_array[$sort]) ? $sort_array[$sort] : '';
				}
				$cache = new zbj_lib_cache('memcache');
				$xiaobao_mem_key = "task.zhubajie.com.detail.filter.userids.{$this->id}";
				$xiaobao_userids = $cache->get($xiaobao_mem_key);
				!is_array($xiaobao_userids) && $xiaobao_userids = array();
				$xiaobao_userids = array_filter($xiaobao_userids);
				//从mongo接口中读取
				$data =  zbj_lib_BaseUtils::zbjapicall('work/list', array(
							'task_id'=>$this->id,
							'status'=>$filter,
							'sort'=>$sort,
							'page'=>$page,
							'size'=>$limit,
							'userids'=>join(',',$xiaobao_userids)
					)
				);
				return @$data['data']['items'];
			}else{
				//由mongo处理
				$mongo->init('zhubajie_market', 'mk_works');

				//转换条件
				$m_condition = $mongo->sqlToMongoQuery($condition);
				if(empty($m_condition)) {
					$this->setError(0, '查询条件转换失败');
					return false;
				}

				$m_page = $page - 1 ;
				$m_orderby = $mongo->sqlTomongoSort($orderby);

				return $mongo->find($m_condition, $m_orderby, $limit, $m_page);
			}
		}
	}


	/**
	 * 获取当前任务稿件列表，按用户分组
	 * @param array $params 数据 condition:条件,orderby:排序,field:字段,limit:条数,page:页数
	 * @return array
	 */
	public function getWorkListGroupByUser($params = array(), $filter = '', $sort = '') {
		$condition = (string)$params['condition'];
		$orderby = (string)$params['orderby'];
		$groupby = (string)$params['groupby'];
		$field = (string)$params['field'];
		$limit = (int)$params['limit'];
		$page = (int)$params['page'];

		$limit = $limit <=0 || $limit >= 40 ? 18 : $limit;
		$page = $page <=0 ? 1 : $page;
		$field = empty($field) ? '*' : $field;

		if(!preg_match('/task\_id\s*=[\s\'"]*'. $this->id. '/i', $condition)) {
			$condition .= empty($condition) ? 'task_id='. $this->id : ' and task_id='. $this->id;
		}

		//有数据库处理
		$mdlWorks = zbj_model_api::get('zbj_model_mk_works');
		$mdlWorks->setPage($page);
		$mdlWorks->setLimit($limit);
		return $mdlWorks->select($condition, $field, $groupby, $orderby)->items;
	}

	/**
	 * 查询当前任务中所有交了稿件的用户列表
	 * @param array $params
	 * @todo 以后可以用此方法查询更多关于稿件的数据
	 * @return array
	 */
	public function getWorkUserList($params){
		$condition = (string)$params['condition'];
		$orderby = (string)$params['orderby'];
		$groupby = (string)$params['groupby'];
		$field = (string)$params['field'];
		$limit = (int)$params['limit'];
		$page = (int)$params['page'];

		$limit = $limit <=0 || $limit >= 40 ? 18 : $limit;
		$page = $page <=0 ? 1 : $page;

		$model = zbj_model_api::get('zbj_model_mk_tasksign');
		$model->setPage($page);
		$model->setLimit($limit);
		if(!preg_match('/task\_id\s*=[\s\'"]*'. $this->id. '/i', $condition)) {
			$condition .= empty($condition) ? 'task_id='. $this->id : ' and task_id='. $this->id;
		}

		return $model->select($condition,'user_id')->items;
	}

	/**
	 * 是否使用快印
	 *
	 * @param bool $is_use
	 */
	public function useKy($is_use) {
		$mdl_ky = new zbj_model_mk_taskwantuseky();

		if($is_use) {
			$mdl_ky->insert(array(
				'task_id' => $this->id,
				'category_id' => $this->get('category_id'),
				'user_id' => $this->get('user_id'),
				'created_at' => $this->_time
				), true);

			// 快印接口
			$srv_usr = new zbj_service_user($this->get('user_id'));
			$mobile = $srv_usr->get('usermobile');
			$mobile || $mobile = $srv_usr->get('info.mobile');
			zbj_lib_KuaiYinApi::notify(
				$this->id,
				$this->get('user_id'),
				$srv_usr->get('username'),
				$srv_usr->get('nickname'),
				$mobile,
				$this->get('state'),
				$this->get('title'),
				$this->get('createtime'),
				$this->get('amount'));

		} else {
			$mdl_ky->delete("task_id = '{$this->id}'");
		}
	}

	/**
	 * 检查任务是否有正在进行中的争议
	 *
	 * @return boolean
	 */
	public function isExistsDispute() {
		if($this->id < 1) {
			return false;
		}

		/*
		$mdl_works = new zbj_model_mk_works();
		$work_list = $mdl_works->select(
			"task_id = '{$this->getId()}' AND iseliminate = 1",
			'works_id')->items;

		if(!$work_list) {
			return false;
		}

		$work_id_list = array();
		foreach($work_list as $report_work) {
			$work_id_list[] = $report_work['works_id'];
		}

		$work_id_list = join(',', $work_id_list);
		*/
		$mdl_report = new zbj_model_mb_report();
		$report_count = $mdl_report->selectOne(
			"`type` = 13 AND `state` < 3 AND o_bel_id = '{$this->id}'",
			'COUNT(1) cnt');

		return $report_count['cnt'] > 0 ? true : false;
	}

	/**
	 * 设置雇主最后审稿时间
	 */
	public function setLastReviewTime() {
		$mdl_info = new zbj_model_mk_taskinfo();
		$mdl_info->update(
			"task_id = '{$this->getId()}'",
			"health_uptime = {$this->_time}");
	}

	/**
	 * 获取雇主最后审稿时间
	 * @return int
	 */
	public function getLastReviewTime() {
		return (int)$this->get('task_info.health_uptime');
	}

	/**
	 * 标志名片打印的通知已经发送给快印
	 *
	 * @param int $order_id
	 * @param int $service_id
	 * @param int $print_state 快印状态 1 已发申请
	 * @param array $extra 申请表单信息
	 */
	public function markCardPrint($order_id, $service_id, $print_state, $extra, $encoded_ky_trade_no=false) {
		$data = array(
			'task_id' => $this->id,
			'order_id' => $order_id,
			'service_id' => $service_id,
			'print_state' => $print_state,
			'createdate' => date('Y-m-d', $this->_time),
			'createtime' => $this->_time,
		);
		if ($encoded_ky_trade_no !== false) {
			$extra['trade_no'] = $encoded_ky_trade_no;
			$data['trade_no'] = $encoded_ky_trade_no;
			$data['trade_no_decoded'] = zbj_lib_KuaiYinApi::decodeTradeNo($encoded_ky_trade_no);
		}
		$data['extra'] = serialize($extra);
		return $this->model('task_cardprint')->insert($data);
	}

	/**
	 * 获取名片打印状态
	 *
	 * @param int $order_id
	 * @param int $service_id
	 * @return array
	 */
	public function getCardPrint($order_id, $service_id) {
		$cond = array(
			'task_id' => $this->id,
			'order_id' => $order_id,
			'service_id' => $service_id
			);
		$card_print = $this->model('task_cardprint')->selectOne($cond);

		if($card_print == NULL) {
			return array();
		}

		$card_print['extra'] = unserialize($card_print['extra']);
		return $card_print;
	}
	//是否需要上传源文件
	function isNeedUpFile(){
		if($this->get('allot') <= 2 && in_array($this->get('mode'),array(10,13)) && $this->get('task_info.isupfile')==1){
			if($this->get('createymd')<'2014-01-16' && $this->get('catalog2id') != 18){
				return false;
			}
			return true;
		}
		return false;
	}

	/**
	 * 验证是否已发布协议
	 * @return boolean
	 */
	function hasPubedAgreement(){
		$this->setError(0, '废弃的功能hasPubedAgreement');
		return false;
		throw new Exception("方法已重写hasPubedAgreement");
		
		$agreement = $this->loadAgreements(false);
		return is_numeric($agreement['agreeid'])?true:false;
	}

	/**
	 * 验证双方是否已同意主协议
	 * @return boolean
	 */
	function hasAcceptAgreement(){
		$this->setError(0, '废弃的功能hasAcceptAgreement');
		return false;
		throw new Exception("方法已重写hasAcceptAgreement");

		$agreement = $this->loadAgreements(false);
		if($agreement['sl_is_agree']==1 && $agreement['by_is_agree']==1){
			return true;
		}
		return false;
	}

	/**
	 * 验证交易协议是否生效
	 * @return boolean
	 */
	function hasAgreementActived(){
		$this->setError(0, '废弃的功能hasAgreementActived');
		return false;
		throw new Exception("方法已重写hasAgreementActived");
		$agreement = $this->loadAgreements(false);
		if ( empty($agreement) ) return false;
		if ( '1' == $agreement['is_active'] && !empty($agreement['is_activetime']) ) return true;

		return false;
	}

	/**
	 * 检查附加条件，如果都执行了则更新交易协议为已生效
	 * @return boolean
	 */
	function setAgreementActive($dis_transaction=false)
	{
		$this->setError(0, '废弃的功能setAgreementActive');
		return false;
		throw new Exception("方法已重写setAgreementActive");

		if($this->hasAgreementActived()) return true;

		$active = true;
		$agreement = $this->loadAgreements(false);
		if ( $agreement['cond'] ) {
			foreach($agreement['cond'] as $val){
				if ( '1' != $val['status'] ) {
					$active = false;
				}
			}
		}
		if($active) {
			$data = array();
			$data['is_active'] = 1;
			$data['is_activetime'] = $this->_time;
			$srvAgreement = new zbj_service_agreement($agreement['agreeid']);
			$agreementData = $srvAgreement->get();
			$srvAgreement->set($data);
			if(!$srvAgreement->save()){
				$this->setError(0, $srvAgreement->getError());
				return false;
			}

			if(!$srvAgreement->afterActive($dis_transaction)){
				$this->setError(0, $srvAgreement->getError());
				return false;
			}
		}
		return true;
	}

	/**
	 * 验证双方是否已同意所有协议
	 * @return boolean
	 */
	function hasAcceptAllAgreement($agreement=array()){
		$this->setError(0, '废弃的功能hasAcceptAllAgreement');
		return false;
		throw new Exception("方法已重写hasAcceptAllAgreement");

		if(!is_array($agreement)||empty($agreement)){
			$agreement = $this->loadAgreements();
		}
		if(!is_numeric($agreement['agreeid'])) return true;

		if($agreement['sl_is_agree']!=1 || $agreement['by_is_agree']!=1){
			return false;
		}
		if(is_array($agreement['addons'])){
			$hasno = false;
			foreach($agreement['addons'] as $addons){
				if($addons['sl_is_agree']!=1 || $addons['by_is_agree']!=1){
					$hasno = true; break;
				}
			}
			return !$hasno;
		}
		return true;
	}

	/**
	 * 获取后台分类配置是否需要交易协议下的履约保证金
	 * @return int
	 */
	function isNeedAgreementPreMoneyByConfig(){
		$cataModel = zbj_model_api::get('zbj_model_mk_category', $this->get('category_id'));
		$data = $cataModel->get();
		return ($data['is_agreement']=='1' && $data['is_agreement_premoney']=='1') ? 1 : 0;
	}

	/**
	 * 获取后台分类配置发起交易协议的优先引导顺序，1雇主，2服务商
	 * @return int
	 */
	function getAgreementPubOrder(){
		$cataModel = zbj_model_api::get('zbj_model_mk_category', $this->get('category_id'));
		$data = $cataModel->get();
		return $data['is_agreement_tips_order'];
	}

	/**
	 * 检查交易协议下的中标/雇佣是否可以取消
	 * 雇佣的取消条件：如果需要履约保证金，则双方同意以后5天，服务商还没有缴纳履约保证金，则可以取消；如果不需要，协议还没有生效，则雇主可以随时取消
	 * 招标的取消条件，需要交易协议，但交易协议还没有生效，且已经超过规定时间的5天
	 *
	 * @param	$isManager	是否是后台管理员操作
	 * @param   $role 角色，0雇主，1服务商
	 * @return bool
	 */
	function isAgreementCancleAble($isManager=false,$role=''){
		$this->setError(0, '废弃的功能isAgreementCancleAble');
		return false;
		throw new Exception("方法已重写isAgreementCancleAble");

		if(!$this->isNeedAgreement()){
			return true;
		}
		$agreement = $this->loadAgreements(false);

		if(in_array($this->get('mode'),array(13))){
			if(!$isManager && !is_numeric($agreement['agreeid'])) {
				$this->setError(0, "还没有发起交易协议，不能取消");
				return false;
			}
		}else if(in_array($this->get('mode'),array(11,12))){
			if($role=='1'){
				if($this->hasPubedAgreement()&&$this->hasAcceptAgreement()){
					$this->setError('你无权取消交易');
					return false;
				}
			}
		}

		if(!$isManager && $this->hasAgreementActived()) {
			$this->setError(0, "交易协议已经生效，不能取消");
			return false;
		}
		if (!$isManager && time()<$this->getTaskCancelTime()) {
			$this->setError(0, "还没有到取消交易的时间");
			return false;
		}
		return true;
	}

	/**
	 * 取得任务可以取消的时间,主要受交易协议的影响
	 * @return int
	 */
	function getTaskCancelTime(){
		$this->setError(0, '废弃的功能getTaskCancelTime');
		return false;
		throw new Exception("方法已重写getTaskCancelTime");

		$agreement = $this->loadAgreements(false);
		if(!$agreement) return 0;

		if(in_array($this->get('mode'),array(11,12))){
			if(!$this->hasAcceptAgreement()) {
				return 0;
			}
			if(!$this->hasAgreementActived()){
				if($agreement['pub_user_type']=='1'){
					$time = $agreement['sl_agreetime'];
				}else{
					$time = $agreement['by_agreetime'];
				}
				return $time+86400*5;
			}
		}else if(in_array($this->get('mode'),array(13))){
			$time = $agreement['createtime'];
			//如果是履约保证金且由服务商发起的，则把时间改为雇主签的时间
			if($agreement['cond'] && $agreement['cond'][0]['agree_cond_id']=='1') {
				if($agreement['pub_user_type']=='2'){
					$time = $agreement['by_agreetime'];
				}
			}
			return $time+86400*5;
		}
		return 0;
	}

    /**
     * 获取是否合同协议流程
     * @param boolean $checkDb 判断配置来源，true表示读取分类是否配置了交易协议，false表示当前任务是否需要交易协议
     * @return int
     */
    function isNeedAgreement($checkDb=false){
        if(!$this->id){
        	return false;
        }
        
        if(isset(self::$tsk_map_data[$this->id]['needAgr'])){
        	return self::$tsk_map_data[$this->id]['needAgr'];
        }
        
        try{
	    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,5);
			$api = new com\zhubajie\task\interfaces\TaskServiceClient(null);
			zbj_lib_ApiClient::build($api);
		
			$result = $api->isNeedAgreement($this->id,$checkDb);
			if($result->code != 0){
				throw new Exception($result->message);
			}
			$need = $result->success;
			self::$tsk_map_data[$this->id]['needAgr'] = $need;
    	}catch(Exception $e){
    		$this->setError(0,$e->getMessage());
    		$need = false;
    	}
		
		return $need;
    }

    /**
     * 初始化合同状态[发布后，编辑后] 金额大于0时有效
     * @param float $amount
     * @return int
     */
    function initTaskAgreement($amount=0){
        if(!$this->id){
        	return false;
        }
        try{
        	$amount = round((float)$amount,2);
        	if($amount<=0){
        		$this->setDbEntry();
        		$amount = $this->get('amount');
        	}
        	if($amount < 0){
        		throw new Exception('没有指定需求金额');
        	}
	    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,5);
			$api = new com\zhubajie\task\interfaces\TaskServiceClient(null);
			zbj_lib_ApiClient::build($api);
		
			$result = $api->initTaskAgreement($this->id,$amount);
			if($result->success != true){
				throw new Exception($result->message);
			}
    	}catch(Exception $e){
    		$this->setError(0,$e->getMessage());
    		return false;
    	}
		
		return true;
    }
    
    /**
     * 获取需求的agreestatus
     * @return int
     */
    function getAgreementStatus(){
        if(!$this->id){
        	return false;
        }
        
        if(isset(self::$tsk_map_data[$this->id]['agrStatus'])){
        	return self::$tsk_map_data[$this->id]['agrStatus'];
        }
        
        try{
	    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,5);
			$api = new com\zhubajie\task\interfaces\TaskServiceClient(null);
			zbj_lib_ApiClient::build($api);
		
			$result = $api->getAgreementStatus($this->id);
			if(!is_numeric($result) || $result <= -1){
				throw new Exception('获取协议状态失败');
			}
    	}catch(Exception $e){
    		$this->setError(0,$e->getMessage());
    		return false;
    	}
		self::$tsk_map_data[$this->id]['agrStatus'] = $result;
		return $result;
    }
    
    /**
     * 获取需求工作台模版ID号
     * @return int
     */
    function getWorkbenchTplid(){
        if(!$this->id){
        	return false;
        }
        
        if(isset(self::$tsk_map_data[$this->id]['wb_tplid'])){
        	return self::$tsk_map_data[$this->id]['wb_tplid'];
        }
        
        try{
	    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,5);
			$api = new com\zhubajie\task\interfaces\TaskServiceClient(null);
			zbj_lib_ApiClient::build($api);
		
			$result = $api->getWorkbenchTplid($this->id);
			if(!is_numeric($result) || $result <= 0){
				throw new Exception('获取工作台模版ID失败');
			}
    	}catch(Exception $e){
    		$this->setError(0,$e->getMessage());
    		return false;
    	}
		self::$tsk_map_data[$this->id]['wb_tplid'] = $result;
		return $result;
    }
    
    
    /**
     * 判断需求是新的派单系统模式 2015.10.14
     * @return int
     */
    function isRecmdModeTask(){
    	if(!$this->id){
        	return false;
        }
        
        $wktplid = $this->getWorkbenchTplid();
        return $wktplid==3?true:false;
    }
    
	/**
	 * 获取分类的配置是否为1
	 * @param int $cateid 分类id号
	 * @param string $field 字段名
	 * @return boolean
	 */
	function isAllowCategory($cateid,$field){
		if($this->get('createtime')<1398145800 && $this->get('task_info.isaccept_sl')==1){
			return false;
		}

		$categoryModel = new zbj_model_mk_category();
		$category = $categoryModel->selectOne("category_id='{$cateid}'",$field);
	//	$cache->set($cacheName,$category,3600);
		return intval($category[$field])==1;
	}

	/**
	 * 更新合同协议通知次数
	 * @return boolean
	 */
	function upAgreementNoticeTimes(){
		throw new Exception("方法已重写upAgreementNoticeTimes");

		$opdata = $this->get('task_info.option');
		$opdata = empty($opdata)?array():unserialize($opdata);
		
		if(empty($opdata)){
			return false;
		}
		$nowymd = date('Y-m-d',$this->_time);
		if($opdata['ag_ymd'] != $nowymd){ // 当天
			$opdata['ag_ymd'] = $nowymd;
			$opdata['ag_times'] = 1;
		}else{
			$opdata['ag_times'] = intval($opdata['ag_times']) + 1;
		}

		$this->set('task_info.option',serialize($opdata));
		return $this->save()?true:false;
	}


	/**
	 * 检查是否可向服务商发起合同协议通知
	 * @return boolean
	 */
	function checkCanNoticeAgreement(){

		throw new Exception("方法已重写checkCanNoticeAgreement");

		$opdata = $this->get('task_info.option');
		$opdata = empty($opdata)?array():unserialize($opdata);
		if(empty($opdata)){
			$opdata = array();
		}
		$nowymd = date('Y-m-d',$this->_time);
		$times = intval($opdata['ag_times']);
		if($opdata['ag_ymd'] == $nowymd && $times>=3){
			return false;
		}
		return true;
	}

	/**
	 * 更新协议步骤
	 * @return boolean
	 */
	function upAgreementStep($step){
		throw new Exception('调用了需求内废弃的方法「upAgreementStep」');
	}

	/**
	 * 创建合同协议
	 * @return boolean
	 */
	function addAgreementTpl($userid,$data){
		if(!is_numeric($userid) || empty($data['title']) || empty($data['content'])){
			$this->setError(0, "缺少交易合同模版的必要信息");
			return false;
		}

		$data['user_id'] 	= $userid;
		$data['categoryid'] = $this->get('category1id');
		$data['category2id'] = $this->get('category2id');
		$data['category3id'] = $this->get('category_id');
		$data['keyid'] = $this->getAgrTplKeyid($this->get('category_id'));
		$data['createymd'] = date('Y-m-d',$this->_time);
		$data['createtime'] = $this->_time;
		$data['content'] && $data['content'] = serialize($data['content']);

		$agreementTpls = new zbj_model_mk_taskagreementtemplates();
		if(($id = $agreementTpls->insert($data))==false){
			$this->setError(0, "添加交易合同模版失败");
			return false;
		}
		return $id;
	}

	/**
	 * 加载该用户相同分类下的合同合同
	 * @param	int	$cateid	3级分类id
	 * @return boolean
	 */
	function loadAgreementTpl($userid,$cateid=0){
		$cateid = $cateid?$cateid:$this->get('category_id');
		$keyid = $this->getAgrTplKeyid($cateid);
		$condition = array();
		$condition[] = "user_id='{$userid}'";
		$condition[] = "keyid='{$keyid}'";
		$agreementTpls = new zbj_model_mk_taskagreementtemplates();

		return $agreementTpls->select($condition)->items;
	}

	/**
	 * 检查是否可以正常进行任务
	 * @return true 可以正常运行，-1：未托管，-2：未发合同，-3：合同未生效
	 */
	public function checkTaskCanRun() {
		$mode = $this->get('mode');
		if($mode!=11 && $mode!=12 && $mode!=13){ // 暂时只支持雇佣交易
			return true;
		}

		if($this->get('hosted')!=1){ // 未托管
			return -1;
		}
		// 老交易不需要合同
		if($this->get('createtime')<1398145800 || !$this->isNeedAgreement()){ // 2014-04-22 13:50:00
			return true;
		}
		$srvAgreement = new zbj_model_mk_taskagreement();
		$agreement = $srvAgreement->selectOne("task_id='{$this->id}' and is_invalid=0");
		$agreestatus = $this->getAgreementStatus();
		if($agreestatus === false){
			return -3;
		}
		if(empty($agreement['agreeid']) && in_array($agreestatus, array(2,3,5))){ // 未发协议
			return -2;
		}
		if($agreement['sl_is_agree']==1 && $agreement['by_is_agree']==1 && $agreement['is_active']==1){
			return true;
		}else{
			return -3;
		}

	}

	/**
	 * 根据分类id获取合同模版的keyid
	 * @param	$category	三级分类
	 * @return array
	*/
	function getAgrTplKeyid($category){
		$m_cata = new zbj_model_mk_category($category);
		$data = $m_cata->get();
		if($data['category1id']==12){ // 网建
			return 1; // 网建
		}else if($data['category1id']==13){ // 软件开发
			return 1; // 软件开发
		}else if($data['category1id']==1342){ // app开发
			return 1; // app开发
		}else if(in_array($category,array(1248))) {
			return 3; //文案类
		/*
		}else if(in_array($category,array(101))) {
			return 4; //文案类
		}else if(in_array($category,array(107))) {
			return 5; //文案类
			*/
		}else if(in_array($data['category2id'],array(494))) {
			return 6; //工程咨询类
		}else if($data['category1id']==9 && !in_array($data['category2id'],array(494))) {
			return 7; //工程类
		}else if(in_array($data['category1id'],array(1234,5)) && $category!=1212) {
			return 8; //设计类
		}else if($data['category1id']==5) {
			return 9; //工程设计类
		}else if(in_array($data['category2id'],array(880))) {
			return 10; //装修施工
		}else if(in_array($category,array(1212))){
			return 11; //包装设计
		}
		return 100; //通用模块
	}

	/**
	 * 加载分类对应的交易合同附加条件
	 * @param
	 * @return array
	*/
	function getAgreementCond(){
		$category_id = $this->get('category_id');
		$m_taskagreenmentcond = new zbj_model_mk_taskagreementcondcategoryrel();
		$cond = $m_taskagreenmentcond->select(array('category_id'=>$category_id))->items;
		$data = array();
		if ($cond) {
			foreach($cond as $val){
				$data[] = array(
					'agree_cond_id'=>$val['agree_cond_id'],
				);
			}
		}

		return $data;
	}

	/**
	 * 加载任务下的所有交易协议
	 * @param
	 * @return array
	*/
	function loadAgreements($loadAddons=true,$loadCond=true){
		throw new Exception("方法已重写loadAgreements");

		$srvAgreement = new zbj_model_mk_taskagreement();
		$agreement = $srvAgreement->selectOne("task_id='{$this->id}' and is_invalid='0'");
		if(empty($agreement['task_id'])) return array();
		if(!empty($agreement['content'])){ // 数据过渡，从JSON过渡到serialize
			if($agreement['content'][0]==='{'){
				$agreement['content'] = json_decode($agreement['content'],true);
			}else{
				$agreement['content'] = (array)(@unserialize($agreement['content']));
			}
		}
		if(!empty($agreement['files'])) $agreement['files'] = json_decode($agreement['files'],true);
		if(!empty($agreement['data'])) $agreement['data'] = json_decode($agreement['data'],true);
		if($loadCond){
			//同时加载附加条件
			$m_taskagreenmentcondrel = new zbj_model_mk_taskagreementcondrel();
			$data_taskagreenmentcondrel = $m_taskagreenmentcondrel->select(array('agreeid'=>$agreement['agreeid']))->items;
			$cond = array();
			if(!empty($data_taskagreenmentcondrel)) {
				foreach($data_taskagreenmentcondrel as $_cond){
					$cond[] = array(
						'agree_cond_id'=>$_cond['agree_cond_id'],
						'agree_cond_rel_id'=>$_cond['agree_cond_rel_id'],
						'name'=>$_cond['name'],
						'value'=>$_cond['value'],
						'status'=>$_cond['status'],
						'complete_time'=>$_cond['complete_time'],
						'cancel_time'=>$_cond['cancel_time'],
						'option'=>$_cond['option'],
					);
				}
			}
			$agreement['cond'] = $cond;
		}

		if(!$loadAddons) return $agreement;

		$srvAgreementAddons = new zbj_model_mk_taskagreementaddons();
		$agreementAdons = $srvAgreementAddons->select("task_id='{$this->id}'")->items;

		$addons = array();
		if(!empty($agreementAdons)){
			foreach($agreementAdons as $val){
				if(!empty($val['content'])){
					if($val['content'][0]==='{'){// 数据过渡，从JSON过渡到serialize
						$val['content'] = json_decode($val['content'],true);
					}else{
						$val['content'] = (array)(@unserialize($val['content']));
					}
				}
				if(!empty($val['files'])) $val['files'] = json_decode($val['files'],true);
				if(!empty($val['data'])) $val['data'] = json_decode($val['data'],true);

				$addons[] = $val;
			}
		}
		$agreement['addons'] = $addons;

		return $agreement;
	}

	/**
	 * 获取任务是否交了履约保证金
	 */
	public function getAgreementMoney(){

		throw new Exception("方法已重写getAgreementMoney");

		$srvAgreement = new zbj_model_mk_taskagreement();
		$agreement = $srvAgreement->selectOne("task_id='{$this->id}' and is_invalid='0'");
		if(empty($agreement)){
			return false;
		}
		$m_taskagreenmentcondrel = new zbj_model_mk_taskagreementcondrel();
		$data_taskagreenmentcondrel = $m_taskagreenmentcondrel->selectOne(array('agreeid'=>$agreement['agreeid'],'status'=>1,'agree_cond_id'=>1),"value","","order by agree_cond_rel_id desc");
		if(empty($data_taskagreenmentcondrel)){
			return false;
		}
		$agreementmoney = round(zbj_lib_BaseUtils::getStr($data_taskagreenmentcondrel['value'],'int'),2);
		return $agreementmoney>0?$agreementmoney:false;
	}
	/**
	 * 获取任务交了履约保证金的记录id
	 */
	public function getAgreementById(){
		throw new Exception("方法已重写getAgreementById");
		$srvAgreement = new zbj_model_mk_taskagreement();
		$agreement = $srvAgreement->selectOne("task_id='{$this->id}' and is_invalid='0'");
		if(empty($agreement)){
			return false;
		}
		$m_taskagreenmentcondrel = new zbj_model_mk_taskagreementcondrel();
		$data_taskagreenmentcondrel = $m_taskagreenmentcondrel->selectOne(array('agreeid'=>$agreement['agreeid'],'agree_cond_id'=>1),"agree_cond_rel_id","","order by agree_cond_rel_id desc");
		if(empty($data_taskagreenmentcondrel)){
			return false;
		}
		$agreementid = zbj_lib_BaseUtils::getStr($data_taskagreenmentcondrel['agree_cond_rel_id'],'int');
		return $agreementid>0?$agreementid:false;
	}
	/**
	 * 取消中标后，设置交易合同失效
	 *
	 */
	public function setAgreementInvalid()
	{	
		throw new Exception("方法已重写setAgreementInvalid");

		$agreement = $this->loadAgreements(false);
		if (!is_numeric($agreement['agreeid'])) return true;
		if ($agreement['is_invalid']) {
			$this->setError(0,'已经失效了');
			return false;
		}
		$m_agm = new zbj_service_agreement($agreement['agreeid']);
		$m_agm->set('is_invalid', 1);
		$m_agm->set('is_invalidtime', $this->_time);
		if(!$m_agm->save()){
			$this->setError(0,'交易合同操作失败'.$m_agm->getError());
			return false;
		}

		//重置任务交易协议操作
		$option = $this->get('task_info.option');
		$option = $option?unserialize($this->get('task_info.option')):array();
		if(empty($option)){
			$this->setError(0,'获取需求扩展数据失败');
			return false;
		}
		$option['agree_step'] = 1;
		$option['ag_ymd'] = '';
		$option['ag_times'] = 0;
		$this->set('task_info.option',serialize($option));
		if(!$this->save()){
			return false;
		}
		return true;
	}
	/**
	 * 对交易协议已经执行成功了的附加条件进行取消操作
	 *
	 */
	public function cancelAgreementCond($transaction=false)
	{
		throw new Exception("方法已重写cancelAgreementCond");
		
		$agreement = $this->loadAgreements(false);
		if($agreement['cond'] && is_array($agreement['cond'])) {
			foreach($agreement['cond'] as $_cond){
				$srvAgreementCond = new zbj_service_agreementcond($_cond['agree_cond_rel_id']);
				$srvAgreementCond = $srvAgreementCond->init();
				if(!$srvAgreementCond->cancel($transaction)){
					$this->setError(0,'交易协议附加条件取消失败,'.$srvAgreementCond->getError());
					return false;
				}
			}
		}
		return true;
	}

	/**
	 * 加载协议模版中的子协议名称
	 * @param	int	$categoryid	3级分类id号
	 * @return array
	 */
	public function getChildAgreementName($categoryid=0){
		$categoryid = intval($categoryid);
		$categoryid <= 0 && $categoryid = $this->get('category_id');

		$cataModel = zbj_model_api::get('zbj_model_mk_category', $categoryid);
		$data = $cataModel->get();
		$addons = @explode(',',$data['agreement_addons']);
		return $addons;
	}

	/**
	 * 雇主要求重新传源文件
	 * @param int $lid 申请记录id
	 * @param string $content 拒绝理由
	 * @return boolean
	 */
	function representations($lid, $content){
		$condi = array('sourcelog_id'=>$lid,'task_id'=>$this->id);
		$sLogModel = new zbj_model_mk_workssourcelog();
		$rs = $sLogModel->selectOne($condi);
		if(!$rs){
			$this->setError(0, "没有对应的记录");return false;
		}
		try{
			$this->_beginTransaction('mk');
			$model = zbj_model_api::get('zbj_model_mk_crontaskpayment');
			if($model->delete(array('task_id'=>$this->id,'sid'=>$lid)) === false){
				throw new Exception('处理出错1');
			}
			$sData = unserialize($rs['content']);
			$sData['re_content'] = $content;
			$sData['re_time'] = $this->_time;
			$sData['is_re'] = 2;//申述发起
			$sLogData['state'] = 2;
			$sLogData['content'] = serialize($sData);
			if($sLogModel->update($condi, $sLogData) === false){
				throw new Exception('处理出错2');
			}
			$this->_commit('mk');
			return true;
		} catch(Exception $e) {
			//回滚事务
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			return false;
		}
	}

	public function kuaiYinIsCardPrint($task_info_option_arr=NULL) {
		$task_info_option_arr = $task_info_option_arr ? $task_info_option_arr : $this->getTaskInfoOption();
		if ($this->kuaiYinIsPushPrintData($task_info_option_arr) === false) return false;
		if (!$task_info_option_arr['expand']['ky_print']) {
			$this->setError(0, '任务没有购买印刷相关的服务');
			return false;
		}
		return true;
	}

	public function kuaiYinGetPrintInfo($task_info_option_arr=NULL) {
		if ($this->kuaiYinIsCardPrint($task_info_option_arr) === false) return false;

		$ky_order_type = $this->kuaiYinGetOrderType($task_info_option_arr);
		if ($ky_order_type === false) return false;

		$print_info = $ky_order_type == zbj_hook_kychannel::KY_ORDER_TYPE_PKG ? $task_info_option_arr['pack_info']['print_meal'] : $task_info_option_arr['print_price_info'];
		if (!$print_info) {
			$this->setError(0, '冗余中没有印刷相关的数据');
			return false;
		}
		return $print_info;
	}

	/**
	 *名片频道标识任务需要推送发布信息到快印
	 */
	public function kuaiYinMarkTaskNeedPushPub() {
		return $this->kuaiYinSetPushState(array('is_push_pub' => 1));
	}

	public function kuaiYinSetPushState($data) {
		$mdl = zbj_model_api::get('zbj_model_mk_taskkuaiyinpush');
		$mdl->setDbEntry();
		$condition = array('task_id' => $this->getId());
		$push_state_info = $mdl->selectOne($condition);
		if ($push_state_info) {
			$update_data = array();
			foreach ($data as $k => $v) {
				if ($push_state_info[$k] != $v) $update_data[$k] = $v;
			}
			if (!$update_data) return true;
			$action = '更新';
			$rslt = $mdl->update($condition, $update_data);
		} else {
			$data['task_id'] = $this->getId();
			$action = '插入';
			$rslt = $mdl->insert($data);
		}
		if (!$rslt) {
			$this->setError(0, "保存数据出错， {$action}失败, " . $mdl->getDbError());
			return false;
		}
		return true;
	}

	/**
	 *名片频道标识任务需要推送中标威客信息到快印
	 */
	public function kuaiYinMarkTaskNeedPushWin() {
		return $this->kuaiYinSetPushState(array('is_push_win' => 1));
	}
	/**
	 *判断任务是否来源于快印名片频道
	 *@deprecated 使用isFromKuaiYinChannel()
	 */
	public function kuaiYinIsFromVcardChannel($task_info_option_arr=NULL) {
		return $this->get('task_opis.ht') == 3;
	}

	const TASK_OPIS_HT_SJ = 2; //市集
	const TASK_OPIS_HT_VCARD = 3; //名片频道
	const TASK_OPIS_HT_ALBUM = 4; //画册频道

	/**
	 *任务是否来源于快印频道
	 */
	public function isFromKuaiYinChannel() {
		$ht_maps = $this->kuaiYinGetOpisHtMap();
		if (!in_array(intval($this->get('task_opis.ht')), array_values($ht_maps))) {
			$this->setError(0, '发布来源不是快印相关频道');
			return false;
		}
		return true;
	}
	public function kuaiYinGetOpisHtMap() {
		return array(
			'vcard' => self::TASK_OPIS_HT_VCARD,
			'album' => self::TASK_OPIS_HT_ALBUM,
		);
	}

	/**
	 *任务是否需要推送发布信息
	 */
	public function kuaiYinIsPushPub() {
		//return $this->isFromKuaiYinChannel();
		return $this->kuaiYinIsPushPrintData();
	}

	/**
	 *任务是否需要推送中标信息
	 */
	public function kuaiYinIsPushWin() {
		//return $this->isFromKuaiYinChannel();
		return $this->kuaiYinIsPushPrintData();
	}


	/**
	 *检查任务是否需要推送快印印刷信息到快印
	 *
	 */
	public function kuaiYinIsPushPrintData($task_info_option_arr=NULL) {
		if ($this->isFromKuaiYinChannel() === false)  {
			$this->setError(0, '不需要推送印刷信息到快印' . $this->getError());
			return false;
		}
		$options = $task_info_option_arr === NULL ? $this->getTaskInfoOption() : $task_info_option_arr;
		if (!$options && !is_array($options)) {
			$this->setError(0, '任务信息冗余为空或格式不正确');
			return false;
		}
		if ($options['expand']['ky_order_type'] <= 0) {
			$this->setError(0, '快印订单类型不正确');
			return false;
		}
		return true;
	}

	/**
	 *推送快印印刷信息到快印
	 *
	 */
	public function kuaiYinPushPrintData($task_info_option_arr=NULL) {
		if ($this->isFromKuaiYinChannel() === false) {
			$this->setError(0, '不需要推送印刷信息到快印');
			return false;
		}
		$options = $task_info_option_arr === NULL ? $this->getTaskInfoOption() : $task_info_option_arr;
		if(empty($options)){
			$this->setError(0,'获取需求扩展数据失败');
			return false;
		}
		if ($this->kuaiYinGetKyTradeNo($options)) return true;
		$rslt = zbj_lib_KuaiYinApi::pushPrintInfo($this, $options);
		if ($rslt === false) {
			$this->setError(0, '推送印刷信息返回错误 '. zbj_lib_KuaiYinApi::get_error());
			return false;
		};
		$trade_no = $rslt['trade_no'];
		if (!$trade_no) {
			$this->setError(0, '推送印刷信息成功， 但返回信息无快印订单号');
			return false;
		}
		if (zbj_lib_KuaiYinApi::decodeTradeNo($trade_no) === false) {
			$this->setError(0, "推送印刷信息成功， 但返回信息中的快印订单号{$trade_no}格式不正确，" . zbj_lib_KuaiYinApi::get_error() . ' 请联系客服');
			return false;
		}
		$options['ky_trade_no'] = $trade_no;
		$this->set('task_info.option', serialize($options));
		if ($this->save() === false) {
			$this->setError(0, '保存快印订单号失败');
			return false;
		}
		return $trade_no;
	}

	public function kuaiYinInitReplication() {
		$this->setError(0, '此任务模式不支持快印的仿制模式');
		return false;
	}
	public function kuaiYinGetOrderType($task_info_option_arr=NULL) {
		if ($this->isFromKuaiYinChannel() === false) {
			$this->setError(0, '任务发布来源不是来自于快印相关频道');
			return false;
		}
		$options = $task_info_option_arr ? $task_info_option_arr : $this->getTaskInfoOption();
		if (!$options) {
			$this->setError(0, '获取任务副表额外信息失败');
			return false;
		}
		return $options['expand']['ky_order_type'];
	}

	public function kuaiYinPushWinner() {
		$this->setDbEntry();
		if (!in_array((int)$this->get('mode'), array(10, 13))) {
			$this->setError(0, '此任务模式不支持推送任务完成状态到快印');
			return false;
		}
		if ($this->isFromKuaiYinChannel() === false) {
			$this->setError(0, '不需要推送任务状态,不是来自于快印相关频道');
			return false;
		}
		if ($this->get('state') != 4) {
			$this->setError(0, '不需要推送任务状态, 当前任务不是完成状态');
			return false;
		}
		$winner_uid = $this->get('task_info.succeed_user_id');
		if (!$winner_uid) {
			$this->setError(0, '推送任务状态失败, 无法获取中标用户id');
			return false;
		}
		$ky_trade_no = $this->kuaiYinGetKyTradeNo();
		if ($ky_trade_no === false) return false;
		if ( zbj_lib_KuaiYinApi::pushWinner(array('trade_no' => $ky_trade_no), new zbj_service_user($winner_uid)) === false) {
			$this->setError(0, '推送任务状态失败，' . zbj_lib_KuaiYinApi::get_error());
			return false;
		}
		return true;
	}

    /**
     * 是否签约快印服务商
     * @param $user_id
     */
	public function isKuaiYinSigning($user_id){

		if ($this->isFromKuaiYinChannel()) {
			$opis_ht = (int)$this->get('task_opis.ht');
			switch($opis_ht){
				case zbj_service_task_base::TASK_OPIS_HT_ALBUM:
					//画册频道
                    $model = new zbj_model_mb_commonwhitelist();
                    $type = 173;//画册（后台宣传册栏目编号）
                    $cond = array(
                        'user_id' => $user_id,
                        'type' => $type,
                        'state'=>1
                    );
                    $field = 'cw_id, state';
                    $item = $model->selectOne( $cond, $field );
                    if ( empty( $item )) {
                        return 1;
                   }
					break;
				case zbj_service_task_base::TASK_OPIS_HT_VCARD:
					//名片频道
					if ($this->isInKuaiYinVcardUserList($user_id) === false && $this->kuaiYinReplicationNotResponsed() === false) {
						return 2;
					}
					break;
				default:
					break;
			}
		}
		return 0;
	}


	/**
	 *检查当前登录用户是否是在快印设置的参与白名单中
	 */
	public function isInKuaiYinVcardUserList($user_id=false) {
		if ($user_id === false) return false;
		if (!ctype_digit((string) $user_id)) return false;
		$uid = intval($user_id);
		$lCache = new zbj_lib_cache('memcached');
//        $cache_name = controller_api_kuaiyin::CACHE_NAME_VCARD_USER_LIST;
		$cache_name = 'com.zhubajie.task.kuaiyin.vcard.user.list.uids';
		$cached_value = $lCache->get($cache_name);
		if ($cached_value === false) {
			$mdl = zbj_model_api::get('zbj_model_mb_userkyvcard');
			$uids = $mdl->select('', 'user_id')->items;
			$uids = array_keys(zbj_lib_BaseUtils::indexArray($uids, 'user_id', 'user_id'));
			$lCache->set($cache_name, $uids);
			$cached_value = $uids;
		}
		return in_array($uid, $cached_value);
	}


	public function isInKuaiYinChannelUserList($opis_ht, $user_id=false){
		if ($user_id === false) return false;
		if (!is_numeric($opis_ht)) return false;
		$uid = intval($user_id);
		$mdl = zbj_model_api::get('zbj_model_mb_userkychannel');
		if($mdl->selectOne(array('user_id' => $uid, 'opis_ht' => $opis_ht), 'user_id')){
			return true;
		}else{
			return false;
		}
	}

	public function kuaiYinReplicationNotResponsed() {
		$task_info_option_arr = $this->getTaskInfoOption();
		if ($this->isFromKuaiYinChannel() && $this->kuaiYinGetOrderType($task_info_option_arr) == zbj_hook_kyvcard::KY_ORDER_TYPE_LIKE) {
			$repli_info = $this->kuaiYinGetReplicationInfo();
			if ($repli_info['state'] == zbj_hook_kyvcard::KY_REPLICATION_RESPONSE_INITIAL) {
				return true;
			}
		}
		return false;
	}


	public function kuaiYinGetKyTradeNo($task_info_option_arr=NULL) {
		$task_info_option_arr = $task_info_option_arr === NULL ? $this->getTaskInfoOption() : $task_info_option_arr;
		if ($this->kuaiYinIsPushPrintData($task_info_option_arr) === false) return false;
		$ky_trade_no = $task_info_option_arr['ky_trade_no'];
		if (!$ky_trade_no) {
			$this->setError(0, '任务信息中没有快印订单号');
			return false;
		}
		return $ky_trade_no;
	}

	//建立雇主和用户之间的im
	function addUseWebim($tid){
		if($tid > 0 && $tid != $this->get('user_id')){
			$cache = new zbj_lib_cache('memcache');
			$cacheName = "webim_fid_".$this->get('user_id')."_tid_{$tid}";
			$cache->set($cacheName,time(),2592000);
			$cache->set('s_'.$cacheName,$cacheName,2592000);//用于检查是否为cache过期
		}
		return true;
	}

	/**
	* 取消需求的推广增值服务订单
	* @param int $type 0按照规则退 1全退 2不退
	*
    * @param int $TradeoffType 是否下帐 0退款，1只下任务，2下任务和增值服务
	*/
	function cancelVasOrder($type = 0,$TradeoffType=0,$refund_mode='',$isbt = true){
		if($type == 2) return true;
		$type = $type == 0 ? 1 : 0;
		$oModel = zbj_model_api::get('zbj_model_fn_order');
		$vasOrder = $oModel->select(array('product_pkid'=>$this->id,'state'=>1,'ptype'=>22,'ispay'=>1),'order_id')->items;
		if($vasOrder){
			foreach($vasOrder as $v){
				$order = new zbj_lib_sale();
				$order->setType(22);
				$order = $order->Order($v['order_id']);
				$order->setTransaction($isbt);
				// 临时方案：保证所有增值服务订单执行完成，不影响主流程
				$order->cancelOrder ($type,$TradeoffType,$refund_mode);
				/*if ($order->cancelOrder ($type,$TradeoffType) === false) {
					$this->setError ( 0, $order->getError () );
					return false;
				}*/
				unset($order);
			}
		}
		return true;
	}



	/**
	* 获取任务的状态
	* @return array | bool
	*/
	public function getTaskStatus(){
		if($this->id<=0){
			$this->setError(0,'参数错误'); return false;
		}

		$task = $this->get('*');

		//取订单数据
		if(in_array($task['mode'],array(11,12))){ // 雇佣
			$ptype = $this->getTaskToOrderMode();
			$orderModel = zbj_model_api::get('zbj_model_fn_order');
			$condition = array(
				"product_pkid='{$this->id}'",
				"stype=16",
				"ptype='{$ptype}'",
			);
			$order = $orderModel->selectOne($condition, '*', null, 'order by order_id asc');
			$order = is_array($order)&&!empty($order)?$order:false;
		}else if(in_array($task['mode'],array(10,13))){
			$order = $this->getPubOrder();
		}else{
			$this->setError(0,'不支持该任务模式'); return false;
		}
		if(empty($order) || $order==false){
			$this->setError(0,'获取订单失败'); return false;
		}

		$status = '';
		if($task['state']==0){
			$status = 'draft';	// 草稿
		}else if($task['state']==1 && $order['state']==2){
			$status = 'closed';	// 已关闭
		}else if($task['state']==1 && $task['hosted']==0 && $order['state']==0){
			$status = 'needhost';	// 新任务，待托管
		}else if($task['state']==2 && $task['hosted']==1 && $order['state']==0){
			$status = 'hosted';	// 已托管
		}else if($task['state']==3 && $order['state']==1 && in_array($task['mode'],array(10,13))){
			$status = 'needpay';	// 待付款
		}else if($task['state']==3 && $order['state']==0 && in_array($task['mode'],array(11,12))){
			$status = 'needpay';	// 待付款
		}else if($task['state']==4 && $order['state']==2){
			$status = 'cancle';	// 交易取消
		}else if($task['state']==4 && $order['state']==1 && $order['refund_state']>0){
			$status = 'refund';	// 交易退款
		}else if($task['state']==4 && $order['state']==1){
			$status = 'success';	// 交易成功
		}else{
			$status = 'other';
		}

		return array('status'=>$status,'order'=>$order,'task'=>$task);
	}
	/**
	 * 释放交易顾问阀值
	 * 本程序待优化
	 */
	public function releaseallot(){
		$task_id=$this->get('task_id');
		$s_allot=new zbj_service_allot(1);
		$s_allot->processed($task_id);
		$s_allot = new zbj_service_allot(2);
		$s_allot->processed($task_id);
		$s_allot5 = new zbj_service_allot(5);
		$s_allot5->processed($task_id);
		$s_allot22 = new zbj_service_allot(22);
		$s_allot22->processed($task_id);
		$s_allot23 = new zbj_service_allot(23);
		$s_allot23->processed($task_id);
		$s_allot24 = new zbj_service_allot(24);
		$s_allot24->processed($task_id);
		$s_allot25 = new zbj_service_allot(25);
		$s_allot25->processed($task_id);
		$s_allot26 = new zbj_service_allot(26);
		$s_allot26->processed($task_id);
		$s_allot27 = new zbj_service_allot(27);
		$s_allot27->processed($task_id);
		$s_allot28 = new zbj_service_allot(28);
		$s_allot28->processed($task_id);
		$s_allot29 = new zbj_service_allot(29);
		$s_allot29->processed($task_id);
		$s_allot30 = new zbj_service_allot(30);
		$s_allot30->processed($task_id);
		$s_allot31 = new zbj_service_allot(31);
		$s_allot31->processed($task_id);
	}

	/**
	 * 获取白名单派单名单
	 */
	public function getKuanYinWhiteList () {
		$white_list = array();

		if ($this->kuaiYinIsFromVcardChannel()) {
			$m_userkyvcard = new zbj_model_mb_userkyvcard();

			$white_list = $m_userkyvcard->select('', array('user_id'))->items;
		} elseif ($this->isFromKuaiYinChannel()) {
			$ht = $this->get('task_opis.ht');
			$m_userkychannel = new zbj_model_mb_userkychannel();

			$white_list = $m_userkychannel->select(array('opis_ht' => $ht), array('user_id'))->items;
		} else {
			$white_list = array();
		}

		if ($white_list) {
			foreach ($white_list as $key => $value) {
				$white_list[$key] = $value['user_id'];
			}
		}

		return $white_list;
	}

	//查询中标稿件id
	public function getSuccessWorkObject()
	{
		$mdl = zbj_model_api::get('zbj_model_mk_works');
		$mdl->setDbEntry();
		$data = $mdl->selectOne(array('task_id'=>$this->getId(), 'issuccess'=>'1'));
		if ( empty($data) ) return false;
		$worksObject = new zbj_service_works($data['works_id']);
		return $worksObject;
	}
	/*
	* 需求调查
	* @params int $type 1添加 2删除
	*/
	public function taskSurvey($type=1){
		$model = new zbj_model_cp_tasksurvey($this->id);
		if($type == 1){
			$model->add($this->id);
		}else{
			$model->delSurvey();
		}
		return true;
	}
	/**
	 * 返回退款消息
	 * @return string 退款信息
	 *
	 * @author Wang Haojie <wanghaojie@zhubajie.com> at 2014-08-20
	**/
	public function refundMsg() {
		//返回退款信息
		$psn = array();
		$tradePsnMdl = zbj_model_api::get('zbj_model_fn_tradepsn');
		$payFeeMdl = zbj_model_api::get('zbj_model_fn_payfee');
		$tradePsns = $tradePsnMdl->select(array('task_id' => $this->id),'psn');
    	$this->appid = zbj_lib_Constant::ZBJAPI_APPID;
    	$this->secret = zbj_lib_Constant::ZBJAPI_APPSECRET;
    	zbj_lib_ApiClient::init($this->appid,$this->secret);
		$api = new RefundServiceClient(null);
		zbj_lib_ApiClient::build($api);
		$details =  array();
		if(!empty($tradePsns->items)){
			foreach($tradePsns->items as $tradePsn) {
				$refundRst = $api->queryRefund($tradePsn['psn']);
				if($refundRst->success && !empty($refundRst->refund_list)) {
					foreach($refundRst->refund_list as $refund) {
						$details = array_merge($details,$refund->detail_list);
					}
				}
			}
		}
		$balanceAmount = 0;
		$bankAmount = array();
		if(empty($details)) {
			//无退款记录
			$this->setError(0,'无退款记录');
			return false;
		}
		foreach($details as $detail) {
			if($detail->refund_amount_type == ChargeAmountType::BALANCE_PAY) {
				$balanceAmount += $detail->refund_amount;
			} else {
				$bankAmount[$detail->refund_bank_code] += $detail->refund_amount;
			}
		}
		if($balanceAmount > 0) {
			$result = $balanceAmount . '元将退回余额,';
		}
		foreach(array_keys($bankAmount) as $key) {
			$result .= $bankAmount[$key]. '元将于'. date('m月d日',strtotime('5 day')) . '退回到'.$payFeeMdl->getBankNameByStrCode($key) . ',';
		}
		return strlen($result) > 0 ? substr($result,0,strlen($result)-1) : '';
	}

	/**
	 * 投标限制
	 * */
    public function checkAllowSignNew($srvUser){
        if($this->get('user_id') == $srvUser->get('user_id')){
            $this->setError (-2, "不能参与自己的需求！" );
            return false;
        }
        if (!$srvUser->isAllowPost ()) {
            $this->setError (-3, "您的账户已被锁定，不能参与！" );
            return false;
        }
        if(!$srvUser->checkQuota(6)){
        	$errmsg = $srvUser->getError();
            $this->setError(-4,$errmsg?$errmsg:'对不起，您被限制交稿！');
            return false;
        }

        // 新模式需求
        if($this->checkCanBid($srvUser->get('user_id')) == false){
        	$this->setError (-5, $this->getError());
            return false;
        }
        if($this->get('mode')==13 && $this->get('task_opis.special_type')>0){ // 新网建专场、招标0佣金
			$this->setError(0,'该需求不支持投标');
			return false;
		}
        $option = $this->getTaskInfoOption();
        //不满意免单增值服务需求投标判断
        if(isset($option['freetaskservice']) && $option['freetaskservice']==1 && $this->get('mode') == 10){

        	//获取信用度
        	 if($this->get('hosted_time')>=1419264000){
	        	$credit = $srvUser->getCredit();
	        	if($credit<90){
	        		 $this->setError(-5, '该需求要求信用度为90分以上的服务商才能投标');
	            	 return false;
	        	}
	        	$option['security'][1]['canceltimes'] = 0;
	        	$option['security'][2]['canceltimes'] = 0;
        	}

        }
//        $srvZone = new zbj_service_zone_hongkong(false);
        if(isset($option['security']) && !empty($option['security'])){
            $srvSecurity = new zbj_service_security();
            $security_name = $srvSecurity->_sectype;
            $my_security = $srvSecurity->getSecurityStateByUserId($srvUser->getId(), false, true);
            foreach($option['security'] as $_sec=>$_secv){
                if ( isset($security_name[$_sec]) && intval($_secv['canceltimes']) < 1 ) {
                    if(!in_array($this->id,array(5333650,5446755))){
	                    if ($my_security['xiaobao_'.$_sec] == 0){
	                        $this->setError(-5, '需要加入“'.$security_name[$_sec]['title'].'” <a href="'.zbj_lib_Constant::UC_URL.'/newsecurity/Mysecurity">去加入</a>(现在加入，每月仅需10元/月即可享受千元保障额度)');
	                        return false;
	                    }else if( $my_security['xiaobao_'.$_sec] == -1) {
	                        $this->setError(-5, $security_name[$_sec]['title'].'”计划还在审核中，生效以后您才能投标');
	                        return false;
	                    }
                    }
                }
            }
        }
        // 仅派单用户可投标
        $srvRecommend = new zbj_service_recommend();
        if($option['recmtBidOnly']==1 && $srvRecommend->isValidUser($srvUser->getId(),$this->getId())!==true){
        	$this->setError(-4, '对不起，该需求仅商机推送用户可参与！');
            return false;
        }

        if($srvUser->get('mobilestatus') != 1) {
            $this->setError(-5, '需要进行手机认证 <a href="###" onclick="mobileVerify(function(){window.location.reload();},{alert:\'绑定后交易动态将及时发送到手机中，您的手机号将严格保密不会被公开\', title:\'绑定手机\', btn_cancel:\'取消\'})" class="ml5">去认证</a>');
            return false;
        }

        if(!in_array($this->get('category1id'), array(1356, 9,684, 749, 1346, 1310, 822, 832))){

            if(in_array($this->get('category_id'),array(1230,1227,1385,1225,1218,1248,1372,1247,1461,1460,1446,1271))&&$this->get('mode') == 10 && $this->get('allot') == 3){
				//特定类目下计件模式提交稿件取消实名认证
			} elseif( $srvUser->getRealType() === 0 ){
                $this->setError(-5, '需要进行实名认证 <a href="'.zbj_lib_Constant::YAN_URL.'">去认证</a>');
                return false;
            }
        }
        // is_mall=1：钩先了未生效，is_mall=2: 已生效
        if($this->get('task_info.is_mall')==2 && (int)($srvUser->isMallUser())!=1){
        	$this->setError(-5, '您还没有入驻优选商城');
            return false;
        }

//        if ( false && true !== $srvZone->isHongKongServicer($srvUser->get('user_id')) ) {
//            if ( true === $this->isHongKongTask() && false === $srvZone->isEnteredHk( $srvUser->get('user_id') ) ) {
//                $this->setError(-5, '您未申请入驻香港馆');
//                return false;
//            }
//        }

        return true;
    }

	/**
	 * 判断是否隐藏昵称
	 * */
    public function getIsBidLimitCategory($category1id = 0){
        if(empty($category1id)){
            $category1id = $this->get('category1id');
        }
        return false;//可以上传附件
        return in_array($category1id, array(16));
    }

    /**
     * 获取任务中要请的服务商列表
     * @param	array	$state	邀请状态:0新,1邀请成功,2拒绝
     * @param	string	$fileds	字段名称
     * */
    public function getInvitedUserList($state=array(0,1),$fileds='user_id'){
    	if(!$this->id){		return array();   	}

    	$stateArray = array();
    	if(!empty($state) && is_array($state)){
    		foreach($state as $v){
    			$stateArray[] = intval($v);
    		}
    		$stateArray = array_unique($stateArray);
    	}

    	$condition = array('task_id='.$this->id);
    	if(!empty($stateArray)){
    		$condition[] = 'state in('.implode(',',$stateArray).')';
    	}
    	$srvInvite = zbj_model_api::get('zbj_model_mk_taskinvite');
    	$result = $srvInvite->select($condition, $fileds)->items;

    	return !empty($result)&&is_array($result)?$result:array();
    }


    /**
     * 获取该三级类目下的关联营销数据【暂时为读取数组，后期应该是可以配置】
     * @param 	int 	$category3id
     * @param	array
     * */
    public function getRelationServices($category3id){
    	$category3id = intval($category3id);
    	$category3id<=0 && $category3id = $this->get('category_id');
    	if(empty($category3id)) return array();

    	// 后期该数组从数据库取出
    	$relation = array();
    	switch($category3id){
    		case 1262:	//产品外观设计
    			$relation = array(
					$this->buildRelationService('产品画册设计','37.60%','http://www.zhubajie.com/xccsj/',1),
					$this->buildRelationService('VI设计','40.00%','http://www.zhubajie.com/vi/p.html',1),
					$this->buildRelationService('机械设计','20.00%','http://www.zhubajie.com/jixiesheji/p.html',1),
					$this->buildRelationService('电子产品设计','16.20%','http://www.zhubajie.com/dzsj/p.html',0),
					$this->buildRelationService('家具设计','12.40%','http://www.zhubajie.com/jiajusj/p.html',0),
					$this->buildRelationService('电路设计','11.70%','http://www.zhubajie.com/dianlu/p.html',0),
					$this->buildRelationService('日用品设计','9.50%','http://www.zhubajie.com/rypsj/p.html',0),
					$this->buildRelationService('体育用品设计','8.00%','http://www.zhubajie.com/tyypsj/p.html',0),
					$this->buildRelationService('礼品设计','15.50%','http://www.zhubajie.com/lipinsheji/p.html',0),
				);
				break;
			case 286:	//机械设计
				$relation = array(
					$this->buildRelationService('电子产品设计','36.00%','http://www.zhubajie.com/dzsj/p.html',1),
					$this->buildRelationService('电路设计','30.00%','http://www.zhubajie.com/dianlu/p.html',1),
					$this->buildRelationService('VI设计','40.00%','http://www.zhubajie.com/vi/p.html',1),
					$this->buildRelationService('产品外观设计','22.80%','http://www.zhubajie.com/cpwgsj/p.html',0),
					$this->buildRelationService('家具设计','18.90%','http://www.zhubajie.com/jiajusj/p.html',0),
					$this->buildRelationService('日用品设计','14.60%','http://www.zhubajie.com/rypsj/p.html',0),
					$this->buildRelationService('体育用品设计','15.80%','http://www.zhubajie.com/tyypsj/p.html',0),
					$this->buildRelationService('礼品设计','11.70%','http://www.zhubajie.com/lipinsheji/p.html',0),
				);
				break;
			case 287:	//电路设计
				$relation = array(
					$this->buildRelationService('电子产品设计','40.50%','http://www.zhubajie.com/dzsj/p.html',1),
					$this->buildRelationService('机械设计','30.50%','http://www.zhubajie.com/jixiesheji/p.html',1),
					$this->buildRelationService('产品外观设计','21.60%','http://www.zhubajie.com/cpwgsj/p.html',0),
					$this->buildRelationService('包装设计','27.30%','http://www.zhubajie.com/bzsj/p.html',1),
					$this->buildRelationService('家具设计','13.60%','http://www.zhubajie.com/jiajusj/p.html',0),
					$this->buildRelationService('日用品设计','13.30%','http://www.zhubajie.com/rypsj/p.html',0),
					$this->buildRelationService('体育用品设计','11.00%','http://www.zhubajie.com/tyypsj/p.html',0),
					$this->buildRelationService('礼品设计','12.70%','http://www.zhubajie.com/lipinsheji/p.html',0),
				);
				break;
			case 1262:	//礼品设计
				$relation = array(
					$this->buildRelationService('包装礼盒设计','52.10%','http://www.zhubajie.com/lhbz/p.html',1),
					$this->buildRelationService('产品外观设计','40%','http://www.zhubajie.com/cpwgsj/p.html',1),
					$this->buildRelationService('机械设计','26.80%','http://www.zhubajie.com/jixiesheji/p.html',0),
					$this->buildRelationService('电子产品设计','19.30%','http://www.zhubajie.com/dzsj/p.html',0),
					$this->buildRelationService('家具设计','15.90%','http://www.zhubajie.com/jiajusj/p.html',0),
					$this->buildRelationService('电路设计','14.20%','http://www.zhubajie.com/dianlu/p.html',0),
					$this->buildRelationService('日用品设计','12.00%','http://www.zhubajie.com/rypsj/p.html',0),
					$this->buildRelationService('体育用品设计','9.10%','http://www.zhubajie.com/tyypsj/p.html',0),
				);
				break;
			case 1468:	//住宅建筑
				$relation = array(
					$this->buildRelationService('新房装修','41.30%','http://www.zhubajie.com/xinfang/p.html',1),
					$this->buildRelationService('二手房装修','11.40%','http://www.zhubajie.com/esfzx/p.html',1),
					$this->buildRelationService('背景墙装修','10.10%','http://www.zhubajie.com/bjqsj/p.html',0),
					$this->buildRelationService('小户型装修','9.10%','http://search.zhubajie.com/p/?kw=小户型',0),
					$this->buildRelationService('客厅装修','8.10%','http://search.zhubajie.com/s/?kw=客厅',0),
					$this->buildRelationService('精装修','7.90%','http://www.zhubajie.com/jzfsj/p.html',0),
					$this->buildRelationService('装修效果图','6.70%','http://search.zhubajie.com/s/?kw=装修效果图',0),
				);
				break;
			case 348:	//住宅建筑
				$relation = array(
					$this->buildRelationService('装修效果图','33.20%','http://search.zhubajie.com/s/?kw=装修效果图',1),
					$this->buildRelationService('新房装修','24.10%','http://www.zhubajie.com/xinfang/p.html',1),
					$this->buildRelationService('画册设计','22.40%','http://www.zhubajie.com/xccsj/',1),
					$this->buildRelationService('门面装修','21.40%','http://www.zhubajie.com/dianmian/p.html',0),
					$this->buildRelationService('餐厅装修','20.10%','http://www.zhubajie.com/canting/sb1.html',0),
					$this->buildRelationService('客厅装修','17%','http://search.zhubajie.com/s/?kw=客厅',0),
					$this->buildRelationService('二手房装修','11.40%','http://www.zhubajie.com/esfzx/p.html',0),
					$this->buildRelationService('背景墙装修','10.10%','http://www.zhubajie.com/bjqsj/p.html',0),
					$this->buildRelationService('小户型装修','9.10%','http://search.zhubajie.com/p/?kw=小户型',0),
				);
				break;
			case 1467:	//商业建筑
				$relation = array(
					$this->buildRelationService('商业装修','30.40%','http://www.zhubajie.com/syzxiu/p.html',1),
					$this->buildRelationService('门面装修','18.70%','http://www.zhubajie.com/dianmian/p.html',1),
					$this->buildRelationService('餐厅装修','19.40%','http://www.zhubajie.com/canting/sb1.html',0),
					$this->buildRelationService('画册设计','20.5%%','http://www.zhubajie.com/xccsj/',1),
					$this->buildRelationService('VI设计','25.30%','http://www.zhubajie.com/vi/p.html',1),
					$this->buildRelationService('酒吧装修','8.60%','http://www.zhubajie.com/jiuba/p.html',0),
					$this->buildRelationService('连锁店装修','6.70%','http://search.zhubajie.com/s/?kw=连锁店&type=',0),
					$this->buildRelationService('门头设计','6.10%','http://search.zhubajie.com/p/s11c1000033b2.html?kw=门头',0),
					$this->buildRelationService('办公室','5.80%','http://www.zhubajie.com/bgszxiu/p.html',0),
					$this->buildRelationService('宾馆','4.20%','http://www.zhubajie.com/bgzxiu/p.html',0),
				);
				break;
			case 1448:	//LOGO设计
				$relation = array(
					$this->buildRelationService('名片设计','36.70%','http://www.zhubajie.com/mpsj/',1),
					$this->buildRelationService('网络推广','32.50%','http://www.zhubajie.com/tuiguang/p.html',1),
					$this->buildRelationService('招牌设计','25.10%','http://www.zhubajie.com/zpsj/p.html',1),
					$this->buildRelationService('卡通形象','27.60%','http://www.zhubajie.com/katongsj/p.html',1),
					$this->buildRelationService('门面装修','22.40%','http://www.zhubajie.com/dianmian/p.html',0),
					$this->buildRelationService('餐厅装修','10.80%','http://www.zhubajie.com/canting/sb1.html',0),
					$this->buildRelationService('VI设计','17.90%','http://www.zhubajie.com/vi/p.html',0),
					$this->buildRelationService('广告牌制作','12.60%','http://www.zhubajie.com/guanggaopai/p.html',0),
					$this->buildRelationService('产品外观设计','13.50%','http://www.zhubajie.com/cpwgsj/p.html',0),
					$this->buildRelationService('机械设计','10.30%','http://www.zhubajie.com/jixiesheji/p.html',0),
					$this->buildRelationService('照片处理','9.80%','http://www.zhubajie.com/spzcl/p.html',0),
					$this->buildRelationService('包装设计','9.20%','http://www.zhubajie.com/bzsj/p.html',0),
				);
				break;
			case 1363:	//VI设计
				$relation = array(
					$this->buildRelationService('宣传画册','35.70%','http://www.zhubajie.com/xccsj/',1),
					$this->buildRelationService('门面装修','28.10%','http://www.zhubajie.com/dianmian/p.html',1),
					$this->buildRelationService('餐厅装修','19.40%','http://www.zhubajie.com/canting/sb1.html',0),
					$this->buildRelationService('LOGO设计','18.60%','http://www.zhubajie.com/logo/',1),
					$this->buildRelationService('产品外观设计','26.20%','http://www.zhubajie.com/cpwgsj/p.html',1),
					$this->buildRelationService('卡通形象','21.60%','http://www.zhubajie.com/katongsj/p.html',0),
					$this->buildRelationService('礼品设计','17.20%','http://www.zhubajie.com/lhbz/p.html',0),
					$this->buildRelationService('包装礼盒设计','15.80%','http://www.zhubajie.com/lhbz/p.html',0),
					$this->buildRelationService('广告牌制作','12.60%','http://www.zhubajie.com/guanggaopai/p.html',0),
					$this->buildRelationService('海报','11.70%','http://www.zhubajie.com/haibaosj/p.html',0),
				);
				break;
			case 173:	//宣传册设计
				$relation = array(
					$this->buildRelationService('商品照处理','35.20%','http://www.zhubajie.com/photo/p.html',1),
					$this->buildRelationService('产品外观设计','29.70%','http://www.zhubajie.com/cpwgsj/p.html',1),
					$this->buildRelationService('VI设计','17.90%','http://www.zhubajie.com/vi/p.html',0),
					$this->buildRelationService('LOGO设计','23.60%','http://www.zhubajie.com/logo/',1),
					$this->buildRelationService('包装设计','14.20%','http://www.zhubajie.com/bzsj/p.html',0),
					$this->buildRelationService('广告牌制作','12.60%','http://www.zhubajie.com/guanggaopai/p.html',0),
					$this->buildRelationService('海报','11.70%','http://www.zhubajie.com/haibaosj/p.html',0),
					$this->buildRelationService('宣传单','15.50%','http://www.zhubajie.com/dmsj/p.html',0),
				);
				break;
				
			case 170:	//海报设计
				$relation = array(
					$this->buildRelationService('宣传单','35.50%','http://www.zhubajie.com/dmsj/p.html',1),
					$this->buildRelationService('论坛推广','30.70%','http://www.zhubajie.com/bbstuiguang/p.html',1),
					$this->buildRelationService('店招设计','24.50%','http://www.zhubajie.com/zpsj/p.html',1),
					$this->buildRelationService('宣传画册','22.70%','http://www.zhubajie.com/xccsj/',0),
					$this->buildRelationService('LOGO设计','18.60%','http://www.zhubajie.com/logo/',0),
					$this->buildRelationService('VI设计','17.90%','http://www.zhubajie.com/vi/p.html',0),
					$this->buildRelationService('名片设计','15.10%','http://www.zhubajie.com/mpsj/',0),
					$this->buildRelationService('广告牌制作','12.60%','http://www.zhubajie.com/guanggaopai/p.html',0),
				);
				break;
			case 177:	//DM设计
				$relation = array(
					$this->buildRelationService('QQ推广','32.80%','http://www.zhubajie.com/qqqun/p.html',1),
					$this->buildRelationService('海报','25.70%','http://www.zhubajie.com/haibaosj/p.html',1),
					$this->buildRelationService('LOGO设计','23.60%','http://www.zhubajie.com/logo/',1),
					$this->buildRelationService('VI设计','17.90%','http://www.zhubajie.com/vi/p.html',0),
					$this->buildRelationService('包装设计','14.20%','http://www.zhubajie.com/bzsj/p.html',0),
					$this->buildRelationService('照片处理','13.80%','http://www.zhubajie.com/spzcl/p.html',0),
					$this->buildRelationService('店招设计','13.50%','http://www.zhubajie.com/zpsj/p.html',0),
					$this->buildRelationService('名片设计','15.10%','http://www.zhubajie.com/mpsj/',0),
				);
				break;
			case 1212:	//包装设计
				$relation = array(
					$this->buildRelationService('礼品设计','29.90%','http://www.zhubajie.com/spzcl/p.html',1),
					$this->buildRelationService('店招设计','27%','http://www.zhubajie.com/zpsj/p.html',1),
					$this->buildRelationService('LOGO设计','23.60%','http://www.zhubajie.com/logo/',1),
					$this->buildRelationService('VI设计','17.90%','http://www.zhubajie.com/vi/p.html',0),
					$this->buildRelationService('照片处理','13.80%','http://www.zhubajie.com/spzcl/p.html',0),
					$this->buildRelationService('名片设计','15.10%','http://www.zhubajie.com/mpsj/',0),
					$this->buildRelationService('宣传画册','20.40%','http://www.zhubajie.com/xccsj/',0),
					$this->buildRelationService('海报','11.70%','http://www.zhubajie.com/haibaosj/p.html',0),
					$this->buildRelationService('卡片设计','12.60%','http://www.zhubajie.com/mpkpsj/p.html',0),
					$this->buildRelationService('banner制作','10.10%','http://www.zhubajie.com/banner/p.html',0),
				);
				break;
			case 174:	//招牌设计
				$relation = array(
					$this->buildRelationService('LOGO设计','33.60%','http://www.zhubajie.com/logo/',1),
					$this->buildRelationService('VI设计','25.90%','http://www.zhubajie.com/vi/p.html',1),
					$this->buildRelationService('店招设计','22%','http://www.zhubajie.com/zpsj/p.html',1),
					$this->buildRelationService('海报','19.70%','http://www.zhubajie.com/haibaosj/p.html',1),
					$this->buildRelationService('宣传画册','18.10%','http://www.zhubajie.com/xccsj/',0),
					$this->buildRelationService('照片处理','16.80%','http://www.zhubajie.com/spzcl/p.html',0),
					$this->buildRelationService('包装设计','14.20%','http://www.zhubajie.com/bzsj/p.html',0),
					$this->buildRelationService('卡片设计','12.60%','http://www.zhubajie.com/mpkpsj/p.html',0),
					$this->buildRelationService('banner制作','10.10%','http://www.zhubajie.com/banner/p.html',0),
				);
				break;
			case 1271:	//淘宝店铺推广
				$relation = array(
					$this->buildRelationService('图片处理','45.20%','http://www.zhubajie.com/spzcl/p.html',1),
					$this->buildRelationService('微博推广','33.90%','http://www.zhubajie.com/weibo/p.html',1),
					$this->buildRelationService('banner设计','29.70%','http://www.zhubajie.com/banner/p.html',1),
					$this->buildRelationService('微信营销','22.50%','http://www.zhubajie.com/wxyx/s.html',0),
					$this->buildRelationService('QQ推广','17.60%','http://www.zhubajie.com/qqqun/p.html',0),
					$this->buildRelationService('淘宝收藏','19.20%','http://www.zhubajie.com/wdscfx/p.html',0),
					$this->buildRelationService('开团提醒','17%','http://search.zhubajie.com/p/?kw=%E5%BC%80%E5%9B%A2%E6%8F%90%E9%86%92',0),
					$this->buildRelationService('淘宝装修','15.10%','http://www.zhubajie.com/zdzx/p.html',0),
				);
				break;
			case 319:	//网店收藏分享
				$relation = array(
					$this->buildRelationService('淘宝推广','39.00%','http://www.zhubajie.com/taobaotuiguang/p.html',0),
					$this->buildRelationService('banner设计','33.50%','http://www.zhubajie.com/banner/p.html',1),
					$this->buildRelationService('图片处理','25.20%','http://www.zhubajie.com/spzcl/p.html',1),
					$this->buildRelationService('淘宝装修','18.90%','http://www.zhubajie.com/zdzx/p.html',1),
					$this->buildRelationService('QQ推广','17.60%','http://www.zhubajie.com/qqqun/p.html',0),
					$this->buildRelationService('微信营销','22.50%','http://www.zhubajie.com/wxyx/s.html',0),
					$this->buildRelationService('开团提醒','17%','http://search.zhubajie.com/p/?kw=%E5%BC%80%E5%9B%A2%E6%8F%90%E9%86%92',0),
					$this->buildRelationService('微博推广','15.50%','http://www.zhubajie.com/weibo/p.html',0),
				);
				break;
			case 1286:	//淘宝装修
				$relation = array(
					$this->buildRelationService('淘宝收藏','33.70%','http://www.zhubajie.com/wdscfx/p.html',1),
					$this->buildRelationService('包装设计','27.60%','http://www.zhubajie.com/spbz/p.html',1),
					$this->buildRelationService('图片处理','25.20%','http://www.zhubajie.com/spzcl/p.html',1),
					$this->buildRelationService('banner设计','21.10%','http://www.zhubajie.com/banner/p.html',0),
					$this->buildRelationService('微博推广','15.50%','http://www.zhubajie.com/weibo/p.html',0),
					$this->buildRelationService('微信营销','16.50%','http://www.zhubajie.com/wxyx/s.html',0),
					$this->buildRelationService('QQ推广','13.60%','http://www.zhubajie.com/qqqun/p.html',0),
					$this->buildRelationService('开团提醒','11%','http://search.zhubajie.com/p/?kw=%E5%BC%80%E5%9B%A2%E6%8F%90%E9%86%92',0),
					$this->buildRelationService('淘宝推广','19.90%','http://www.zhubajie.com/taobaotuiguang/p.html',0),
					$this->buildRelationService('商品详情页','17.20%','http://www.zhubajie.com/xqgysj/p.html',0),
				);
				break;
    	}
    	    	
    	return $relation;
    }
    
    private function buildRelationService($name,$rate,$link,$hightlight=false){
    	return array('keyword'=>$name,'rate'=>$rate,'link'=>$link,'hightlight'=>intval($hightlight));
    }

    /**
     * 对当前任务的雇主发起NPS调查的消息
     * @return [type] [description]
     */
    public function sendNPSSurvey(){
    	$user_id = $this->get('user_id');
    	if(!$user_id) return false;

    	$srvUser = new zbj_service_user($user_id);
    	$options = @unserialize($srvUser->get('info.expand'));
    	is_array($options) || $options = array();
    	if(!$options['sendNPSSurveyTime'] || zbj_lib_Constant::DOMAIN != 'zhubajie.com'){
    		$link = zbj_lib_Constant::TASK_URL.'/survey/index-tid-'.$this->id.'.html';
    		//发手机短信
    		$mobile = $srvUser->getAuthMobile();
    		if(zbj_lib_BaseUtils::IsMobile($mobile)){
    			$msg_data = array($this->id, $user_id, $this->_time);
    			$cache = new zbj_lib_cache('memcache');
    			$msg_key = substr(md5(join('|', $msg_data)),8,16);
    			$cache->set($msg_key, $msg_data, 86400*7); //一周

    			$msglink = zbj_lib_Constant::TASK_URL.'/survey/?g='.$msg_key;
    			$msg = sprintf('【你提我改】诚邀您评价猪八戒%s', $msglink);
				SSms::send($sendphone,$msg);
    		}
    		//发站内信
    		zbj_service_taskmsg::sendmsg($srvUser,'buyer','【你提我改】诚邀您评价猪八戒',array(22,0,0,0,0,0),array('task_id'=>$this->id, 'link'=>$link));

    		//发IM
    		$msg = '订单('.$this->id.')已付款结束，邀请您参加“将猪八戒网推荐给朋友”的问卷调查活动，您提供的意见将有助于猪八戒更好的完善服务！参与活动点击'.$link;
    		zbj_lib_BaseUtils::webim_sendOfficeMsg($user_id, $msg);

    		$options['sendNPSSurveyTime'] = $this->_time;
    		$srvUser->set('info.expand', serialize($options));
    		return $srvUser->save() ? true : false;
    	}
    }
    
    
    /**
     * 获取分类下配置的最低优选商城任务金额
     * @param	int	$category3id	3级分类id
     * @return false | float
     */
    public function getMallTaskMinAmount($category3id=0){
        $default_min_amount = 10000.00;
    	$category3id = intval($category3id);
    	$category3id<=0 && $category3id = $this->get('category_id');
    	if($category3id<=0){
    		$this->setError(0,'获取任务的所属分类失败');
    		//return false;
            return $default_min_amount;
    	}
    	
    	try{
	    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
	    	$mallapi = new MallServiceClient(NULL);
			zbj_lib_ApiClient::build($mallapi);
						
			$result = $mallapi->getIndustryConfByCategory3Id($category3id);
    	}catch(Exception $e){
    		$this->setError(0,$e->getMessage());
			//return false;
            return $default_min_amount;
    	}
    	
    	$result = (array)$result;

    	if(intval($result['is_success'])!=1){
			$this->setError(0,$result['msg'] . 'abcd');
			//return false;
            return $default_min_amount;
		}
		
		$setting = (array)($result['ext_params']);
		if(!isset($setting['min_task_amount'])){
			$this->setError(0,'获取优选商城配置失败');
            //return false;
            return $default_min_amount;
		}
		$minamount = (float)$setting['min_task_amount'];
		return round($minamount <= 0 ? $default_min_amount : $minamount, 2);
    }
    
    /**
     * 转换商城需求模式
     * @param	string	$type	base or mall	
     * @return bool
     */
    public function setTaskTypeToBaseOrMall($type){
    	$type = strtolower($type);
    	$tasktype = '';
    	switch($type){
    		case 'base': // 普通需求
    			$tasktype = 0; 
    			break;
    		case 'mall': // 商城需求
    			$tasktype = 1;
    			break;
    	}
    	
    	if(!$this->id){
    		$this->setError(0,'请先创建一个需求对象');
    		return false;
    	}else if(!is_numeric($tasktype)){
    		$this->setError(0,'不支持的需求类型');
    		return false;
    	}
		if ($this->exist() === false) return false;

    	$this->set('task_info.is_mall',$tasktype);
		if ($this->save() === false) {
			return $this->errorFalse('保存任务商城标识失败');
		}
		$search_update_type = 2;
		if ($this->updateTaskSearch($search_update_type) === false) {
			return $this->errorFalse('更新搜索数据失败 ' . $this->getError());
		}
		return true;
    }

	public function exist() {
		$task_id = intval($this->id);
		if ($task_id <= 0) return $this->errorFalse('无法获取需求id');
		if ($this->get('user_id') <= 0) return $this->errorFalse('需求不存在');
		$this->id = $task_id;
		return true;
	}

	/**
	 * 同步任务搜索数据
	 * @param string $type 1.create 2.update
	 * @return bool
	 */
	public function updateTaskSearch($type=1) {
		if ($this->exist() === false) return false;
		if (!in_array(intval($type), array(1,2))) {
			return $this->errorFalse('不支持的搜索更新类型');
		}
		$mdl = new zbj_model_mk_upsearcht5($this->id);
		$data = array(
			'task_id' => $this->id,
			'dateline' => $this->_time,
			'updType' => $type == 1 ? 'C' : 'U',
		);
		if ($mdl->insert($data) === false) {
			return $this->errorFalse('添加更新搜索记录失败');
		} else {
			return true;
		}
	}

    /**
     * @return bool 订单付款后的事件处理
     */
    public function afterPayOrder(){
        return false;
    }
        
    /**
     * 根据3级分类获取价格助手数据
     * @param	int	$category3id	第3级分类id
     * @return array
     */
    public function getPubTipsAmount($category3id=0){
    	$setting = $this->getCategorySetting('pub_tips_amount',$category3id);
    	$settingArray = (array)@json_decode($setting,true);
    	if(empty($settingArray)) return array();
    	foreach($settingArray as $key=>$line){
    		if(empty($line)) unset($settingArray[$key]);
    	}
    	return $settingArray;
    }
    
    /**
     * 根据3级分类获取需求配置的平均数据
     * @param	int	$category3id	第3级分类id
     * @return array
     */
    public function getTaskAvgData($category3id=0){
    	$taskAvgData = $this->getCategorySetting('task_avg_data',$category3id);
    	return (array)json_decode($taskAvgData,true);
    }
    
    /**
     * 获取指定分类的配置数据【默认为3级分类】
     * @param	string $filed	字段名
     * @param 	int	$categoryid	分类id,默认为3级分类
     * @return mixed
     * */
    public function getCategorySetting($filed,$categoryid=0){
    	$categoryid = intval($categoryid);
    	$categoryid<=0 && $categoryid = $this->get('category_id');
    	if($categoryid<=0){
    		$this->setError(0,'获取任务的所属分类失败');
    		return false;
    	}
    	$srvCategory = new zbj_service_category($categoryid);
    	return $srvCategory->get($filed);
    }
    
    /**
     * 验证是否分配给了新的需求跟进系统管理员【本方法为实验性质】
     * @param	int		$userid
     * @return bool
     * */
    public function checkCanBid($userid=0){
    	if(!$this->id){
    		$this->setError(0,'获取任务ID号失败');
    		return false;
    	}
		// 派单中，仅已派单用户可查看，其他无法查看、投标
    	if($this->get('task_opis.recmd_status')==1){
    		if($userid <= 0){
	    		$this->setError(0,'该需求不可投标');
				return false;
	    	}
	    	
	    	$recmdModel = zbj_model_api::get('zbj_model_mk_recommend');
	    	$recmd = $recmdModel->selectOne("task_id='{$this->id}' and user_id='{$userid}'",'id');
	    	if(!empty($recmd['id'])){
	    		return true;
	    	}
    	
	    	// 有报名也可见
	    	$tasksignModel = zbj_model_api::get('zbj_model_mk_tasksign');
	    	$users = $tasksignModel->select("task_id='{$this->id}'",'user_id')->items;
	    	$users = (array)$users;
	    	foreach($users as $u){
	    		if($u['user_id']==$userid) return true;
	    	}
	    	
	    	$this->setError(0,'该需求不可投标');
	    	return false;
    	}
    	// 未公开的招标，不可投标
    	if($this->get('mode')==13 && !in_array($this->get('audit_state'),array(1,3))){
    		$this->setError(0,'对不起，没有操作的权限');
    		return false;
    	}
    	// 未公开，无法查看、投标
		if($this->get('audit_state')>=4 && $this->get('task_info.pub_type')>=8){
			$this->setError(0,'该需求不可投标');
			return false;
		}
		return true;
    }
	/*
	服务化操作自开发票add cancel set的接口
	*/
	public function invoiceService($works, $work_type, $amount = 0, $tax = 0){
		try{
			if($work_type == 'add'){
				$userSrv = new zbj_service_user($works->get('user_id'));
				if(!$userSrv->checkInvoiceUser()){
					return true;
				}//验证是否需要自开发票
			}
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET, 5, array('invoice_sdk'));
			$client = new com\zhubajie\invoice\interfaces\InvoiceServiceClient(NULL);
			zbj_lib_ApiClient::build($client);
			$param = new com\zhubajie\invoice\dataobject\invoice\SellerDetailParamDO();
			$mode = $this->get('mode');
			$taxpayerModel = new zbj_model_mb_billtaxpayer();
			$taxpayer = $taxpayerModel->selectOne("user_id='{$works->get('user_id')}'",'*');
			if(is_numeric($taxpayer['state']) && $taxpayer['state'] == 0){  
				$invoice_type = com\zhubajie\invoice\dataobject\invoice\INVOICE_TYPE::NET;
			}else{
				$invoice_type = com\zhubajie\invoice\dataobject\invoice\INVOICE_TYPE::PAPER;
			}
			if($mode==11){
				$type = com\zhubajie\invoice\dataobject\invoice\TYPE::SERVICE;
			}elseif($mode==12){
				$type = com\zhubajie\invoice\dataobject\invoice\TYPE::BUY;
			}else{
				$type = com\zhubajie\invoice\dataobject\invoice\TYPE::TASK;
			}
			$param->user_id = $this->get('user_id');
			$param->service_id = $this->id;
			$param->biz_id = $works->getId();
			$param->sl_user_id = $works->get('user_id');
			$param->invoice_type = $invoice_type;
			$param->type = $type;
			switch ($work_type) {
				case 'add':
					$res = $client->createSellerDetail($param);
					$error_msg = '生成自开发票失败';
					if(!$res||!$res->success){
						$error_msg .= $res->message;
					}
					break;
				case 'cancel':
					$param->status = com\zhubajie\invoice\dataobject\invoice\SELLER_DETAIL_STATUS::DISABLED;
					$res = $client->setSellerDetailStatus($param);
					$error_msg = '取消自开发票失败';
					if(!$res||($res->code != -1&&!$res->success)){//code =-1时是之前中标时没有生成发票
						throw new Exception($error_msg);
        			}
        			return 2;
					break;
				case 'set':
					unset($param->invoice_type);
					$param->amount = $amount;
					$param->tax = $tax;
					$res = $client->setSellerDetailAmount($param);
					$error_msg = '设置自开发票金额失败';
					if(!$res||($res->code != -1&&!$res->success)){//code =-1时是之前中标时没有生成发票
						throw new Exception($error_msg);
        			}
					break;
				case 'query':
					unset($param->invoice_type);
					unset($param->type);
					$res = $client->searchSellerDetail($param);
					$error_msg = '当前用户在中标时没有自开发票记录';
					if(!$res||!$res->success){
						return false;
					}
					if(!$res->data){
						return 0;
					}
					if($res->data->invoice_type == com\zhubajie\invoice\dataobject\invoice\INVOICE_TYPE::NET){
						return 1;
					}
					break;
				default:
					$res = false;
					$error_msg = '操作失败';
					break;
			}
			if(!$res||!$res->success){
				throw new Exception($error_msg);
			}
		}catch(Exception $e){
			$this->addTaskActionLog($e->getMessage());
			$this->setError(0,$e->getMessage());
			return false;
		}
		return 2;
	}
	
	
    /**
     * 获取指定稿件下的交易步骤
     * @param	int		$workid
     * @param	bool	$iscurrent
     * @return array
     * */
    public function getWorkFlowByID($workid){
		$workid = intval($workid);
		
		if(!$this->id){
			$this->setError(0,'请指定需求编号');
			return false;
		}
		if($workid<=0){
			$this->setError(0,'请指定稿件编号');
			return false;
		}
		
		$srvTaskFlow = new zbj_service_workbench();
		return $srvTaskFlow->getWorkFlow($this->id,$workid);
    }
    
    /**
     * 检查需求是否网建专场需求
     * @param	string	$type	1:网建类 3:O佣金
     * @return bool
     * */
    public function checkSpecialMode($type=1){
    	if(!$this->id){
    		return false;
    	}

    	if($this->get('mode')!=13 && in_array($this->get('task_opis.special_type'),array(1,3))){
    		$this->set('task_opis.special_type',0);
    		$this->save();
    		return false;
    	}
    	
    	$result = false;
    	switch($type){
    		case 1:
    			$result = $this->get('task_opis.special_type')==1?true:false;
    			break;
    		case 3:
    			$result = $this->get('task_opis.special_type')==3?true:false;
    			break;
    	}
    	
    	return $result;
    }
    
    /**
     * 开启需求派单，系统会自动检查是否需要再次给需求派单
     * @return bool
     * */
    public function openRecommend(){
    	if(!$this->id){
    		$this->setError(0,'请指定需求编号');
    		return false;
    	}
    	// 非网建，0佣金需求默认成功
    	if($this->get('mode')!=13 || $this->get('task_opis.special_type')==0){
    		return true;
    	}
    	
    	try{
	    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$srvRcmd = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
			zbj_lib_ApiClient::build($srvRcmd);
		
			$result = $srvRcmd->openRecommend($this->id);
			if($result->success != true){
				throw new Exception($result->message);
			}
    	}catch(Exception $e){
    		$this->setError(0,$e->getMessage());
    		return false;
    	}
    	return true;
    }

	/**
	 *获取adunion信息
	 *@return mixed bool/array 
	 */
	protected function getAdunionInfo() {
		$adunion = zbj_lib_BaseUtils::getStr($_COOKIE['adunion']);
		if (! ($adunion && ctype_alnum($adunion) )) return false;
		$info_cookie_key = 'adunI';
		$info = zbj_lib_BaseUtils::getStr(trim($_COOKIE[$info_cookie_key])); 
		if (!$info) return false;
		$info = json_decode(zbj_lib_BaseUtils::authcode($info, 'DECODE'), true);
		if ($info['adunion'] != $adunion) return false;
		$expire = $info['visit_time'] + 3600 * 24 * 30 - $this->_time;
		if ($expire <= 0) return false;
		if ( ! $info['lead_id']) {
			$mdl= zbj_model_api::get('zbj_model_mk_adunionlead');
			$mdl->set('adunion', $adunion);
			$mdl->set('get', serialize($info['get_data']));
			$mdl->set('create_time', $info['visit_time']);
			$mdl->set('create_ymd', date('Y-m-d', $info['visit_time']));
			$lead_id = $mdl->save(false);
			if ($lead_id <= 0) return false;
			$info['lead_id'] = $lead_id;
			$adunion_info = zbj_lib_BaseUtils::authcode(json_encode($info), 'ENCODE');
			$cookie_new_data['adunion'] = $adunion;
			$cookie_new_data['adunion_lead_id'] = $lead_id;
			$cookie_new_data[$info_cookie_key] = $adunion_info;
			zbj_lib_BaseUtils::ssetcookie($cookie_new_data, $expire, '/', zbj_lib_Constant::COOKIE_DOMAIN);
		}
		return array(
			'adunion' => $adunion,
			'lead_id' => intval($info['lead_id']),
		);
	}

	/**
	 * 设置关闭交易的时间
	 */
	public function setTaskClose($close_role = 0) {
			$data = array(
				'close_time'=>$this->_time,
				'close_ymd'=>$this->_ymd,
			);
			
			if(!empty($close_role) && in_array($close_role,array(1,2,3))){
				$data['close_task_role'] = $close_role;
			}

		return $this->updateTaskExtends($data);
	}

    /**
     * 获取派单 投标的需求实际金额
     * @return bool
     */
    public function getRecmdBidModeAmount(){
        if(!$this->id){
            return false;
        }

        if($this->get("category_id") == 1333 && $this->get("hosted_amount")>0){
            return $this->get("hosted_amount");
        }

        return $this->get("amount")>$this->get("hosted_amount")?$this->get("amount"):$this->get("hosted_amount");
    }

    /**
     * 服务化获取需求的信息
     * @return bool
     */
    public function getTaskDetailFromThrift(){

        if(!$this->id){
            $this->setError(0,'请指定需求编号');
            return false;
        }

        try{

            $taskThrift = new TaskServiceClient(null);
            zbj_lib_ApiClient::build($taskThrift);

            $result = $taskThrift->getTaskDetail($this->id);
            if($result->success != true){
                throw new Exception($result->message);
            }
            return (array)$result->task_detail;
        }catch(Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }
    }

	/**
	 * 验证是否是派单\抢标模式
	 * @return bool
	 */
	public function isRecmdBidMode(){
		if(!$this->id){
            $this->setError(0,'请指定需求编号');
            return false;
        }
		
		if($this->get('mode') != 13){
			return false;
		}
		if($this->get('task_opis.special_type')>0){
			return true;
		}
		
		return false;
	}

    /**
     * 根据赏金金额设置交易协议状态
     * $param $amount  赏金金额
     * return string   新增协议状态   0：不允许协议(当前分类协议未开启||不满足开启交易协议条件)  1：默认关闭   2：默认开启   3：必须签订协议
     */
    public function setAgreementStatus($amount){
        throw new Exception('待重写的功能「setAgreementStatus」');
    }


    /**
	 * 获取任务状态
	 * @param $data 键值对数组
	 * @return bool
	 */
	public function getTaskState(){
		
		if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

        $sTask = new zbj_service_task($this->id);
		$sTask = $sTask->init();
		//任务信息
		$aTask = $sTask->get();
		//获取备选信息
		$mk_task_sign_data = $sTask->get('task_sign.*');
		//获取争议信息
		$mk_task_opis_data = $sTask->get('task_opis.*');
		//获取跟进信息
        $follows = zbj_model_api::get('zbj_model_mk_follow');
        $followdate = $follows->selectOne("task_id=$iTaskID");
		//info详情
		$aInfo = $sTask->get("task_info.*");
		$params['info'] = $aInfo;

        //报价信息
        $works_quote = zbj_model_api::get('zbj_model_mk_worksquote');
        $mk_works_quote_data = $works_quote->select("task_id=$iTaskID",'', '', '')->items;

        $twork = new zbj_model_mk_works();
		$tworkinfo = $twork->selectOne('task_id='.$iTaskID.' and issuccess=1','works_id');
        
        //任务状态判断,交易处理工作台20150318 by houxiaopeng
        if($aTask['open_state'] == 0 && !in_array($aTask['mode'],array(11,12))){
        	$time = time() + 302400;
			$nowdate = date('Y-m-d');
	        //1、受理订单    1
	        if($aTask['audit_state'] == 4 && $followdate['issys'] == 1){
                $params['taskstate'][1] = 1;
            }
            //2未发布
            if($aTask['state'] < 3 && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] >= 4){
                $params['taskstate'][2] = 2;
            }
            //3已发布
			if($aTask['state'] == 2 && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] < 4){
                $params['taskstate'][3] = 3;
            }
			//5、选标期过1/2未选标 7
            if($aTask['endymd'] < $nowdate && $aTask['state'] < 3 && $aTask['hosted'] >= 0 && $aTask['ext_selectime'] < $time && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] < 4){
                $params['taskstate'][5] = 5;
            }
			//6、雇主有备选  8
            if($mk_task_sign_data['alternative_num'] > 0 && $aTask['state'] < 3 && $aTask['hosted'] >= 0){
                $params['taskstate'][6] = 6;
            }
			//7、双方有争议发生 10
            if($mk_task_opis_data['report_type'] != ''){
                $params['taskstate'][7] = 7;
            }
            //10、已选稿
            if($aTask['state'] == 3){
                $params['taskstate'][10] = 10;
            }
            //11、结束并打款
            if($aTask['state'] == 4){
                $params['taskstate'][11] = 11;
            }

            if(!empty($mk_works_quote_data)){

	            foreach($mk_works_quote_data as $k=>$v){
	            	//4、有新的报价方案待审核 4 报价方案稿件ID号与稿件表的中标ID不相等
					if($v['auditstate'] == 0 && $v['works_id'] != $tworkinfo['works_id']){
		                $params['taskstate'][4] = 4;
		            }
					//8、工期过1/2  11
					if($aTask['state'] == 3 && $mk_task_sign_data['success_num'] > 0 && $v['day'] < (date('Y-m-d') - $v['beginymd'])*2 && $v['state'] == 1){
		                $params['taskstate'][8] = 8;
		            }
					//9、工期截止前3天  12
					if($aTask['state'] == 3 && $mk_task_sign_data['success_num'] > 0 && $v['endymd'] < date('Y-m-d') + 3 && $v['endymd'] > date('Y-m-d') && $v['state'] == 1){
		                $params['taskstate'][9] = 9;
		            }
	            }
	            
            }
        }
        //雇佣和购买服务
        if($aTask['open_state'] == 0 && $followdate['giveup_option'] == 0 && in_array($aTask['mode'],array(11,12))){
        	if(!empty($aInfo['option'])){
        		$option_gy = unserialize($aInfo['option']);
            	$abandonreason_gy = $option_gy['abandonreason'];
        	}
            //12雇佣和购买服务，已选标，未托管,首次受理
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 0 && $aTask['state'] == 3 && $followdate['issys'] == 1){
                $params['taskstate'][12] = 12;
            }
            //13雇佣和购买服务，交易取消（服务商取消）
            if(in_array($aInfo['end_type'],array(2,5)) && $followdate['issys'] == 1){
                $params['taskstate'][13] = 13;
            }
            //17雇佣和购买服务，交易取消（服务商取消）显示放弃和交易取消文案
            if(in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][17] = 17;
            }
            //14雇佣和购买服务，未联系上雇主
            if($abandonreason_gy == 2){
                $params['taskstate'][14] = 14;
            }
            //15已选标，已托管
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 1 && $aTask['state'] == 3 && $abandonreason_gy != 2 && !in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][15] = 15;
            }
            //16雇佣和购买服务，已选标，未托管,受理过后
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 0 && $aTask['state'] == 3 && $abandonreason_gy != 2 && !in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][16] = 16;
            }

        }

        $res = '';

        if($params['taskstate'][2] == 2 || $params['taskstate'][1] == 1){
        	$res = '未发布 ';
        }

        if($params['taskstate'][3] == 3 || $params['taskstate'][4] == 4 || $params['taskstate'][5] == 5 || $params['taskstate'][6] == 6 || $params['taskstate'][7] == 7){
        	$res .= '已发布 ';
        }

        if($params['taskstate'][8] == 8 || $params['taskstate'][9] == 9){
        	$res .= '已选标 ';
        }

        if($params['taskstate'][12] == 12 || $params['taskstate'][16] == 16){
        	$res .= '已选标，未托管 ';
        }

        if($params['taskstate'][13] == 13 || $params['taskstate'][17] == 17){
        	$res .= '交易取消 ';
        }

        if($params['taskstate'][15] == 15){
        	$res = '已选标，已托管 ';
        }

        if($mk_task_opis_data['recmd_status'] == 1){
        	$res .= '派单中';
        }
        $result = zbj_lib_BaseUtils::jsonp($res, $type=1);
        return $result;
	}
    
    /**
    * 判断需求是否来自商机
    * @return boolean
    */
   public function isBusiness(){
       $source = intval($this->get('task_info.task_source'));
       if($source == 99){
           return true;
       }
       return false;
   }
    
    /**
    * 判断需求是否为商机需求且为重要或紧急
    * @return boolean
    */
   public function isBusinessImportant(){
		$leftjoin = array(
			'mk_bstoct as b'=>'b.bs_to_ct_id = b_t.bs_to_ct_id',
		);
		$searchData='b_t.task_id='.$this->id;
		$bstoctTaskModel= zbj_model_api::get('zbj_model_mk_bstocttask');
		$item = "b.isurgent";
		$bstoctData=$bstoctTaskModel->_db->selectOne('mk_bstoct_task as b_t',$searchData,$item, null, null, $leftjoin);
		if($bstoctData['isurgent']==1||$bstoctData['isurgent']==2) return true;
		return false;
   }
    
	/**
	 * 添加需求更新日志
	 * @param 	array	$update 编辑需求的新数据，键值对数组
	 * @param	array	$operator	包含下标：mgrid(管理员ID),mgrname（管理员名字）
	 * @return bool
	 */
	public function addTaskEditLog(array $update,$operator=array()){
		if(!$this->id){
			return true;
		}
		$log = array();
		if(isset($update['title'])){
			$log['title'] = $update['title'];
		}
		if(isset($update['task_cont.content'])){
			$log['cont'] = $update['task_cont.content'];
		}
		
		if(empty($log)) return true;
		
		$operator['mgrid'] = intval($operator['mgrid']);
		
		if(!isset($log['title'])){
			$log['title'] = $this->get('title');
		}
		if(!isset($log['cont'])){
			$log['cont'] = $this->get('task_cont.content');
		}
		
		$logdata = array(
			'task_id'	=> $this->id,
			'edit_role'	=> $operator['mgrid']>0?2:1,
			'manager_id'=> $operator['mgrid'],
			'manager_name'	=> $operator['mgrname'],
			'content'		=> serialize($log),
			'createtime'	=> $this->_time,
		);
		
		$editlogModel = zbj_model_api::get('zbj_model_mk_taskeditlog');
		return $editlogModel->insert($logdata)!==false;
	}
		
	/**
	 * 获取任务支付的折扣（优惠券）金额
	 * @throws Exception
	 * @return boolean|number
	 */
	public function getDiscountFee(){
		$discountFee = 0;
		$condition = array(
			'fn_order.product_pkid'		=>$this->id,
			'fn_paylog.state'		=>1,
		);
		$condition[] = 'fn_paylog.type_ext in (1,2)';
		$item = array('distinct fn_paylog.key');
		$leftjoin = array(
			'fn_paylog'=>'fn_paylog.order_id = fn_order.order_id',
		);
		$model = zbj_model_api::get('zbj_model_fn_order');
		$result = $model->select($condition, $item, '', '', $leftjoin);
		//通过task_id获取order_id,获取out_biz_no
		if($result){
			$api = new com\zhubajie\pay2\interfaces\TradeServiceClient(NULL);
			zbj_lib_ApiClient::build($api);
			foreach ($result->items as $index=>$row){
				$params = new com\zhubajie\pay2\dataobject\trade\PublicParamsDO();
				$params->request_time = time();
				$params->request_no = '';
				$params->partner_id = 0; //主站业务
				try {
					$detail = $api->SingleTradeQuery($params, $row['key']);
					//var_dump($detail);
					if($detail->success === false){
						throw new Exception("获取订单明细出错：" . $detail->message);
					}
					if($detail->charge_details){
						foreach ($detail->charge_details as $idx=>$charge_detail){
							if($charge_detail->charge_chn_id == 64){ //优惠券
								$discountFee += $charge_detail->charge_amount - $charge_detail->refund_amount - $charge_detail->transit_refund_amount;
							}
						}
					}
				}catch(Exception $e) {
					$this->setError(0,$e->getMessage());
					return false;
				}
			}
		}
		return round((float)($discountFee), 2);
	}
	
	/**
	 * 更新需求扩展数据表
	 * @param $data 键值对数组
	 * @return bool
	 */
	public function updateTaskExtends($data){

		if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

		if(empty($data)){
			return true;
		}

		$model_extends = null;
		if($extends = $this->get("task_extends.*")){
			$model_extends = zbj_model_api::get("zbj_model_mk_taskextends",$this->id);
		}else{
			$model_extends = zbj_model_api::get("zbj_model_mk_taskextends");
			$model_extends->set("task_id",$this->id);
		}

		while(list($key,$value)=each($data)){
			$model_extends->set($key,$value);
		}

		if(false === $model_extends->save()){
			$this->setError(0,"需求扩展数据保存失败！");
			return false;
		}

		return true;
	}

	/**
	 * 更新5个服务商反馈需求价格过价和5个服务商反馈需求描述不清数据表
	 * @param $data task_id任务号 type类型 1：5个服务商反馈需求价格过价，2：5个服务商反馈需求描述不清
	 * @return bool
	 */
	public function updateTaskFeedback($data){

		if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

		if(empty($data)){
			return true;
		}

        $data['task_id'] = $this->id;
        $data['createtime'] = time();
        $data['createymd'] = date('Y-m-d');

        //查找是否有历史数据
        $model_feedback_record = zbj_model_api::get("zbj_model_mk_taskfeedbackrecord");
        $condition = array('task_id' => $this->id,'type' => $data['type']);
        $feedback_data = $model_feedback_record->selectOne($condition,'num');

		if($feedback_data){
			$datas['num'] = $feedback_data['num'] + 1;
			$res = $model_feedback_record->update($condition,$datas);
		}else{
			$data['num'] = 1;
			$res = $model_feedback_record->insert($data);
		}

		if(false === $res){
			$this->setError(0,"反馈信息的服务商数量保存失败！");
			return false;
		}

		return true;
	}

	/**
	 * 更新5个服务商反馈需求价格过价和5个服务商反馈需求描述不清数据,标记为已处理
	 * @param task_id任务号 type类型
	 * @return bool
	 */
	public function updateTaskFeedbackState(){
		if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

        //查找是否有历史数据
        $model_feedback_record = zbj_model_api::get("zbj_model_mk_taskfeedbackrecord");
        $condition = "task_id = {$this->id} and num >= 5 and state = 0";
        $feedback_data = $model_feedback_record->select($condition,'task_id');

		if($feedback_data === false || empty($feedback_data->items)) return false;

		$datas['state'] = 1;
		$datas['feedbacktime'] = time();
		$datas['feedbackymd'] = date('Y-m-d',time());
	    $res = $model_feedback_record->update($condition,$datas);

		if(false === $res){
			return false;
		}

		return true;
	}

	/**
	 * 获取跟单小助手数据
	 * userRole用户角色，1:雇主，2:服务商，3:交易顾问 userId 用户ID号
	 */
    public function getAssistData(){
    	if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

		$data = array(
              'taskId' => $this->id,
              //'worksId' => $data['worksId'],
              //'userId' => $userId,
              //'userRole' => $data['userRole'],
              'offset' => 0,
              'rows' => 30
			);

		$taskFollow = new zbj_service_taskfollow();
        $res = $taskFollow->getAssistData($data);
        $result = json_decode($res,true);


        if($result['success']){
        	$dataList = $result['data']['dataList'];
        }

        //获取未联系上数据
        $cannotContact = zbj_model_api::get('zbj_model_mk_cannotcontact');
        $cannotContactRes = $cannotContact->select("task_id = $this->id")->items;

        $AssistReason = array(
              '1' => '已联系上雇主',
              '2' => '确认联系不上雇主',
              '3' => '服务商放弃了'
        	);

        if($cannotContactRes){
        	foreach($cannotContactRes as $k=>$v){
        		$list[$v['user_id']]['99'][$v['cn_id']] = $v;
        		$list[$v['user_id']]['99'][$v['cn_id']]['reason'] = $AssistReason[$v['key']];
        	}
        }

        if(!empty($dataList)){
        	foreach($dataList as $k=>$v){
        		//1:跟单记录
                if($v['secType'] == 1){
                    $list[$v['userId']][$v['secType']][$v['id']] = $v;
                }
        		//11:一次跟单联系上雇主
                if($v['secType'] == 11){
                    $list[$v['userId']][$v['secType']][$v['id']] = $v;
                    $list['user_array'][$v['userId']] = $v['userId'];
                }
                //12一次未联系上
                if($v['secType'] == 12){
                    $list[$v['userId']][$v['secType']][$v['id']] = $v;
                    $list['user_array'][$v['userId']] = $v['userId'];
                }
                //41协助体系
                if($v['secType'] == 41){
                    $list[$v['userId']][$v['secType']][$v['id']] = $v;
                    $list['user_array'][$v['userId']] = $v['userId'];
                    $outId[] = $v['outId'];
                }
                //42协助回复
                if($v['secType'] == 42){
                    $list[$v['userId']][$v['secType']][$v['id']] = $v;
                    $list['user_array'][$v['userId']] = $v['userId'];
                }
                //31原因数据 21二次跟单
                if($v['secType'] == 31 || $v['secType'] == 21){
                	$content = json_decode($v['jsonContent'],true);
                	foreach($content as $contents){
	                	if(!empty($contents['secAnswerList'])){
	                		$cres[$v['userId']][$v['secType']][$v['id']] .= $contents['title'];
	                		foreach($contents['secAnswerList'] as $vv){
	                			if(!empty($vv['displayTxt'])) $cres[$v['userId']][$v['secType']][$v['id']] .= ','.$vv['displayTxt'];
	                			if(!empty($vv['inputTxt'])) $cres[$v['userId']][$v['secType']][$v['id']] .= ','.$vv['inputTxt'];
	                		}
	                	}
                    }
                	$v['contents'] = $cres[$v['userId']][$v['secType']][$v['id']];
                    $list[$v['userId']][$v['secType']][$v['id']] = $v;
                    $list['user_array'][$v['userId']] = $v['userId'];
                }
        	}
        }

        //通过协助ID集合搜索协助回复
        $reply = $taskFollow->getAssistInReplyData($outId);
        $replyArray = json_decode($reply,true);
        if($replyArray['success'] && !empty($replyArray['data'])){
        	foreach($replyArray['data'] as $k=>$v){
        		$list['reply'][$v['recordId']][$v['id']] = $v;
        	}
        }
        return $list;
	}

	/**
	 * 需求是否香港管需求
	 * @return bool
	 */
	public function isHongKongTask(){

		if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

		if(!isset(self::$tsk_map_data[$this->id]['is_hk_task'])){
			$srvZone = new zbj_service_zone_hongkong(false);
			self::$tsk_map_data[$this->id]['is_hk_task'] = $srvZone->isHongKongTask($this->id);
		}
		return self::$tsk_map_data[$this->id]['is_hk_task'];
	}



    /**
     * 用消息机制发送 联盟需要的统计信息
     * @param $task_id
     * @param $param "referer=1111&first_page=2222&pmcode=3333&uncode=4444&uncode_extid=5555&adunion_lead_id=6666&stt=777"
     * @internal param str $params
     */
    public function SpreadTask($task_id,$param){
        if(!$param){
            $param = "referer=task&first_page=test2&pmcode=111&uncode=22&uncode_extid=333&adunion_lead_id=44&stt=55"."&verifytype=12";
        }
        $uid = $this->get('user_id');
        $tarParam = array();
        $paramArr = explode("&",$param);
        foreach($paramArr as $v){
            $tmp = explode("=",$v);
            $tarParam[$tmp[0]] = $tmp[1];
        }

        try{

	        $stt_data = new com\zhubajie\union\dataobject\MarketStat\MarketStatInsertDTO();
	        $stt_data->task_id = $task_id;
	        $stt_data->user_id = $uid;
	        $stt_data->way_type = $tarParam['waytype']; //来源，枚举
	        $stt_data->pub_page = $tarParam['pub_page'];

	        $stt_data->referer = $tarParam['referer'];
	        $stt_data->first_page = $tarParam['first_page'];
	        $stt_data->pmcode = $tarParam['pmcode'];
	        $stt_data->uncode = $tarParam['uncode'];
	        $stt_data->uncode_extid = $tarParam['uncode_extid'];
	        $stt_data->adunion_lead_id = $tarParam['adunion_lead_id'];
	        $stt_data->stt = $tarParam['stt'];

	        SMessageQueue::init();
	        $message = new \MessageQueue\Message();
	        $message->exchangeName = 'union.task.publish';//上线前要改和线上一致
	        $message->routingKey = 'union.task.publish';//上线前要改和线上一致
	        $message->content = json_encode($stt_data);
	        $result = \MessageQueue\Publisher::publish($message);

	        //记录任务发布来源日志 by hetianxing
	        $taskpubfrom_model = new zbj_model_lg_taskpubfrom();
	        $item['task_id'] = $task_id;
	        $item['task_uid'] = $uid;
	        $item['queue_status'] = 0;
	        if($result){
	            $item['queue_status'] = 1;
	        }
	        $url = zbj_lib_BaseUtils::getCurrentUrl();
	        $sid  = stripos($url,'dindex-sid');
	        $osid  = stripos($url,'index-sid');
	        $uid  = stripos($url,'dindex-uid');
	        $ouid  = stripos($url,'index-uid');
	        $xuanshang  = stripos($url,'pkgpub');
	        $pub = stripos($url,'pub');
	        if(!$sid===false){
	            $item['task_from'] = '购买服务';
	        }elseif(!$uid===false){
	            $item['task_from'] = '雇佣服务商';
	        }elseif(!$ouid===false){
	            $item['task_from'] = '老版雇佣服务商';
	        }elseif(!$osid===false){
	            $item['task_from'] = '老版购买服务';
	        }elseif(!$xuanshang===false){
	            $item['task_from'] = '悬赏发布';
	        }elseif(!$pub===false){
	            $item['task_from'] = '正常发布';
	        }else{
	            $item['task_from'] = 'unknow';
	        }
	        $item['from_url'] = $tarParam['pub_page'];
	        $item['post_url'] = $url;
	        $taskpubfrom_model->insert($item);
    	}catch(Exception $e){
    		return false;
    	}
    }

    /**
	 * 修改跟进队列
	 * @param $data 键值对数组
	 * @return bool
	 */
    public function upDateFollowMqDelay($followMqDelayDate){
    	if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}
		
    	if(empty($followMqDelayDate)){
    		$this->setError(0,"跟进队列数据有误！");
		    return false;
		}

        //关闭放弃已选标
		$m_follows = zbj_model_api::get('zbj_model_mk_follow');
		$srvTask = new zbj_service_task($this->id);
	    $srvTask = $srvTask->init();
		$follows = $m_follows->selectOne(array('task_id' => $this->id), 'giveup_status');
		if($follows['giveup_status'] == 2 || $srvTask->get('open_state') != 0 || $srvTask->get('state') > 2) {
            $this->setError(0,"放弃关闭已选标的任务不放入跟进队列！");
			return false;
		}

		//22-9不能预约
		if(date("H") >= 22 || date("H") < 9){
			$this->setError(0,"此时间段内不允许自动预约操作！");
			return false;
		}


        //3小时
		if(date("H",time() + 10800) >= 22 || date("H",time() + 10800) < 9){
			$followMqDelayDate['nexttime'] = time() + 50400;
		}

		$followMqDelay = zbj_model_api::get('zbj_model_mk_followmqdelay');
		$followMqDelaySelect = $followMqDelay->selectOne(array('task_id'=>$task_id,'type'=>$followMqDelayDate['type']));
		if($followMqDelaySelect){
	        $result = $followMqDelay->update(array('task_id'=>$this->id,'type'=>$followMqDelayDate['type']),$followMqDelayDate);
		}else{
			$result = $followMqDelay->insert($followMqDelayDate);
		}
		if($result) return true;
		$this->setError(0,"跟进队列插入失败！");
		return false;
    }

    /**
	 * 修改需求发布后，每隔24小时检测一次，如投标未满，自动公开，否则自动给投标上限加1，最多检查3天队列
	 * @param $data 键值对数组
	 * @return bool
	 */
    public function upDateTaskMqDelay(){
    	if(!$this->id){
			$this->setError(0,"需求task_id不存在！");
			return false;
		}

        //关闭放弃已选标
		$srvTask = new zbj_service_task($this->id);
	    $srvTask = $srvTask->init();

		$taskMqDelay = zbj_model_api::get('zbj_model_mk_taskmqdelay');
		$taskMqDelaySelect = $taskMqDelay->selectOne(array('task_id'=>$this->id));
		if($taskMqDelaySelect){
	        return false;
		}else{
			$nexttime1 = time()+86400;
			$nexttime2 = time()+172800;
			$nexttime3 = time()+259200;
			$sql = "insert into mk_task_mq_delay (task_id,nexttime,type) value($this->id,$nexttime1,1),($this->id,$nexttime2,2),($this->id,$nexttime3,3)";

			$result = $taskMqDelay->query($sql);
		}
		if($result) return true;
		$this->setError(0,"跟进队列插入失败！");
		return false;
    }

    /**
	 * 停止派单公开需求 20150925
	 */
    public function StopRecmd(){
    	try{
	    	if(!$this->id){
	    		throw new Exception("需求task_id不存在！");
			}

	    	//检测是否在派单中
	    	$taskOpisModel = zbj_model_api::get('zbj_model_mk_taskopis');
	        $taskOpis = $taskOpisModel->selectOne(array('task_id' => $this->id));
	        if($taskOpis['recmd_status'] != 1){
	        	throw new Exception("当前状态不在派单中，不允许操作！");
	        }

	        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$TaskRecommendClient = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
			zbj_lib_ApiClient::build($TaskRecommendClient);
	        $res = $TaskRecommendClient->stopRecmd($this->id);
	        if($res->success){
			    return true;
	        }else{
	        	throw new Exception("停止派单，公开需求失败！");
	        }
        }catch(Exception $e){
        	$this->setError(0,$e->getMessage());
			return false;
        }

    }


	/**
	 * 需求是否需要报价方案
	 * @param $task
	 * @return bool
	 * @throws Exception
	 */
	public function isNeedQuote() {

		if(!$this->id){
			return false;
		}

		$wbt2cModel = zbj_model_api::get('zbj_model_mk_workbencht2c');
		$result = $wbt2cModel->selectOne('category_id='.$this->get("category2id"),'tpl_id');

		if($result['tpl_id'] == 2){
			return false;
		}

		return true;
	}

	public function resetAgreementStep(){
		//检查需求是否需要交易合同
		$agreestatus = $this->getAgreementStatus();
		if(!in_array($agreestatus, array(4,5))){
			$this->initTaskAgreement();					
		}
	}
}
