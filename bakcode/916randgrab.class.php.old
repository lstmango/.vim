<?php
/*
 *订单分配系统-抢订单
 *lsTMango
 *2015-09-07
 */
class zbj_service_randgrab extends zbj_components_baseservice {
	private $userId; //选标率
	private $selectRate=0.1;//默认 //盲抢池任务
	private $taskArray=array(); //待检测任务
	private $checkTask=array(); //防御式code
	private $totalCycleNum=50;
	private $cycleNum=0;

	/*
	 *构造函数
	 */
	public function __construct($initData) {
        error_reporting(0);
		if($initData){
			foreach($initData as $initKey=>$initValue){
				$this->$initKey=$initValue;
			}
		}
		$stime=date("Y-m-01") ;
		$etime=date("Y-m-d") ;
		$this->stime=$stime;
		$this->etime=$etime;
        $this->dbinfo = 'market';

		//设置选标率
		$this->selectRate=$this->_get_group_select_rate();
		//return zbj_lib_BaseUtils::jsonp("暂时没有合适的订单哦，稍后再来试试吧～(●'◡'●)",1,0,array('noTask'=>1));
	}
	function test(){
		return array('noTask'=>1);
	}

	/*
	 *盲抢
	 */
	public function doGrab(){
		//判断是否ajax请求
	    if (!zbj_lib_BaseUtils::isAjax()) {
			#return 'no ajax';
		}
		//验证是否交易顾问
		//echo 123123;
		$this->checkIdentity();
		//echo 123;
		//检测选标率
		$this->checkSelectRate();
		//检测当前交易顾问是否有跟进订单
		#$this->checkFollowTask();
		//设置交易顾问栏目
		$this->categoryArray=$this->_get_cate_array();
		//获取盲抢池订单
		//echo 123;
		$this->getRandGrabPoolTask();
		//var_dump($this->taskArray);
	}

	/*
	 *获取交易顾问栏目
	 */
	public function _get_cate_array(){
		$configids = array();
		$allotModel = zbj_model_api::get('zbj_model_cp_allot');
		#$condition = 'manager_id='.$this->userId.' and state=1 and isonline=1';
		$condition = 'manager_id='.$this->userId.' and state=1';
		$fields = 'config_id';
		$cidArray = $allotModel->select($condition,$fields)->items;
		//var_dump($cidArray);
		//var_dump($cidArray);
		foreach($cidArray as $cfg){
			$cid = intval($cfg['config_id']);
			$cid>0 && $configids[] = $cid;
		}
		$configids=array_unique($configids);
		if(!$configids){
			//return zbj_lib_BaseUtils::jsonp("您不是交易顾问，无法认领订单!(●'◡'●)",1,0);
			return array('noTask'=>1);
		} 

		$allotRelModel = zbj_model_api::get('zbj_model_mk_allotdimension');
		$dimensionIdArray = $allotRelModel->select('allot_config_id in('.implode(',',$configids).') and state=1','dimension_id')->items;
		$dimensionIdArray = (array)$dimensionIdArray;
		if(!$dimensionIdArray){
			//return zbj_lib_BaseUtils::jsonp("您不是交易顾问，无法认领订单!(●'◡'●)",1,0);
			return array('noTask'=>1);
		} 
		foreach($dimensionIdArray as $dim){
			$did = intval($dim['dimension_id']);
			$did>0 && $dimensionIds[] = $did;
		}
		$dimensionIds=array_unique($dimensionIds);
			
		$dimModuleConfig = zbj_model_api::get('zbj_model_mk_moduleconfig');
		$cateArray = $dimModuleConfig->select('dimension_id in('.implode(',',$dimensionIds).')','category_id')->items;
		$cateArray = (array)$cateArray;
		if(!$cateArray){
			//return zbj_lib_BaseUtils::jsonp("您不是交易顾问，无法认领订单!(●'◡'●)",1,0);
			return array('noTask'=>1);
		} 
		foreach($cateArray as $cate){
			$cid = intval($cate['category_id']);
			$did>0 && $cateids[] = $cid;
		}
		$cateids=array_unique($cateids);
		return $cateids;
			
	}
	/*
	 *从盲抢池中随机取出一个符合规则订单
	 */
	private function getRandGrabPoolTask(){
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
		$condi[] = 'allotstate = 0 and needallot = 2';
		#$condi[] = "next_chktime > '" . (time()-28*60) . "'";
		$grabTaskArray = $taskAllotPoolModule->select($condi, 'task_id')->items;
		if(!$grabTaskArray){
			//return zbj_lib_BaseUtils::jsonp("2暂时没有合适的订单哦，稍后再来试试吧！(●'◡'●)",1,0);
			return array('noTask'=>1);
		}
		$taskIdArray = array();
		foreach($grabTaskArray as $tValue){
			$tid = intval($tValue['task_id']);
			$tid>0 && $taskIdArray[] = $tid;
		}
		$this->taskIdArray=$taskIdArray;
		$this->getRandCycleTask();
	}

	/*
	 *执行认领功能
	 */
	private function doGrabTask(){
		//echo 1115555;
		//die();
		$taskId=$this->returnTaskId;
		var_dump($this->returnTaskId);
		//die();
		$srvTask = new zbj_service_task($taskId);
		$srvTask = $srvTask->init();
		$toManager['filter']= 'grab';
		$toManager['manager']['manager_id']= $this->userId;
		//再验证将更改验证方式
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
		$condi[] = 'task_id='.$taskId;
		$lastCheckPoolType = $taskAllotPoolModule->selectOne($condi, 'needallot,allotstate');
		//再循环
		var_dump($lastCheckPoolType);
		if( $lastCheckPoolType['needallot']==3 || ($lastCheckPoolType['needallot']==2 && in_array($lastCheckPoolType['allotstate'],array(1,2))) ){
			//echo 25235235;
			$this->unsetPublcVar();
			$this->getRandCycleTask();
		}
		$grabData['task_id']=$taskId;
		$grabData['manager_id']=$this->userId;
		$grabData['type']=1;
		$insertBack=$this->insertAllotGrab($grabData);
		var_dump($insertBack);
		echo 111;
		//该订单已被抢
		if(!$insertBack){//待优化
			$this->unsetPublcVar();
			$this->getRandCycleTask();
		}

		$srvAlloter = new zbj_service_taskalloter();
		echo 111111;
		var_dump($taskId);
		echo 111111;
		$allot_back=$srvAlloter->doAllot($srvTask,$toManager);
		$rError=$srvAlloter->getError();
		if($allot_back==true){
			return zbj_lib_BaseUtils::jsonp("需求认领成功!",1,1,array('task_id'=>$taskId,'type'=>1));
		}
		else{
			$condition=array(
				'task_id'  => $taskId
			);
			$taskAllotGrabModule = zbj_model_api::get('zbj_model_mk_taskallotgrab');
			$delResult=$taskAllotGrabModule->delete($condition);				
			return zbj_lib_BaseUtils::jsonp("需求认领失败!",1,0);
		}
	}

	/*
	 *记录抢单
	 */
	public function insertAllotGrab($data){
		$taskAllotGrabModule = zbj_model_api::get('zbj_model_mk_taskallotgrab');
		if(empty($data['task_id']) || empty($data['manager_id'] || empty($data['type']))){
			//return zbj_lib_BaseUtils::jsonp("参数传递错误!",1,0);
			return false;
		}
		$data = array(
			'task_id'	=> $data['task_id'],
			'manager_id'		=> $data['manager_id'],
			'type'		=> $data['type'],
			'createtime'	=> time(),
		);
		$back = $taskAllotGrabModule->insert($data);
		return $back;
	}
	
	/*
	 *取符合规则的订单
	 */
	private function getRandCycleTask(){
		$taskIdArray=$this->taskIdArray;
		if(!$this->taskArray && $taskIdArray){
			$taskModule = zbj_model_api::get('zbj_model_mk_task');
			if( count($taskIdArray)>1 ){
				$taskIds=implode($taskIdArray,',');
				$condi[] = 't.task_id in ('.$taskIds.')';
			}
			else{
				$condi[] = 't.task_id = '.$taskIdArray[0];
			}
			$leftjoin = array(
				'mk_task_info as ti'=>'ti.task_id = t.task_id',
			);
			$item='t.category_id,t.manager_id,t.task_id,t.mode,t.state,t.open_state,ti.refund_type,ti.refund_state,t.hosted';
			$taskArray = $taskModule->_db->select('mk_task as t',$condi,$item,null,null,$leftjoin)->items;
			var_dump($taskArray);
			//var_dump($this->categoryArray);
			if(!$taskArray){
				//return zbj_lib_BaseUtils::jsonp("数据获取失败！请稍后再试～(●'◡'●)",1,0);
				return array('noTask'=>1);
			}

			//取交易顾问分配维度栏目
			foreach($taskArray as $tKey=>$tValue){
				if(!in_array($tValue['category_id'],$this->categoryArray)){
					unset($taskArray[$tKey]);
				}
			}
			var_dump($taskArray);
			if(!$taskArray){
				//return zbj_lib_BaseUtils::jsonp("数据获取失败！请稍后再试～(●'◡'●)",1,0);
				return array('noTask'=>1);
			}
			$this->taskArray=$taskArray;
		}
		elseif($this->taskArray){
			$taskArray=$this->taskArray;
		}
		if(count($taskArray)<=0){
			//return zbj_lib_BaseUtils::jsonp("1暂时没有合适的订单哦，稍后再来试试吧！(●'◡'●)",1,0);
			return array('noTask'=>1);
		}
		$randKey=array_rand($taskArray);
		$this->randKey=$randKey;
		$randTask=$taskArray[$randKey];
		$this->checkTask=$randTask;
		$checkResult=$this->checkTaskGrabRule();
		$checkResult=true;//del
		$cycleNum=$this->cycleNum;
		$cycleNum++;
		$this->cycleNum=$cycleNum;
		if($checkResult===true){
			echo 1111111122223;
			$this->returnTaskId=$randTask['task_id'];
			$this->doGrabTask();
			return true;
		}
		else{
			$this->removeGrabPool($randTask['task_id']);
			$this->unsetPublcVar($randTask['task_id']);
			if($cycleNum>=$this->totalCycleNum){
				return zbj_lib_BaseUtils::jsonp("当前抢单人数太多，请稍后再试～(●'◡'●)",1,0);
			}
			$this->cycleNum=$cycleNum;
			$this->getRandCycleTask();
		}
	}

	/*
	 *从去除的数据中不符合规则的订单
	 */
	private function unsetPublcVar(){
		$taskIdArray=$this->taskIdArray;
		$taskArray=$this->taskArray;
		$randKey=$this->randKey;
		$randTask=$taskArray[$randKey];

		$delKey = array_keys($taskIdArray,$randTask['task_id']);
		unset($taskIdArray[$delKey[0]]);
		$this->taskIdArray=$taskIdArray;
		unset($taskArray[$randKey]);
		$this->taskArray=$taskArray;
		if( count($taskArray)<=0 ){
			//return zbj_lib_BaseUtils::jsonp("0暂时没有合适的订单哦，稍后再来试试吧～(●'◡'●)",1,0);
			return array('noTask'=>1);
		}
	}

	/*
	 *从盲抢池中释放，不符合条件的需求
	 */
	public function removeGrabPool($taskId){
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
		$condition['task_id']=$taskId;
		$updateData['allotstate']=2;
		$saveResult = $taskAllotPoolModule->update($condition,$updateData);
		if ($saveResult === false){
			$taskAllotLog=new zbj_service_taskallotlog();
			$taskAllotLog->addTaskAllotLog($taskId,array("从盲抢池中移除失败「主动认领」:".$taskAllotPoolModule->getError()));
			return false;
		}
		return true;
	}

	/*
	 *验证是否符合盲抢规则
	 */
	private function checkTaskGrabRule(){
		$checkTask=$this->checkTask;
		if(!$checkTask){
			return zbj_lib_BaseUtils::jsonp("待检测任务获取失败！请稍后再试～(●'◡'●)",1,0);
		} 
		if($checkTask['mode']==13 && ($checkTask['state']>=3 || $checkTask['open_state']==1 
			|| $checkTask['refund_state']==2) ){
			return false;
		}
		if( ($checkTask['mode']==11 || $checkTask['mode']==12) && ($checkTask['hosted']==1 || $checkTask['state']==4 || $checkTask['open_state']==1) ){
			return false;
		}
		if($checkTask['mode']==10){
			return false;
		}
		return true;
	}

	/*
	 *检测当天投标数量
	 */
	public function checkGrabTotalNum(){
		$todayTime=strtotime(date('Y-m-d'));
		$taskAllotGrabModule = zbj_model_api::get('zbj_model_mk_taskallotgrab');
		$condi[] = 'manager_id='.$this->userId;
		$condi[] = 'createtime>='.$todayTime;
		$condi[] = 'status=1';
		$grabArray = $taskAllotGrabModule->select($condi)->items;
		if($grabArray && count($grabArray)>=10){
			return false;
		}
		return true;
	}

	/*
	 *检测是否有待跟进订单
	 */
	private function checkFollowTask(){
		$taskAllotRoleModule = zbj_model_api::get('zbj_model_mk_taskallotrole');
		$condi[] = 'manager_id ='.$this->userId;
		$allotRole = $taskAllotRoleModule->selectOne($condi, 'need_follow_num');
		if(!$allotRole){
			return zbj_lib_BaseUtils::jsonp("获取待受理订单数量失败～(●'◡'●)",1,0);
		}
		$need_follow_num=$allotRole['need_follow_num'];
		if($need_follow_num>0){
			return zbj_lib_BaseUtils::jsonp("您当前有待受理订单，请先处理已分配给你的订单再来认领哦！(●'◡'●)",1,0);
		}
		return true;
	}

	/*
	 *验证是否交易顾问
	 */
	private function checkIdentity(){
		$userId=$this->userId;
		//var_dump($this->userId);
		//echo 124;
		$allot=new zbj_service_taskalloter();
		//var_dump($allot);
		$allManager=$allot->getAllManager(false);
		//var_dump($allManager);
		$manages = array();
		foreach($allManager as $manage){
			$mid = intval($manage['manager_id']);
			$mid>0 && $manages[] = $mid;
		}
		if(!in_array($userId,$manages)){
			return zbj_lib_BaseUtils::jsonp("您不是交易顾问，无法认领订单～(●'◡'●)",1,0);
		}
		return true;
	}

	/*
	 *检测选标率
	 */
	public function checkSelectRate($data){
		if(!$this->userGroupid && $data['from']!='bosscheck'){
			return zbj_lib_BaseUtils::jsonp("参数传递错误!",1,0);
		}
		elseif(!$this->userGroupid && $data['from']=='bosscheck'){
			return false;
		}
        $cache = new zbj_lib_cache('memcache');
        $cache_key = 'task.zhubajie.com.app.controller.crontab.managersummary.getManagerSummary';
		$cacheData=$cache->get($cache_key);
		$userCacheData=$cacheData['group'][$this->userGroupid];
		if($userCacheData && $userCacheData['allot']['count']){
			$allotCount=$userCacheData['allot']['count'];
		}
		else{
			//$allotCount=$this->_getAllotSummary($this->userId);
			$allotCount=$this->_getAllotSummary('',$this->userGroupid);
			$allotCount=$allotCount['count'];
		}
		if($userCacheData && $userCacheData['selected']['count']){
			$allotCount=$userCacheData['selected']['count'];
		}
		else{
			$selectCount=$this->_getSelectedSummary('',$this->userGroupid);
			$selectCount=$selectCount['count'];
		}
		if($allotCount<=0 && $data['from']!='bosscheck'){
			return zbj_lib_BaseUtils::jsonp("您当前选标率过低，无法认领订单～(●'◡'●)",1,0);
		}
		elseif($allotCount<=0 && $data['from']=='bosscheck'){
			return false;
		}
		$selectRate=round( $selectCount/$allotCount,2 );
		if($selectRate<$this->selectRate && $data['from']!='bosscheck'){
			return zbj_lib_BaseUtils::jsonp("您当前选标率过低，无法认领订单～(●'◡'●)",1,0);
		}
		elseif($selectRate<$this->selectRate && $data['from']=='bosscheck'){
			return false;
		}
		return true;
	}

    private function _getUids($uid, $gid){
        if(empty($gid) && empty($uid)){
            return false;
        }
        if(empty($uid) && $gid){
            $uid = $this->_getUserIdBygid($gid, true);
        }
        if(!is_array($uid)){
            $uid = array($uid);
        }
        $uid = array_filter($uid);
        if(empty($uid)) {
            return false;
        }
        return $uid;
    }

    /**
     * 根据分组ID查成员ID
     */
    private function _getUserIdBygid($gid, $uid_only = false)
    {
        $cpuser = new zbj_model_cp_user();

        $r = $cpuser->select(array('group_id' => $gid))->items;

        if($uid_only){
            $r = zbj_lib_BaseUtils::indexArray($r, 'user_id', 'user_id');
            return array_keys($r);
        }
        return $r;
    }

    private function _optManagerId($fields, $uids)
    {
        if(empty($uids)){
            return "1 ("; //排除所有直接跑错
        }
        if(count($uids) == 1){
            return "{$fields} = '{$uids[0]}'";
        }
        return sprintf("{$fields} in (%s)", join(',', $uids));
    }

	/*
     *已选标
	 */
    private function _getSelectedSummary($uid = '', $gid = '')
    {
        $uid = $this->_getUids($uid, $gid);
        if(!$uid) return false;

        $mWork = new zbj_model_mk_works();
        $mTask = new zbj_model_mk_task();

        $join = array(
            'mk_task'=>'mk_task.task_id=mk_works.task_id',
            'mk_task_info'=>'mk_task_info.task_id=mk_task.task_id'
        );

        $condi = array();
        $condi[] = $this->_optManagerId('mk_task.manager_id', $uid);
        $condi[] = 'mk_task.state >= 3';
        
        $count  = 0;
        $amount = 0;

        $condi[4] = "mk_works.select_ymd >= '{$this->stime}'";
        $condi[5] = "mk_works.select_ymd <= '{$this->etime}'";
        $condi[3] = 'mk_task.mode = 13';
        $condi[7] = 'mk_works.issuccess = 1';
        
        $data = $mWork->selectOne($condi, 'count(1) as count,sum(mk_task.hosted_amount) as amount','', '', $join, array('dbinfo'=>$this->dbinfo));
        $count += $data['count'];
        $amount += $data['amount'];

        $condi[4] = "mk_task.hosted_date >= '{$this->stime}'";
        $condi[5] = "mk_task.hosted_date <= '{$this->etime}'";
        $condi[3] = 'mk_task.mode in (11,12)';
        $condi[6] = "mk_task.hosted_amount > 0";
        unset($condi[7]);

        $data = $mTask->selectOne($condi, 'count(1) as count,sum(mk_task.hosted_amount) as amount','', '', array('mk_task_info'=>'mk_task_info.task_id=mk_task.task_id'), array('dbinfo'=>$this->dbinfo));

        $count += $data['count'];
        $amount += $data['amount'];

        $condi[4] = "mk_works.select_ymd >= '{$this->stime}'";
        $condi[5] = "mk_works.select_ymd <= '{$this->etime}'";
        $condi[3] = 'mk_task.mode = 10';
        $condi[7] = 'mk_works.issuccess = 1';
        unset($condi[6]);

        $mWork->setCount(false);
        $data = $mWork->select($condi, 'mk_task.task_id,mk_task.hosted_amount,mk_task_info.refund_amount','', '', $join, array('dbinfo'=>$this->dbinfo))->items;            

        if($data){
            $task_ids = array();
            foreach($data as $val){
                if($val['task_id'] && !in_array($val['task_id'], $task_ids)) {
                    $task_ids[] = $val['task_id'];
                    $amount += $val['hosted_amount'];
                    $count += 1;
                }
            }
        }
        return array('count'=>$count, 'amount'=>$amount);
        
    }
	/*
     *查分配 
	 */
    private function _getAllotSummary($uid = '', $gid = '', $list = array())
    {
        $uid = $this->_getUids($uid, $gid);

        $mTask = new zbj_model_mk_task();
        $condi = array();
        $condi[] = $this->_optManagerId('mk_task.manager_id', $uid);
        $condi[] = "mk_task.open_state = 0";
        $condi[] = "mk_task.createymd >= '{$this->stime}'";
        $condi[] = "mk_task.createymd <= '{$this->etime}'";

		$data = $mTask->selectOne($condi, 'count(1) as count,sum(mk_task.amount) as amount','','','',array('dbinfo'=>$this->dbinfo));
        return $data;
    }

	/*
	 *将池子中的需求推到审核系统进行分配
	 */
	public function releaseFromGrabPoolToVerify($limit=30){
		$limit = intval($limit);
		($limit>50||$limit<=0) && $limit = 20;

		$taskpoolModel= zbj_model_api::get('zbj_model_mk_taskallotpool');
		$taskpoolModel->setLimit($limit);
		
		$nowtime = time();
		$condition = array(
			'needallot'		=> 2,
			'allotstate'	=> 0,
		);
		$condition[] = "next_chktime <= '" . (time()-30*60) . "' and next_chktime>='".(time()-30*24*3600)."'";

		$datalist = $taskpoolModel->select($condition,'task_id','','order by next_chktime asc')->items;
		$datalist = (array)$datalist;
		
		$taskids = array();
		foreach($datalist as $row){
			$tid = intval($row['task_id']);
			$tid>0 && $taskids[] = $tid;
		}
		if(empty($taskids)) return true;
                
		$upall = array(
			'needallot'		=> 3,
			'allotstate'	=> 0,
		);

		$result = $taskpoolModel->update('task_id in('.implode(',',$taskids).')',$upall);
		if($result === false){
			return false;
		}

		foreach($taskids as $tid){
			if(zbj_lib_Api::taskVerifyManager($tid) !== true){
				throw new Exception(zbj_lib_Api::getError());
			}
		}
		return true;
	}

	/*
	 *设置各小组对应的选标率
	 */
	private function _get_group_select_rate(){
		if(!$this->userGroupid){
			return zbj_lib_BaseUtils::jsonp("参数传递错误!",1,0);
		}
		if(in_array($this->userGroupid,array(405,434,438))){//网建
			return 0.19;
		}
		elseif(in_array($this->userGroupid,array(510,408))){//文案
			return 0.28;
		}
		elseif( $this->userGroupid==437 ){//专业设计
			return 0.19;
		}
		elseif( in_array($this->userGroupid,array(494,443)) ){//APP
			return 0.05;
		}
		elseif( $this->userGroupid==404 ){//平面设计
			return 0.35;
		}
		return 0.1;
	}

}
