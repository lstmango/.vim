<?php

use com\zhubajie\task\dataobject\common\Error;
use com\zhubajie\task\dataobject\common\ResultDO;
use com\zhubajie\task\dataobject\worktaskstep\WorkStateDTO;
use com\zhubajie\task\dataobject\worktaskstep\WorkTaskStepDTO;

use com\zhubajie\task\interfaces\EventSystemServiceClient;
use com\zhubajie\task\dataobject\eventsystem\EventDTO;
use com\zhubajie\task\dataobject\eventsystem\ListenerDTO;

/**
 * 服务商待做任务的状态
 * 
 * @author lidacheng
 */
class service_worktaskstep extends service_abstract {

	//当前业务ID
	protected $id;

	//当前对象主数据表
	protected $marter_table = 'model_mk_workstaskstep';

	public function __construct($id = 0) {
		parent::__construct();
		$this->id = $id;
	}

	/**
	 * 创建一条服务商待办事项记录
	 * 返回创建的ID号，失败抛出异常
	 * @param array $data 数据集
	 * @return int
	 * @throw Exception
	 */
	public function create(array $data) {
		if($data['task_id']<=0 || $data['works_id']<=0 || $data['user_id']<=0 || 
			!is_numeric($data['dotype']) || !is_numeric($data['roletype']) || !is_numeric($data['expiretime'])){
			throw new Exception('传入的参数错误',Error::PARAM_ERROR);
		}
		unset($data['step_id']);
		
		$data['createtime'] = time();
				
		try{
			$this->_beginTransaction('mk');
			
			$this->setId(0);
			if($this->set($data) === false){
				throw new Exception('设置待办事项参数失败',Error::CREATE_ERROR);
			}
			if($this->save() === false){
				throw new Exception('保存待办事项失败 '.$this->getError(),Error::CREATE_ERROR);
			}
			
			$workid = $this->getLastId();
			if(!$workid){
				throw new Exception('保存待办事项失败',Error::CREATE_ERROR);
			}
			
			// 抛事件
			if(in_array($data['dotype'],array(10,20,21))){
				$param = array(
					'task_id'	=> $data['task_id'],
					'works_id'	=> $data['works_id'],
					'user_id'	=> $data['user_id'],
				);
				zbj_lib_ApiClient::init(APPID, SECRET);
				$evtApi = new EventSystemServiceClient(NULL);
				zbj_lib_ApiClient::build($evtApi);
		        $event = new EventDTO();
				$event->event = 'worktask.'.$data['dotype'].'.created';
		        $event->bodys = $param;
				$event->delaytime = (int)$data['expiretime'];
		
		        $back = $evtApi->throwEvent($event);
		        if($back->success != true){
		        	throw new Exception('事件异常：'.$back->message,Error::CREATE_ERROR);
		        }
			}
			
			$this->_commit('mk');
		}catch(Exception $e){
			$this->_rollBack('mk');
			throw new Exception($e->getMessage(),$e->getCode());
		}
		
		return $workid;
	}
	
	
	/**
	 * 更新服务商待办事项状态
	 * @param 	int $dotype
	 * @param 	WorkStateDTO	$workstate
	 * @return true
	 * @throw Exception
	 */
	public function setWorkTaskState($dotype,WorkStateDTO $workstate) {
		if($workstate->works_id<=0 || !in_array($workstate->roletype,array(0,1,2,3))){
			throw new Exception('传入的参数错误',Error::PARAM_ERROR);
		}
		
		$condition = array(
			'works_id'	=> $workstate->works_id,
			'dotype'	=> $dotype,
		);
		$updata = array(
			'done'	=> $workstate->done,
			'roletype'	=> $workstate->roletype,
			'updatetime'=> time(),
		);
		
		try{
			$this->_beginTransaction('mk');
			
			$this->model()->setDbEntry();
			$worktask = $this->model()->selectOne($condition,'*');
			if(empty($worktask['step_id'])){
				throw new Exception('指定稿件的计划任务不存在',Error::PARAM_ERROR);
				
			}
			if($worktask['done'] == $updata['done'] && !empty($worktask['roletype'])){
			//	throw new Exception('已经操作过该功能了',9999);
				$this->_commit('mk');
				return true;
			}
			
			$this->setId($worktask['step_id']);
			
			if($workstate->done==1 && $workstate->roletype!=3 && $worktask['expiretime']>0 && $worktask['expiretime']<time()+5){
				throw new Exception('对不起已经超期了',Error::EDIT_ERROR);
			}
			if($this->set($updata) === false){
				throw new Exception('设置待办事项参数失败',Error::EDIT_ERROR);
			}
			if($this->save() === false){
				throw new Exception('设置待办事项状态失败',Error::EDIT_ERROR);
			}
			
			// 服务商表示已联系雇主，创建发布报价方案的计划任务
			$srvWorkBench = new service_workbench_template();

			#2015917不需要报价方案改为hold
			/*
			 *if($dotype==10 && $workstate->done==1 && 
			 *    $srvWorkBench->isNeedQuote(service_task_factory::build($worktask['task_id']))){
			 */
			if($dotype==10 && $workstate->done==1 ){
				$newtask = array(
					'task_id'	=> $worktask['task_id'],
					'works_id'	=> $worktask['works_id'],
					'user_id'	=> $worktask['user_id'],
					'dotype'	=> 20,
					'done'		=> 0,
					'roletype'	=> 0,
					'createtime'	=> time(),
					'expiretime'	=> time()+43200, // 12小时
					'createtime'	=> 0,
				);
				$srvWorkTask = new service_worktaskstep();
				$srvWorkTask->setTransaction(false);
				if($srvWorkTask->create($newtask) === false){
					throw new Exception('创建计划任务失败',Error::CREATE_ERROR);
				}
			}
			
			$this->_commit('mk');
		}catch(Exception $e){
			$this->_rollBack('mk');
			throw new Exception($e->getMessage(),$e->getCode());
		}
		return true;
	}
}
