<?php

use com\zhubajie\task\interfaces\WorkTaskStepServiceClient;
use com\zhubajie\task\dataobject\worktaskstep\WorkStateDTO;
use com\zhubajie\task\dataobject\worktaskstep\WorkTaskStepDTO;

use com\zhubajie\boss\interfaces\messageServiceClient;
use com\zhubajie\boss\dataobject\message\sentMessageParamsDo;
use com\zhubajie\boss\dataobject\message\messageRange;
use com\zhubajie\boss\dataobject\message\messageType;
use com\zhubajie\boss\dataobject\message\messageProduct;
use com\zhubajie\boss\dataobject\message\messagePack;
use com\zhubajie\boss\dataobject\message\sendResultDo;

/**
 * 服务商待办事项
 * @author 
 * @version 
 * @copyright zhubajie.com
 */
class controller_worktask extends components_basepage{
	
	public function __construct() {
		parent::__construct();
    	if(!$this->_userid){
			$this->ShowMsg('您还没有登录！请先登录');
		}
	}
	
	/*
	 *获取首次跟单表单
	 *@param type 1获取已联系雇主表单，2获取未联系雇主表单
	 *@param wid 稿件号
	 */
	function pageGetContactedForm($inPath){
		if(zbj_lib_BaseUtils::isAjax() !== true){
			#$this->ShowMsg('仅支持AJAX请求模式');
		}
		$worksId=zbj_lib_BaseUtils::getStr($_GET['wid'],'int');
		$this->srvWork = new zbj_service_works($worksId);
		$this->work = $this->srvWork->get();
		$userId=zbj_lib_BaseUtils::getStr($_COOKIE['userid'],'int');
		if($userId!=$this->work['user_id']){
			$this->ShowMsg('你不是该稿件服务商,非法操作！');
		}

		$type=zbj_lib_BaseUtils::getStr($_GET['type'],'int');
		$type=intval($_GET['type']);
		if($type!=1 && $type!=2){
			$this->ShowMsg('参数错误');
		}
		$data['appid']='trade';
		$data['service']='WtCommonService';
		if($type==2){
			$data['param']='{"data":4}';
			$data['method']='getFormById';
		}
		else{
			$data['method']='getFormsByBizId';
			$data['param']='{"data":1}';
		}
		$apiHttp=new zbj_lib_ApiHttpClient($data);
		$jsonList=$apiHttp->execute();

		$result = json_decode($jsonList,1);
		var_dump($jsonList);
		if(!is_array($result)){
			lib_BaseUtils::jsonp("接口参数为空！", 1, -1);
		}
		if(!$result['success']){
			lib_BaseUtils::jsonp("接口请求失败！", 1, -1);
		}
		return $jsonList;
	}

	/*
	 *二次跟单未报价,hold住表单
	 *@param wid 稿件号
	 */
	function pageGetHoldForm($inPath){
		if(zbj_lib_BaseUtils::isAjax() !== true){
			$this->ShowMsg('仅支持AJAX请求模式');
		}
		$worksId=zbj_lib_BaseUtils::getStr($_GET['wid'],'int');
		$this->srvWork = new zbj_service_works($worksId);
		$this->work = $this->srvWork->get();
		$userId=zbj_lib_BaseUtils::getStr($_COOKIE['userid'],'int');
		if($userId!=$this->work['user_id']){
			$this->ShowMsg('你不是该稿件服务商,非法操作！');
		}
		//$data['_d']=1;
		$data['appid']='trade';
		$data['service']='WtCommonService';
		$data['method']='getFormsByBizId';
		$data['param']='{"data":2}';
		$apiHttp=new zbj_lib_ApiHttpClient($data);
		$jsonList=$apiHttp->execute();

		$result = json_decode($jsonList,1);
		if(!is_array($result) || !$result['success']){
			lib_BaseUtils::jsonp("接口请求失败！", 1, -1);
		}
		return $jsonList;
	}

	/**
	 * 首次跟进
	 * */
	function pageFirstFollow($inPath){
		if($_POST){
			foreach($_POST as $key=>$value){
				if($key=='reasonItemNdto'){
					$temData=$value;
					continue;
				}
				$data['data'][$key]=$value;
			}
		}
		$data['data']['reasonItemNdto']['formCfgId']=$temData[0]['questionId'];
		$data['data']['reasonItemNdto']['relationId']=$temData[0]['answerId'];
		$data['data']['reasonItemNdto']['inputTxt']=$temData[0]['answerId']==22?$temData[0]['answerTxt']:'';
		foreach($data['data']['followFirstValNdtoList'] as $nsKey=>$nsValue){
			if($nsValue['questionId']==8){
				if($nsValue['answerId']!=31 || $nsValue['answerTxt']==''){
					unset($data['data']['followFirstValNdtoList'][$nsKey]);
				}
			}
			if($nsValue['questionId']==5){
				if($nsValue['answerId']!=24){
					$data['data']['followFirstValNdtoList'][$nsKey]['answerId']=23;
					$data['data']['followFirstValNdtoList'][$nsKey]['answerTxt']='';
				}
			}
		}
		$data['param']=json_encode($data);
		
		$tradFollow=new zbj_service_tradefollow();
		$result=$tradFollow->submitFirstFollow($data);
		return $result;
	}

	/**
	 * 服务商标识为已联系雇主
	 * */
	function pageContactedBuyer($inPath){
		if(zbj_lib_BaseUtils::isAjax() !== true){
			$this->ShowMsg('仅支持AJAX请求模式');
		}
		$url = $this->getUrlParams($inPath);
		$url['wid'] = intval($url['wid']);
		if($url['wid']<=0){
			$this->ShowMsg('传递的参数错误');
		}
		
		try{
			// 确定服务商身份
			$condition = "works_id='{$url['wid']}' and dotype=10";
			$workTaskModel = zbj_model_api::get('zbj_model_mk_workstaskstep');
			$worktask = $workTaskModel->selectOne($condition);
			if($worktask['user_id'] != $this->_userid || !$worktask['user_id']){
				throw new Exception('指定的稿件编号错误');
			}else if($worktask['expiretime'] && $worktask['expiretime']<time()){
				throw new Exception('对不起，您已超期！');
			}
			// 标识为已联系
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$api = new WorkTaskStepServiceClient(NULL);
			zbj_lib_ApiClient::build($api);
			
			$workDTO = new WorkStateDTO();
			$workDTO->works_id = $url['wid'];
			$workDTO->done = 1;
			$workDTO->roletype = 1;
			
			$result1 = $api->setContactBuyerState($workDTO);
			if($result1->success != true){
				throw new Exception($result1->message);
			}
		}catch(Exception $e){
			$this->ShowMsg($e->getMessage());
		}
		$this->ShowMsg('操作成功',"",3,1);
	}
	
	/**
	 * 雇主标识未联系自已
	 * */
	function pageNotContactMe($inPath){
		if(zbj_lib_BaseUtils::isAjax() !== true){
			$this->ShowMsg('仅支持AJAX请求模式');
		}
		$url = $this->getUrlParams($inPath);
		$url['tid'] = intval($url['tid']);
		$url['wid'] = intval($url['wid']);
		if($url['tid']<=0 || $url['wid']<=0){
			$this->ShowMsg('传递的参数错误');
		}
		
		try{
			// 确定雇主身份
			$srvTask = new zbj_service_task($url['tid']);
			$srvTask = $srvTask->init();
			$task = $srvTask->get();
			if($task['user_id'] != $this->_userid || !$task['user_id']){ 
				throw new Exception('指定的需求编号错误');
			}
			// 确定稿件是否正常
			$condition = "works_id='{$url['wid']}' and dotype=10";
			$workTaskModel = zbj_model_api::get('zbj_model_mk_workstaskstep');
			$worktask = $workTaskModel->selectOne($condition);
			if($worktask['task_id'] != $task['task_id'] || !$worktask['task_id']){
				throw new Exception('指定的稿件编号错误');
			}else if($worktask['done']==0){
				throw new Exception('服务商并没有表示联系过您');
			}
			
			$managerid = $srvTask->get('manager_id');
			$managerid<=0 && $managerid = 167;
			
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$messageApi = new messageServiceClient(NULL);
			zbj_lib_ApiClient::build($messageApi);
			
			$messageDTO = new sentMessageParamsDo();
			$messageDTO->f_uid = 0;
			$messageDTO->range = messageRange::SELECT_USER;
			$messageDTO->to_uids = array($managerid);
			
			$msgpackDTO = new messagePack();
			$msgpackDTO->type = messageType::BOSSMESSAGE;
			$msgpackDTO->title = "雇主反馈";
			$msgpackDTO->cont = "雇主反馈：需求编号为[{$url['tid']}]‘{$task['title']}’的需求中，稿件编号[{$url['wid']}]的服务商[{$worktask['user_id']}]并没有联系自已，需要您对该服务商进行跟进处理！";
			
			$messageDTO->messagePack = array($msgpackDTO);
			$messageDTO->product_type = messageProduct::TASK;
			$messageDTO->product_id = $url['tid'];
		//	$messageDTO->product_url = zbj_lib_Constant::TASK_URL.'/'.$url['tid'].'/'.$url['wid'].'.html';
			
			$result = $messageApi->sentMessage($messageDTO);
			if($result->success != true){
				throw new Exception($result->codestr);
			}
		}catch(Exception $e){
			$this->ShowMsg('操作失败：'.$e->getMessage());
		}
		$this->ShowMsg('操作成功',"" , 3 , 1);
	}

	/**
	* 服务商放弃参与该需求
	*/
	public function pageSaveGiveUpReason($inPath){
		if(zbj_lib_BaseUtils::isAjax() !== true){
			lib_BaseUtils::jsonp("仅支持AJAX请求模式！", 1, -1);
		}

		$url = $this->getUrlParams($inPath);

		$task_id = intval($url['tid']);
		$works_id = intval($url['wid']);

		if(empty($task_id)){
			lib_BaseUtils::jsonp("任务ID缺失！", 1, -1);
		}

		if(empty($works_id)){
			lib_BaseUtils::jsonp("稿件ID缺失！", 1, -1);
		}

		$srvTask = new zbj_service_task($task_id);
		$srvTask = $srvTask->init();
		$taskData = $srvTask->get();

		if(empty($taskData)){
			lib_BaseUtils::jsonp("获取任务信息失败！", 1, -1);
		}

		if(!in_array($taskData['state'], array(2,3))){
			lib_BaseUtils::jsonp("任务当前状态不允许此操作！", 1, -1);
		}

		$srvWork = new zbj_service_works($works_id);
		$workData = $srvWork->get();

		if(empty($workData)){
			lib_BaseUtils::jsonp("获取稿件信息失败！", 1, -1);
		}

		if($workData['task_id'] != $task_id){
			lib_BaseUtils::jsonp("非法数据请求！", 1, -1);
		}

		if($workData['user_id'] != $this->_userid){
			lib_BaseUtils::jsonp("您无权执行此操作！", 1, -1);
		}

		if($workData['issuccess'] == 1){
			lib_BaseUtils::jsonp("雇主已经设置您的稿件中标，不能执行此操作！", 1, -1);
		}

		if($workData['iseliminate'] == 1){
			$tipstr = '淘汰';
            if($workData['ft_invalid'] == 100){
                $tipstr = '放弃';
            }
			lib_BaseUtils::jsonp("您的稿件目前是{$tipstr}状态，不能执行此操作！", 1, -1);
		}		
		
		$dataId = zbj_lib_BaseUtils::getStr($_POST['formCfgId'],'int'); 

		try{

			//校验数据
			$reasonRecordNdtoList = $this->checkPostParams($dataId);

			if(empty($reasonRecordNdtoList)){
				throw new Exception("数据校验失败！", 1);
			}

			$data = array();
			$data['taskId'] = $task_id;
			$data['worksId'] = $works_id;
			$data['userId'] = $this->_userid;
			$data['userRole'] = 2; #用户角色，1:雇主，2:服务商，3:交易顾问
			$data['formCfgId'] = $dataId;
			$data['reasonRecordNdtoList'] = $reasonRecordNdtoList;
			$data['terminal'] = 11; #来源，终端：11pc主站，12boss系统，21android,22ios,31微信，41触屏版

			$this->saveGiveUpReason($data);

			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$api = new com\zhubajie\task\interfaces\TaskServiceClient(NULL);
			zbj_lib_ApiClient::build($api);

			$paramDO = new com\zhubajie\task\dataobject\task\SetEliminateParamDO();
			$paramDO->task_id = $task_id;
			$paramDO->works_id = $works_id;
			$paramDO->user_id = $this->_userid;
			$paramDO->operrole = 2;
			$paramDO->value = 1;
			$paramDO->from_source = 1;

			$result = $api->setWorksEliminateByGiveUp($paramDO);
			
			if($result->success == false){
				throw new Exception($result->message);				
			}

			//检查是否存在抛事件的类型
			$isexists = array();
			foreach ($reasonRecordNdtoList as $key => $value) {
				if(in_array($value['relationId'],array(1,2,44,45))){
					$isexists[] = $value['relationId'];
				}
			}

			//调用抛事件的方法，待完成	
			if(!empty($isexists)){
				zbj_lib_Api::userGiveUpBid($task_id,$this->_userid,$isexists);
			}

			$cplog_obj = new zbj_service_cplog();
			$followstr = "首次跟单";
			if($dataId == 13){
				$followstr = "二次跟单";
			}
			$cplog_obj->addLog($this->_userid,$task_id, "稿件号为#{$works_id}的服务商在{$followstr}时放弃需求", 'task', 1, time());





		}catch(Exception $e){
			lib_BaseUtils::jsonp("执行放弃操作失败！".$e->getMessage(), 1, -1);
		}

		lib_BaseUtils::jsonp("执行放弃成功！",1, 1);

		
	}

	/**
	* 校验用户提交的数据，
	*/
	private function checkPostParams($dataId = 0){

		$postdata = $_POST;
		

		if(empty($postdata) || empty($dataId)){
			throw new Exception("非法数据请求");			
		}

		$postdata['formCfgId'] = intval($postdata['formCfgId']);
		if($postdata['formCfgId'] != $dataId){
			throw new Exception("操作的表单信息不合法");
		}

		if(empty($postdata['reasonRecordNdtoList']) || !is_array($postdata['reasonRecordNdtoList'])){
			throw new Exception("请选择原因");
		}

		$resultdata = $this->GetFormById($dataId);

		if(empty($resultdata)){
			throw new Exception("获取表单校验数据失败");
		}

		if($resultdata['answerType'] == 1 && count($postdata['reasonRecordNdtoList'])>1){
			throw new Exception("该表单选择不支持多选");
		}
		

		$itemNdtos = $resultdata['itemNdtos'];
		if(empty($itemNdtos) || !is_array($itemNdtos)){
			throw new Exception("获取表单校验数据失败1");
		}



		$relationIds = array();
		foreach ($itemNdtos as $key => $value) {
			$relationIds[$value['id']] = $value['allowInput'];
		}

		$reasonRecordNdtoList = array();

		foreach($postdata['reasonRecordNdtoList'] as $key => $value) {

			$value['relationId'] = intval($value['relationId']);

			if(empty($value['relationId'])){
				throw new Exception("表单选择项不合法");
			}

			if(!array_key_exists($value['relationId'],$relationIds)){
				throw new Exception("表单选择项不合法");
			}

			$value['inputTxt'] = zbj_lib_BaseUtils::getStr($value['inputTxt'],'string');
			if(!empty($value['relationId']) && !empty($relationIds[$value['relationId']]) && empty($value['inputTxt'])){
				throw new Exception("请填写具体原因");
			}
			$reasonRecordNdtoList[] = array(
				'formCfgId'=>$dataId,
				'relationId'=>$value['relationId'],
				'inputTxt'=>$value['inputTxt']
				);

		}


		return $reasonRecordNdtoList;

	}

	public static $_memcache = null;

	/**
	 * 公共获取表单接口
	 * @param $inPath
	 */
	private function GetFormById($dataId = 0){
		
		if(!$this->_userid){
			return false;
		}		

		$dataId = zbj_lib_BaseUtils::getStr($dataId,'int');
		
		if(empty($dataId)){
			return false;
		}

		if(empty(self::$_memcache)){
			self::$_memcache = new zbj_lib_cache('memcache');
		}

		$cachename = "com.zhubajie.task.tradefollow.getformbyid".$dataId;
		$cacheresult = self::$_memcache->get($cachename);

		if(!empty($cacheresult)){
			return $cacheresult;
		}

		$param['data'] = $dataId;

		$data['appid']='trade';
		$data['service']='WtCommonService';
		$data['method']='getFormById';

		$data['param']=json_encode($param);

		try{
			
			$c = new zbj_lib_ApiHttpClient($data);

			$result = $c->execute();

			$result = json_decode($result,1);

			if(!is_array($result) || !$result['success']){
				return false;
			}

			$resultdata = $result['data'];
			self::$_memcache->set($cachename,$resultdata,7200);
			return $resultdata;

		}catch (Exception $e){
			return false;
		}

	}

	/**
	* 保存提交的原因数据
	*/
	private function saveGiveUpReason($sdata = array()){
		
		if(empty($sdata)){
			return false;
		}

		$param['data'] = $sdata;

		$data['appid']='trade';
		$data['service']='ReasonService';
		$data['method']='addReasonRecord';
		$data['param']=json_encode($param);		
		try{		
			
			$c = new zbj_lib_ApiHttpClient($data);

			$result = $c->execute();

			$result = json_decode($result,1);

			if(!is_array($result) || !$result['success']){
				throw new Exception($result['description']);				
			}

			return true;

		}catch (Exception $e){
			throw new Exception($e->getMessage());
		}

	}

}
