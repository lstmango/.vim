<?php
use com\zhubajie\boss\dataobject\group\MemberResultDO;
use com\zhubajie\boss\dataobject\group\BaseInfoDO;
use com\zhubajie\boss\dataobject\group\BaseInfoResultDO;
use com\zhubajie\boss\dataobject\group\BolckTreeDO;
use com\zhubajie\boss\dataobject\group\GroupType;
use com\zhubajie\boss\dataobject\group\QueryParamsDO;
use com\zhubajie\boss\dataobject\group\QueryResultDO;

class api_GroupService implements com\zhubajie\boss\interfaces\GroupServiceIf {
	/*
	 * 获取部门成员信息
	 * */
	public function getMember($group_id) {
	    $result = new MemberResultDO();

        try {
            if ((! is_numeric($group_id)) || ($group_id < 0)) {
                throw new Exception('参数错误', -1);
            }
			
            if (22 == $group_id) {
            	$m_user = new model_user();
            	
            	$condition = array('group_id' => 22);
            	$item = array('user_id', 'name', 'nickname');
            	
            	$temp_list = $m_user->select($condition, $item)->items;
            	$member_list = json_encode($temp_list);
            } else {
            	$s_group = new service_cp_group($group_id);
            	$member_list = $s_group->get('option.member');
            }
            
            if (empty($member_list)) {
                throw new Exception('数据获取错误', -2);
            }
            $result->data = $member_list;
            $result->success = true;
        } catch (Exception $e) {
            $result->success = false;
            $result->code = $e->getCode();
            $result->message = $e->getMessage();
        }

        return $result;
	}

	/*
	 * 更新部门负责人信息
	 * */
	public function setManager($group_id, $user_id) {
	    $result = false;
	    try {
	        if((! is_numeric($group_id)) || ($group_id < 0)) {
	            throw new Exception('参数错误！', -1);
	        }
	        if ((! is_numeric($user_id)) || ($user_id < 0)) {
	            throw new Exception('参数错误！', -2);
	        }

	        $s_group = new service_cp_group($group_id);
	        $s_group->set('manager', $user_id);
	        if (false === $s_group->save()) {
	            $result = false;
	        } else {
	            $result = true;
	        }
	    } catch (Exception $e) {
	        $result = false;
	    }

	    return $result;
	}
	/**
	 * 获取板块、部门或组负责人
	 * @param int $group_id
	 * @param int $group_type
	 * @return bool $result
	 * @access public
	 * @author yuan
	 */
	public function getManager($group_id, $group_type = GroupType::DEPARTMENT) {
		$result = 0;

		try {
			if (! (is_numeric($group_id) && ($group_id > 0))) {
				throw new Exception('参数有误');
			}

			$s_cp_group = new service_cp_group($group_id);
			for (; $group_type != $s_cp_group->get('group_type'); ) {
				$s_cp_group = new service_cp_group($s_cp_group->get('pid'));

				if (! $s_cp_group->get('pid')) {
					break;
				}
			}

			if ($group_type == $s_cp_group->get('group_type')) {
				$group_id = $s_cp_group->get('group_id');
			} else {
				$group_id = 0;
			}
			if ($group_id) {
				$s_cp_group = new service_cp_group($group_id);
			} else {
				throw new Exception('员工组织架构有误');
			}
			$result = $s_cp_group->get('manager');
		} catch (Exception $e) {
			$result = 0;
		}

		return $result;
	}

	/**
	 *  获取部门基本信息
	 */
	public function getBaseInfo () {
	    try {
	        $group = new model_cp_group();
	        $data = array();
	        $groups = $group->select(array(),"group_id,name")->items;
	        foreach ($groups as $key => $value) {
	            $baseinfo = new BaseInfoDO();
	            $baseinfo->group_id = $value['group_id'];
	            $baseinfo->name = $value['name'];

	            $data[$baseinfo->group_id] = $baseinfo;
	        }
	        if ($data) {
	            $result = new BaseInfoResultDO();
	            $result->success = true;
	            $result->message = "数据查询成功！";
	            $result->data = $data;
	        }
	    } catch (Exception $e) {
	        $result->success = false;
            $result->code = $e->getCode();
            $result->message = $e->getMessage();
	    }
	    return $result;
	}
	
	/**
	 * 部门树
	 */
	public function blockTree ($params) {
	    $array_pid = array();
	    $m_groups = new model_cp_group();
	    $m_groupoption = new model_cp_group_option();
	    $group_list = array();
	    $is_tree = isset($params['is_tree'])? zbj_lib_BaseUtils::getStr($params['is_tree']): 1;
		$group_id = isset($params['group_id'])? zbj_lib_BaseUtils::getStr($params['group_id']): 1;
		//if (!$params['is_all']) {
		$condition = array('cp_user_groups.group_id != 22 and cp_user_groups.group_id != 30');
		//}
		$item = array('cp_user_groups.group_id, name, pid, group_type, number as user_count, cp_user_groups.manager');
		$left_join = array(
			'cp_user_groups_option' => 'cp_user_groups_option.group_id = cp_user_groups.group_id',
		);
		$order_by = 'order by group_type desc,sort asc';
	    $temp = $m_groups->select($condition, $item, '', $order_by, $left_join)->items;
		$temp_group_list = array();
	    if (is_array($temp)) {
	        foreach ($temp as $each_group) {
	        	$pinyin = new zbj_lib_GetPin();
	        	$each_group['namePinYin'] = $pinyin->getAllPY($each_group['name']);
	        	
	            $m_user = new model_cp_user();
	            $each_group['child'] = array();
	            $temp_group_list[$each_group['group_id']] = $each_group;
	        }
	    }
	    unset($temp);
	    //按特定组排序
	    $order_group_ids = array(2, 475, 85, 17, 112, 129, 16, 478, 477, 482, 483, 427, 34, 476);
	    foreach ($order_group_ids as $value) {
	    	 $group_list[$value] = $temp_group_list[$value];
	    	 unset($temp_group_list[$value]);
	    }
	    foreach ($temp_group_list as $key => $value) {
	    	$group_list[$key] = $value;
	    }
	    unset($temp_group_list);
	    
	    for (; count($group_list) > 1; ) {
	        $array_pid = array();
	        if (is_array($group_list)) {
	            foreach ($group_list as $each_group) {
	                if ($each_group['pid']) {
	                    $array_pid[] = $each_group['pid'];

	                    $group_list[$each_group['pid']]['child'][$each_group['group_id']] = $each_group;
	                }
	            }
	            foreach ($group_list as $each_group) {
	                if (! in_array($each_group['group_id'], $array_pid)) {
						if ($group_id == $each_group['group_id']) {
							$temp = $group_list[$each_group['group_id']];
							$group_list = array();
							$group_list[$group_id] = $temp;
							
							break;
						}
	                	
	                    unset($group_list[$each_group['group_id']]);
	                }
	            }
	        }
	    }
	   
	    if (! $is_tree) {
	    	$group_list = $this->_spread_tree($group_list[$group_id]);
	    }
	    
	    $data = json_encode($group_list);
	    $blocktree = new BolckTreeDO();
	    $blocktree->code = '1';
	    $blocktree->success = true;
	    $blocktree->message = "架构树生成成功！";
	    $blocktree->data = $data;
	    
	    return $blocktree;
	}
	
	/**
	 * 树形结构平铺
	 */
	private function _spread_tree($data) {
		$result = array();
		if (!$data['path'] & $data['pid']>0) {
			$data['path'] =array($data['name']);
			$data['pathLevel'] = 1;
		}
		if ($data) {
			$child = $data['child'];
			unset($data['child']);
			$result[] = $data;
			
			foreach ($child as $each_item) {
				if ($data['pid']>0) {
					$each_item['path'] = array_merge($data['path']?$data['path']:array($data['name']),array($each_item['name']));
				}
				$each_item['pathLevel'] =count($each_item['path']);
				$result = array_merge($result, $this->_spread_tree($each_item));
			}
		}
		
		return $result;
	}
	
	/*
	 * @本部门基本信息
	 * 
	 * */
	public function getSelfInfo($group_id) {
	    $baseinfo = new BaseInfoDO();
	    $m_group = new model_cp_group();
	    try {
	        if (! (is_numeric($group_id) && ($group_id > 0))) {
	            throw new Exception('参数有误！',-1);
	        }
	        $data = $m_group->selectOne(array('group_id' => $group_id));
	        if (empty($data)) {
	            throw new Exception('数据查询失败！',-2);
	        }
	        $baseinfo->group_id = $group_id;
	        $baseinfo->name = $data['name'];
	        $baseinfo->pid = $data['pid'];
	        $baseinfo->block_id = $data['block_id'];
	        $baseinfo->ishide = $data['ishide'];
	        $baseinfo->manager = $data['manager'];
	        //$baseinfo->nickname = $data['nickname'];
	        $baseinfo->sort = $data['sort'];
	        $baseinfo->group_type = $data['group_type'];
	    } catch (Exception $e) {
	        $baseinfo = null;
	    }
	    return $baseinfo;
	}
	/**
	 *得到用户负责的组信息
	 */
	public function getManagerGroup($user_id, $group_type = GroupType::DEPARTMENT) {
	    $result = new BaseInfoResultDO();
		try {
			$group = new model_cp_group();
			$data = array();
			$groups = $group->select(array('manager'=>$user_id, 'group_type'=>$group_type),"group_id,name")->items;
			if(count($group)==0){
			    throw new Exception("没有相关组信息", -1);
			}
			foreach ($groups as $key => $value) {
				$baseinfo = new BaseInfoDO();
				$baseinfo->group_id = $value['group_id'];
				$baseinfo->name = $value['name'];
		
				$data[$baseinfo->group_id] = $baseinfo;
			}
			if ($data) {
				$result->success = true;
				$result->message = "数据查询成功！";
				$result->data = $data;
			}
		} catch (Exception $e) {
			$result->success = false;
			$result->code = $e->getCode();
			$result->message = $e->getMessage();
		}
		return $result;
	}  
	
	/**
	 * 获取组织架构快照
	 * 
	 * @author yuanzhuang
	 */
	public function QueryGroupsSnapshot(QueryParamsDO $query_params) {
		$result = new QueryResultDO();
	
		try {
			$condition = array();
			if ($query_params->month_min && $query_params->month_max) {
				if ($query_params->month_min == $query_params->month_max) {
					$condition['month'] = zbj_lib_BaseUtils::getStr($query_params->month_min);
				} else {
					if ($query_params->month_min > $query_params->month_max) {
						throw new Exception('参数错误', -1);
					}
				
					$condition[] = 'month >= "' . $query_params->month_min . '" AND month <= "' . $query_params->month_max . '"';
				}
			}
			if ($query_params->year) {
				$condition['year'] = zbj_lib_BaseUtils::getStr($query_params->year);
			}
			if ($query_params->group_id) {
				$condition['group_id'] = zbj_lib_BaseUtils::getStr($query_params->group_id);
			}
				
			$m_groups_snapshot = new model_cp_group_snapshot();
			$index_list = $m_groups_snapshot->select($condition)->items;
			if ($index_list) {
				foreach ($index_list as $each_item) {
					//@todo something
					$result->data[] = $each_item;
				}
			} else {
				$result->data = array();
			}
					
			$result->success = true;
		} catch (Exception $e) {
			$result->success = false;
			$result->code = $e->getCode();
			$result->message = $e->getMessage();
		}
	
		return $result;
	}
}