<?php
use com\zhubajie\pay\dataobject\pay\PayChn;
/**
 * T6招标任务类
 */
class zbj_service_task_newbid extends zbj_service_task_base {
	/**
	 * 结束任务
	 * 注意：暂时仅支持已经托管的交易结束
	 * @param int $end_type 任务结束类型 0无意义,1正常打款结束,2雇主放弃,3时间到期系统结束,4网站强行结束
	 * @param boolean $is_admin   是否后台执行
	 * @param int $refund_option 退的退回途径 2表示退回易极付余额 空表示原路退回，默认为空 
	 * @return boolean
	 */
	public function endTask($end_type = 1, $is_admin = false,$is_auto_refund = false, $refund_option = '') {
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		try {
			$this->_beginTransaction('mk');
			$this->_beginTransaction('fn');
			$this->_beginTransaction('mb');
			//锁定方式获取
			$this->setLock(true, array());
			//雇主
			$user = new zbj_service_user($this->get('user_id'));
			$user->setLock(true, array('count'));
			//分配交易号
			$this->setTradeNo();
			//暂时只支持状态为2，已托管的交易
			if($this->get('state') != 2 || $this->get('hosted') == 0 ) {
				//不支持
				throw new Exception('当前状态不允许此操作');
			}
			//处理发布订单
			$orderInfo = $this->getPubOrder();
			$pub_order_id = $orderInfo['order_id'];
			if(empty($pub_order_id)) {
				throw new Exception('无法获取发布订单');
			}
			//托管的金额
			$hosted_amount = round($this->get('hosted_amount'), 2);
			
			//实例化一个交易
			$sale = new zbj_service_deal();
			$payment = $sale->payMent();
			$log = '任务结束';
			
			//检查当前是否有未使用完的托管金额
			$unbalance = $this->getTaskUnbalance();
			if(empty($unbalance)) {
				throw new Exception('无法获取不可用余额记录');
			}
			$surplus = 0;
			if($unbalance['state'] == 0) $surplus = round($unbalance['amount'] - $unbalance['has_amount'], 2);
			
			if($surplus <= 0) {
				throw new Exception('不可用余额退款不能小于0元');
			}
			$tk_model = zbj_model_api::get('zbj_model_fn_tk');
			$tk_result = $tk_model->get(array('task_id'=>$this->id, 'state'=>0), '*', true);
			if($tk_result) {
				if(round($tk_result['amount'],2) > round($hosted_amount,2) || round($tk_result['amount'],2) != $surplus){
					throw new Exception("退款金额有误un{$surplus}:tk{$tk_result['amount']}");
				}
			}
			//如果记录未关闭
			if($payment->cutUnbalance($surplus, $unbalance['unbalance_id'], 'unbalance_id') !== true) {
				throw new Exception("更新用户不可用余额失败1" . $payment->getError());
			}

			$back_amount = round($surplus, 2);

			//检查金额是否符合
			if($back_amount != $hosted_amount) {
				throw new Exception("退款金额有误");
			}

			$data = array();
			$data['order_id'] = $pub_order_id;
			$data['trade_no'] = $this->getTradeNo();
			$data['title'] = '退款#'.$this->get('title');
			$data['user_id'] = $this->get('user_id');
			$data['ptype'] = 1;
			$data['mtype'] = 0;
			$data['stype'] = 30;
			$data['fromtype'] = 1;
			$data['amount'] = $back_amount;
			$data['issys'] = 1;
			$data['product_state'] = 2;
			$data['product_pkid'] = $this->id;
			$data['isin'] = true;
			$data['isbt'] = false;
			$data['task_id'] = $this->id;
			$data['back_fee'] = 0;
			if ($payment->addUserBalance($data) !== true) {
				throw new Exception("给雇主退款充值失败" . $payment->getError());
			}

			$this->set('task_info.refund_state', 1);
			$this->set('task_info.refund_type', 2);
			$this->set('task_info.refund_time', $this->_time);
			$this->set('task_info.refund_amount', $back_amount);

			$log .= '，给雇主退款'.$back_amount.'元';
			//自动退款写入TK表
			if(empty($tk_result)){
				//退款记录
				$tk_data = array(
					'paynoid'=>$this->getTradeNO(),
					'task_id'=>$this->id,
					'title'=>$data['title'],
					'user_id'=>$user->getId(),
					'nickname'=>$user->get('nickname'),
					'amount'=>$back_amount,
					'ledger_charge'=>0,
					'user_charge'=>0,
					'state'=>1,
					'audit_state'=>1,
					'ip'=>zbj_lib_BaseUtils::getIp(),
					'memo'=>$log,
					'dateymd'=>date('Y-m-d', $this->_time),
					'addtime'=>$this->_time,
				);
				if($tk_model->insert($tk_data) === false) {
					throw new Exception('扣出用户不可用余额失败');
				}
			}else{
				//更新退款记录
				if($tk_model->update(
					array('tk_id'=>$tk_result['tk_id']), 
					array('state'=>1,
						 'ledger_charge'=>0, 
						 'user_charge'=>0, 
						 'paynoid'=>$this->getTradeNo())
					) === false) {
						throw new Exception('更新领款记录失败');
				}
				//取消冻结
				$this->set('isfrozen', 0);
			}
			//建立api交易信息
			$pay_user_id = $user->getPayUserId();
			if(empty($pay_user_id)) {
				throw new Exception('用户ID '.$user->getId().' 无法匹配支付ID');
			}

			//获取发布订单的发布订单产品ID
			$order = $sale->order($pub_order_id);
			$pub_order_data_id = $order->getTaskOrderDataId();
			if(empty($pub_order_data_id)) {
				throw new Exception("获取发布订单托管产品失败");
			}
			//产生API交易记录
			$api_order = array(
				'c_order_id'=>$pub_order_data_id,
				'amount'=>$back_amount,
				'c_task_id'=>$this->id,
				'order_type'=> 'task_refund',
				'detail_url'=>zbj_lib_Constant::TASK_URL. '/'. $this->id,
				'hold_status'=>true,
				'subject'	=>$data['title'],
				'business_class'	=> $data['stype'],
				'business_subclass'	=> $data['ptype'],
			);
			$api_order['payee'][] = array(
				'subject'=>$data['title'],
				'id'=>$pay_user_id,
				'amount'=>$back_amount,
				'refund_option'=>$refund_option,
			);
			//产生API交易请求
			$api_data_amount = $back_amount;
			$api_service = 'bounty_secured_refund';
			$api_data_order[] = $api_order;
			$sale->setType($this->getTaskToOrderMode());
			//获取当前产品的订单实例
			$order = $sale->Order($pub_order_id);
			//关闭事务
			$order->setTransaction(false);
			if($order->completeOrder(0, array('refund_option'=>$refund_option)) !== true) {
				throw new Exception('关闭失败 '.$order->getError());
			}
			//更新任务状态
			$this->set('state', 4);
			$this->set('task_info.end_type', (int)$end_type);
			$this->set('task_info.close_time', $this->_time);
			$this->set('task_info.close_ymd', date('Y-m-d', $this->_time));
			if($this->save() !== true) {
				throw new Exception("任务更新失败 ". $this->model()->getDbError());
			}

			//产生API异步数据
			if($api_data_amount) {
				$api = new zbj_service_payapi_yijifu_api();
				$api ->amount = $api_data_amount;
				$api ->service = $api_service;
				$api ->orders = $api_data_order;
				$api ->return_url = '';
				$api ->notify_url = '';
				$api ->request_no = $this->getTradeNO();

				//异步队列
				$asyn = new zbj_service_payapi_asyn();
				$asyn->setTransaction(false);
				if($asyn->add($api) !== true) {
					throw new Exception('队列建立失败 '.$asyn->getError());
				}
			}

			$this->_commit('mk');
			$this->_commit('fn');
			$this->_commit('mb');
			//写入日志
			$this->addTaskActionLog($log, $is_admin?false:true);
			return true;
		} catch (Exception $e) {
			$this->setError(0, $e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('fn');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 兼容到edit上 
	 * @deprecated 废弃
	 * @param array $data 数据集
	 * @param boolean
	 */
	public function pubTaskTwo($data) {
		return $this->edit($data);
	}

	/**
	 * 审核发布需求
	 * @param boolean $isBuyer 是否雇主自己操作
	 * @return boolean
	 */
	function checkTaskPub($isBuyer = true){
		if($this->get('state') >=2){
			$this->setError(0,"需求已经发布");
			return false;
		}
		$srvUser = new zbj_service_user($this->get('user_id'));
		$srvUser->set('count.t_ok_num',$srvUser->get('count.t_ok_num')+1);
		$srvUser->set('count.newbid_buy_num',$srvUser->get('count.newbid_buy_num')+1);
		$this->set('state',2);
		$this->set('sort',$this->_time);
		$this->set('starttime',$this->_time);
		$this->set('startymd',date('Y-m-d',$this->_time));
		$this->set('endtime',$this->_time+$this->get('day')*86400);
		$this->set('endymd',date('Y-m-d',$this->_time+$this->get('day')*86400));
		$option = @unserialize($this->get('task_info.option'));
		$option || $option = array();

		//开始事务
		try{
			$this->_beginTransaction('mk');
			$this->_beginTransaction('mb');
			if($option && $option['was_nosearch']==1){
				if($this->get('task_opis.nopass') != '0'){
					$this->addTaskActionLog('雇主取消屏蔽搜索引擎功能直接发布',1);
				}
				$this->set('task_opis.nopass',0);
			}
			//保存主表
			if($this->save() === false) {
				throw new Exception('保存任务数据失败'.$this->getError());
			}
			if($srvUser->save() === false) {
				throw new Exception('保存用户数据失败'.$this->getError());
			}
			//$this->updateInvite(3);
			$this->addTaskActionLog("发布了需求", $isBuyer);
			//提交事务
			$this->_commit('mk');
			$this->_commit('mb');
			$feed = new zbj_service_feed();
			$feed->add($this->id, 1);
			return true;
		} catch(Exception $e) {
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 关闭需求(支持免费和付费的关闭)
	 * @param boolean 是否为管理员
	 */
	function closeTask($isAdmin = false, $close_role = 0){
		return $this->refuseTask($isAdmin,0,0,0,0,$close_role);
	}




	/**
	 * 编辑需求 可以在开启发布前修改需求的内容
	 * @param array $data
	 * @param array $params
	 * @see zbj_service_task_base::edit()
	 */
	function edit($data=array(), $params=array()){
		echo 124;
		die();
		if (!$params['isadmin']) {
			//检查内容是否含违规信息
			if (SFilter::checkey($data['task_cont.content'].$data['title'], 2)) {
				$this->setError(-10,'您填写的内容和标题不能包含违规信息');
				return false;
			}

			//检查内容是否含有联系方式
			if (SFilter::contacts($data['task_cont.content'].$data['title'])) {
				$this->setError(-10,'您填写的内容和标题不能包含联系方式');
				return false;
			}
			// 修改需求后重新审核
			if(isset($data['task_cont.content']) or isset($data['title'])){
			    $data['audit_state'] = $this->get('audit_state') == 1 ? 3 : $this->get('audit_state');
			    if($data['audit_state'] == 3){
			        $data['manager_id2'] = 0;
			        $data['manager_name2'] = '';
			    }
			}

		}
		
		if($data['amount'] > 0 && $this->get('amount') == 0 && $this->_time-$this->get('createtime') < 1800){
			$data['task_opis.first_amount'] = $data['amount'];
		}

		if(isset($data['state']) && $this->get('state') < 2 && $data['state'] == 2) {
			$srvUser = new zbj_service_user($this->get('user_id'));
			$srvUser->set('count.t_ok_num',$srvUser->get('count.t_ok_num')+1);
			$srvUser->set('count.newbid_buy_num',$srvUser->get('count.newbid_buy_num')+1);
			$srvUser->save();
			$feed = new zbj_service_feed();
			$feed->add($this->id, 1);
			//$this->updateInvite(3);
			isset($data['sort']) || $data['sort'] = $this->_time;
			isset($data['starttime']) || $data['starttime'] = $this->_time;
			isset($data['startymd']) || $data['startymd'] = date('Y-m-d',$this->_time);
			isset($data['endtime']) || $data['endtime'] = $this->_time+$this->get('day')*86400;
			isset($data['endymd']) || $data['endymd'] = date('Y-m-d',$this->_time+$this->get('day')*86400);
		}
		
		if(parent::edit($data,$params) === false) {
			$this->setError(0,'保存失败，，原因'.$this->getError());
			return false;
		}
		return true;
	}
	/**
	 * 订金支付
	 * @param float $amount
	 * @param array $option 扩展参数 $option['addtype'] 1加预算 2加定金
	 * @return boolean
	 */
	function payOrderAmount($amount, $option = array()) {
		$orderInfo = $this->getPubOrder();
		if($orderInfo['state'] == 2) {
			$this->setError(0, "订单已经关闭，不能进行此操作");
			$this->addTaskActionLog("订单已经关闭，不能进行此操作");
			return false;
		}
		if($orderInfo['ispay'] == 1){//已经支付走加价
			//创建交易
			$payapi = new zbj_service_payapi();
			$data = array(
				'amount'=>$amount,
				'stype'=>1,
				'pk_id'=>$this->id,
				'user_id'=>$this->get('user_id'),
				'nickname'=>$this->get('nickname'),
				'back_url'=>zbj_lib_Constant::TASK_URL. '/'. $this->id,
			);
			if($option['addtype'] == 1){
				$data['title'] = "增加预算#{$this->id}交易号";
				$data['option'] = array('budget'=>1);
				$deal_id = $payapi->createDealReq($data);
			}elseif($option['addtype'] == 2){
				$data['title'] = "追加担保金#{$this->id}交易号";
				$data['option'] = array('works_id'=>$option['works_id']);
                if ($option['noeditamount']) $data['option']['noeditamount'] = 1;
				$deal_id = $payapi->createDealReq($data);
			}else{
				$this->setError(0, "支付类型错误");
				return false;
			}
			if(!empty($deal_id)) {
				return $deal_id;
			}else {
				$this->setError(0, '请求失败！请重试！ ');
				$this->addTaskActionLog("加价出错：{$payapi->getError()}");
				return false;
			}
		}else{
			$order_option = array();
			$order_option['select_info'] = $option;
			$data = array('price'=>$amount,'option'=>$order_option);
			$order_id = $this->upTaskPubOrder($data);
		}
		if($order_id === false){
			$this->setError(0, $this->getError());
			return false;
		}
		return $order_id;
	}

	/**
	 * 设置中标
	 * @param object $works 稿件对象
	 * @param	array	$option		下标role=manager,system,buyer | from=INT_SITE,APP_BUYER,ZBJ_SITE
	 * @return boolean
	 */
	 /*
	function selectWorks($works,$option=array()){
		if($this->id != $works->get('task_id')){
			$this->setError(0, "投标号错误");return false;
		}
		try{
    		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,15);
			$payapi = new com\zhubajie\task\interfaces\TaskServiceClient(NULL);
			zbj_lib_ApiClient::build($payapi);
			
			$select = array(
				'task_id'	=> $works->get('task_id'),
				'work_id'	=> $works->get('works_id'),
				'option'	=> array(),
			);

			switch(strtolower($option['role'])){
				case 'manager':
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_ROLE] = 
					com\zhubajie\task\dataobject\common\OperatorRole::MANAGER;
					break;
				case 'system':
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_ROLE] = 
					com\zhubajie\task\dataobject\common\OperatorRole::SYSTEM;
					break;
				default:
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_ROLE] = 
					com\zhubajie\task\dataobject\common\OperatorRole::BUYER;
					break;
			}
			
			switch(strtoupper($option['from'])){
				case 'INT_SITE':
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_FROM] = 
					com\zhubajie\task\dataobject\common\OperateFrom::INT_SITE;
					break;
				case 'APP_BUYER':
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_FROM] = 
					com\zhubajie\task\dataobject\common\OperateFrom::APP_BUYER;
					break;
				case 'APP_SELLER':
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_FROM] = 
					com\zhubajie\task\dataobject\common\OperateFrom::APP_SELLER;
					break;
				default:
					$select['option'][com\zhubajie\task\dataobject\common\OperateOption::OPERATOR_FROM] = 
					com\zhubajie\task\dataobject\common\OperateFrom::ZBJ_SITE;
					break;
			}
			
			$selectDTO = new com\zhubajie\task\dataobject\task\SelectWorksDTO($select);
		
			$back = $payapi->selectWorks($selectDTO);
			if($back->success != true){
				throw new Exception($back->message);
			}
		} catch (Exception $e) {
			$this->setError(0,$e->getMessage());
			return false;
		}
		return true;
	}*/
	
	/**
	 * 设置中标
	 * @param object $works 稿件对象
	 * @return boolean
	 */
	function selectWorks($works){
		if($this->id != $works->get('task_id')){
			$this->setError(0, "投标号错误");return false;
		}
		try{
			$this->_beginTransaction('mk');
			$this->_beginTransaction('fn');
			$this->_beginTransaction('mb');
			//锁定方式获取
			$this->setLock(true, array());
			$works->setTransaction(false);
			$works->setLock(true, array());
			$ptype = $this->getTaskToOrderMode();
			//判断该稿件时否已经中标
			if($works->get('issuccess') != 0) {
				throw new Exception("该稿件之前已经中过标了，不能再进行操作");
			}
			if($works->get('open_state') != 0) {
				throw new Exception("该稿件已屏蔽，不能再进行操作");
			}
			if($this->checkWebNewbidMode()){//网建新招标
				$this->set('amount', $this->get("hosted_amount"));
			}elseif($this->get('amount') > $this->get('hosted_amount')){
				throw new Exception("需求没有全额托管，无法设置中标");
			}
			//判断任务状态
			if($this->get('state') != 2) {
				throw new Exception("当前任务不允许此操作");
			}
			//避免订单创建重复
			$paynoid = $works->getWorksPayNoId($ptype, $works->getId());
			$task_id = $this->id;
			$mtype = 1;//交易类型
			$isevaluation = 1;//是否需要评价
			$iscfpay = 0;//是否确认付款
			$isexchange_file = (int)$this->isNeedUpFile();//是否 交互源文件
			$pubOrder = $this->getPubOrder();
			if($pubOrder['ispay'] == 0 || $pubOrder['price'] <= 0) {
				throw new Exception('订单没有支付');
			}
			$title = $this->get('title'). '#'. $works->getId(). '稿件中标';
			//实例化一个交易
			$sale=new zbj_service_deal();
			$sale->setType($ptype);
			$order=$sale->Order();
			$order->setTransaction(false);
			$order_info = array(
				'ptype'=>$ptype,
				'stype'=>16,
				'mtype'=>$mtype,
				'title'=>$title,
				'product_pkid'=>$task_id,
				'user_id'=>$this->get('user_id'),
				'nickname'=>$this->get('nickname'),
				'sl_user_id'=>$works->get('user_id'),
				'sl_nickname'=>$works->get('nickname'),
				'isexchange_file'=>$isexchange_file,
				'iscfpay'=>$iscfpay,
				'isevaluation'=>$isevaluation,
				'paynoid'=>$paynoid,
				'price'=>$this->get('hosted_amount'),
				'at_price'=>$this->get('hosted_amount'),
			);

			$order_data = array(
				array(
					'title'=>$title,
					'ptype'=>$ptype,
					'stype'=>16,
					'mtype'=>$mtype,	//设置交易类型 交易类型：0及时到账,1担保交易,2综合类型 
					'product_pkid'=>$works->getId(),
					'user_id'=>$this->get('user_id'),
					'nickname'=>$this->get('nickname'),
					'sl_user_id'=>$works->get('user_id'),
					'sl_nickname'=>$works->get('nickname'),
					'price'=>$this->get('hosted_amount'),
					'at_price'=>$this->get('hosted_amount'),
					'num'=>1,
				)
			);
			$order_id = $order->createOrder($order_info, $order_data);
			if ($order_id === false || empty($order_id)){
				throw new Exception("创建订单失败 ". $order->getError());
			}
			//更新稿件
			if($works->get('isalternative') == 1) {
				$works->setAlternative(0);
			}
			if ($works->get('iseliminate') == 1) {
				$works->setEliminate(0);
			}
			if($works->get('ft_invalid') == 21) {
				$works->setInvalid(0);
			}
			$works->set(
				array(
					"issuccess"=>1,
					"select_time"=>$this->_time,
					"select_ymd"=>date('Y-m-d', $this->_time),
					"class"=>1,
					"isappraise"=>1,
					"iseliminate"=>0,
					"type"=>10
				)
			);
			if($works->save() === false) {
				throw new Exception("更新稿件失败");
			}
			//处理选稿日志
			$params = array('type'=>0,'class'=>0);
			if($works->addWorksSourceLog(1, 1, '设置中标', $params) === false){
				throw new Exception($works->getError());
			}
			
			//交易数据
			$this->set('task_info.succeed_num', 1);
			$this->set('task_info.succeed_user_id', $works->get('user_id'));
			$this->set('task_info.succeed_nickname', $works->get('nickname'));
			$this->set('task_info.isevaluation', $isevaluation);
			$this->set('task_info.isupfile', $isexchange_file);
			//更新报名表
			$sign = $this->getUserSign($works->get('user_id'));
			$up_sign_info = array();
			$up_sign_info["sign_isupfile"] = $isexchange_file;
			$up_sign_info["sign_isevaluation"] = $isevaluation;
			$up_sign_info["success_num"] = $sign['success_num'] + 1;
			$up_sign_info['sign_id'] = $sign['sign_id'];
			if(!$this->upSignInfo($works->get('user_id'), $up_sign_info)) {
				throw new Exception("更新报名表失败");
			}

			//更新用户相关交易信息冗余
			//雇主
			$user_buy =  new zbj_service_user($this->get('user_id'));
			$user_buy->addSynNoRead('no_select,working,no_pay_work');
			//卖家
			$user_sell =  new zbj_service_user($works->get('user_id'));
			$user_sell->addSynNoRead('no_select,working,no_pay_work', 'seller');
			
			$paytype_id = 3; // 全站招标免佣
						
			$this->set('paytype_id',$paytype_id);
			//已完成选稿，更新任务状态
			$this->set("health",10);
			$this->set("state",3);
			$this->set("ispublicity",1);
			$this->set("publicity_outime", $this->_time);
			//关闭发布任务订单
			if($this->closeTaskOrder(0, false) === false){
				throw new Exception("关闭发布订单失败".$this->getError());
			}
			//更新任务表
			if($this->save() === false) {
				throw new Exception("更新任务失败");
			}
			//更新任务冗余
			$upOptionField = array(
				"success_num",//成功的数量
			);
			$this->upTaskInfoOption($upOptionField);
			// 派单记录
			$srv_rcmd = new zbj_service_recommend($works->get('user_id'), $this->id);
			$rcmd = $srv_rcmd->getRecommend();
			if($rcmd['works_id'] == $works->getId() && $rcmd['action_type'] <= 2) {
				$srv_rcmd->setTransaction(false);
				if($srv_rcmd->recommend(3) == false) {
					throw new Exception("派单记录更新失败: {$srv_rcmd->getError()}");
				}
				$option = $works->get('option');
				$option = @unserialize($option);
				if(isset($option['recommend5point']) && $option['recommend5point'] == '1'){
					$this->set('paytype_id',10); //派单服务商中标享5%佣金比例
					if(!$this->save()){
						throw new Exception("更新任务失败2");
					}
				}
			}

			//记录统计日志
			$this->addSellerLog($works->get('user_id'), 13, $pubOrder['price']);
			//中标时生成一张发票
			if(!$this->invoiceService($works, 'add')){
				throw new Exception("服务商生成自开发票失败".$this->getError());
			}
			//抛出中标事件
			zbj_lib_Api::worksSuccess($works->getId(), $works->get('task_id'));

			$this->_commit('mk');
			$this->_commit('fn');
			$this->_commit('mb');
			//外包任务 写中标服务商

            $mdl_outsource = new zbj_model_mk_taskoutsource();
            $outsource = $mdl_outsource->selectOne("task_id={$task_id}");
            if ($outsource) {
                $item = array('fws_id'=>$works->get('user_id'));
                $mdl_outsource->update("task_id={$task_id}",$item);
            }
			return $order_id;
		} catch (Exception $e) {
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('fn');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 延长任务周期
	 * @param int $day
	 * @param boolean true管理员
	 * @return boolean
	 */
	function extendDay($day, $isadmin = false){
		if($this->get('state') != 2){
			$this->setError(0, "当前状态不允许延期");
			return false;
		}
		$extNum = $this->get("ext_num");
		if($extNum > 3 && $isadmin == false){
			$this->setError(0, "最多延期三次");
			return false;
		}
		$maxDay = $this->get('day') <= 7 ? 7 : $this->get('day');
		if($day>$maxDay){
			$this->setError(0, "最多延期{$maxDay}天");
			return false;
		}
		if ($this->upExtension($day) !== true) {
			$this->setError ( "任务延期失败，请重试!" . $this->getError());
			return false;
		} else {
			return true;
		}
	}

	/**
	 * 任务加价 用于支付成功回调 默认为加定金
	 * @param float $amount 加价金额
	 * @param array $option 扩展参数  $option['budget']加预算 $option['endtask']=1表示加价并结束$option['works_id']=xxx加价并选稿
	 * @return boolean
	 */
	public function addAmount($amount, $option = array()) {
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		if(0 > $amount or $amount > 1000000){
			$this->setError(0,'加价金额不能低于1元或者大于100万');
			return false;
		}
		//获取发布任务的订单
		$order_id=$this->getPubOrderId();
		if(empty($order_id)){
			$this->setError(0,"无法获取订单");
			return false;
		}
		$budget = $option['budget'] == 1 ? 1 : 0;//加预算
		if($budget == 1){
			$this->corntabSendMsg(30);
		}
		$srvDeal=new zbj_service_deal();
		$srvDeal->setType($this->getTaskToOrderMode());
		$srvOrder=$srvDeal->Order($order_id);
		$order_info=$srvOrder->getOrder();
		if(empty($order_info)){
			$this->setError(0,"无法获取订单信息");
			return false;
		}
		if($order_info['state'] == 2){
			$this->setError(0,"交易已经关闭，请联系客服");
			$this->addTaskActionLog('订单关闭加价失败，请联系技术部处理。￥{$amount}', false);
			return false;
		}
		//该方法也被其他方法调用，需要将事务状态保持到订单中
		$srvOrder->setTransaction($this->transaction);
		//设置当前交易号
		$srvOrder->setTradeNo($this->getTradeNo());
		$r = $srvOrder->addOrderPrice($amount, $option);
		if($r === false) {
			$this->setError(0, $srvOrder->getError());
			return false;
		}

		//重置需求是否需要合同的状态
		$this->initTaskAgreement();

		//设置中标
		if($option['works_id']>0){
			$srvWork = new zbj_service_works($option['works_id']);
			if($srvWork->get('issuccess') != 1 && $this->id = $srvWork->get('task_id')){
				if($this->selectWorks($srvWork) === false){
					$this->addTaskActionLog('雇主设置中标出错2，'.$this->getError(), 1);
				}
				//补担保金设置中标通知
				$other = array('task_id'=>$this->id,'task_title'=>$this->get('title'));
				$srvUser = new zbj_service_user($srvWork->get('user_id'));
				zbj_service_taskmsg::sendmsg($srvUser, "seller", "您的投标已中标", array(1,1,1), $other);
			}
			$this->addTaskActionLog("雇主补齐担保金￥{$amount}同时设置{$option['works_id']}号稿件中标", 0);
		}else{
			$this->addTaskActionLog("雇主增加了担保金￥{$amount}", 1);
		}
		return $r;
	}

	/**
	 * 获取加价的订单产品ID
	 * @return int
	 */
	public function getAddAmountOrderDataId() {
		$order_id = $this->getPubOrderId();
		if(empty($order_id)) {
			$this->setError(0, '无法获取交易订单');
			return false;
		}
		$deal = new zbj_service_deal();
		$order = $deal->Order($order_id);
		foreach($order->getOrderData() as $row) {
			if($row['stype'] == 30) {
				return $order->getPayOrderDataId($row['data_id']);
			}
		}
		return false;
	}

	/**
	 * 对稿件或者评论进行谢谢
	 * @param int $type 类型 1表示评论，2表示稿件
	 * @param object $object 评论或者稿件对象
	 */
	function thanks($type, $object) {
		if (!in_array($type, array(1, 2))) {
			$this->setError(-1, '参数错误');
			return false;
		}
		if ($type == 1 && !($object instanceof zbj_service_comment && $object->getId())) {
			$this->setError(-1, '获取评论对象失败');
			return false;
		}
		if ($type == 2 && !($object instanceof zbj_service_works && $object->getId())) {
			$options['works_id'] = $object->getId();
			$this->setError(-1, '获取稿件对象失败');
			return false;
		}
		if ($object->get('user_id') == $this->getId()) {
			$this->setError(-1, '不能谢谢自己');
			return false;
		}
		try {
			$this->_beginTransaction('mk');
			$this->_beginTransaction('mb');
			$this->setLock(true, array());
			$option = unserialize($this->get('task_info.option'));
			$option || $option = array();
			if(empty($option)){
            	throw new Exception("获取订单扩展数据失败");
            }
			//检查谢谢次数
			if ($type == 1) {
				$thx_times = (int)$option['comment']['thx_times'];
			} else {
				$thx_times = (int)$option['works']['thx_times'];
			}
			if ($thx_times >= 5) {
				throw new Exception("谢谢次数已达上限");
			}

			$object->set('is_tks', 1);
			$object->set('tks_time', $this->_time);
			if ($type == 1) {
				//评论表中又ths_ymd字段，所以需要单独更新
				$object->set('tks_ymd', date('Y-m-d', $this->_time));
				$option['comment']['thx_times'] = $thx_times + 1;
			} else {
				$option['works']['thx_times'] = $thx_times + 1;
			}
			if ($object->save() === false) {
				throw new Exception("更新谢谢数据失败");
			}

			//更新冗余数据
			$this->set('task_info.option', serialize($option));
			if ($this->save() === false) {
				throw new Exception("更新谢谢冗余失败");
			}

			//更新用户获取谢谢以及标签信息
			$user_thank = array(
				'type' => $type - 1, //type的值0表示评论，1表示稿件
				'user_id' => $object->get('user_id'),
				'nickname' => $object->get('nickname'),
				'task_id' => $this->getId(),
				'title' => $this->get('title'),
				'pk_id' => $object->getId(),
				'dateline' => $this->_time,
				'dateymd' => date('Y-m-d', $this->_time)
			);
			$user_thank_model = new zbj_model_mb_thank();
			//冗余数据
			$region = new zbj_service_region();
			$regionArr = $region->getRegionByIp();
			$params = array('os_type'=>0,'provice_name'=>$regionArr['province_name'],'provice_city'=>$regionArr['city_name']);
			$params['content'] = $object->get('content');
			$params['user_id'] = $this->get('user_id');
			$params['nickname'] = $this->get('nickname');
			$user_thank['options'] = serialize($params);
			$user_thank_id = $user_thank_model->insert($user_thank);
			if (!$user_thank_id) {
				throw new Exception("写入用户获取谢谢信息失败");
			}
			$task_tags = $this->getTaskTag();
			if ($task_tags) {
				$thank_tag_model = new zbj_model_mb_thanktag();
				$thank_tag = array(
					'thank_id' => $user_thank_id,
					'user_id' => $object->get('user_id'),
					'nickname' => $object->get('nickname')
				);
				foreach ($task_tags as $tag) {
					$thank_tag['tag_id'] = $tag['tid'];
					if (!$thank_tag_model->insert($thank_tag)) {
						throw new Exception("添加谢谢标签失败".$tag['tid']);
					}
				}
			}
			//更新用户标签数据
			$userobj = new zbj_service_user($object->get('user_id'));
			if ($userobj->updateUserTag($this, 1) === false) {
				throw new Exception("更新用户标签统计失败");
			}
			//增加能力值
			$options['task_id'] = $this->id;
			if($type == 1){
				$options['comment_id'] = $object->getId();
			}
			if($type == 2){
				$options['works_id'] = $object->getId();
				//@todo 移植到T6 写入用户统计
				$logModel = new zbj_model_mb_usercategorylogall();
				$logData = array();
				$logData['category_id'] = $this->get('category_id');
				$logData['user_id'] = $object->get('user_id');
				$logData['nickname'] = $object->get('nickname');
				$logData['thank_num'] = 1;
				$logData['date'] = date('Y-m-d',$this->_time);
				$logModel->insert($logData);
			}
			if ($userobj->addAbility(1, 4, $this->get('title'), $options) === false) {
				throw new Exception("增加能力值失败：{$userobj->getError()}");
			}

			//更新用户谢谢数
			if ($userobj->save() === false) {
				throw new Exception("更新用户获取谢谢数量失败");
			}
			
			$sign = $this->getUserSign($object->get('user_id'));
			if($sign) {
				$up_sign_info = array();
				$up_sign_info["tks_num"] = $sign['tks_num'] + 1;
				if(!$this->upSignInfo($object->get('user_id'), $up_sign_info)) {
					throw new Exception("报名数据更新失败");
				}
			}
			//添加动态
			$feed = new zbj_service_feed();
			if ($feed->add($user_thank_id, 4, $params) === false) {
				throw new Exception("添加动态失败");
			}
			//发送通知
			$oMsg = new SSendmsg();
			if ($oMsg->addNotification($object->get('user_id'), 2) === false) {
				throw new Exception("发送通知失败");
			}
			$this->_commit('mk');
			$this->_commit('mb');
			return true;
		} catch (Exception $e) {
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('mb');
			return false;
		}
	}

	/**
	 * 服务商提醒雇主支付
	 * @param object $srvWorks 稿件对象
	 * @param float $amount 金额 
	 * @param string $content 支付理由
	 * @return boolean
	 */
	function noticeBuyerPay($srvWorks, $amount, $content){
		$order = $this->checkIsAllowPay($amount, $srvWorks);
		if($order === false){
			return false;
		}
		$params = array('amount'=>$amount);
		try{
			$this->_beginTransaction('mk');
			$sid = $srvWorks->addWorksSourceLog(2, 5, $content, $params);
			if($sid === false){
				throw new Exception($srvWorks->getError());
			}
			if($this->addAutoPaymentLog($order['order_id'], $amount, 2, $sid) === false){
				throw new Exception($this->getError());
			}
			$this->_commit('mk');
			
			$evtparam = array('task_id'=>$this->id,'seller_id'=>$order['sl_user_id'],'amount'=>$amount);
			zbj_lib_Api::throwTaskEvent($evtparam,'seller.applied.pay');
			
			return true;
		}catch(Exception $e) {
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			return false;
		}
	}

	/**
	 * 雇主支付服务商（含同意服务商申请支付）
	 * @param int $wid 稿件编号
	 * @param int $lid 申请记录id
	 * @return boolean
	 */
	function buyerAgreePay($srvWorks, $amount, $lid = 0){
		$order = $this->checkIsAllowPay($amount, $srvWorks);
		if($order === false){
			return false;
		}
		$sale=new zbj_service_deal();
		$sale->setType($this->getTaskToOrderMode());
		$order=$sale->Order($order['order_id']);
		if($order->completeOrder($amount, array('lid'=>$lid)) === false){
			$this->setError(0, "支付出错，请稍后重试！".$order->getError());
			$this->addTaskActionLog("支付失败：".$order->getError());
			return false;
		}
		if($lid==0){
			$params = array('amount'=>$amount,'state'=>1);
			$srvWorks->addWorksSourceLog(1, 4, "付款", $params);
		}
		$this->taskSurvey(2);//删除调查
		return true;
	}
	/**
	 * 检查是否符合付款条件
	 * @param unknown_type $amount
	 * @param unknown_type $srvWorks
	 * @return boolean|array
	 */
	function checkIsAllowPay($amount, $srvWorks){
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		$order = $srvWorks->getSuccessOrder();
		if(!$order){
			$this->setError(0, "无法获取中标订单");return false;
		}
		$report = new zbj_service_report();
		if($report->CheckOrder($order['order_id'])){
			$this->setError(0, "交易存在举报，暂时不能支付！");return false;
		}
		$refundSrv = new zbj_service_refund();
		if ($refundSrv->checkOrderRefund($order['order_id'])) {
			$this->setError(0, "交易存在退款申请，暂时不能支付！");
			return false;
		}
		//包含平台服务费
		$imDB = new zbj_model_mk_installment();
		$sum = $imDB->getOrderPaySum($order['order_id']);
		//剩下的金额=订单金额-已经支付的金额
		$leftAmount = round($order['price']-$sum, 2);
		if($amount > $leftAmount){
			$this->setError(0, "可用金额不足");return false;
		}
		return $order;
	}
	
	/**
	 * 雇主拒绝服务商的支付申请
	 * @param int $lid 申请记录id
	 * @param string $content 拒绝理由
	 * @return boolean
	 */
	function buyerRefusePay($lid, $content){
		$condi = array('sourcelog_id'=>$lid);
		$sLogModel = new zbj_model_mk_workssourcelog();
		$rs = $sLogModel->selectOne($condi);
		if(!$rs){
			$this->setError(0, "没有对应的记录");return false;
		}
		try{
			$this->_beginTransaction('mk');
			$model = zbj_model_api::get('zbj_model_mk_crontaskpayment');
			if($model->delete(array('task_id'=>$this->id,'sid'=>$lid)) === false){
				throw new Exception('拒绝出错1');
			}
			$sData = unserialize($rs['content']);
			$sData['refuse'] = $content;
			$sData['refusetime'] = $this->_time;
			$sLogData['state'] = 1;
			$sLogData['type'] = 2;
			$sLogData['content'] = serialize($sData);
			if($sLogModel->update($condi, $sLogData) === false){
				throw new Exception('拒绝出错2');
			}
			$this->_commit('mk');
			return true;
		} catch(Exception $e) {
			//回滚事务
			$this->setError(0,$e->getMessage());
			$this->_rollBack('mk');
			return false;
		}
	}

	/**
	 * 更新邀请信息
	 * @param int $type 1+点评 2+稿件数 3更新通知发送状态
	 * @param int $user_id
	 */
	function updateInvite($type, $user_id=0){
		$inviteModel = new zbj_model_mk_taskinvite();
		$condi = array('task_id'=>$this->id);
		switch ($type){
		case 1:
			$condi['user_id'] = $user_id;
			$data = "comment_num=comment_num+1";break;
		case 2:
			$condi['user_id'] = $user_id;
			$data = "works_num=works_num+1";break;
		case 3:
			$condi['state'] = 2;
			$data = "state=0";
			break;
		default:
			return false;
		}
		return $inviteModel->update($condi, $data);
	}

	/**
	 * 取消中标
	 * @param object $works service稿件对象
	 * @param bool $disable_transaction 如果设为true 外面调用的地方需要开启事务
	 * @param	$isManager	是否是后台管理员操作
	 * @return boolean
	 */
	public function cancelWorks($works, $disable_transaction=false,$isManager=false) {
		if($this->get('state') == 4){
			$this->setError(0,'交易结束不能取消中标');
			return false;
		}
		if($works->get('issuccess') != 1) {
			$this->setError(0,'该投标未中标');
			return false;
		}
		if($works->get('task_id') != $this->id){
			$this->setError(0,'投标和需求不匹配');
			return false;
		}
		
		if(!$works->isAgreementCancleAble($isManager)){
			return false;
		}
		
		//获取中标的订单号
		$orders = $this->getOneWinOrder($works->getId());
		if(empty($orders)) {
			$this->setError(0,'未找到中标订单');
			return false;
		}
		$imDB = new zbj_model_mk_installment();
		$sum = $imDB->getOrderPaySum($orders['order_id']);
		if($sum>0){
			$this->setError(0,'已经有付款，不能取消中标');
			return false;
		}
		//订单产品类型
		$ptype = $this->getTaskToOrderMode();
		$sale = new zbj_service_deal();
		$sale->setType($ptype);
		$order = $sale->order($orders['order_id']);
		if ($disable_transaction === true) $order->setTransaction(false);
		$result = $order->cancelOrder(0);
		if($result !== true) {
			$this->setError(0,'订单处理失败 '.$order->getError());
			return false;
		}

		zbj_lib_Api::worksSuccessCancel($works->getId(), $works->get('task_id'));

		//取消发票后如果中标时有生成发票则将发票置为弃用
		if(!$this->invoiceService($works, 'cancel')){
			$this->setError(0,'取消自开发票失败');
			return false;
		}
		$this->addTaskActionLog("取消中标", false);
		return true;
	}

	/**
	 * 创建混合订单
	 * @param $order_data array 主订单信息
	 * @param $order_info array 增值服务信息
	 * @param $pubAmount 担保金
	 */
	function createMixOrder($order_data, $data_info, $pubAmount = 0){
		$allow_vas_type = array(
			4, 5, 30, 77, 81, 87, 88, 
			509, 510, 511, 512, 513, 514, 515, 516, 517,107,110,661);
		$data = array();
		$ptype = $this->getTaskToOrderMode ();
		if($this->get('hosted') == 1){
			$pubAmount = 0;//支付过担保金就不生成发布订单
		}
		if($pubAmount > 0){
			$data[30] = array(
				'title'=>$this->get('title'),
				'ptype'=>$ptype,
				'stype'=>30,
				'mtype'=>1,
				'product_pkid'=>$this->id,
				'user_id'=>$this->get('user_id'),
				'nickname'=>$this->get('nickname'),
				'price'=>$pubAmount,
				'at_price'=>$pubAmount,
				'num'=>1
			);
		}
		if($data_info){
			$num = 1;
			$vas = new zbj_service_vas();
			foreach($data_info as $idx => $v){
				// 将包下的增值业务叠加
				if(!isset($v['type']) && isset($v['pack'])) {
					$serv_list = $this->getPackServices($v['pack']);
					if(!$serv_list) {
						continue;
					}
					foreach($serv_list as $pack) {
						$data_info[] = array(
							'type' => $pack['service_id'],
							'pack' => $pack['pack_id']);
					}
					unset($data_info[$idx]);
				}
			}
			foreach($data_info as $v){
				$servs = array();
				if(!in_array($v['type'], $allow_vas_type)){
					$this->setError(0,'不支持的增值服务类型');
					return false;
				}
				if($v['type'] == 4){
					if($this->get('state') >= 2 or $this->get('was_nosearch') == 1){
						$this->setError(0,'当前状态不能购买屏蔽搜索引擎');
						return false;
					}
				}
				if($v['type'] == 5 and $this->get('was_showorks') == 1){
					$this->setError(0,'已经购买过隐藏投标');
					return false;
				}
				isset($v['pack']) || $v['pack'] = 0;
				if($v['type'] != 107){
					$servs = $this->getServices($v['type'], $v['pack']);
				}
				//如果购买了任务下的增值服务
				$hasTaskVas = 0;
				if($servs['parent_id'] == 6 && $servs['is_deny'] == 0){
					$pArr = array('task_id'=>$this->id,'stype'=>$v['type']);
					if($v['tag']){
						foreach ($v['tag'] as $vv){
							$pArr['tag_id'] = $vv['tag_id'];
							$pArr['day'] = $vv['day'];
							$pArr['type'] = intval($vv['type']);
							$link_id = 0;
							if ( in_array($vv['tag_id'], array(24246,24245)) ) {
								$link_id = $vas->createAddPaidListing($pArr, $fee);
							} else {
								$link_id = $vas->createAddTopListing($pArr, $fee);
							}
							
							$data[$link_id] = array (
								'title' => $this->get('title')."#".$servs['service_name'],
								'ptype' => 22,
								'stype' => $servs['service_id'],
								'mtype' => 0,
								'product_pkid' => $this->id,
								'user_id' => $this->get('user_id'),
								'nickname' => $this->get('nickname'),
								'price' => $fee,
								'at_price' => $fee,
								'num' => 1,
								'link_id' => $link_id
							);
						}
						$hasTaskVas = 1;
					}
					// 定制价格
					if($servs['discount_price']) {
						$fee = $servs['discount_price'];
					}
					// 套餐里的置顶
					if($v['pack'] > 0 && $v['type'] == 77) {
						$v['virtual'] = $servs['option'];
					}
					if($v['virtual']) {
						//判断是否跨类目 当该搜索出的类目 是一级导购类目时 与 该任务的一级导购类目id比较 若不等 则是跨一级类目
						// 若搜索类目非一级类目 则用搜索类目的第二级类目 与 该任务的第二级类目比较 若不等则是跨二级类目

						$guide_srv = new zbj_service_categoryguide();
						$category_id = $this->get('category_id');
						$guide_id= $guide_srv->getGuideId($category_id);
						$guide_category = $guide_srv->getGuideCategoryById($guide_id);
						foreach($v['virtual'] as $virt) {
							$top = array(
								'task_id' => $this->id,
								'tag_id' => $virt['virtual_id'], 
								'day' => $virt['day'],
								'type' => 3);

							$guide_res = $guide_srv->getGuideCategoryById($virt['virtual_id']);
							//判断是否跨类目
							$is_cross = $guide_srv->isCrossCategory($guide_id, $guide_res['guide_id']);
							if($is_cross['extra_category'] == 1){
								$top['extra_category'] = 1;
								$top['region_price'] = $guide_category['paid_listing_fee'];
							}
							$link_id = $vas->createAddTopListing($top, $fee);
							if($link_id == false) {
								$this->setError(0, '购买置顶增值服务错误' . $vas->getError());
								return false;
							}
							// 套餐的优惠价格
							if($v['pack'] > 0 && isset($servs['discount_price'])) {
								$fee = $servs['discount_price'];
							}
							$data[$link_id] = array(
								'title' => $this->get('title')."#".$servs['service_name'],
								'ptype' => 22,
								'stype' => $servs['service_id'],
								'mtype' => 0,
								'product_pkid' => $this->id,
								'user_id' => $this->get('user_id'),
								'nickname' => $this->get('nickname'),
								'price' => $fee,
								'at_price' => $fee,
								'num' => 1,
								'link_id' => $link_id
							);
						}
					}
				}else if($v['type'] == 107){
					$location_id = $v['lid'];
					$srv_vas = new zbj_service_vas();
					$location = $srv_vas->checkVasLocation($location_id);
					if ( $location == false ) {
						lib_BaseUtils::jsonp('购买确认异常，' . $srv_vas->getError(), 1, -1);
					}
					$day = (int)$v['day'] ? (int)$v['day'] : 0;
					$val = array(
						'location_id' => $location_id,
						'user_id' => $this->get('user_id'),
						'task_id' => $this->id,
						'stype' => $location['stype'],
						'isfee' => 1,
						'day' => $day
					);

					$data[$v['type']] = array(
						'ptype' 		=> 22,
						'stype' 		=> $location['stype'],
						'num'   		=> 1,
						'user_id'		=> $this->get('user_id'),
						'nickname'		=> $this->get('nickname'),
						'product_pkid'	=> $this->id,
						'title' => "需求{$this->id}号#".$location['location_name']
					);
					$link_id = $srv_vas->createVasPaddingListing($val, $fee);
					if(!$link_id){
						lib_BaseUtils::jsonp('购买确认异常，' . $srv_vas->getError(), 1, -1);
					}
					$data[$v['type']]['price']	  = $fee;
					$data[$v['type']]['at_price'] = $fee;
					$data[$v['type']]['link_id']  = $link_id;

				}else if($v['type'] == 110){
					$servs = $this->getServices(77, $v['pack']);
					$top_day = 0;

					//判断是否跨类目 当该搜索出的类目 是一级导购类目时 与 该任务的一级导购类目id比较 若不等 则是跨一级类目
					// 若搜索类目非一级类目 则用搜索类目的第二级类目 与 该任务的第二级类目比较 若不等则是跨二级类目
					$guide_srv = new zbj_service_categoryguide();
					$category_id = $this->get('category_id');
					$guide_id= $guide_srv->getGuideId($category_id);
					$guide_category = $guide_srv->getGuideCategoryById($guide_id);

					foreach($v['virtual'] as $vir) {
						$top = array(
							'task_id' => $this->id,
							'tag_id' => $vir['virtual_id'],
							'day' => $vir['day'],
							'type' => 3);
						$top_day = $top_day + $vir['day'];

						$guide_res = $guide_srv->getGuideCategoryById($vir['virtual_id']);
						//判断是否跨类目
						$is_cross = $guide_srv->isCrossCategory($guide_id, $guide_res['guide_id']);
						if($is_cross['extra_category'] == 1){
							$top['extra_category'] = 1;
							$top['region_price'] = $guide_category['paid_listing_fee'];
						}
						$link_id = $vas->createAddTopListing($top, $fee);
						if($link_id == false) {
							$this->setError(0, '购买置顶增值服务错误' . $vas->getError());
							return false;
						}
						// 定制价格
						if($vir['discount_price']) {
							$fee = $vir['discount_price'];
						}
						// 套餐的优惠价格
						if($v['pack'] > 0 && isset($servs['discount_price'])) {
							$fee = $servs['discount_price'];
						}
						$data[$link_id] = array(
							'title' => $this->get('title')."#".$servs['service_name'],
							'ptype' => 22,
							'stype' => $servs['service_id'],
							'mtype' => 0,
							'product_pkid' => $this->id,
							'user_id' => $this->get('user_id'),
							'nickname' => $this->get('nickname'),
							'price' => $fee,
							'at_price' => $fee,
							'num' => 1,
							'link_id' => $link_id
						);
					}

					if($v['hot_task']){
						$location_id = $v['hot_task']['lid'];
						$srv_vas = new zbj_service_vas();
						$location = $srv_vas->checkVasLocation($location_id);
						if ( $location == false ) {
							lib_BaseUtils::jsonp('购买确认异常，' . $srv_vas->getError(), 1, -1);
						}
						$day = (int)$v['hot_task']['day'] ? (int)$v['hot_task']['day'] : 0;
						$val = array(
							'location_id' => $location_id,
							'user_id' => $this->get('user_id'),
							'task_id' => $this->id,
							'stype' => $location['stype'],
							'isfee' => 1,
							'day' => $day,
							'top_day' => $top_day
						);
						$data[$v['hot_task']['type']] = array(
							'ptype' 		=> 22,
							'stype' 		=> $location['stype'],
							'num'   		=> 1,
							'user_id'		=> $this->get('user_id'),
							'nickname'		=> $this->get('nickname'),
							'product_pkid'	=> $this->id,
							'title' => "需求{$this->id}号#".$location['location_name']
						);
						$link = $srv_vas->createVasPaddingListing($val, $fee);
						if(!$link){
							lib_BaseUtils::jsonp('购买确认异常，' . $srv_vas->getError(), 1, -1);
						}
						//首页需求热点和需求置顶一起购买 若首页需求热点购买天数为5天 需求置顶总天数为4天 则只有4天享受优惠10元的折扣 2015.0812 by jinmengqi
						$data[$v['hot_task']['type']]['price']	  = $fee;
						$data[$v['hot_task']['type']]['at_price'] = $fee;
						$data[$v['hot_task']['type']]['link_id']  = $link;
					}

				}else{
					$data_price = $data_at_price = $servs['amount'];
					if ($v['type'] == 517) {
						$data_price = floatval($v['price']);
						if ($data_price <= 0) {
							$this->setError(0,'印刷服务费价格有误');
							return false;
						}
						$data_at_price = floatval($v['at_price']);
						if ($data_at_price <= 0) {
							$this->setError(0,'印刷服务费实际价格有误');
							return false;
						}
					}
					$data[$v['type']] = array (
						'title' => $this->get('title')."#".$servs['service_name'],
						'ptype' => 22,
						'stype' => $servs['service_id'],
						'mtype' => 0,
						'product_pkid' => $this->id,
						'user_id' => $this->get('user_id'),
						'nickname' => $this->get('nickname'),
						'price' => $data_price,
						'at_price' => $data_at_price,
						'num' => 1
					);
				}
			}
		}
		
		$sale = new zbj_service_deal();
        if ($this->getPubOrder()) {
            $sale->setType($ptype);
        } else {
            $sale->setType(22);
        }
		//有发布订单
		$upInfo = array();
		$order_id = $this->getNoPayOrderId();
		if($order_id){
			$order = $sale->Order($order_id);
			$order->setTransaction($this->transaction);
			//更新订单为发布订单
			if($pubAmount > 0){
				if($order->get('stype') != 30){
					$order_data['stype'] = 30;
					$order_data['ptype'] = $ptype;
					$order_data['mtype'] = 2;
				}
			}else{
				//更新为增值服务订单
				if($order->get('stype') == 30){
					$order_data['stype'] = 31;
					$order_data['ptype'] = 22;
					$order_data['mtype'] = 1;
				}
			}
			$OrderData = $order->getOrderData();
			foreach($OrderData as $o){
				if($o['stype'] != 77 && $o['stype'] != 107 && in_array($o['stype'], $allow_vas_type)){
                    if ($o['stype'] == 30 && empty($data[30])) {
                        $order->upOrder($order_data);//任务价格为0时，变跟订单信息
                    }
					if($data[$o['stype']]){
						if ($order->upOrderProdcut ($o['data_id'], $data[$o['stype']] ) !== true) {
							$this->setError ( 0, '更新主订单错误!' . $order->getError () );
							return false;
						}
					}else{
						if ($order->delOrderProdcut($o['data_id']) !== true) {
							$this->setError ( 0, '删除增值服务失败!'.$order->getError () );
							return false;
						}
					}
					unset($data[$o['stype']]);
				}
				if($o['link_id']>0){
					if ($order->delOrderProdcut($o['data_id']) !== true) {
						$this->setError ( 0, '删除增值服务失败!'.$order->getError () );
						return false;
					}
				}
			}
			if($data){
				if($order->addOrderProduct($data) !== true){
					$this->setError ( 0, '添加增值服务失败!'.$order->getError () );
					return false;
				}
			}
			//更新订单
			$order_option = $order->getOrderOption();
			if($order_option['select_info']){
				//清除之前的选标信息
				$order_option['select_info'] = array();
				$order_data['option'] = $order_option;
			}
			if($order->upOrder($order_data) === false){
				$this->setError(0, "更新订单出错");
				return false;
			}
			return $order_id;
		}else{
			//创建订单
			$order = $sale->Order();
			$order->setTransaction($this->transaction);
			if($pubAmount > 0){
				$order_data['stype'] = 30;
				$order_data['ptype'] = $ptype;
				$order_data['mtype'] = 2;
			}else{
				$order_data['stype'] = 31;
				$order_data['ptype'] = 22;
				$order_data['mtype'] = 1;
				$order_data['title'] = $this->get('title')."#增值服务";
			}
			$order_id = $order->createOrder($order_data,$data);
			if($order_id === false){
				$this->setError(0, $order->getError());
				return false;
			}
			return $order_id;
		}
	}

	/**
	 * 获取需求下没有支付的订单号
	 * 购买增值服务的时候 使用此方法获得订单号 然后实例化一个订单对象 即可取得已经买过的未支付项目
	 * @return boolean|int 成功返回订单号 ，没有订单返回false
	 */
	function getNoPayOrderId(){
		$orders = $this->getPubOrder();
		if(isset($orders['ispay']) && $orders['ispay'] == 0){
			return $orders['order_id'];
		}
		return $this->getBuyServiceOrder();
	}

	/**
	 * 获取需求购买（未支付）增值服务信息
	 * @param int|array $type 1：表示屏蔽搜索引擎 2：隐藏投标 3：需求置顶
	 * @return array($type=>1) 没有返回空数组 eg:如果type为1，返回array(1=>1),如果多个array(1=>1, 2=>1,3=>$tag_info),其中$tag_info为相关标签信息
	 */
	function getServiceItem($type=1) {
		$order_id = $this->getNoPayOrderId();
		if (!$order_id) {
			$this->setError(0, '订单没有找到');
			return array();
		}
		$type_arr = array();
		if (!is_array($type)) {
			$type_arr[] = $type;
		} else {
			$type_arr = $type;
		}
		$return_val = array();
		$order_data_model = new zbj_model_fn_orderdata();
		foreach ($type_arr as $t) {
			if ($t == 1) { //屏蔽搜索引擎
				if ($order_data_model->selectOne('order_id='.$order_id.' and stype=4')) {
					$return_val[1] = 1;
				}
			} elseif ($t == 2) { //隐藏投标
				if ($order_data_model->selectOne('order_id='.$order_id.' and stype=5')) {
					$return_val[2] = 1;
				}
			} else {
				if ($order_data_model->selectOne('order_id='.$order_id.' and stype=77')) {
					$model = new zbj_model_mk_taskpaidlisting();
					$return_val[3] = $model->select('task_id='.$this->getId().' and state=0')->items;
				}
			}
		}
		return $return_val;
	}

	/**
	 * 任务增加选稿时间
	 * @param int $day 延长选稿时间
	 */
	public function addEndSelectTime($day) {
		return true;
	}

	/**
	 * 任务拒绝发布
	 * @param boolean 是否为管理员
	 * @param int $vasRefundType 推广增值服务退款 0按照规则退 1全退 2不退
	 * @param int $TradeoffType 是否下帐 0退款，1只下任务，2下任务和增值服务
	 * @param int $refund_mode 退回方式：1原路退回；2退回余额；	 
	 * @param int $refused 关闭原因
	 * @param int $close_role 关闭的客户端，0默认为boss端,1雇主pc端,2雇主移动端
	 */
	public function refuseTask($isAdmin = false, $vasRefundType=0,$TradeoffType=0,$refund_mode = 0,$refused = false, $close_role = 0) {
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		if ($this->get ( 'state' ) >= 3) {
			$this->setError ( 0, '任务状态不允许' );
			return false;
		}
		if ($this->get ( 'open_state' ) == 1) {
			$this->setError ( 0, '任务已经是拒绝发布状态。' );
			return false;
		}

		$orderinfo = $this->getPubOrder();

		try{

			$this->_beginTransaction("mk,mb,fn");

			if (false === $this->setTaskClose($close_role)){
				throw new Exception("关闭任务失败");
			}
			if (empty ( $orderinfo )) {
				$this->set ( 'state', 1 );
				$this->set ( 'open_state', 1 );
				$this->set ( 'was_nosearch', 0 );
				$this->set ( 'was_showorks', 0 );
				$this->set ( 'was_promotion', 0 );
				$this->set ( 'was_pack', 0 );
				if (! $this->save ()) {
					throw new Exception("更新任务失败");
				}
			} else {
				$order = new zbj_lib_sale ();
				$order->setType ( $this->getTaskToOrderMode () );
				$order = $order->Order ( $orderinfo['order_id'] );
				$order->setTransaction(false);
				$refund_mode = $refund_mode == 2? $refund_mode: '';
				if ($order->cancelOrder ( 0, $vasRefundType,$TradeoffType>=1, $refund_mode) === false) {
					throw new Exception("关闭主订单失败".$order->getError());
				}
				//处理推广增值服务订单
				if($this->cancelVasOrder($vasRefundType,$TradeoffType==2, $refund_mode,false) === false){
					throw new Exception("关闭增值服务订单失败".$this->getError ());					
				}
			}
			$isbuyer = $isAdmin == false ? true : false;
			
			//记录操作的客户端
			$operclient = empty($close_role)?'':($close_role == 1?'(web)':'(app)');

			$this->addTaskActionLog("关闭了需求".$operclient,$isbuyer);	

			zbj_lib_Api::taskClosed($this->id,$refused);
			$this->_commit("mk,mb,fn");
		}catch(Exception $e){
			$this->_rollBack("mk,mb,fn");
			$this->setError ( 0, "关闭需求失败".$e->getMessage() );
			return false;
		}
		return true;
	}

	/**
	 * 开启已经关闭的任务
	 */
	public function reOpenTask(){
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		if ($this->get('open_state') == 0) {
			$this->setError(0, '已经是开启状态');
			return false;
		}
		$orders = $this->getPubOrder();
		if (empty($orders['order_id'])){
			$this->set('audit_state',3);
			
			//无订单直接开启
			$this->set('open_state',0);
			$this->set('state',2);
			if($this->save()===false){
				$this->setError(0, '更新任务失败');
				$returnvalue=false;
			}else{
				$returnvalue=true;
			}
		}else {
			$sale = new zbj_lib_sale();
			$sale->setType($this->getTaskToOrderMode());
			$order = $sale->Order($orders['order_id']);
			if ($order->reOpenOrder() === true) {
				//处理任务分配记录
				$returnvalue=true;
			} else {
				$this->setError(0, $order->getError());
				$returnvalue=false;
			}
		}
		
		if($returnvalue) zbj_lib_Api::taskReOpened($this->id);
		
		return $returnvalue;
	}

	/**
	 * 后台托管需求
	 * @param float $amount 0表示支付订单的金额
	 */
	public function bossPubTask($amount=0, $vas_amount = 0,$psn){
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		if (strlen ( $psn ) < 5) {
			$this->setError ( 0, '扣款失败PSN非法.' );
			return false;
		}
		if($this->get('state')>2){
			$this->setError(0, '当前状态不允许此操作');
			return false;
		}
		$orders = $this->getPubOrder();
		if (empty($orders)) {
			if($this->payOrderAmount($amount) === false){
				return false;
			}
			$fn_model = new zbj_model_fn_order();
			$fn_model->setDbEntry(true);
			$condition=array('product_pkid'=>$this->id,'stype'=>30,'ptype'=>$this->getTaskToOrderMode());
			$orders = $fn_model->selectOne($condition,'*',null,'order by order_id asc');
			if(!$orders['order_id']){
				$this->setError(0,'无法获取订单信息');
				return false;
			}
		}
		if($orders['ispay'] == 1){
			$this->setError(0, '订单已经支付，不能使用此方法');
			return false;
		}
		if($amount>0){
			if($amount != $orders['price']){
				$od_model = new zbj_model_fn_orderdata();
				$vas_fee = $od_model->selectOne("order_id={$orders['order_id']} and stype!=30","sum(price) as p");
				$m_amount = round($amount-$vas_fee['p'], 2);
				if($m_amount <= 0){
					$this->setError(0, "需求金额有问题:{$m_amount}");
					return false;
				}
				if($this->upTaskPubOrder(array('price'=>$m_amount)) === false){
					return false;
				}
			}
		}else{
			$amount = $orders['price'];
		}
		if($amount<1){
			$this->setError(0, "支付金额不能低于1元");
			return false;
		}
		$user = new zbj_service_user($this->get('user_id'));
// 		$balance = $user->getBalance();
// 		if($balance === false) {
// 			$this->setError(0, '获取用户余额失败');
// 			return false;
// 		}
// 		if($balance < $amount) {
// 			$this->setError(0, '用户余额不足，请充值后发布');
// 			return false;
// 		}

		//支付
		try{
			if(empty($orders)){
				throw new Exception("没有找到订单",0);
			}
			$paylog=new zbj_service_payapi();
			$data = array(
					'key' => $orders ['paynoid'] . "P" . rand ( 1000, 10000 ),
					'order_id'	=> $orders['order_id'],
					'price'		=> $amount,//支付总金额
					'balance'	=> $amount,//余额支付金额
					'user_id'	=> $orders['user_id'],
					'nickname'	=> $orders['nickname'],
					'paytype'	=> PayChn::YIJIFU,//大平台
					'ban_name'	=> '',
					'stype'	=> $orders['stype'],
					'type'	=> 1,
					'state'	=> 0,
					'pay_source'=>11,//BOSS后台
					'psn'	=> $psn,
			);
			if($paylog->createLog($data) !== true){
				throw new Exception('支付记录添加失败，请重试!'.$paylog->getError(),0);
			}
			$plid = $paylog->getLastId();
			$paylog=new zbj_service_payapi();
			if($paylog->payback($plid) === false){
				throw new Exception($paylog->getError());
			}
		} catch (Exception $e) {
			$this->setError(0,"充值任务金额失败原因：".$e->getMessage());
			return false;
		}
		
		
		
		
		//使用接口付款
// 		$payapi = new zbj_service_payapi();
// 		//生成支付记录
// 		$key = $payapi->getPayKey();
// 		$data = array(
// 			'key'=>$key,
// 			'order_id'=>$orders['order_id'],
// 			'price'=>$amount,//支付总金额
// 			'balance'=>$amount,//余额支付金额
// 			'user_id'=>$this->get('user_id'),
// 			'nickname'=>$this->get('nickname'),
// 			'paytype'=>54,
// 			'type'=>1,
// 		);
// 		if($payapi->fullBalancePay($data) === false) {
// 			$this->setError(0, '支付失败，请重试！'.$payapi->getError());
// 			return false;
// 		}
// 		if($this->get('state') == 1){
// 			$this->checkTaskPub(false);
// 		}
		return true;
	}

	/**
	 * 直接扣除用户余额给需求加价(后台使用)
	 * @param float $amount
	 * @return boolean true|false
	 */
	function bossAddAmount($amount=0,$psn){
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->setError(-400,'功能升级中，暂时无法提供该服务。');
			return false;
		}
		if (strlen ( $psn ) < 5) {
			$this->setError ( 0, '扣款失败PSN非法.' );
			return false;
		}
		if($this->get('state') == 4){
			$this->setError(0, '当前状态不能加价');
			return false;
		}
		$orders = $this->getPubOrder();
		if (empty($orders)) {
			$this->setError(0, '无法获取发布任务的订单信息');
			return false;
		}

		if($orders['state'] != 0) {
			$this->setError(0, "当前交易状态不能使用此功能");
			return false;
		}

		if($orders['ispay'] == 0){
			$this->setError(0, "订单没有支付不能使用此功能");
			return false;
		}else{
			$amount = $amount>0 ? $amount : round($this->get('amount')-$this->get('hosted_amount'),2);
			if($amount<1){
				$this->setError(0, '金额不能小于1元');
				return false;
			}
			$user = new zbj_service_user($this->get('user_id'));
// 			$balance = $user->getBalance();
// 			if($balance === false) {
// 				$this->setError(0, '获取用户余额失败');
// 				return false;
// 			}
// 			if($balance < $amount) {
// 				$this->setError(0, '用户余额不足，请充值后发布');
// 				return false;
// 			}
			//上帐
			try{
				if(empty($orders)){
					throw new Exception("没有找到订单");
				}
				$paylog=new zbj_service_payapi();
				// create deal
				$data = array (
						'amount' => $amount,
						'stype' => 1,
						'pk_id' => $this->id,
						'user_id' => $this->get ( 'user_id' ),
						'nickname' => $this->get ( 'nickname' ),
						'back_url' => zbj_lib_Constant::TASK_URL . '/' . $this->id
				);
				$data['title'] = "增加赏金#{$this->id}交易号";
				$data['option'] = array('addtype'=>2);
				$deal_id = $paylog->createDealReq($data);
				if($deal_id === false) {
					throw new Exception('加价出错'.$paylog->getError());
				}
				$data = array(
						'key' =>$orders['paynoid']."A".rand(1000,10000),
						'order_id'	=> $deal_id,
						'price'		=> $amount,//支付总金额
						'balance'	=> $amount,//余额支付金额
						'user_id'	=> $orders['user_id'],
						'nickname'	=> $orders['nickname'],
						'paytype'	=> PayChn::YIJIFU,//大平台
						'ban_name'	=> '',
						'stype'	=> 1,
						'type'	=> 2,
						'state'	=> 0,
						'pay_source'=>11,//BOSS后台
						'psn'	=> $psn,
				);
				if($paylog->createLog($data) !== true){
					throw new Exception('支付记录添加失败，请重试!'.$paylog->getError());
				}
				$plid = $paylog->getLastId();
				$paylog=new zbj_service_payapi();
				if($paylog->payback($plid) === false){
					throw new Exception($paylog->getError());
				}
			} catch (Exception $e) {
				$this->setError(0,"充值任务金额失败原因：".$e->getMessage());
				return false;
			}
			return true;
			
// 			$payapi = new zbj_service_payapi();
// 			$data = array(
// 				'amount'=>$amount,
// 				'stype'=>1,
// 				'pk_id'=>$this->id,
// 				'user_id'=>$this->get('user_id'),
// 				'nickname'=>$this->get('nickname'),
// 				'back_url'=>zbj_lib_Constant::TASK_URL. '/'. $this->id,
// 			);
// 			$data['title'] = "增加预算#{$this->id}交易号";
// 			$data['option'] = array('addtype'=>2);
// 			$deal_id = $payapi->createDealReq($data);
// 			if($deal_id === false) {
// 				$this->setError(0, '加价出错'.$payapi->getError());
// 				return false;
// 			}
			//生成支付记录
// 			$key = $payapi->getPayKey();
// 			$data = array(
// 				'key'=>$key,
// 				'order_id'=>$deal_id,
// 				'price'=>$amount,//支付总金额
// 				'balance'=>$amount,//余额支付金额
// 				'user_id'=>$this->get('user_id'),
// 				'nickname'=>$this->get('nickname'),
// 				'paytype'=>54,
// 				'stype'=>1,
// 				'type'=>2,
// 			);
// 			if($payapi->fullBalancePay($data) === false) {
// 				$this->setError(0, '扣除用户余额出错'.$payapi->getError());
// 				return false;
// 			}
		}
	}

	/**
	 * 新-检查用户是否可以投标
	 * @param object $srvUser 投标用户对象
	 * @return boolean
	 */
	function checkAllowSignNew($srvUser){
        if(parent::checkAllowSignNew($srvUser) === false) return false;
        if(($state = $this->isKuaiYinSigning($srvUser->getId())) !== 0){
            $channel = array(1=>'画册',2=>'名片');
			if ($state == 1) {
				$sign_in_url = zbj_lib_Constant::MAIN_URL . '/xccsj/index-join.html';
			} else {
				$sign_in_url = zbj_lib_Constant::KUAIYIN_URL . '/support/service/';
			}
			$this->setError(-13, "很抱歉，您未入驻成为{$channel[$state]}频道签约设计师<br />无法参与该需求。<a href=\"{$sign_in_url}\" target=\"_blank\">点此</a>立即入驻");
            return false;
        }
        $srvCategory = new zbj_service_category($this->get('category1id'));
        if($srvCategory->get('bid_need_join')==1 && $srvUser->isResident($srvCategory->getId()) === false){
            $this->setError(-5, '很抱歉，您暂未入驻本类目，无法参与本类目需求的投标');
            return false;
        }
        if($srvUser->getLeftBidNum($srvCategory->getId()) == 0){
            $this->setError(-5, '很抱歉，在本类目的投标次数已经用完，请做好充分准备，明天再来投标');
            return false;
        }
        $work_num = $srvCategory->get('work_num');
        $option = $this->getTaskInfoOption();
        if((zbj_lib_Constant::DOMAIN != 'zhubajie.com' || $this->get('createtime') > 1408946400) && $work_num && $option['works']['avaliable_num'] >= $work_num){
            $this->setError(-5, '很抱歉，本需求投标数量已满，请等待买家与投标服务商沟通，如果有淘汰服务商，您可以继续投标');
            return false;
        }
		if ($this->get ( 'endtime' ) <= $this->_time) {
			$this->setError (-7, "该需求已经到期！" );
			return false;
		}
        $mdl_outsource = new zbj_model_mk_taskoutsource();
        $outtask = $mdl_outsource->selectOne("task_id={$this->id}");
        if ($outtask) {
            $mdl_out_ship = new zbj_model_mb_outsourceusership();
            $con = "buyer_id={$this->get('user_id')} and seller_id={$srvUser->get('user_id')}";
            $ship = $mdl_out_ship->selectOne($con);
            if (empty($ship)) {
                $this->setError (-5, "该需求只限该外包团队服务商参与" );
                return false;
            }
        }
		//@todo 投标配额检查
		//@todo 特权检查
		return true;
	}
	
	/**
	 * 屏蔽(恢复)任务下的所有稿件
	 * $param int $s 0屏蔽 1恢复
	 */
	function shieldAllWorks($s = 0){
		$mWorks = new zbj_model_mk_works();
		$wRs = $mWorks->select(array('task_id'=>$this->id,'open_state'=>$s))->items;
		if($wRs){
			foreach ($wRs as $v){
				$srvWorks = new zbj_service_works($v['works_id']);
				if($s == 1){
					$srvWorks->unshield();
				}else{
					$srvWorks->shield();
				}
				unset($srvWorks);
			}
		}
	}
	/**
	 * 获取已经支付的金额
	 * @see zbj_service_task_base::getOrderPaySum()
	 */
	function getOrderPaySum($order_id){
		$sale=new zbj_service_deal();
		$sale->setType($this->getTaskToOrderMode());
		$order = $sale->Order($order_id);
		if(!$order->get('order_id')){
			$this->setError(0, "获取订单出错");return false;
		}
		$imDB = new zbj_model_mk_installment();
		return sprintf('%0.2f', $order->get('price')-$imDB->getOrderPaySum($order_id));
	}
	
//派单抢单相关方法 start
	/**
	 * 添加推荐
	 * @param $user_id 被推荐用户ID
	 * @param $type 类型 1被推荐 2参与 3中标 4成功交易 5雇主拒绝 6威客拒绝 7交易客服拒绝 8 系统自动拒绝
	 * @param $manage_id 管理ID
	 * @param array $option[bid_amount] 中标金额
	 */
	function addTaskRecommendAction($user_id,$type,$manage_id=0,$option = array()){
		if(empty($user_id) or empty($type)){
			$this->setError(0,'缺少必要参数');
			return false;
		}
		$data = array();
		$data['user_id'] = $user_id;
		$data['buyer_id'] = $this->get('user_id');
		$data['task_id'] = $this->id;
		$data['category_id'] = $this->get('category_id');
		if($type > 1 && $this->checkIsInvite($user_id, 1) === false){
			$this->setError(0, '当前用户没有被邀请。');
			return false;
		} elseif($this->checkIsInvite($user_id, 6)) {
			$this->setError(0, '用户已经拒绝当前任务派单');
			return false;
		} elseif($this->checkIsInvite($user_id, 8)) {
			$this->setError(0, '当前用户派单已经自动过期');
			return false;
		}
		switch ($type){
			case 1://推荐
				if(!$manage_id){
					$this->setError(0,'缺少客服ID');
					return false;
				}
				$srvUser = new zbj_service_user($user_id);
				if($this->isAllowSign($srvUser) === false){
					$this->setError(0,"当前用户无参与此任务权限({$this->getError()})");
					return false;
				}
				if($this->isUserSign($user_id)){
					$this->setError(0,'当前用户已经参与了此任务，不需要邀请。');
					return false;
				}
				if($this->checkIsInvite($srvUser->getId)){
					$this->setError(0,'当前用户已经被邀请。');
					return false;
				}
				if($this->addSign($srvUser,0,0,1) === false){
					return false;
				}
				$msg = array(
					'type' => 3,
					't_userid' => $this->get('user_id'),
					't_nickname' => $this->get('nickname'),
					'title' => '猪八戒网为您推荐了合适的服务商',
					'cont' => "根据您的需求，猪八戒网为您匹配了最合适的服务商为您服务，他们可能会直接联系您了解详细需求。您可以在需求详情页找到他们的联系方式，更多的关注他们。<a href='".zbj_lib_Constant::TASK_URL."/{$this->id}/'>查看我的需求</a>",
					'cat_id' => 6
				);
				$arr_free = array(19, 0, 10, 0, 2);
				$other = array(
					'task_id'=>$this->id,
					'task_title'=> $this->get('title'),
					'cat_id'=> 6,
					'buyer_userid'=> $this->get('user_id'),
				);
				$data['manage_id'] = $manage_id;
				break;
			case 2://参与
				if($this->get('state') > 2){
					$this->setError(0,'当前状态不能参与此需求');
					return false;
				}
				//参与过的直接返回true
				if($this->checkIsInvite($user_id,2) != false){
					return true;
				}
				break;
			case 3://中标
				//中标过的直接返回true
				if($this->checkIsInvite($user_id,3) != false){
					return true;
				}
				break;
			case 4://成功交易
				if($option['bid_amount']<0){
					$this->setError(0,'中标赏金错误');
					return false;
				}
				$data['amount'] = $option['bid_amount'];
				break;
			case 5://雇主拒绝
			case 6://威客拒绝
			case 7://交易客服拒绝
			case 8://系统自动拒绝
				$sign = new zbj_model_mk_tasksign();
				if($sign->update(array('task_id'=>$this->id,'user_id'=>$user_id,'isinvite'=>1),array('isinvite'=>2)) === false){
					$this->setError(0,'拒绝出错');
					return false;
				}
				break;
			default:
				$this->setError(0,'类型错误');
				return false;
		}
		$model = new zbj_model_mb_recommendaction();
		if($model->createLog($data,$type) === false){
			$this->setError(0,$model->getError());
			return false;
		}
		if($msg){
			$ssmg = new SSendmsg();
			$ssmg->sendMsg($msg);
			zbj_service_taskmsg::sendmsg($srvUser, 'seller', '猪八戒网为您推荐了合适的需求', $arr_free, $other);
			$ssmg->addNotification($user_id, 5);
		}
		return true;
	}
	
	
	public function getChannelName() {
		$map = array(
			parent::TASK_OPIS_HT_VCARD => '名片',
			parent::TASK_OPIS_HT_ALBUM => '画册',
		);
		$opis_ht = (int) $this->get('task_opis.ht') ;
		return (string) $map[$opis_ht];
	}
	//快印仿制需求初始化 被仿制稿件作者交稿并设置中标 etc.
	public function kuaiYinInitReplication() {
		if ($this->kuaiYinIsAllowReplication() === false) return false;
	
		try {
			$this->_beginTransaction('mk');
			$this->_beginTransaction('mb');
			$this->_beginTransaction('fn');
	
			//获取仿制稿件用户
			$task_options = $this->getTaskInfoOption();
			$rep_uid = $task_options['replication_info']['user_id'];
			if (!$rep_uid) {
				throw new Exception('无法获取仿制稿件的用户id');
			}
			$srvRepUser = new zbj_service_user($rep_uid);
			$srvRepUser->setTransaction(false);
	
			//用户投标
			$channel_name = $this->getChannelName();
			$works_content = "此投标内容由{$channel_name}频道仿制需求发布系统自动生成。";
			$works_option = array(
					'seller_contact' => array(
							'provname' => $srvRepUser->get('info.provname'),
					),
			);
			$works_data = array (
					'content' => $works_content,
					'task_id' => $this->getId(),
					'isteam' => $srvRepUser->recommenduserbd($this->getId(), $rep_uid, 1) ? 1 : 0,
					'isallow' => 0, //隐藏交稿
					'user_id' => $rep_uid,
					'nickname' => $srvRepUser->get('nickname'),
					'createtime' => $this->_time,
					'ip' => lib_BaseUtils::getIp(),
					'ability' => ( int ) $srvRepUser->get( 'info.ability' ),
					'option' => $works_option,
					'fromsite'=> 6,
					'type'=> 10, //回应
					'quote' => $this->get('amount'),
					'ability30' => $srvRepUser->getUserAbilitySum(30),
			);
			$srvWorks = new zbj_service_works();
			$srvWorks->setTransaction(false);
			$works_files = array();
			$works_id = $srvWorks->create($works_data, $works_files);
			if ($works_id === false) {
				throw new Exception('创建仿制投标失败, 失败原因:' . $srvWorks->getError());
			}
	
			//用户中标
			$srvWorks->setId($works_id);
			if ($this->selectWorks($srvWorks) === false) {
				throw new Exception('设置仿制稿件中标失败 ' . $this->getError());
			}
	
			//标识任务待威客确认
			if ( ! $this->kuaiYinAddReplicationRecord($srvWorks)) {
				throw new Exception('添加仿制任务跟踪记录失败' . $this->getError());
			}
	
			$this->_commit('mk');
			$this->_commit('mb');
			$this->_commit('fn');
		} catch(Exception $e) {
			$this->setError(0, $e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('mb');
			$this->_rollBack('fn');
			return false;
		}
	
		//给原仿制作者发送站内信和短信
		$msg_tpl_vars = array('task_id'=>$this->id,'task_title'=>$this->get('title'));
		zbj_service_taskmsg::sendmsg($srvRepUser, "seller", "您收到了名片仿制需求", array(22,0,12), $msg_tpl_vars);
	
		return true;
	}
	
	private function kuaiYinAddReplicationRecord($srvWorks) {
		$mdl = zbj_model_api::get('zbj_model_mk_taskkyreplication');
		$data = array(
			'task_id' => $this->getId(),
			'works_id' => $srvWorks->getId(),
			'create_time' => $this->_time,
			'create_ymd' => date('Y-m-d', $this->_time),
			'works_userid' => $srvWorks->get('user_id'),
			'works_nickname' => $srvWorks->get('nickname'),
			'response_deadline' => $this->_time + intval(zbj_hook_kychannel::KY_REPLICATION_RESPONSE_TIMEOUT),
			'state' => zbj_hook_kychannel::KY_REPLICATION_RESPONSE_INITIAL,
		);
		return $mdl->insert($data);
	}
	
	public function kuaiYinAcceptReplication() {
		if ($this->kuaiYinIsAllowUpdateReplication() === false) return false;
	
		$up_data = array(
			'state' => zbj_hook_kychannel::KY_REPLICATION_RESPONSE_ACCEPT,
			'update_time' => $this->_time,
			'update_ymd' => $this->_ymd,
		);
		if (zbj_model_api::get('zbj_model_mk_taskkyreplication')->update(array('task_id' => $this->getId()), $up_data)) {
			return true;
		} else {
			$this->setError(0, '更新任务仿制响应状态为已接受失败'); return false;
		}
	}
	
	public function kuaiYinRefuseReplication($is_auto=false) {
		if ($this->kuaiYinIsAllowUpdateReplication() === false) return false;
	
		try {
			$this->_beginTransaction('mk');
			$this->_beginTransaction('mb');
			$this->_beginTransaction('fn');
	
			//获取仿制稿件
			$mdlRepli = zbj_model_api::get('zbj_model_mk_taskkyreplication');
			$mdlRepli->setDbEntry();
			$rep_info = $mdlRepli->selectOne(array('task_id' => $this->getId()), 'works_id');
			if (!$rep_info['works_id']) {
				throw new Exception('无法获取中标稿件稿件id');
			}
	
			//取消中标
			$srvWorks = new zbj_service_works($rep_info['works_id']);
			$srvWorks->setTransaction(false);
			$disable_transaction = true;
			if ($this->cancelWorks($srvWorks, $disable_transaction) === false) {
				throw new Exception('取消投标中标失败 ' . $this->getError());
			}
	
			//更新响应状态
			$state = $is_auto ? zbj_hook_kychannel::KY_REPLICATION_RESPONSE_REFUSE_AUTO : zbj_hook_kychannel::KY_REPLICATION_RESPONSE_REFUSE_WITKEY;
			$up_data = array(
					'state' => $state,
					'update_time' => $this->_time,
					'update_ymd' => $this->_ymd,
			);
			if (!$mdlRepli->update(array('task_id' => $this->getId()), $up_data)) {
				throw new Exception('更新任务仿制响应状态为已接受失败');
			}
	
			$this->_commit('mk');
			$this->_commit('mb');
			$this->_commit('fn');
		} catch(Exception $e) {
			$this->setError(0, $e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('mb');
			$this->_rollBack('fn');
			return false;
		}
		return true;
	}
	
	public function kuaiYinIsAllowReplication() {
		if ($this->get('state') != 2) {
			$this->setError(0, '当前任务状态不允许此操作'); return false;
		}
		if ($this->kuaiYinReplicationCheckCommon() === false) return false;
		$check_exist = true;
		if ($this->kuaiYinGetReplicationInfo($check_exist)) {
			$this->setError(0, '当前任务已经存在转化数据'); return false;
		}
		return true;
	}
	
	private function kuaiYinIsAllowUpdateReplication() {
		if ($this->get('state') != 3) {
			$this->setError(0, '当前任务不是已选标状态'); return false;
		}
		if ($this->kuaiYinReplicationCheckCommon() === false) return false;
		$rep_info = $this->kuaiYinGetReplicationInfo();
		if (!$rep_info) {
			$this->setError(0, '当前任务出错了不存在转化数据'); return false;
		}
		if ($rep_info['state'] != zbj_hook_kychannel::KY_REPLICATION_RESPONSE_INITIAL) {
			$this->setError(0, '当前任务仿制响应状态不是待响应状态'); return false;
		}
		return true;
	}
	
	private function kuaiYinReplicationCheckCommon() {
		$ky_order_type = $this->kuaiYinGetOrderType();
		if ($ky_order_type === false) return false;
		if ($ky_order_type != zbj_hook_kychannel::KY_ORDER_TYPE_LIKE) {
			$this->setError(0, '不是仿制需求任务'); return false;
		}
		if (!$this->get('hosted')) {
			$this->setError(0, '当前任务还未托管赏金'); return false;
		}
		return true;
	}
	
	public function kuaiYinGetReplicationInfo($check_exist=false) {
		$mdl = zbj_model_api::get('zbj_model_mk_taskkyreplication');
		$mdl->setDbEntry();
		return $mdl->selectOne(array('task_id' => $this->getId()), $check_exist ? 'task_id' : '*');
	}
	
	//查询中标稿件id
	public function getSuccessWorkObject()
	{
		$mdl = zbj_model_api::get('zbj_model_mk_works');
		$mdl->setDbEntry();
		$data = $mdl->selectOne(array('task_id'=>$this->getId(), 'issuccess'=>'1'));
		if ( empty($data) ) return false;
		$worksObject = new zbj_service_works($data['works_id']);
		return $worksObject;
	}

    /**
     * 新招标模式
     */
    public function checkNewbidMode() {

        if (empty($this->id)) return false;
        if ($this->checkSpecialMode(1) || $this->checkSpecialMode(3)) {
            return true;
        }
        return false;
    }

	/**
	 * 网建新招标
	 */
	public function checkWebNewbidMode() {
		if (empty($this->id)) return false;
		if ($this->get('mode')==13 && $this->get('category_id')==1333 && $this->get('createtime')>1420336798) {
			return true;
		}
		return false;
	}

    /**
     * 取消屏蔽搜索引擎
     * @return boolean
     */
    function cancelwassearch(){
        if($this->get('state') >=2){
            $this->setError(0,"需求已经发布");
            return false;
        }
        $sale = new zbj_service_deal();
        if ($this->getPubOrder()) {
            $sale->setType($ptype);
        } else {
            $sale->setType(22);
        }
        //开始事务
        try{
            $this->_beginTransaction('mk');
            $this->_beginTransaction('fn');
            //有发布订单
            $order_id = $this->getNoPayOrderId();
            if($order_id){
                $order = $sale->Order($order_id);
                $order->setTransaction(false);
                $OrderData = $order->getOrderData();
                foreach($OrderData as $o){
                    if($o['stype'] == 4){
                        if ($order->delOrderProdcut($o['data_id']) !== true) {
                            throw new Exception('删除增值服务失败!'.$order->getError ());
                        }
                    }
                }
            }
            $option = unserialize($this->get('task_info.option'));
            if($option && $option['was_nosearch']==1){
                $option['was_nosearch'] = 0;
                $option = serialize($option);
                $this->set('task_info.option',$option);
                $this->set('task_opis.nopass',0);
                //保存主表
                if($this->save() === false) {
                    throw new Exception('保存任务数据失败!'.$order->getError ());
                }
            }
            $this->_commit('mk');
            $this->_commit('fn');
        } catch(Exception $e) {
            $this->setError(0, $e->getMessage());
            $this->_rollBack('mk');
            $this->_rollBack('fn');
            return false;
        }
        return true;
    }

    /**
     * 招标需求获取派单抢单数据
     * @return array|bool
     */
    public function getTaskCount(){

        try{
            if(!$this->id){
                throw new Exception("task_id 不能为空！");
            }

            zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,10);
            $taskService = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(NULL);
            zbj_lib_ApiClient::build($taskService);
            $result = $taskService->taskCount($this->id);
            if($result->success === false ){
                throw new Exception($result->message,-1);
            }
            return (array)$result->count;

        }catch (Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }
    }

	/**
	 * 新选标接口
	 * @param $works_id  稿件id
	 * @param $addamount 托管金额
	 * @return bool
	 */
	public function selectWorks1($works_id,$addamount=0){

		if(!$this->id){
			return false;
		}

		try{

			if(!$this->checkNewbidMode()){
				throw new Exception("不支持非新招标模式需求！");
			}

			if($this->get("state") != 2){
				throw new Exception("当前任务状态不允许操作");
			}

			$workSrv = new zbj_service_works($works_id);
			$work    = $workSrv->get();

			if($work['task_id'] != $this->getId()){
				throw new Exception("当前稿件不属于此任务!");
			}

			if ($work ["issuccess"] == "1"){
				throw new Exception("稿件已经为中标状态!");
			}

			$data = array();

			//已托管全款
			if($this->get("hosted") && $this->get("hosted_amount") == $this->get("amount")){

				//选标
				if (! $this->selectWorks($workSrv)) {
					throw new Exception("设置中标失败,请重试！{$this->getError()}",-103);
				}

				$this->addTaskActionLog("将稿件{$works_id}设置为中标", 1, 2);
				// 更新用户稿件质量系数
				$srv_user = new zbj_service_user($workSrv->get('user_id'));
				$srv_user->updateWorkScore(zbj_service_user::SCORE_SELECTED);

				$data['state'] = 1;
			}

			$data['type'] = 0;
			$data['agree_step'] = $workSrv->getAgreementStep();


			//验证需求金额
			if($this->get("amount") <= 0){


				if(!$addamount){
					throw new Exception("未托管赏金！",-100);
				}

				//返回托管订单
				if($addamount < 1){
					throw new Exception("金额不能小于￥1");
				}

				$order_id = $this->payOrderAmount($addamount,array('addtype'=>2,'works_id'=>$works_id,'editamount'=>$addamount));
				$data['order_id'] = zbj_lib_BaseUtils::enOrderId($order_id);
				$data['payurl'] = SlightPHP::createUrl('/payorder/order',array('oid'=>zbj_lib_BaseUtils::enOrderId($order_id)),'task');;
				$data['state'] = -100;
			}elseif($this->get("hosted_amount") != $this->get("amount")){

				//托管订单生成
				$order_id = $this->payOrderAmount(round($this->get("amount") - $this->get("hosted_amount"),2),array('addtype'=>2,'works_id'=>$works_id));
				if($this->get("hosted_amount") == 0){
					$data['order_id'] = zbj_lib_BaseUtils::enOrderId($order_id);
					$data['payurl'] = SlightPHP::createUrl('/payorder/order',array('oid'=>zbj_lib_BaseUtils::enOrderId($order_id)),'task');;
					$data['state'] = -100;
				}else{
					$data['order_id'] = $order_id;
					$data['type'] = 1;
					$data['payurl'] = SlightPHP::createUrl('/payorder/order',array('did'=>$order_id),'task');;
					$data['state'] = -200;
				}

			}

			return $data;

		}catch (Exception $e){

			$this->setError($e->getCode(),$e->getMessage());
			return false;
		}

	}

	/**
	 * 获取当前需求的中标信息
	 * 如果获取失败返回false
	 * @return array|false
	 */
	public function getWinWorks() {
		$model = zbj_model_api::get('zbj_model_mk_works');
		$result = $model->selectOne(array('task_id'=>$this->id,'issuccess'=>1));
		if($result === false) {
			$this->setError(0,'获取失败,'.$model->getDbError());
			return false;
		}else if (empty($result)) {
			return array();
		}else {
			return $result;
		}
	}



}
