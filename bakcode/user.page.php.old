<?php
use com\zhubajie\user\dataobject\auth\AuthStatus;
use com\zhubajie\user\dataobject\auth\VerifyInfoDO;
use com\zhubajie\user\dataobject\auth\BossCPUserDO;
use com\zhubajie\hongkong\dataobject\employer\EmployerIdentityDO;
use com\zhubajie\hongkong\dataobject\employer\EmployerIdentityResultDO;
use com\zhubajie\ub\dataobject\UserRegister\RegisterOptions;

//use com\zhubajie\boss\interfaces\userServiceClient;
//namespace com\zhubajie\user\interfaces\RegisterServiceClient;
/**
 * 前台会员控制器
 */
class controller_user extends components_basepage {
	protected $userClient;//推广通用户

    function __construct() {
        parent::__construct ();
        if (! isset($this->tplvar)) $this->tplvar = array();
    }
    /**
     * 用户详情
     */
    public function pageView($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
// 		$s_user = new zbj_service_user($user_id);
        $param = array();
        /**
         * 获取基本信息
         */
        $s_user = new zbj_service_user($user_id);
        $param = $this->getCommonUserInfo($user_id);

        /**
         * 获取前台用户发布的需求
         */
        $task = zbj_lib_BaseUtils::apicall('user', 'gettask', array('uid' => $user_id));
        if ($task) {
            $param['task'] = $task['data']['items'];
        } else {
        	if($_GET['debug']){
	        	var_dump($task);
        	}
            echo '获取前台用户发布的需求接口失败！';
        }
        /**
         * 获取给用户创建的工单
         */
        $cporder = zbj_lib_BaseUtils::apicall('misc', 'getcporderdata', array('rid' => $user_id,'type'=>6,'myid'=>$_SESSION['authId']));
        if ($cporder) {
            $param['cporder'] = $cporder['data'];
        } else {
            echo '获取前台用户发布的需求接口失败！';
        }
        /**
         * 获取前台用户发出的投标（正在进行）
         */
//         $taskSign = zbj_lib_BaseUtils::apicall('user', 'getTaskSign', array('uid' => $user_id,'inprogress'=>1));
//         if ($taskSign) {
//             $param['taskSign'] = $taskSign['data']['items'];
//         } else {
//             echo '获取前台用户发出的投标接口失败！';
//         }
        /**
         * 获取前台用户提供的服务
         */
        $service = zbj_lib_BaseUtils::apicall('user', 'getService', array('uid' => $user_id));
        if ($service) {
            $param['service'] = $service['data']['items'];
        } else {
            echo '获取前台用户提供的接口接口失败！';
        }
        /**
         * 获取前台用户的其他动态
         */
        $userlog = zbj_lib_BaseUtils::apicall('user', 'getUserLog', array('uid' => $user_id));
        if ($userlog) {
            $param['userlog'] = $userlog['data']['items'];
        } else {
            echo '获取前台用户其他动态接口失败！';
        }
		foreach ( $param['userlog'] as $key => $value) {
			$param['userlog'][$key]['reason'] = strip_tags($value['reason']);
		}
		
        //取得所有下拉框选项相相关联的值
        $s_cpoption=new service_cpoption(); 
        $param['fulloptions']=$s_cpoption->getFullItems();
        $oReport = new zbj_service_report();
        $param['reportoptions']=array();
        foreach ($oReport->_type as $k => $v) {
        	$param['reportoptions'][$k] = $v[0];
        }
        
        //获取前台用户“收到的雇佣”
        $guyong = zbj_lib_BaseUtils::apicall('user', 'getUserReceiveGuYong', array('uid' => $user_id));
        if ($guyong) {
        	$param['guyong'] = $guyong['data']['items'];
        } else {
        	echo '获取前台用户提供的接口接口失败！';
        }
//         if(in_array($user_id, array(5205725,6548973))){
//         	echo '中断';
//         	return true;
//         }
        //获取前台用户“卖出的服务”
        /**
        $saleService = zbj_lib_BaseUtils::apicall('user', 'getUserSaleService', array('uid' => $user_id));
        if ($saleService) {
        	$param['saleService'] = $saleService['data']['items'];
        } else {
        	echo '获取前台用户提供的接口接口失败！';
        }
        */
		//工单
//		$order = new zbj_model_cp_order();
//		$param['order'] = $order->select(array('type' => 6, 'rid' => $user_id))->items;
//		if ($param['order']) {//工单类型
//			$optionitem = new service_cpoption(9);
//			$worksorder_option = $optionitem->getItems();
//			$param['order_option'] = lib_BaseUtils::array_changekey($worksorder_option, 'item_id');
//		}
		//当前用户的举报
		$m_report=new zbj_model_mb_report();
		$condtion=array();
		$condtion[]=" (f_user_id=$user_id or t_user_id=$user_id) ";
		$condtion[]=" state<3 ";
		$param['userreports']=$m_report->select($condtion)->items;
		$m_yunkefu = zbj_model_api::get('model_mb_yunkefu');
		$aYunkefu=$m_yunkefu->selectOne(array('user_id'=>$user_id),'user_id');
		$param['yunkefu']=$aYunkefu;
		$param['report_token'] = md5("{$this->_userid}" . "tmUbwDvNtKR5fdVGWW9hYuCK8Z9T2Wtw" . zbj_lib_Constant::ZBJ_SYSUSERKEY);
		$param['report_mid'] = $this->_userid;
		//取易极付用户状态
// 		$yijiUser=$s_user->getPayUserInfo();
// 		if(empty($yijiUser)){
// 			$param ['yijifu_auth'] = false;
// 		}else{
// 			if($yijiUser['userStatus']=="authorized"){
// 				$param['yijifu_auth']=true;
// 			}
// 		}
		
		
		//判断余额是否可用
		$api = new zbj_service_payapi_yijifu_api();
		$api->service = 'ZBJExcessUserQuery';
		$api->params = array(
				'userId' => $s_user->getPayUserId (),
				'eventAccount' => $s_user->getBalance ()
		);
		$result = $api->exec();
		if($result===false){
			$param['yijifu_auth']=false;
		}elseif($result['hasExcess']=="false"){//可以安全充值
			$param['yijifu_auth']=true;
		}elseif($result['hasExcess']=="true"){//不可以安全充值
			$param['yijifu_auth']=false;
		}
        //计划服务商表
        $mbbidmodeseller = zbj_model_api::get('zbj_model_mb_bidmodeseller');
        //如果计划服务商已经存在进行修改操作
        $bidmodeseller = $mbbidmodeseller->selectOne("user_id={$user_id}");
        $param['bidmodestate'] = $bidmodeseller['state'];
        //是否进行了二次鉴权 2015-03-04 yuanzhaung
        $param['is_second_auth'] = $this->secondAuthCheck();
        //添加访问日志  2015-03-04 yuanzhaung
        if ($param['is_second_auth']) {
        	$this->addLog($user_id, $this->_nickname . '访问了用户信息', 'user');
        }

        //服务商投标上线和投标额度
        try{

            $userSrv = new zbj_service_user($user_id);

            if(!$userSrv->isSpecialCategory()){
                throw new Exception("未入驻网建专场！");
            }

            lib_BaseUtils::apiInit(10,array("zbj_sdk"));
            $bidService = new com\zhubajie\user\interfaces\BidServiceClient(NULL);
            lib_BaseUtils::apigetclient($bidService);
            $bidStatus = $bidService->getBidNum($user_id);

            if($bidStatus->success !== true){
                throw new Exception($bidStatus->message);
            }
            $param['bidNumLeft'] = $bidStatus->bidNumLeft;
            $param['bidNumAllow'] = $bidStatus->bidNumAllow;
            $param['bidStatus'] = sprintf("投标上限%d，投标额度%d",$bidStatus->bidNumAllow,$bidStatus->bidNumLeft);

        }catch (Exception $e){
            $param['bidStatus'] = $e->getMessage();
        }

		return $this->render('user/index/index.html', $param);
    }

    /**
     *
     * 根据前台用户id获取公共基本信息
     */
    public function getCommonUserInfo($user_id) {
        $param['uid'] = $user_id;
        /**
         * 
         * 获取余额
         */
        $s_user = new zbj_service_user($user_id);
        if (count ( $s_user->get () )) {
        	$balance = $s_user->getBalance ();
        	$param['balance'] = $balance;
        }
        /**
         *
         * 获取前台用户基本信息
         */
        $info = zbj_lib_BaseUtils::apicall('user', 'getInfo', array('uid' => $user_id));
        if ($info) {
            if ($info['code'] < 0) {
                return $this->printmsg("用户不存在！");
            }
            $param['info'] = $info['data'];
        } else {
            echo '获取前台用户基本信息接口失败！';
        }

        /**
         *
         * 获取前台用户需求、提供、中标、谢谢
         */
//      $taskcon = "user_id={$user_id} and `state` in (2,3,4)";
        $taskcon = "user_id={$user_id}";
        $sercon = array('user_id' => $user_id, 'servicetype' => '3', 'state' => 2, 'status' => 1);
//      $bidingcon = "user_id={$user_id} and open_state=0 and issuccess=1 and type in (0,10)";
//      $thcon = array('user_id' => $user_id);
        $m_task = new zbj_model_mk_task();
        $tasknum = $m_task->selectOne($taskcon, 'count(1) as num'); 
        $param['tasknum'] = $tasknum['num'];   //需求
        $m_service = new zbj_model_sp_service();
        $servicenum = $m_service->selectOne($sercon, 'count(1) as num');
        $param['servicenum'] = $servicenum['num'];  //提供
//      $m_works = new zbj_model_mk_works();
//		$worksnum = $m_works->selectOne($bidingcon, 'count(1) as num');
//		$param['worksnum'] = $worksnum['num'];  //中标
//		$m_thank = new zbj_model_mb_thank();
//		$thanknum = $m_thank->selectOne($thcon, 'count(1) as num');
//		$param['thanknum'] = $thanknum['num'];  //谢谢
		/**
         * 获取前台用户统计信息
         */
//         $count = zbj_lib_BaseUtils::apicall('user', 'getCount', array('uid' => $user_id));
//         if ($count) {
//             $param['count'] = $count['data'];
//         } else {
//             echo '获取前台用户统计信息接口失败！';
//         }
        $param ['count'] = $s_user->get ( 'count.*' );
//         $this->apiout($s_user->get('count.*'));
        /**
         *
         * 获取前台用户帐号信息
         */
        $param['account'] = $s_user->get();
        $param['reglocation'] = lib_BaseUtils::getLocationByIp($s_user->get('regip'));
        $param['loginlocation'] = lib_BaseUtils::getLocationByIp($s_user->get('loginendip'));
        /**
         *
         * 获取前台用户技能
         */
        /* $userskill = zbj_lib_BaseUtils::apicall('user', 'getUserSkill', array('uid' => $user_id));
        if ($userskill) {
            $param['userskill'] = $userskill['data'];
        } else {
            echo '获取前台用户技能信息接口失败！';
        } */

        //获取用户的行业
        $srvUser = new service_user($user_id);
        $module_m = $srvUser->getUserIndustry(1);
        $module_n = $srvUser->getUserIndustry(0);
        $module = array_merge((array)$module_m,(array)$module_n);
        if ($module) {
        	foreach ($module as $v) {
        		if (!in_array($v['module_name'],(array)$modulename) && $v['module_name'])
        			$modulename[] = $v['module_name'];
        	}
        	$param['modulename'] = implode(',', $modulename);
        }
        
        /**
         *
         * 获取易极付id
         */
//         $yijifuid = zbj_lib_BaseUtils::apicall('user', 'getYiJiFuId', array('uid' => $user_id));
//         if ($yijifuid) {
//             $param['yijifuid'] = $yijifuid['data'];
//         } else {
//             echo '获取前台用户易极付信息接口失败！';
//         }
        $param['yijifuid'] = $s_user->get('yijifu.yuser_id');
        $param['yijifu_info'] = $s_user->get('info2.*');
        
        /**
         *
         * 获取待审提现
         */
        $waitmoney = zbj_lib_BaseUtils::apicall('user', 'getWaitMoneyCount', array('uid' => $user_id));
        if ($waitmoney) {
            $param['waitmoney'] = $waitmoney['data'];
        } else {
            echo '获取前台用户待审体现接口失败！';
        }
        /**
         * 获取前台用户内部资料
         */
        $m_customerperson = new zbj_model_mb_customerperson($user_id);
        $customerperson = $m_customerperson->getdata();
        $param['customerperson'] = $customerperson;
        /**
         * 获取微博认证信息
         */
        $m_weibo = new zbj_model_mb_weibo();
        $param['weiboinfo'] = $m_weibo->select(array('user_id'=>$user_id), 'type, account, status, weibo_id, fans')->items;
		/**
		 * 获取各标签总数
		 */
		//report
		$oReport = new zbj_model_mb_report();
		$rs = $oReport->selectOne("f_user_id={$user_id} or t_user_id={$user_id}", "count(0) as num");
		$param['reportnum'] = $rs['num'];
		$oCil = new zbj_service_council($user_id);
		$param['ismember'] = $oCil->isMember($user_id);
		if ($param['ismember']) {
			$secNum = $oReport->_db->selectOne("mb_council_work", "user_id={$user_id}", "count(0) as num");
			$param['secnum'] = $secNum['num'];
		}
		//获取用户推荐的主题
		$m_themetalent = new zbj_model_zt_themetalent();
		$themeLeftJoin = array(
				'zt_theme' => 'zt_theme.theme_id = zt_theme_talent.theme_id'
				);
		$themetalent = $m_themetalent->select(array('zt_theme_talent.user_id'=>$user_id), 'zt_theme.theme_id, zt_theme.name', null, 'order by zt_theme.theme_id', $themeLeftJoin)->items;
		$param['themetalent'] = $themetalent;
		//获取用户雇主群
		$m_employeruser = new zbj_model_zt_employeruser();
		$employerLeftJoin = array(
				'zt_employer_group' => 'zt_employer_group.g_id = zt_employer_user.g_id'
				);
		$employeruser = $m_employeruser->select(array('zt_employer_user.user_id'=>$user_id), 'zt_employer_group.g_id., zt_employer_group.g_id.ename', null, 'order by zt_employer_group.g_id', $employerLeftJoin)->items;
		$param['employeruser'] = $employeruser;
		//获取备注
		$sLog = new service_log();
		$param['remark_catalog'] = $sLog->getRemarkCatalog();
		$remark = $sLog->getRemarkLog($user_id, 'user', 3);
		$param['remark'] = $remark->items;
		//服务商派单看板 
		$mRecommend = new zbj_model_mk_recommend();
		$board_summary = $mRecommend->select(array('user_id' => $user_id), 'action_type,count(*) num', 'group by action_type')->items;
		//收到派单
		$board_summary_acc = $mRecommend->selectOne(array('user_id' => $user_id), 'count(*) num');
		$param['board_summary'] = lib_BaseUtils::array_changekey($board_summary, 'action_type');
		//抢单率
		$param['board_summary']['get'] = lib_BaseUtils::getPercent($param['board_summary'][2]['num'] + $param['board_summary'][3]['num'], $board_summary_acc['num']) . '%';
		//成功率
		$param['board_summary']['suc'] = lib_BaseUtils::getPercent($param['board_summary'][4]['num'], $param['board_summary'][2]['num'] + $param['board_summary'][3]['num']) . '%';
		//交易顾问评价
		$remark = new zbj_model_cp_remark();
		$remark->setLimit(5);
		$remark->setPage(1);
		$evaluate_list = $remark->select(array('pk_id' => $user_id, 'type_id' => 6, 'remark_catalog' => 2), '*', null, 'order by remark_id desc')->items;
		if ($evaluate_list) {
			foreach ($evaluate_list as $key => $value) {
				if ($value['option']) {
					$evaluate_list[$key]['option'] = json_decode($value['option'], true);
				}
			}
		}
		$param['evaluate_list'] = $evaluate_list;
		//雇主所有者
		$s_customer = new service_customer($s_user->get('user_id'));
		$manager_id = $s_customer->checklock();
		if ($manager_id) {
			$param ['lock'] = $s_customer->get('customer.*');
			$param ['lockname'] = $param['lock']['manager'];
			$param['lock_manager_id'] = $param['lock']['managerid'];
			$m_cpuser = new zbj_model_cp_user();
			$isleave = $m_cpuser->selectOne(array('user_id' => $manager_id), 'isleave');
			if ($isleave['isleave']== 1) {
				$param ['lockname'] .= "（离职）";
			}else if($value['isleave'] == 2) {
				$param ['lockname'] .= "（调岗）";
			}else if($value['isleave'] == 3) {
				$param ['lockname'] .= "（休假）";
			}
		}
		//服务商所有者
// 		$param['wklock'] = $s_user->get("info.manager_name");
        $manager_id = $s_user->get("info.manager_id");
        if ($manager_id){
            $s_manager = new service_manager($manager_id);
            $param['wklock'] = $s_manager->get('name');
    		//$param['wklock'] = $s_user->get("info.manager_id");
        }
		//商标版权案件代理人
		$agent_manager_id = $s_user->get('info.agent_manager_id');
		lib_BaseUtils::apiInit();
		$userClient= new com\zhubajie\boss\interfaces\userServiceClient(null);
		lib_BaseUtils::apigetclient($userClient);
		$userInfo = $userClient->getUserBaseInfo($agent_manager_id);
		$param['agentlock'] = $userInfo->truename ;
		//知识产权-法律顾问
		lib_BaseUtils::apiInit(10,array('ub-client'));
		$userBizClient = new com\zhubajie\ub\interfaces\UserBizAttrServiceIfClient(null);
		lib_BaseUtils::apigetclient($userBizClient);
		$userBiz = $userBizClient->getUserAttr ( $user_id, array (
				'EXPAND'
		) );
		$expand = unserialize ( $userBiz->usersFields [$user_id] ['EXPAND'] );
		if ($expand['law_manager_id']) {
			lib_BaseUtils::apiInit();
			$bossuserClient = new com\zhubajie\boss\interfaces\userServiceClient(null);
			lib_BaseUtils::apigetclient($bossuserClient);
			$bossuser = $bossuserClient->getUser($expand['law_manager_id']);
			$param['lawlock'] = $bossuser->truename;
		}
		
		//是否在线
		$sUser = new service_user($user_id);
		$param['online'] = $sUser->isOnline() ? 1 : 0;
		//金牌服务商特权抢单
//		$mSign = new zbj_model_mk_tasksign();
//		$contidion = "mk_task_sign.task_id = mk_works.task_id AND mk_task_sign.user_id = mk_works.`user_id` AND mk_works.`isgold` =1 AND mk_task_sign.isinvite =0 AND mk_task_sign.dateymd > '2013-09-09' AND mk_task_sign.user_id =$user_id";
//		$oSign = $mSign->_db->selectOne("mk_task_sign,mk_works",$contidion,"sum(case when issuccess=1 then 1 else 0 end) robselnum,count(*) total");
//		$param['rob']['total'] = $oSign['total'];
//		$param['rob']['selnum'] = $oSign['robselnum'];
//		if ($param['rob']['total']) {
//			$param['rob']['percent'] = ($param['rob']['selnum'] / $param['rob']['total'] * 100) . '%';
//		} else {
//			$param['rob']['percent'] = "0%";
//		}
		
		//收藏该服务商的交易顾问
		$mbinfo = new zbj_model_mb_info();
		$info = $mbinfo->_db->select('mb_recommend_log',"user_id={$user_id} and isfollow=1")->items;
		$param['follow_count'] = count($info);
		//是否收藏该服务商
		$is_follow = $mbinfo->_db->selectOne('mb_recommend_log',"manager_id={$this->_userid} and user_id={$user_id} and isfollow=1");
		$param['is_follow'] = $is_follow? 1: 0;
		
		//会员服务
		$m_member = new zbj_model_mb_member($user_id);
		lib_BaseUtils::apiInit(5,array('membership_sdk'));
		$s_membershipuser=new com\zhubajie\membership\interfaces\UserServiceClient(null);
		lib_BaseUtils::apigetclient($s_membershipuser);
		$followuser=$s_membershipuser->getfollowuser($user_id);
		$vipinfo=$s_membershipuser->getMembershipInfo($user_id,null);
// 		var_dump($followuser);
		$param['vip']['level']=$vipinfo->info->type;
		switch ($vipinfo->info->type) {
            case 6:
                $param['vip']['levelStr'] = "八戒通";
                break;
            case 5:
                $param['vip']['levelStr'] = "扶持版";
                break;
            case 4:
                $param['vip']['levelStr'] = "皇冠";
                break;
            case 3:
                $param['vip']['levelStr'] = "钻石";
                break;
            case 2:
                $param['vip']['levelStr'] = "金牌";
                break;
            case 1:
                $param['vip']['levelStr'] = "银牌";
                break;
            case 0:
            default:
                $param['vip']['levelStr'] = "普通";
        }
		$param['vip']['expire'] = $vipinfo->info->expireTime;
// 		$param['vip']['expire_todays']=0;
// 		$param['vip']['pass_todays'] = 0;
		$param['vip']['saler_id'] = $followuser->seller_id;
		$param['vip']['saler_name'] = $followuser->seller_name;
		$param['vip']['manager_id'] = $followuser->manager_id;
		$param['vip']['manager_name'] = $followuser->manager_name;
// 		$param['vip']['lastexpiretime'] = $vipinfo->info->expireTime;//上次到期时间
// 		$param['vip']['last_level'] = $m_member->getData('last_goldstatus');//上次购买等级
// 		$param['vip']['buytime'] = $s_user->getUserLastBuyinfo();//当前购买时间
	
	
		if (in_array($param['vip']['level'], array(
            1,
            2,
            3,
            4
        ))) {
			$param['vip']['state']=3;
			$param['vip']['stateStr']='已签约';
			
			$param['vip']['expire_todays'] = round(($param['vip']['expire'] - time()) / 86400);
			if($param['vip']['expire_todays']<0){
				$param['vip']['expire_todays']=0;
			}
		} else {
		    $param['vip']['state']=1;
		    $param['vip']['stateStr']='未签约';
// 			if ($param['vip']['last_level'] > 0) {
// 				$param['vip']['state']=2;
// 				$param['vip']['stateStr']='已断约';
				
// 				$param['vip']['pass_todays'] = round((time() - $param['vip']['lastexpiretime']) / 86400);
// 				if($param['vip']['pass_todays']<0){
// 					$param['vip']['pass_todays']=0;
// 				}
// 			} else {
// 				$param['vip']['state']=1;
// 				$param['vip']['stateStr']='未签约';
// 			}
		}
//		if($param['vip']['lastbuytime']>0){
//			$param['vip']['expire_todays'] = round(($param['vip']['expire']-time())/86400);
//			if($param['vip']['expire_todays']<0){
//				$param['vip']['expire_todays']=0;
//			}
//			$param['vip']['pass_todays'] = round((time()-$param['vip']['expire'])/86400);
//			if($param['vip']['pass_todays']<0){
//				$param['vip']['pass_todays']=0;
//			}
//			if($param['vip']['level'] && $param['vip']['expire']>time()){//有效
//				$param['vip']['state']=3;
//				$param['vip']['stateStr']='已签约';
//			}else{//断约
//				$param['vip']['state']=2;
//				$param['vip']['stateStr']='已断约';
//			}
//		}else{//未签约
//			$param['vip']['state']=1;
//			$param['vip']['stateStr']='未签约';
//		}
		
		//最新一次销售会员跟进记录 
		$follow_info = $this->_get_sell_follow_info($user_id);
		
// 		$m_sell_follow = new model_mb_sellFollow();
// 		$last_sell_follow = $m_sell_follow->selectOne(array('user_id' => $user_id));
		
// 		$s_sell_follow = new service_sellFollow($user_id);
// 		$level_desc = $s_sell_follow->getLevelDesc($param['vip']['state']);
		
// 		$follow_info = array();
// 		if ($last_sell_follow) {
// 			if (1 == $last_sell_follow['is_giveup']) {
// 				$follow_info['type_desc'] = '已放弃';
// 				$follow_info['leve_desc'] = $level_desc['give_up']['desc'];
// 			} else {
// 				if (2 == $last_sell_follow['is_sea']) {
// 					$follow_info['type_desc'] = '已进入公海';
// 					$follow_info['leve_desc'] = $last_sell_follow['remark'];
// 				} else {
// 					if (3 == $param['vip']['state']) {
// 						$follow_info['type_desc'] = '最近回访类型：';
// 						$follow_info['leve_desc'] = $last_sell_follow['remark'];
// 						if (3 == $last_sell_follow['follow_purpose']) {
// 							$follow_info['answer'] = '答疑';
// 						} elseif (4 == $last_sell_follow['follow_purpose']) {
// 							$follow_info['answer'] = '操作';
// 						} elseif (5 == $last_sell_follow['follow_purpose']) {
// 							$follow_info['answer'] = '分析';
// 						} else {
// 							if ($last_sell_follow['visit_level']) {
// 								$follow_info['type_desc'] = '续费可能性：';	
// 							}
							
// 							$follow_info['answer'] = $level_desc[$last_sell_follow['visit_level']]['level'];
// 							$follow_info['leve_desc'] = $level_desc[$last_sell_follow['visit_level']]['desc'];
// 						}
// 					} else {
// 						$follow_info['type_desc'] = '成交可能性：';
// 						$follow_info['answer'] = $level_desc[$last_sell_follow['follow_level']]['level'];
// 						$follow_info['leve_desc'] = $level_desc[$last_sell_follow['follow_level']]['desc'];
// 					}
// 				}
// 			}
			
// 			if (5 == $last_sell_follow['visit_level'] || 5 == $last_sell_follow['follow_level']) {
// 				$follow_info['answer'] .= '（未联系上）';
// 			}
// 		} else {
// 			if ($param['vip']['saler_id']) {
// 				$follow_info['answer'] = $level_desc[0]['level'];
// 				$follow_info['leve_desc'] = $level_desc[0]['desc'];
				
// 				if (3 == $param['vip']['state']) {
// 					$follow_info['type_desc'] = '最近回访类型：';
// 				} else {
// 					$follow_info['type_desc'] = '成交可能性：';
// 				}	
// 			} else {
// 				if (3 == $param['vip']['state']) {
// 					$follow_info['type_desc'] = '最近回访类型：';
// 					$follow_info['answer'] = '未跟进（无人锁定）';
// 					$follow_info['leve_desc'] = '请尽快联系签约服务商，为服务商答疑、操作、分析或了解续费意向';	
// 				} else {
// 					$follow_info['type_desc'] = '成交可能性：';
// 					$follow_info['answer'] = '未跟进（无人锁定）';
// 					$follow_info['leve_desc'] = '请先锁定服务商再跟进，了解服务商需求，促进签约';	
// 				}	
// 			}
// 		}
		
// 		$param['last_sell_follow'] = $last_sell_follow;
		$param['follow_info'] = $follow_info;
		$param['follow_level_config'] = $this->_get_level_config(1);
		$param['visit_level_config'] = $this->_get_level_config(3);
// 		$param['follow_num'] = $s_sell_follow->getFollowCount();
		
		//销售机会数
		$s_chance = new service_chance();
		$param['chance_num'] = $s_chance->getChanceNum($user_id);
		//急需派单
		$mOpis = new model_mb_useropis($user_id);
		$param['is_urgent'] = (int)$mOpis->getData('is_urgent');
		//暂停签约或恢复签约
		$sSeller = new zbj_service_sellerapi($user_id, '');
		$param['sign_status'] = (int)$sSeller->getButtonStatus();
		
		// 获取电子发票纳税人信息
		$taxpayerModel = new zbj_model_mb_billtaxpayer();
    	$tpdata = $taxpayerModel->selectOne("user_id='{$user_id}'",'tp_id,state');
    	$taxpayer = array('taxpayer'=>0,'totalamount'=>0,'totaltax'=>0,'nowamount'=>0,'nowtax'=>0,'taxpayer_state'=>0);
		if(is_numeric($tpdata['tp_id'])){ // 是纳税人
			$taxpayer['taxpayer'] = 1;
			$taxpayer['taxpayer_state'] = $tpdata['state'];
			$taxModel = new zbj_model_mb_billtax();
    		$tax = $taxModel->selectOne("seller_id='{$user_id}'",'sum(in_amount) as total_amount,sum(yjtax_amount) as total_tax');
    		$taxpayer['totalamount'] = number_format((float)$tax['total_amount'],2,'.','');
    		$taxpayer['totaltax'] = number_format((float)$tax['total_tax'],2,'.','');
    		$beginymd = date('Y-m',time()).'-01';
    		$endymd = date('Y-m-d',time());
    		$tax = $taxModel->selectOne("seller_id='{$user_id}' and done_ymd>='{$beginymd}' and done_ymd<='{$endymd}'",'sum(in_amount) as now_amount,sum(yjtax_amount) as now_tax');
    		$taxpayer['nowamount'] = number_format((float)$tax['now_amount'],2,'.','');
    		$taxpayer['nowtax'] = number_format((float)$tax['now_tax'],2,'.','');
		}
		$param['taxpayer'] = $taxpayer;
		
		$param['isbuyer'] = 1;//是否是买家，1是买家，0是服务商
        $isfws = $s_user->get('info.isfws');
        if ($isfws) $param['isbuyer'] = 0;
        /*$m_waiterlog = new zbj_model_mb_waiterlog();
        $waiterlog = $m_waiterlog->selectOne(array('user_id'=>$user_id), 'count(1) as num');
        if ($waiterlog && $waiterlog['num']) $param['isbuyer'] = 0;*/
        //获取是否外包商 2014-10-29 
        $mdlOut = new zbj_model_mb_outsourceuserinfo();
        $outcondi = array('user_id'=>$user_id,'verify_status'=>1);
        $outRes = $mdlOut->selectOne($outcondi,'id');
        $param['info']['waibao'] = $outRes ? 1 : 0;
        $param['info']['is_mall']=(int)$s_user->isMallUser();  //判断是否是优选商城用户
        /**
         * 会员销售与服务顾问
         */
        lib_BaseUtils::apiInit(5,array('membership_sdk'));
        $s_followuser=new com\zhubajie\membership\interfaces\UserServiceClient(null);
        lib_BaseUtils::apigetclient($s_followuser);
        $s=$s_followuser->getfollowuser($user_id);
        $param['sellinfo']=$s;

        //获取派单面板数据 by houxiaopeng 20150624 
        $userService = new zbj_service_user($user_id);
        $sellerInfo = $userService->getMembershipInfoFromThrift();
        //判断服务商是否签约||服务商签约或者曾经签约但又过期
        if(true || $userService->JudgeMemberShip() || ($sellerInfo['type'] > 0 && $sellerInfo['expireTime'] == -1)){
            try {
                zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET);
                $recommendService = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(NULL);
                zbj_lib_ApiClient::build($recommendService);
                //获取派单统计
                $recommendCountDTO = new com\zhubajie\task\dataobject\taskrecommend\RecommendCountParamDTO();
                $recommendCountDTO->userId = $user_id;

                //时间筛选
                $startDate = lib_BaseUtils::getStr($_GET['startDate']);
                $endDate = lib_BaseUtils::getStr($_GET['endDate']);
                if(!empty($startDate) && !(lib_BaseUtils::chkdate($startDate))){
                    return $this->printmsg('开始日期格式不正确');
                }

                if(!empty($endDate) && !(lib_BaseUtils::chkdate($endDate))){
                    return $this->printmsg('结束日期格式不正确');
                }
                $recommendCountDTO->startdate = $startDate;
                $recommendCountDTO->enddate = $endDate;

                $count = $recommendService->getCount($recommendCountDTO);
                if($count->success != 1){
                    throw new Exception($count->message);
                }
                //获取状态
                $sRecommend = new service_recommend();
                $mRecommend = new zbj_model_mk_recommend();
                //获取类型
                $typelist = service_recommend::getType();
                $condition = array('user_id' => $user_id);
                $condition[] = "issys > 0 and sendtime > 1434038400";
                //获取各种类型的数量
                $oRecommend = $mRecommend->select($condition, 'action_type,count(*) num', 'group by action_type')->items;
                $board_summary = lib_BaseUtils::array_changekey($oRecommend, 'action_type');
                foreach ($typelist as $key => $value) {
                    $param['board_sums'][$key] = array(
                        'name' => $value,
                        'num' => (int) $board_summary[$key]['num'],
                    );
                }
                $param['board_sum'] = (array)$count->count;
                //抢单率
                $param['board_sum_get'] = lib_BaseUtils::getPercent($param['board_sum']['accept_num'], $param['board_sum']['recommend_num']) . '%';
                //成功率
                $param['board_sum_suc'] = lib_BaseUtils::getPercent($param['board_sums'][4]['num'], $param['board_sum']['accept_num']) . '%';
                } catch (Exception $e) {
                throw new Exception($e->getMessage());
            }
        }

		return $param;
    }

    /**
     *
     * 获取前台用户所有发布的需求列表
     */
    public function pageTask($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
//        $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $task = zbj_lib_BaseUtils::apicall('user', 'getTask', array('uid' => $user_id, 'limit' => $limit, 'page' => $curpage));
        if ($task) {
            $param['task'] = $task['data']['items'];
            $tasklist = array();
            foreach ($param['task'] as $item){
            	$tasklist[] = $item['task_id'];
            }
            //查看该任务是否是机会系统产生
            zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
            $api = new com\zhubajie\crm\interfaces\ChanceServiceClient(null);
            zbj_lib_ApiClient::build($api);
            $re = $api->CheckTask($tasklist);
            $check_result = array();
            if($re->data_obj->items !== null){
            	foreach ($re->data_obj->items as $k => $v){
            		$check_result[$v['task_id']] = $v;
            	}
            }
            foreach ($param['task'] as $k => $item){
            	if(array_key_exists($item['task_id'], $check_result)){
            		$param["task"][$k]["is_produced_by_chance"] = 1;
            		$param["task"][$k]["boss_user_name"] = $check_result[$item['task_id']]['name'];
            		$param["task"][$k]["boss_user_nickname"] = $check_result[$item['task_id']]['nickname'];
            	}else{
            		$param["task"][$k]["is_produced_by_chance"] = 0;
            	}
            }
            
        } else {
            echo '获取前台用户发布的需求接口失败！';
        }
        $param ['pagebar'] = $this->PageBar($task['data']['totalSize'], $limit, $curpage, $inPath, 'style4');
        return $this->render('user/index/task.html', $param);
    }

    /**
     * 获取前台用户发出的投标列表
     */
    public function pageTaskSign($inPath) {
        return '功能下线';//2015-03-19顾留中
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $taskSign = zbj_lib_BaseUtils::apicall('user', 'getTaskSign', array('uid' => $user_id, 'limit' => $limit, 'page' => $curpage));
        if ($taskSign) {
            $param['taskSign'] = $taskSign['data']['items'];
        } else {
            echo '获取前台用户发出的投标接口失败！';
        }
        $param ['pagebar'] = $this->PageBar($taskSign['data']['totalSize'], $limit, $curpage, $inPath, 'style4');
        return $this->render('user/index/tasksign.html', $param);
    }

    /**
     * 获取前台用户提供的服务列表
     */
    public function pageService($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $service = zbj_lib_BaseUtils::apicall('user', 'getService', array('uid' => $user_id, 'limit' => $limit, 'page' => $curpage));
        if (service) {
            $param['service'] = $service['data']['items'];
        } else {
            echo '获取前台用户发出的投标接口失败！';
        }
        $param ['pagebar'] = $this->PageBar($service['data']['totalSize'], $limit, $curpage, $inPath, 'style4');
        return $this->render('user/index/service.html', $param);
    }

    /**
     * 获取前台用户其它动态列表
     */
    public function pageUserLog($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $userlog = zbj_lib_BaseUtils::apicall('user', 'getUserLog', array('uid' => $user_id, 'limit' => $limit, 'page' => $curpage));
        if ($userlog) {
            $param['userlog'] = $userlog['data']['items'];
        } else {
            echo '获取前台用户其他动态接口失败！';
        }
        $param ['pagebar'] = $this->PageBar($userlog['data']['totalSize'], $limit, $curpage, $inPath, 'style4');
        return $this->render('user/index/userlog.html', $param);
    }
		
	/**
	 * 备注
	 */
	public function pageRemark($inPath){
		$urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
		$page = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$limit = 10;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = $this->getCommonUserInfo($user_id);
		$sLog = new service_log();
		$remark = $sLog->getRemarkLog($user_id, 'user', $limit,$page);
		$param['remarklist'] = $remark->items;
		$param ['pagebar'] = $this->PageBar($remark->totalSize, $limit, $page, $inPath, 'style4');
		return $this->render("user/index/remark.html",$param);
	}
	
	/**
	 * 服务商派单看板
	 */
	/*public function pageBoard($inPath) {
		$urlparam = $this->getUrlParams($inPath);
		$user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
		$issys = (int) $_GET['rct'];
		$page = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$limit = 10;
		if (!$user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$param = $this->getCommonUserInfo($user_id);
		//各种状态数量统计
		$condition = array('user_id' => $user_id);
		if ($issys) {
			$condition['is_sys'] = $issys - 1;
		}
		$mRecommend = new zbj_model_mk_recommend();
		$param['board_sum_acc'] = 0; //收到派单
		$oRecommend = $mRecommend->select($condition, 'action_type,count(*) num', 'group by action_type')->items;
		$board_summary = lib_BaseUtils::array_changekey($oRecommend, 'action_type');
		$sRecommend = new service_recommend();
		$typelist = service_recommend::getType();
		foreach ($typelist as $key => $value) {
			$param['board_sum'][$key] = array(
				'name' => $value,
				'num' => (int) $board_summary[$key]['num'],
			);
			$param['board_sum_acc'] += $param['board_sum'][$key]['num'];
		}
		//抢单率
		$param['board_sum_get'] = lib_BaseUtils::getPercent($param['board_sum'][2]['num'] + $param['board_sum'][3]['num'], $param['board_sum_acc']) . '%';
		//成功率
		$param['board_sum_suc'] = lib_BaseUtils::getPercent($param['board_sum'][4]['num'], $param['board_sum'][2]['num'] + $param['board_sum'][3]['num']) . '%';
		if ($_GET['sum']) {
			$condition['action_type'] = (int)$_GET['sum'];
		}
		//列表
		$mRecommend->setLimit($limit);
		$mRecommend->setPage($page);
		$mRecommend->setCount(true);
		$oRecommend = $mRecommend->select($condition,'*',null,'order by operatetime');
		$param['recommendlist'] = $oRecommend->items;
		if ($param['recommendlist']) {
			foreach ($param['recommendlist'] as $key => $value) {
				$mTask = new zbj_model_mk_task($value['task_id']);
				$param['recommendlist'][$key]['title'] = $mTask->getData('title');
				$param['recommendlist'][$key]['amount'] = $mTask->getData('amount');
				if ($value['action_type'] == 8) {
					$sRecommend = new zbj_service_recommend($value['user_id'], $value['task_id']);
					$param['recommendlist'][$key]['reason'] = $sRecommend->getGiveUpReason();
				}
			}
		}
		$param['recommendtotal'] = $oRecommend->totalSize;
		$param['pagebar'] = $this->PageBar($oRecommend->totalSize, $limit, $page, $inPath, 'style4');
		//导航
		$param['boardnav'] = array('所有', '人工派单', '系统派单');
		$param['action'] = $typelist;
		$param['url'] = "/user/board-uid-{$user_id}";

        //计划服务商表
        $mbbidmodeseller = zbj_model_api::get('zbj_model_mb_bidmodeseller');
        //如果计划服务商已经存在进行修改操作
        $bidmodeseller = $mbbidmodeseller->selectOne("user_id={$user_id}");
        $param['bidmodestate'] = $bidmodeseller['state'];
		return $this->render("user/index/board.html", $param);
	}*/

    public function pageBoard($inPath){
        $url = $this->getUrlParams($inPath);
        $user_id = (int) $url['uid'] ? (int) $url['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = $this->getCommonUserInfo($user_id);
        $userService = new zbj_service_user($user_id);
        $sellerInfo = $userService->getMembershipInfoFromThrift();
        //判断服务商是否签约||服务商签约或者曾经签约但又过期
        if(true || $userService->JudgeMemberShip() || ($sellerInfo['type'] > 0 && $sellerInfo['expireTime'] == -1)){
            $page = intval($url['page']);
            $page <= 0 && $page = 1;
            $status = intval($_GET['status']);

            //时间筛选
            $param['startDate'] = lib_BaseUtils::getStr($_GET['startDate']);
            $param['endDate'] = lib_BaseUtils::getStr($_GET['endDate']);
            if(!empty($param['startDate']) && !(lib_BaseUtils::chkdate($param['startDate']))){
                return $this->printmsg('开始日期格式不正确');
            }

            if(!empty($param['endDate']) && !(lib_BaseUtils::chkdate($param['endDate']))){
                return $this->printmsg('结束日期格式不正确');
            }

            //导航
            $param['boardnav'] = array('1'=>'已接', '4'=>'未接');
            ($status != 1 && $status !=4) && $status = 1;
            $pageSize = 10;

            try {
                zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET);
                $recommendService = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(NULL);
                zbj_lib_ApiClient::build($recommendService);

                //获取派单历史列表
                $recommendParamDTO = new com\zhubajie\task\dataobject\taskrecommend\RecommendParamDTO();
                $recommendOption = new com\zhubajie\task\dataobject\taskrecommend\RHOptionDTO();
                $recommendParamDTO->page = $page;
                $recommendParamDTO->pageSize = $pageSize;
                $option = array($recommendOption::USER_ID=>$user_id,$recommendOption::START_DATE=>$param['startDate'], $recommendOption::END_DATE=>$param['endDate'],$recommendOption::RECOMMEND_TYPE=>$status);
                $recommendParamDTO->option = $option;

                $list = $recommendService->getHistoryList($recommendParamDTO);

                if($list->success != 1){
                    throw new Exception($list->message);
                }

                $objList = (array)$list->items;

                $task_ids = array();
                foreach ($objList as $key => $value) {
                    $recommendList[] = (array)$value;
                    $task_ids[] = $value->task_id;

                }

                $categorySrv = new zbj_service_category();
                $category_list = $categorySrv->getTree();
                // 定向派单服务商
                if(!empty($task_ids)){
                    $recommend_list = new zbj_model_mk_recommendlist();
                    $task_model = zbj_model_api::get("zbj_model_mk_task");
                    $r_condi = array(
                        'user_id'=>$user_id,
                        'task_id in ('.implode(',',$task_ids).')'
                    );
                    if($infos = $recommend_list->select($r_condi," task_id,reason_other")->items){
                        $infos = zbj_lib_BaseUtils::indexArray($infos,"task_id");
                    }
                    $r_condi1 = array(
                        'task_id in ('.implode(',',$task_ids).')'
                    );
                    if($taskes = $task_model->select($r_condi1," task_id,category1id")->items){
                        $taskes = zbj_lib_BaseUtils::indexArray($taskes,"task_id");
                    }

                    //派单类型
                    $task_extends_model = zbj_model_api::get("zbj_model_mk_taskextends");
                    $condi = array(
                        ' task_id in ('.implode(",",$task_ids).')'
                    );
                    $recmd_types = $task_extends_model->select($condi,"task_id,recmd_type")->items;
                    if(is_array($recmd_types) && !empty($recmd_types)){
                        $recmd_types = zbj_lib_BaseUtils::indexArray($recmd_types,"task_id");
                    }

                    foreach($recommendList as &$val){
                        $val['reason_other'] = $infos[$val['task_id']]['reason_other'];
                        $val['category1_name'] = $category_list[$taskes[$val['task_id']]['category1id']]['category_name'];
                        $val['recmd_type']= !empty($recmd_types) && isset($recmd_types[$val['task_id']])?$recmd_types[$val['task_id']]['recmd_type']:-1;
                    }
                }
                //获取类型
                $typelist = service_recommend::getType();

                //组合条件
                $param['action'] = $typelist;
                $param['recommendlist'] = $recommendList;
                $param['recommendtotal'] = $list->total;
                $param['status'] = $status;
                $param['url'] = "/user/board-uid-{$user_id}";
                $param['pagebar'] = $this->pageBar($list->total, $pageSize, $page, $inPath, 'style4');
                return $this->render("user/index/board.html", $param);
            } catch (Exception $e) {
                throw new Exception($e->getMessage());
            }

        }else{
            return $this->render("user/index/board.html", $param);
        }
    }
	
	/**
	 * 金牌服务商特权抢单
	 */
	public function pageRob($inPath){
		$urlparam = $this->getUrlParams($inPath);
		$user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
		$type = (int) $_GET['robtype'];
		$page = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$limit = 10;
		if (!$user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$param = $this->getCommonUserInfo($user_id);
		$contidion = "mk_task_sign.task_id = mk_works.task_id AND mk_task_sign.user_id = mk_works.`user_id` AND mk_works.`isgold` =1 AND mk_task_sign.isinvite =0 AND mk_task_sign.dateymd > '2013-09-09' AND mk_task_sign.user_id =$user_id";
		switch ($type) {
			case 1://已中标
				$contidion .= " and issuccess = 1";
				break;
			default ://已抢单
				break;
		}
		$mSign = new zbj_model_mk_tasksign();
		$mSign->setLimit($limit);
		$mSign->setPage($page);
		$mSign->setCount(true);
		$oSign = $mSign->_db->select("mk_task_sign,mk_works",$contidion);
		if ($oSign->items) {
			foreach ($oSign->items as $key => $value) {
				$mTask = new zbj_model_mk_task($value['task_id']);
				$param['roblist'][$key]['task_id'] = $value['task_id'];
				$param['roblist'][$key]['title'] = $mTask->getData('title');
				$param['roblist'][$key]['amount'] = $mTask->getData('amount');
				if ($value['success_num'] == 1) {
					$param['roblist'][$key]['state'] = '已中标';
					$param['roblist'][$key]['time'] = $value['select_time'];
				} else {
					$param['roblist'][$key]['state'] = '已抢单';
					$param['roblist'][$key]['time'] = $value['createtime'];
				}
			}
		}
		$param['robtotal'] = $oSign->totalSize;
		$param['pagebar'] = $this->PageBar($oSign->totalSize, $limit, $page, $inPath, 'style4');
		return $this->render("user/index/rob.html", $param);
	}

	/**
	 * 交易顾问评价
	 */
	public function pageEvaluate($inPath){
		$urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
		$page = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$limit = 10;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = $this->getCommonUserInfo($user_id);
		$condition['pk_id'] = $user_id;
		$condition['type_id'] = 6;
		$condition['remark_catalog'] = 2;
		$remark = new zbj_model_cp_remark();
		$remark->setLimit($limit);
		$remark->setPage($page);
		$remark->setCount(true);
		$oRemark = $remark->select($condition, '*', null, 'order by remark_id desc');
		if ($oRemark->items) {
			foreach ($oRemark->items as $key => $value) {
				if ($value['option']) {
					$oRemark->items[$key]['option'] = json_decode($value['option'], true);
				}
			}
		}
		$param['evaluatelist'] = $oRemark->items;
		$param ['pagebar'] = $this->PageBar($oRemark->totalSize, $limit, $page, $inPath, 'style4');
		return $this->render("user/index/evaluate.html",$param);
	}
	/**
	 * 添加评价
	 */
	public function pageAddEvaluate($inPath) {
		$user_id = (int) $_GET['uid'];
		if (!$user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		if ($_POST) {
			$evaluate = trim(lib_BaseUtils::getStr($_POST['evaluate']));
			if (!$evaluate) {
				return $this->printmsg('请填写评价',0,'');
			}
			$s_log = new service_log();
			if (!$s_log->addRemark($this->_userid, $user_id, $evaluate, '', 'user', 0, 2)) {
				return $this->printmsg('添加失败', 2);
			}
			return $this->printmsg('添加成功', 2, null, $_SERVER['HTTP_REFERER']);
		}
		return $this->render("user/index/addevaluate.html", $param);
	}
	
    /**
     * 获取前台用户收到的雇佣
     */
    public function pageUserReceiveGuYong($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $userlog = zbj_lib_BaseUtils::apicall('user', 'getUserReceiveGuYong', array('uid' => $user_id, 'limit' => $limit, 'page' => $curpage));
        if ($userlog) {
            $param['guyong'] = $userlog['data']['items'];
        } else {
            echo '获取前台用户其他动态接口失败！';
        }
        $param ['pagebar'] = $this->PageBar($userlog['data']['totalSize'], $limit, $curpage, $inPath, 'style4');
        return $this->render('user/index/userreceiveguyong.html', $param);
    }
    /**
     * 获取前台用户卖出的服务
     */
    public function pageUserSaleService($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $userlog = zbj_lib_BaseUtils::apicall('user', 'getUserSaleService', array('uid' => $user_id, 'limit' => $limit, 'page' => $curpage));
        if ($userlog) {
            $param['saleService'] = $userlog['data']['items'];
        } else {
            echo '获取前台用户其他动态接口失败！';
        }
        $param ['pagebar'] = $this->PageBar($userlog['data']['totalSize'], $limit, $curpage, $inPath, 'style4');
        return $this->render('user/index/usersaleservice.html', $param);
    }

	 /**
	 * 获取前台用户举报列表
	 */
	public function pageReport($inPath) {
		$urlparam = $this->getUrlParams($inPath);
		$user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
		if (!$user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$param = $this->getCommonUserInfo($user_id);
		$limit = 10;
		$page = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$otype = zbj_lib_BaseUtils::getStr($_GET['otype'], 'int');
		$stype = zbj_lib_BaseUtils::getStr($_GET['stype'], 'int');
		$rstate = zbj_lib_BaseUtils::getStr($_GET['rstate'], 'int');
		$isvest = zbj_lib_BaseUtils::getStr($_GET['isvest'], 'int');
		$scont = trim(zbj_lib_BaseUtils::getStr($_GET['scont']));
		$type = $_GET['rtype'] ? (int) $_GET['rtype'] : 1;
		if ($type == 1){
			$field = "f_user_id";
			$numfield = "t_user_id";
		}else if ($type == 2){
			$field = "t_user_id";
			$numfield = "f_user_id";
		}else
			return $this->printmsg('参数错误!');
		$filter['otype'] = $otype;
		$filter['stype'] = $stype;
		$filter['scont'] = $scont;
		$filter['rstate'] = $rstate;
		$filter['isvest'] = $isvest;
		foreach ($filter as $k => $v) {
			$query .= "&{$k}={$v}";
		}
 		$filter['rtype'] = $type;
		$reportCondition = "t1.{$field}={$user_id}";
		$numCondition = "t1.{$numfield}={$user_id}";
		$report_leftjoin = array("mb_council_report as t2" => "t1.report_id=t2.report_id");
		$typeCondition = "t1.f_user_id={$user_id} or t1.t_user_id={$user_id}";
		if ($otype) {
			$reportCondition .= " and t1.type={$otype}";
			$numCondition .= " and t1.type={$otype}";
		}
		if ($stype && $scont) {
			switch ($stype) {
				case 1:
					$scont = (int) $scont;
					$reportCondition .= " and t1.report_id={$scont}";
					$numCondition .= " and t1.report_id={$scont}";
					break;
				case 2:case 3:
                    $usercond='';
                    if(is_numeric($scont)){
                        $usercond="`user_id`=".(int)$scont;
                    }else{
                        $usercond="`nickname`='{$scont}' or `brandname`='{$scont}'";
                    }

					$oUser = new zbj_model_mb_info();
					$user = $oUser->selectOne($usercond,"user_id");
					if ($user['user_id']) {
						$tempfield = $stype == 2 ? "f_user_id" : "t_user_id";
						$reportCondition .= " and t1.{$tempfield}={$user['user_id']}";
						$numCondition .= " and t1.{$tempfield}={$user['user_id']}";
					}
					break;
				default:
					break;
			}
		}
		if ($rstate) {
			if ($rstate > 2) {
				$reportCondition .= " and t1.state>2";
				$numCondition .= " and t1.state>2";
			} else {
				$reportCondition .= " and t1.state={$rstate}";
				$numCondition .= " and t1.state={$rstate}";
			}
		}
		if ($isvest) {
			$reportCondition .= " and t2.status=3";
			$numCondition .= " and t2.status=3";
			
		}
		$oReport = new zbj_service_report();
		$reportList = $oReport->getReportList($reportCondition, 1, "t1.report_id,t1.type,t1.state,t1.f_nickname,t1.t_nickname,t1.addtime", "ORDER BY t1.report_id DESC", $page, $limit, $report_leftjoin);
		$typeList = $oReport->getReportList($typeCondition, 1, "t1.type", "", 0, 0, $report_leftjoin);
		$querystring = $_SERVER['QUERY_STRING'];
		$reportpagebar = $this->PageBar($reportList['totalSize'], $limit, $page, $inPath, 'style4', $querystring);
		$reportType = $oReport->_type;
		foreach ($reportType as $k => $v) {
			$typeString[$k] = $v[0];
		}
		if (count($typeList) > 0) {
			foreach ($typeList as $v) {
				$reportSelect[$v['type']] = $reportType[$v['type']][0];
			}
			array_unique($reportSelect);
		}
		$m_report = new zbj_model_mb_report();
		$numrs = $m_report->_db->selectOne("mb_report as t1", $numCondition, "count(0) as num", "", "", $report_leftjoin);
		$param['otypes'] = $reportSelect;
		$param['typeString'] = $typeString;
		$param['reportlist'] = $reportList['items'];
		$param['curnum'] = $reportList['totalSize'];
		$param['othernum'] = $numrs['num'];
		$param['reportpagebar'] = $reportpagebar;
		$param['query'] = $query;
		$param['filter'] = $filter;
		return $this->render('user/index/report.html', $param);
	}
	
	 /**
	 * 获取前台诚信委员用户判定举报列表
	 */
	public function pageSecReport($inPath) {
		$aGet = $this->getUrlParams($inPath);
		$user_id = (int) $aGet['uid'] ? (int) $aGet['uid'] : 0;
		if (!$user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$params = $this->getCommonUserInfo($user_id);
		$limit = 10;
		$page = isset($aGet ['page']) ? $aGet ['page'] : 1;
		$otype = zbj_lib_BaseUtils::getStr($_GET['otype'], 'int');
		$stype = zbj_lib_BaseUtils::getStr($_GET['stype'], 'int');
		$rstate = zbj_lib_BaseUtils::getStr($_GET['rstate'], 'int');
		$scont = trim(zbj_lib_BaseUtils::getStr($_GET['scont']));

		$filter['otype'] = $otype;
		$filter['stype'] = $stype;
		$filter['scont'] = $scont;
		$filter['rstate'] = $rstate;
		$condition[] = "user_id={$user_id}";
		if ($rstate) {
			$rstate--;
			$condition[] = "status={$rstate}";
		}
		if ($otype) {
			$condition[] = $otype == 1 ? "job_type=1" : "job_type=2";
		}
		if ($stype) {
			switch ($stype) {
				case 1://reportId
					$condition[] = "job_type=1 and job_id=" . (int) $scont;
					break;
				case 2://taskid
					$condition[] = "job_type=2 and job_id=" . (int) $scont;
					break;
				default :
					break;
			}
		}
		$oCouncil = new zbj_service_council($user_id);
		$oList = $oCouncil->getCouncilList("*", $condition, "work", "ORDER BY cw_id DESC", $page, $limit, true);
		$list = $oList->totalSize > 0 ? $oList->items : array();
		if (!empty($list)) {
			foreach ($list as $k => $v) {
				$datalist[$k] = $v;
				$datalist[$k]['point'] = 1;
				//get content & time
				switch ($v['job_type']) {
					case 1:
						$obj = new zbj_model_mb_councilreport($v['job_id']);
						$content = $obj->getData("f_nickname") . " 举报 " . $obj->getData("t_nickname") . " " . $obj->getData("report_name");
						$jumpUrl = zbj_lib_Constant::SEC_URL . "/report/detailview-rid-" . $v['job_id'];
//						if ($obj->getData("status") == 4) {
//							$datalist[$k]['isjudge'] = 1;
//							if ($v['choice'] == $obj->getData("choice")) {
//								$datalist[$k]["iswin"] = 1;
//								if ($obj->getData("type") == 2)
//									$datalist[$k]['point'] += 4;
//							}
//						}
						$datalist[$k]["taskamount"] = $obj->getData("report_amount");
						break;
					case 2:
						$obj = new zbj_model_mb_counciltask($v['job_id']);
						$content = $obj->getData("title");
						$jumpUrl = zbj_lib_Constant::TASK_URL . "/{$v['job_id']}";
						$datalist[$k]['tasktype'] = $obj->getData("type");
						$datalist[$k]['taskresult'] = $obj->getData("status");
						break;
					default :
						break;
				}
				$outtime = $oCouncil->getWorkOutTime($this->_userid, $v['job_id'], $v['job_type']);
				$datalist[$k]['content'] = $content;
				$datalist[$k]['url'] = $jumpUrl;
				$datalist[$k]['cooldown'] = $outtime ? zbj_lib_BaseUtils::timediff($this->_time, $outtime) : 0;
				$datalist[$k]['options'] = unserialize($v['options']);
			}
		}
		$querystring = $_SERVER['QUERY_STRING'];
		$params['list'] = $datalist;
		$params['typestring'] = array(1 => "举报", 2 => "选标");
		$params['filter'] = $filter;
		$params['pagebar'] = $this->PageBar($oList->totalSize, $limit, $page, $inPath, 'style4', $querystring);
		return $this->render('user/index/secreport.html', $params);
	}
	

    //TODO以下代码要改成api的形式
    /**
     * 用户需求发布,对应mk_task表
     */
    public function pageTaskPub($inPath) {
        $urlParam = $this->getUrlParams($inPath);
        $user_id = (int) $urlParam['uid'] ? (int) $urlParam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $page = (int) $urlParam['page'] ? (int) $urlParam['page'] : 0;
        $limit = 20;
        $m_task = new zbj_model_mk_task();
        $m_task->setCount(true);
        $m_task->setPage($page);
        $m_task->setLimit($limit);
        $h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
        $param ['h_endurl'] = $h_endurl;
        //amount任务金额（ 订金）/at_amount实际交易金额（ 赏金）、nickname雇主
        //manager_name2售后1/2管理员,state任务状态 0 草稿,1新任务,2正式发布,3已选稿,4结束并打款
        $taskObj = $m_task->select(array('user_id' => $user_id), 'task_id, title, createymd, manager_name, manager_name2, state, amount, at_amount, nickname', null, 'order by task_id desc');
        $pagebar = $this->PageBar($taskObj->totalSize, $limit, $page, $inPath, "style3", $h_endurl);
// 		$param['taskpub'] = $taskObj->items;
        $param ['pagebar'] = $pagebar;
        print_r($taskObj->items);
// 		print_r($taskObj);
        print_r($pagebar);
    }

    /**
     * 用户需求解决,对应mk_works表
     */
    public function pageWorks($inPath) {
        $urlParam = $this->getUrlParams($inPath);
        $user_id = (int) $urlParam['uid'] ? (int) $urlParam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $page = (int) $urlParam['page'] ? (int) $urlParam['page'] : 0;
        $limit = 20;
        $m_works = new zbj_model_mk_works();
        $m_works->setCount(true);
        $m_works->setPage($page);
        $m_works->setLimit($limit);
        $h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
        $param ['h_endurl'] = $h_endurl;
        $leftjoin = array(
            'mk_task' => 'mk_works.task_id = mk_task.task_id'
        );
// 		define(DEBUG, 1);
        //amount任务金额（ 订金）/at_amount实际交易金额（ 赏金）、nickname雇主
        $worksObj = $m_works->select(array('mk_works.user_id' => $user_id, 'mk_works.issuccess' => 1), 'mk_task.task_id, mk_task.title, mk_task.createymd, mk_task.manager_name, mk_task.manager_name2, mk_task.state, mk_task.amount, mk_task.at_amount, mk_task.nickname', null, 'order by mk_task.task_id', $leftjoin);
        print_r($worksObj);
        $pagebar = $this->PageBar($worksObj->totalSize, $limit, $page, $inPath, "style3", $h_endurl);
        $param['works'] = $worksObj->items;
        $param ['pagebar'] = $pagebar;
        print_r($pagebar);
    }

    /**
     * 获取手机短信信息
     */
    function pageMobile($inPath) {
        $urlparams = $this->getUrlParams($inPath);
        $uid = $urlparams['uid'] ? zbj_lib_BaseUtils::getStr($urlparams['uid'], "int") : 0;
        $s_user = new zbj_service_user($uid);
        $uids['user_id'] = $uid;
        if (!$s_user->get('usermobile'))
            return $this->ShowMsg("该用户未通过手机认证");
        else {
            $params = array();
            $params ['loginid'] = $this->_userid; //后台登录人员id
            $params["phone"] = $s_user->get('usermobile');
            $params["uid"] = $uid;
            $params["nickname"] = $s_user->get('nickname');
            $params['userinfo'] = $uids;
            return $this->render("user/mobile.html", $params);
        }
    }

    /**
     * 发送手机短信
     */
    function pageSendMobile($inPath) {
        $urlparams = $this->getUrlParams($inPath);
        $phone = $_REQUEST['phone'] ? zbj_lib_BaseUtils::getStr($_REQUEST['phone']) : '';
        $uid = $_REQUEST['uid'] ? zbj_lib_BaseUtils::getStr($_REQUEST['uid']) : '';
        $nickname = $_REQUEST['nickname'] ? zbj_lib_BaseUtils::getStr($_REQUEST['nickname']) : '';
        $content = $_REQUEST['content'] ? zbj_lib_BaseUtils::getStr($_REQUEST['content']) : "";
        if (zbj_lib_BaseUtils::IsMobile($phone) && $content) {
            SSms::send($phone, $content);
            return $this->ShowMsg("短信发送成功");
        } else {
            return $this->ShowMsg("短信发送失败");
        }
    }

    /**
     * 获取邮件信息
     */
    function pageMail($inPath) {
        $urlparams = $this->getUrlParams($inPath);
        $uid = $urlparams['uid'] ? zbj_lib_BaseUtils::getStr($urlparams['uid']) : 0;
        $s_user = new zbj_service_user($uid);
        $uids['user_id'] = (int) $urlparams['uid'];
        if (!$s_user->get('useremail'))
            return $this->ShowMsg("该用户未通过邮件认证");
        if ($s_user->get('useremail')) {
            $params = array();
            $params ['loginid'] = $this->_userid; //后台登录人员id
            $params["email"] = $s_user->get('useremail');
            $params["uid"] = $uid;
            $params["nickname"] = $s_user->get('nickname');
            $params['userinfo'] = $uids;
            return $this->render("user/email.html", $params);
        } else {
            return $this->ShowMsg("邮件不存在");
        }
    }

    /**
     * 发送邮件
     */
    function pageSendEmail($inPath) {
        $urlparams = $this->getUrlParams($inPath);
        $email = $_POST['email'] ? zbj_lib_BaseUtils::getStr($_POST['email']) : '';
        $uid = $_POST['uid'] ? zbj_lib_BaseUtils::getStr($_POST['uid']) : '';
        $nickname = $_POST['nickname'] ? zbj_lib_BaseUtils::getStr($_POST['nickname']) : '';
        $content = $_POST['content'] ? zbj_lib_BaseUtils::getStr($_POST['content']) : "";
        $title = $_POST['title'] ? zbj_lib_BaseUtils::getStr($_POST['title']) : "";
        if ($email && $content) {
            $ssmg = new SSendmsg();
            $aDatamail = array('type' => 1, 'email' => $email, 'title' => $title, 'cont' => $content, 'userid' => $uid, 'nickname' => $nickname);
            if ($ssmg->sendMsg($aDatamail))
                return $this->ShowMsg("邮件发送成功");
            else
                return $this->ShowMsg("邮件发送失败");
        } else {
            return $this->ShowMsg("邮件发送失败，请输入邮件内容和标题。");
        }
    }

    /**
     * 以下是用户等级相关设置
     */
    public function pagegradeindex($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $page = (int) $urlparam ['page'] ? (int) $urlparam ['page'] : 1;
        $limit = 15;
        $gradeRule = new zbj_model_mb_graderule ();
        $gradeRule->setPage($page);
        $gradeRule->setLimit($limit);
        $gradeRule->setCount(true);
        $rulelist = $gradeRule->select(array());
        if ($rulelist->totalSize > $limit) {
            $this->tplvar ['pagebar'] = $this->PageBar($rulelist->totalSize, $limit, $page, $inPath, "style3", $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '');
        }
        $this->tplvar ['rulelist'] = $rulelist;
        return $this->render('user/grade/index.html', $this->tplvar);
    }

    public function pagegradeeditrule($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        if (count($_POST) == 0) {
            $rid = (int) $urlparam ['id'];
            if ($rid > 0) {
                $gradeRule = new zbj_model_mb_graderule ();
                $rule = $gradeRule->selectOne(array(
                            'ru_id' => $rid
                        ));
                $this->tplvar ['rule'] = $rule;
            }
            return $this->render('user/grade/edit.html', $this->tplvar);
        } else {
            $ruleid = (int) $_POST ['ruleid'];
            $gradeRule = new zbj_model_mb_graderule ();
            if ($ruleid > 0) {
                $rule = $gradeRule->selectOne(array(
                            'ru_id' => $ruleid
                        ));
                if (empty($rule)) {
                    return $this->printmsg('您要编辑的数据不存在，请刷新点确定后再试一下。', 1, null, '/user-gradeindex');
                }
            }
            $name = zbj_lib_BaseUtils::getStr($_POST ['name']);
            if (!trim($name)) {
                return $this->printmsg('请输入规则名称。', 0, 'name');
            }
            $num = (int) $_POST ['num'];
            if (!$num) {
                return $this->printmsg('请输入积分值。', 0, 'num');
            }
            $rate = (int) $_POST ['rate'];
            if ($rate <= 0) {
                return $this->printmsg('请输入频次。', 0, 'rate');
            }
            $cycle = zbj_lib_BaseUtils::getStr($_POST ['cycle']);
            if (!$cycle) {
                return $this->printmsg('请选择积分值。', 0, 'cycle');
            }
            $stauts = (int) $_POST ['stauts'];
            if (!in_array($stauts, array(
                        0,
                        1
                    ))) {
                return $this->printmsg('请选择状态。', 0, 'stauts');
            }

            $item = array(
                'name' => $name,
                'num' => $num,
                'rate' => $rate,
                'cycle' => $cycle,
                'stauts' => $stauts,
                'dateline' => $this->_time,
                'user_id' => $this->_userid,
                'nickname' => $this->_nickname
            );
            if ($ruleid) {
                $res = $gradeRule->update(array(
                            'ru_id' => $ruleid
                                ), $item);
            } else {
                $res = $gradeRule->insert($item);
            }
            if ($res) {
                return $this->printmsg('操作成功', 1, null, '/user-gradeindex');
            } else {
                return $this->printmsg('操作失败', 0);
            }
        }
    }

    public function pagegradeDelrule($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $rid = (int) $urlparam ['id'];
        $gradeRule = new zbj_model_mb_graderule($rid);
        if (count($gradeRule->getData()) == 0) {
            return $this->printmsg('您要删除的数据不存在，请刷新点确定后再试一下。', 1, null, '/user-gradeindex');
        }
        if ($gradeRule->del()) {
            return $this->printmsg('删除成功', '1', '', '/user/gradeindex');
        } else {
            return $this->printmsg('删除失败', 1);
        }
    }

    /**
     * 以下是用户身份认证相关的部分
     */
    /*
     * 身份认证列表
     */

    public function pageCertIndex($inPath) {

        $urlvalue = $this->getUrlParams($inPath);
        $condition = "1=1";

        $iPage = $urlvalue['page'] ? zbj_lib_BaseUtils::getStr($urlvalue['page']) : 1;              //当前页码
        $status = $_GET['status'] ? zbj_lib_BaseUtils::getStr($_GET['status']) : '0';          //认证状态
        $type = $_GET['type'] ? zbj_lib_BaseUtils::getStr($_GET['type']) : '';      //筛选类别
        $keywords = $_GET['key'] ? zbj_lib_BaseUtils::getStr($_GET['key']) : '';        //关键字
        $realtype = $_GET['realtype'] ? intval($_GET['realtype']) : 0;      //身份类型
        $start = $_GET ['start'];
        $end = $_GET ['end'];
        $start = str_replace(',', '-', $start);
        $this->tplvar['start'] = $start;
        $end = str_replace(',', '-', $end);
        $this->tplvar['end'] = $end;
        $dealstart = $_GET ['dealstart'];
        $dealend = $_GET ['dealend'];
        $dealstart = str_replace(',', '-', $dealstart);
        $this->tplvar['dealstart'] = $dealstart;
        $dealend = str_replace(',', '-', $dealend);
        $this->tplvar['dealend'] = $dealend;
        $order = intval($_GET ['order']);
        if ($order == 2) {
            $orderby = 'order by t1.check_id desc';
        } else {
            $orderby = '';
        }
        if(empty($_GET)){
            $condition .= " and t1.addtimeymd >= '2013-01-05'";
        }

        switch ($status) {
            case '0':
                $condition .= " and t1.status='0'";
                break;
            case '1':
                $condition .= " and t1.status='1'";
                break;
            case '2':
                $condition .= " and t1.status='2'";
                break;
            default:
                break;
        }
        if ($type == '' && $keywords) {
            return $this->printmsg('请选择类别');
        }
        if ($type !== '' && !$keywords) {
            return $this->printmsg("请输入搜索关键字");
        }
        if (is_numeric($type) && $keywords) {
            switch ($type) {
                case 1:
                    $condition .= " and t1.nickname='$keywords'";
                    break;
                case 2:
                    $condition .= " and t1.user_id=$keywords";
                    break;
                case 3:
                    $condition .= " and t1.truename='$keywords'";
                    break;
                case 4:
                    $condition .= " and t2.brandname='$keywords'";
                    break;
                default:
                    break;
            }
        }
        switch ($realtype) {
            case 1:
            case 2:
            case 5:
            case 6:
            case 7:
                $condition .= " and t1.realtype = $realtype";break;
            case 8:break;//所有
            default:$condition .= " and t1.realtype > 1";break;//默认非个人
        }
//if($this->_nickname == '黎盛斌'){
//    define('DEBUG', 1);
//}
		$allot_manager_id=zbj_lib_BaseUtils::getStr($_REQUEST['allot_manager_id'],'int');
		if($allot_manager_id){
			$condition.=" and t1.allot_manager_id={$allot_manager_id}";
		}
		if (!$type) {
			if (empty($start)) {
				$start = date('Y-m-d', strtotime('-15 day'));
			}
			if (empty($end)) {
				$end = date('Y-m-d');
			}
		}
        if (!empty($start) && empty($end)) {
            $condition .= " and t1.addtimeymd >= '$start'";
        } elseif (!empty($end) && empty($start)) {
            $condition .= " and t1.addtimeymd <= '$end'";
        } elseif (!empty($end) && !empty($start)) {
            if ($end < $start) {
                return $this->printmsg("时间选择不合理");
            }
            if (strtotime($end)-strtotime($start)>90*86400) {
            	return $this->printmsg("时间段不能大于3个月");
            }
            $condition .= " and t1.addtimeymd between '$start' and '$end'";
        }
        
        if (!empty($dealstart) && empty($dealend)) {
            $dealstart = strtotime($dealstart.'00:00:01');
            $condition .= " and t1.deal_time >= '$dealstart'";
        } elseif (!empty($dealend) && empty($dealstart)) {
            $dealend = strtotime($dealend.'23:59:59');
            $condition .= " and t1.deal_time <= '$dealend'";
        } elseif (!empty($dealend) && !empty($dealstart)) {
            if ($dealend < $dealstart) {
                return $this->printmsg("时间选择不合理");
            }
            $dealstart = strtotime($dealstart.'00:00:01');
            $dealend = strtotime($dealend.'23:59:59');
            $condition .= " and t1.deal_time >= '$dealstart' and t1.deal_time <= '$dealend'";
        }

        //受理人搜索

        $oReal = new zbj_model_mb_real();
        $limit = 10;
        $oReal->setPage($iPage);
        $oReal->setLimit($limit);
		if ($condition != "1=1")
			$oReal->setCount(true);
//		                    var_dump($condition);
//		                    define('DEBUG', 1);
        $leftjoin ['mb_info as t2'] = "t1.user_id = t2.user_id";
        $dbinfo = array('dbinfo'=>'co_member');
        $oRealObj = $oReal->_db->select('mb_real as t1', $condition, 't1.*,t2.brandname', '', $orderby, $leftjoin, $dbinfo);
        $aList = $oRealObj->items;
//        if($this->_nickname == '黎盛斌'){
//    var_dump($aList);
//}
        if (count($aList) > 0) {
            foreach ($aList as $key => $value) {
                $uids[] = $value['user_id'];
                $cids[] = $value['check_id'];
            }
            $uids = implode(',', $uids);
            $cids = implode(',', $cids);
        }
        if (count($aList) > 0) {
            $aBrand = $oReal->_db->select("mb_user_cert", "user_id IN ($uids) and type=16")->items; //昵称
            $aIntro = $oReal->_db->select("mb_user_cert", "user_id IN ($uids) and type=17")->items; //认证说明
            foreach ($aList as $key => $value) {
                $aList[$key] = $value;
                $uid = $value['user_id'];
                if (count($aBrand) > 0) {
                    foreach ($aBrand as $k => $v) {
                        if ($uid == $v['user_id']) {
                            $expand = unserialize($v['expand']);
                            $aList[$key]['oldbrand'] = $expand['old'];
                            $aList[$key]['newbrand'] = $expand['new'];
                            $aList[$key]['brandstatus'] = $expand['status'];
                        }
                    }
                }
                if (count($aIntro) > 0) {
                    foreach ($aIntro as $k => $v) {
                        if ($uid == $v['user_id']) {
                            $expand = unserialize($v['expand']);
                            $aList[$key]['oldIntro'] = $expand['old'];
                            $aList[$key]['newIntro'] = $expand['new'];
                            $aList[$key]['introstatus'] = $expand['status'];
                        }
                    }
                }
            }
        }

        //分页字符串
        if ($oRealObj->totalSize > $limit) {
            $sPageBar = $this->PageBar($oRealObj->totalSize, $limit, $iPage, $inPath, 'style2', "?" . http_build_query($_GET));
        }
        $this->tplvar['type'] = $type;
        $this->tplvar['key'] = $keywords;
        $this->tplvar['title'] = '用户管理-身份认证审核';
        $this->tplvar['status'] = $status;
        $this->tplvar['list'] = $aList;
        $this->tplvar['total'] = $oRealObj->totalSize;
        $this->tplvar['pnum'] = $this->tplvar['total'] > $limit ? $limit : $this->tplvar['total'];
        $this->tplvar['pagebar'] = $sPageBar;
        $this->tplvar['ipage'] = $iPage;
        $this->tplvar['cids'] = $cids;
        $this->tplvar['picdomain'] = zbj_lib_Constant::UPFILEURLOLD;
        $s_allot=new zbj_service_allot(9);
        $this->tplvar['managers'] = $s_allot->getusers();
//         print_r($s_allot->getusers());
        
        //        var_dump($this->tplvar);exit;
        return $this->render('user/cert/index.html', $this->tplvar);
    }

    /*
     * 修改认证状态
     */

    public function pageCertSetStatus() {

        //        var_dump($_REQUEST);exit;
        $iCid = intval($_REQUEST['cid']);        //对应记录ID
        $iType = intval($_REQUEST['type']);       //操作类型 1:拒绝 2:通过
        $aReason = $_REQUEST['reason'];       //原因
        if ($aReason) {
            $reason = $this->reasonReplace($aReason,1);
        }
        $otherReason = zbj_lib_BaseUtils::getStr($_REQUEST['other']);       //其他原因
        if ($otherReason) {
            $reason = $reason . ';' . $otherReason;
        }
//        define('DEBUG', 1);
        if (empty($iCid)) {
            return $this->printmsg('参数错误', 1, null);
        }
        $oReal = new zbj_model_mb_real();
        $aReal = $oReal->selectOne(array('check_id' => $iCid), '*');
        if (empty($aReal)) {
            return $this->printmsg('无相应记录', 1, null);
        }
        if ($aReal ['status'] == $iType) {
            return $this->printmsg('已处理', 1, null, '/user/certindex');
        }
        if ($aReal ['realtype'] == 1) {
            return $this->printmsg('不能操作个人身份认证', 1, null);
        }
        if ($iType == 1) {//拒绝
            try {
                $oReal->beginTransaction('mb');
                if (!$oReal->update(array('check_id' => $iCid), array('status' => '1', 'errormsg' => $reason, 'deal_time' => time(), 'deal_managerid' => $this->_userid, 'deal_managername' => $this->_nickname))) {
                    throw new Exception('real表状态更新失败');
                }
                $uid = $aReal['user_id'];
                if ($oReal->_db->update('mb_account', array('user_id' => $uid), array('realstatus' => 0)) === false) {
                    throw new Exception('account表状态更新失败');
                }
                $oReal->commit('mb');
            } catch (Exception $e) {
                $oReal->rollBack('mb');
                return $this->printmsg('更新失败：' . $e->getMessage(), 1, null);
            }
            if ($oReal->_db->selectone('mb_user_cert', "user_id=$uid and type IN (16,17)")) {
                $oReal->_db->update('mb_user_cert', "user_id=$uid and type IN (16,17)", array('status' => 2, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()), 'op_result' => "$reason")); //注意 mb_user_cert表status=1表示通过 2表示拒绝
            }
            //发送站内信
            $noticeTitle = "您提交的认证申请未通过！";
            switch ($aReal['realtype']) {
                case '2';
                    $typename = '企业';
                    break;
                case '5';
                    $typename = '政府';
                    break;
                case '6';
                    $typename = '学校';
                    break;
                case '7';
                    $typename = '媒体';
                    break;
            };
            $sNickname = $aReal['nickname'];
            //标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
            $aTmpfrom = $oReal->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
            if($aTmpfrom['from'] == 1){
                $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index-from-t5';
                $catid = 6;//T5是6，T4是8
            } else {
                $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index';
                $catid = 8;//T5是6，T4是8
            }
            $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的" . $typename . "身份认证申请由于<b>" . $reason . "</b>，未能通过审核。您可以<a href='" . $yanUrl . "' target='_blank'>点此重新提交</a>。<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;如有疑问，请致电客服热线：400 188 6666";
           
            $msgData = array(
                'type' => '3',
                't_userid' => $uid,
                't_nickname' => $sNickname,
                'title' => $noticeTitle,
                'cont' => $noticeContent,
                'cat_id' => $catid
            );
            $ssmg = new SSendmsg();
            $ssmg->sendMsg($msgData);

            $oUser = new zbj_service_user($uid);
            $mobile = $oUser->getAuthMobile();
            if ($mobile) {
                $msgContent = "尊敬的" . $sNickname . ":您提交的身份认证未能通过审核，请登录猪八戒网查看失败原因，并重新提交审核。【猪八戒网】";
                $smsData = array(
                    'type' => 2,
                    'mobile' => $mobile,
                    'cont' => $msgContent,
                    'userid' => $uid,
                    'nickname' => $sNickname,
                    'cat_id' => 8
                );
                $ssmg->sendMsg($smsData);
            }
            $s_allot=new zbj_service_allot(9);
            $s_allot->processed($iCid);
            return $this->printmsg('更新成功', 1, null, $_SERVER['HTTP_REFERER']);
        } else {//通过
            try {
                $oReal->beginTransaction('mb');       
                if ($aReal['realtype']==2){         
	                if ($oReal->selectOne(array('truename'=>$aReal['truename'],'status'=>2))){
	                	throw new Exception('该企业名称已被使用，不能使用该企业名称认证!');
	                }
                }
                if (!$oReal->update(array('check_id' => $iCid), array('status' => '2', 'deal_time' => time(), 'deal_managerid' => $this->_userid, 'deal_managername' => $this->_nickname,'errormsg'=>' '))) {
                    throw new Exception('real表状态更新失败');
                }
                $uid = $aReal['user_id'];
                if ($oReal->_db->update('mb_account', "user_id=$uid", 'realstatus=2') === false) {
                    throw new Exception('account表状态更新失败');
                }
                $oReal->commit('mb');
            } catch (Exception $e) {
                $oReal->rollBack('mb');
                return $this->printmsg('更新失败：' . $e->getMessage(), 1);
            }
            $aCert = $oReal->_db->select('mb_user_cert', "user_id=$uid and type IN (16,17)")->items; //16昵称  17认证说明
            if (count($aCert) > 0) {
                foreach ($aCert as $k => $v) {
                    $expand = unserialize($v['expand']);
                    if ($v['type'] == 16) {
                        $oReal->_db->update('mb_user_cert', "user_id=$uid and type=16", array('status' => 1, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()))); //注意 mb_user_cert表status=1表示通过 2表示拒绝
                        $brandname = $expand['new']; //昵称
                        $oReal->_db->update('mb_info', "user_id=$uid", "brandname='$brandname'");
                        $oReal->_db->update('mb_brand', "user_id=$uid", array('state' => 1, 'brandname' => $brandname));
                        //更新昵称缓存
                        $oCache = new zbj_lib_cache('memcache');
                        $cacheName = 'zbjcore.service.user.getBrand.brandName_t5_' . $uid;
                        $oCache->set($cacheName, array('brand' => $brandname, 'nickname' => $v['nickname']), 1800);
                        //更新搜索引擎
                        $oSrvUser = new zbj_service_user($uid);
                        $oSrvUser->addSearchQueue();
                    } else {
                        $expand['passed'] = $expand['new'];
                        $oReal->_db->update('mb_user_cert', "user_id=$uid and type=17", array('status' => 1, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()), 'expand' => serialize($expand))); //注意 mb_user_cert表status=1表示通过 2表示拒绝
                    }
                }
            }
            //发送站内信
            $noticeTitle = "恭喜！您提交的认证申请审核通过！";
            switch ($aReal['realtype']) {
                case '2';
                    $typename = '企业';
                    break;
                case '5';
                    $typename = '政府';
                    break;
                case '6';
                    $typename = '学校';
                    break;
                case '7';
                    $typename = '媒体';
                    break;
            };
            $sNickname = $aReal['nickname'];
            //标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
            $aTmpfrom = $oReal->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
            if($aTmpfrom['from'] == 1){
                $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index-from-t5';
                $catid = 6;//T5是6，T4是8
            } else {
                $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index';
                $catid = 8;//T5是6，T4是8
            }
            $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;恭喜，您提交的" . $typename . "身份认证已审核通过。您可以<a href='" . $yanUrl . "' target='_blank'>点此查看</a>。";
            $msgData = array(
                'type' => '3',
                't_userid' => $uid,
                't_nickname' => $sNickname,
                'title' => $noticeTitle,
                'cont' => $noticeContent,
                'cat_id' => $catid
            );
            $ssmg = new SSendmsg();
            $ssmg->sendMsg($msgData);
            $s_allot=new zbj_service_allot(9);
            $s_allot->processed($iCid);
            return $this->printmsg('更新成功', 1, null,  $_SERVER['HTTP_REFERER']);
        }
    }

    /*
     * 批量修改认证状态
     */

    public function pageCertSetStatusAll() {
//        return $this->printmsg('cids：' . $_REQUEST['cids'] . '，type：' . $_REQUEST['type'], 1, null, '/certification/index');
//        exit;
        $sCids = zbj_lib_BaseUtils::getStr($_REQUEST['cids']);        //对应记录ID
        if (empty($sCids)) {
            return $this->printmsg('参数错误', 1, null, '/user/certindex');
        }
        $iCids = explode(',', $sCids);
        $iCount = count($iCids);
        $iType = intval($_REQUEST['type']);       //操作类型 1:拒绝 2:通过

        $aReason = $_REQUEST['reason'];       //原因
        if ($aReason) {
            $reason = $this->reasonReplace($aReason,1);
        }
        $otherReason = zbj_lib_BaseUtils::getStr($_REQUEST['other']);       //其他原因
        if ($otherReason) {
            $reason = $reason . ';' . $otherReason;
        }

        $ssmg = new SSendmsg();
        $oReal = new zbj_model_mb_real();
        $oUser = new zbj_service_user();
        $s_allot=new zbj_service_allot(9);
        if ($iType == 1) {//拒绝
            $iSucNum = 0;
            foreach ($iCids as $k => $value) {
                $iCid = $value;
                try {
                    $oReal->beginTransaction('mb');
                    $aReal = $oReal->selectone(array('check_id' => $iCid), 'user_id,status');
                    if (empty($aReal) || $aReal['status'] == $iType) {
                        throw new Exception('无相应记录或状态已更新');
                    } else {
                        if (!$oReal->update(array('check_id' => $iCid), array('status' => '1', 'errormsg' => $reason, 'deal_time' => time(), 'deal_managerid' => $this->_userid, 'deal_managername' => $this->_nickname))) {
                            throw new Exception('real表状态更新失败');
                        }
                        $uid = $aReal['user_id'];
                        if ($oReal->_db->update('mb_account', "user_id=$uid", 'realstatus=0') === false) {
                            throw new Exception('account表状态更新失败');
                        }
                        $s_allot->processed($iCid);
                        $iSucNum++;
                        $oReal->commit('mb');
                    }
                } catch (Exception $e) {
                    $oReal->rollBack('mb');
                }

                if ($oReal->_db->selectone('mb_user_cert', "user_id=$uid and type IN (16,17)")) {
                    $oReal->_db->update('mb_user_cert', "user_id=$uid and type IN (16,17)", array('status' => 2, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()), 'op_result' => "$reason")); //注意 mb_user_cert表status=1表示通过 2表示拒绝
                }
                //发送站内信
                $noticeTitle = "您提交的认证申请未通过！";
                switch ($aReal['realtype']) {
                    case '2';
                        $typename = '企业';
                        break;
                    case '5';
                        $typename = '政府';
                        break;
                    case '6';
                        $typename = '学校';
                        break;
                    case '7';
                        $typename = '媒体';
                        break;
                };
                $sNickname = $aReal['nickname'];
                //标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
                $aTmpfrom = $oReal->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
                if($aTmpfrom['from'] == 1){
                    $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index-from-t5';
                    $catid = 6;//T5是6，T4是8
                } else {
                    $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index';
                    $catid = 8;//T5是6，T4是8
                }
                $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的" . $typename . "身份认证申请由于<b>" . $reason . "</b>，未能通过审核。您可以<a href='" . $yanUrl . "' target='_blank'>点此重新提交</a>。<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;如有疑问，请致电客服热线：400 188 6666";
                $msgData = array(
                    'type' => '3',
                    't_userid' => $uid,
                    't_nickname' => $sNickname,
                    'title' => $noticeTitle,
                    'cont' => $noticeContent,
                    'cat_id' => $catid
                );
                $ssmg->sendMsg($msgData);
                //mobile
                $oUser->setId($uid);
                $mobile = $oUser->getAuthMobile();
                if ($mobile) {
                    $msgContent = "尊敬的" . $sNickname . ":您提交的身份认证未能通过审核，请登录猪八戒网查看失败原因，并重新提交审核。【猪八戒网】";
                    $smsData = array(
                        'type' => 2,
                        'mobile' => $mobile,
                        'cont' => $msgContent,
                        'userid' => $uid,
                        'nickname' => $sNickname,
                        'cat_id' => 8
                    );
                    $ssmg->sendMsg($smsData);
                }
                unset($aReal);
            }
            $iFailNum = $iCount - $iSucNum;
            return $this->printmsg('共操作' . $iCount . '个，成功' . $iSucNum . '个，失败' . $iFailNum . '个', 1, null,  $_SERVER['HTTP_REFERER']);
        } else {//通过
            $iSucNum = 0;
            $oCache = new zbj_lib_cache('memcache');
            foreach ($iCids as $k => $value) {
                $iCid = $value;
                try {
                    $oReal->beginTransaction('mb');
                    $aReal = $oReal->selectone(array('check_id' => $iCid), 'user_id,status');
                    if (empty($aReal) || $aReal['status'] == $iType) {
                        throw new Exception('无相应记录或状态已更新');
                    } else {
                        if (!$oReal->update(array('check_id' => $iCid), array('status' => '2', 'deal_time' => time(), 'deal_managerid' => $this->_userid, 'deal_managername' => $this->_nickname))) {
                            throw new Exception('real表状态更新失败');
                        }
                        $uid = $aReal['user_id'];
                        if ($oReal->_db->update('mb_account', "user_id=$uid", 'realstatus=2') === false) {
                            throw new Exception('account表状态更新失败');
                        }
                        $iSucNum++;
                        $oReal->commit('mb');
                    }
                } catch (Exception $e) {
                    $oReal->rollBack('mb');
                }
                $aCert = $oReal->_db->select('mb_user_cert', "user_id=$uid and type IN (16,17)")->items; //16昵称  17认证说明
                if (count($aCert) > 0) {
                    foreach ($aCert as $k => $v) {
                        $expand = unserialize($v['expand']);
                        if ($v['type'] == 16) {
                            $oReal->_db->update('mb_user_cert', "user_id=$uid and type=16", array('status' => 1, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()))); //注意 mb_user_cert表status=1表示通过 2表示拒绝
                            $brandname = $expand['new']; //昵称
                            $oReal->_db->update('mb_info', "user_id=$uid", "brandname='$brandname'");
                            $oReal->_db->update('mb_brand', "user_id=$uid", array('state' => 1, 'brandname' => $brandname));
                            //更新昵称缓存
                            $cacheName = 'zbjcore.service.user.getBrand.brandName_t5_' . $uid;
                            $oCache->set($cacheName, array('brand' => $brandname, 'nickname' => $v['nickname']), 1800);
                            //更新搜索引擎
                            $oUser->setId($uid);
                            $oUser->addSearchQueue();
                        } else {
                            $expand['passed'] = $expand['new'];
                            $oReal->_db->update('mb_user_cert', "user_id=$uid and type=17", array('status' => 1, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()), 'expand' => serialize($expand))); //注意 mb_user_cert表status=1表示通过 2表示拒绝
                        }
                    }
                }
                //发送站内信
                $noticeTitle = "恭喜！您提交的认证申请审核通过！";
                switch ($aReal['realtype']) {
                    case '2';
                        $typename = '企业';
                        break;
                    case '5';
                        $typename = '政府';
                        break;
                    case '6';
                        $typename = '学校';
                        break;
                    case '7';
                        $typename = '媒体';
                        break;
                };
                $sNickname = $aReal['nickname'];
                //标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
                $aTmpfrom = $oReal->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
                if($aTmpfrom['from'] == 1){
                    $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index-from-t5';
                    $catid = 6;//T5是6，T4是8
                } else {
                    $yanUrl = zbj_lib_Constant::YAN_URL . '/certification/index';
                    $catid = 8;//T5是6，T4是8
                }
                $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;恭喜，您提交的" . $typename . "身份认证已审核通过。您可以<a href='" . $yanUrl . "' target='_blank'>点此查看</a>。";
                $msgData = array(
                    'type' => '3',
                    't_userid' => $uid,
                    't_nickname' => $sNickname,
                    'title' => $noticeTitle,
                    'cont' => $noticeContent,
                    'cat_id' => $catid
                );
                $ssmg->sendMsg($msgData);
                $s_allot->processed($iCid);
                unset($aCert);
                unset($aReal);
            }
            $iFailNum = $iCount - $iSucNum;
            return $this->printmsg('共操作' . $iCount . '个，成功' . $iSucNum . '个，失败' . $iFailNum . '个', 1, null,  $_SERVER['HTTP_REFERER']);
        }
    }

    /*
     * 批量删除请求表单
     */

    public function pageCertRejAll() {

        $this->tplvar['rejtype'] = intval($_GET['rejtype']);//1身份认证拒绝 2资料审核拒绝
        if($this->tplvar['rejtype'] == 1){
            $this->tplvar['cids'] = zbj_lib_BaseUtils::getStr($_GET['cids']);
        }else{
            $this->tplvar['vids'] = zbj_lib_BaseUtils::getStr($_GET['cids']);
            $this->tplvar['nav'] = zbj_lib_BaseUtils::getStr($_GET['nav']);
        }
        return $this->render('user/cert/certrejall.html', $this->tplvar);
    }

    /*
     * 用户管理-用户资料审核列表
     */

    public function pageCertUserCert($inPath) {

        $urlvalue = $this->getUrlParams($inPath);

        //$nav = $urlvalue['nav'] ? 0 : 2; //带nav参数表示未通过身份认证，不带表示已通过身份认证，默认已通过，即不带nav参
        $nav = zbj_lib_BaseUtils::getStr($_GET['nav']);
        $iPage = $urlvalue['page'] ? zbj_lib_BaseUtils::getStr($urlvalue['page']) : 1;              //当前页码
        $status = $_GET['status'] ? zbj_lib_BaseUtils::getStr($_GET['status']) : '0';          //认证状态 1 通过 2拒绝 0待审核
        $allot_manager_id = $_GET['allot_manager_id'] ? zbj_lib_BaseUtils::getStr($_GET['allot_manager_id']) : '0';          //分配的客服
        $type = $_GET['type'] ? zbj_lib_BaseUtils::getStr($_GET['type']) : '';      //筛选类别
        $keywords = $_GET['key'] ? zbj_lib_BaseUtils::getStr($_GET['key']) : '';        //关键字
        $ability = $_GET['ability'] ? intval($_GET['ability']) : 0;        //能力值
        $certtype = $_GET['certtype'] ? zbj_lib_BaseUtils::getStr($_GET['certtype']) : 'all';      //审核类型 16 昵称 1个人简介 17认证说明 头像？
        $level = intval($_REQUEST['level']);
        $order = $_GET ['order']?intval($_GET ['order']):2;
        $start = $_GET ['start'];
        if (empty($start))
        	$start = date('Y-m-d', strtotime('-7 day'));
        $end = $_GET ['end'];
        if (empty($end))
        	$end = date('Y-m-d');
        $start = str_replace(',', '-', $start);
        $this->tplvar['start'] = $start;
        $end = str_replace(',', '-', $end);
        $this->tplvar['end'] = $end;
        if ($end < $start) {
            return $this->printmsg("时间选择不合理");
        }
        if (strtotime($end)-strtotime($start)>90*86400) {
            return $this->printmsg("时间段不能大于3个月");
        }
        $condition = "t1.dateymd >= '{$start}' and t1.dateymd <= '{$end}'";

        if ($type == 'all' && $keywords) {
            return $this->printmsg("请选择类别");
        }
        if ($type !== '' && !$keywords) {
            return $this->printmsg("请输入搜索关键字");
        }
        if ($type != 'all' && $keywords) {
            switch ($type) {
                case 1:
                    $con = "nickname='{$keywords}'";
                    break;
                case 2:
                    $con = "user_id={$keywords}";
                    break;
                case 3:
                    $con = "brandname='{$keywords}'";
                    break;
                default:
                    break;
            }
            $oModel = new zbj_model_mb_info();
            $info = $oModel->selectOne($con);
            if ($info) {
                $condition = "t1.user_id = {$info['user_id']}";
            }
        }
        if ($order == 2) {
            $orderby = 'order by verify_id desc';
        } else {
            $orderby = '';
        }
        
        switch ($certtype) {
            case 'all':
                $condition .= " and t1.type IN (1,16,17,20)";
                break;
            case 1:
                $condition .= " and t1.type=1";//个人简介
                break;
            case 16:
                $condition .= " and t1.type=16";//昵称
                break;
            case 17:
                $condition .= " and t1.type=17";//认证说明
                break;
            case 20://头像？
                $condition .= " and t1.type=20";
                break;
            default:
                $condition .= " and t1.type IN (1,16,17,20)";
                break;
        }

        switch ($status) {
            case '0':
                $condition .= " and t1.status=0";
                break;
            case '1':
                $condition .= " and t1.status=1";
                break;
            case '2':
                $condition .= " and t1.status=2";
                break;
            default:
                break;
        }

        if($ability > 0){
            switch ($ability) {
                case 1:
                    $condition .= " and t2.ability between 1 and 300";
                    break;
                case 2:
                    $condition .= " and t2.ability between 301 and 1000";
                    break;
                case 3:
                    $condition .= " and t2.ability between 1001 and 2000";
                    break;
                case 4:
                    $condition .= " and t2.ability between 2001 and 5000";
                    break;
                case 5:
                    $condition .= " and t2.ability between 5001 and 10000";
                    break;
                case 6:
                    $condition .= " and t2.ability between 10001 and 1000000";
                    break;
                case 7:
                    $condition .= " and t2.ability > 1000000";
                    break;
                default:
                    break;
            }
        }

        switch ($nav) {
            case 1:
                $condition .=" and t3.realstatus=2";
                break;
            case 2:
                $condition .=" and t3.realstatus<2";
                break;
            default:
                break;
        }

        if($_REQUEST['level']!=''){
            $condition.=' and t3.goldstatus='.$level;
        }
        if($allot_manager_id){
            $condition .=" and t1.allot_manager_id=".$allot_manager_id;
        }

        //受理人搜索
        if($this->_nickname == '黎盛斌'){
        var_dump($condition);
        define('DEBUG', 1);
        }
        $oModel = new zbj_model_mb_info();
        $limit = 30;
        $oModel->setPage($iPage);
        $oModel->setLimit($limit);
        $oModel->setCount(true);
        $dbinfo = array('dbinfo'=>'co_member');
        $leftjoin ['mb_account as t3'] = "t1.user_id = t3.user_id";
        $leftjoin ['mb_info as t2'] = "t1.user_id = t2.user_id";

        $item = 't1.*,t2.realtype,t2.truename,t2.goldstarttime,t2.goldtime,t3.realstatus,t3.goldstatus';
        // $oCerobj = $oModel->_db->select("mb_user_cert as t1", $condition, $item, '', $orderby, $leftjoin, $dbinfo);
        $tselect = "(select t.* from zhubajie_member.mb_user_cert t use index (user_id) where ".str_replace("t1","t",$condition).")";
        $oCerobj = $oModel->_db->select($tselect." t1", '', $item, '', $orderby, $leftjoin, $dbinfo);
        $aList = $oCerobj->items;
        $iTotal = $oCerobj->totalSize;
        if(count($aList) > 0){
            $oUser = new zbj_service_user();
            $gdname = array(0=>'普通',1=>'银牌',2=>'金牌',3=>'钻石',4=>'皇冠');
            foreach($aList as $key => $value){
                $aList[$key]['vip']['name']=$gdname[$value['goldstatus']];
                $aList[$key]['vip']['lastbuytime']=$value['goldstarttime'];
                $aList[$key]['vip']['expire']=$value['goldtime'];
                $expand = unserialize($value['expand']);
                if($value['type'] == 1){//简介
                    $selfinfo = $expand['key'] ? $expand['key'] : $expand['info']['selfinfo'];
                    $aList[$key]['new'] = lib_BaseUtils::shield_keywords($selfinfo);
                }elseif($value['type'] == 20){
                    if($expand['big']){
                        $aList[$key]['fromt5'] = 1;//T5后审
                        $aList[$key]['picurl'] = $expand['big'];
                    }else{//T4后审
                        $aList[$key]['fromt5'] = 0;
                        $aList[$key]['picurl'] = $expand['cut'] ? $expand['cuted'] : $expand['img'];
                    }
                }else{
                    $aList[$key]['old'] = $expand['old'];
                    $aList[$key]['new'] = lib_BaseUtils::shield_keywords($expand['new']);
                }
            }
        }
        
//        var_dump($aList);
        //分页字符串
        if ($iTotal > $limit) {
            $sPageBar = $this->PageBar($iTotal, $limit, $iPage, $inPath, 'style2', '?' . http_build_query($_GET));
        }

        $this->tplvar['type'] = $type;
        $this->tplvar['key'] = $keywords;
        $this->tplvar['title'] = '用户管理-用户资料审核';
        $this->tplvar['status'] = $status;
        $this->tplvar['list'] = $aList;
        $this->tplvar['total'] = $iTotal;
        $this->tplvar['pnum'] = $iTotal > $limit ? $limit : $iTotal;
        $this->tplvar['pagebar'] = $sPageBar;
        $this->tplvar['ipage'] = $iPage;
        $this->tplvar['certtype'] = $certtype;
        $this->tplvar['nav'] = $nav;
        $this->tplvar['picdomain'] = zbj_lib_Constant::UPFILEURLOLD;
        $s_allot=new zbj_service_allot(14);
        $this->tplvar['managers'] = $s_allot->getusers();
        echo $this->render('user/cert/usercert.html', $this->tplvar);
    }

    /*
     * 资料审核操作
     */

    public function pageCertSetCert($inPath) {

        $iVid = intval($_REQUEST['vid']);        //对应记录ID
        $iType = intval($_REQUEST['type']);       //操作类型 1:通过 2:拒绝
        $sReasons = $_REQUEST['reason'];       //原因
        $nav = intval($_REQUEST['nav']);

        if (empty($iVid)) {
            return $this->alert(array('state' => 0, 'msg' => '参数错误'), 1);
        }
        $oCert = new zbj_model_mb_usercert();
        $aCert = $oCert->selectOne(array('verify_id' => $iVid), '*');
        if (empty($aCert)) {
            return $this->alert(array('state' => 0, 'msg' => '无相应记录'), 1);
        }
        if ($aCert ['status'] == $iType) {
            return $this->alert(array('state' => 1, 'msg' => '已处理'), 1);
        }
//if($this->_nickname == '黎盛斌')       define('DEBUG', 1);
        if ($iType == 1) {//通过
            $expand = unserialize($aCert['expand']);
            $aData = array(
                'status' => 1,
                'opdateline' => time(),
                'opdateymd' => date('Y-m-d', time()),
                'cp_user' => $this->_nickname,
            	'manager_id' => $this->_userid
            );
            if ($aCert['type'] == 17) {
                $expand['passed'] = $expand['new'];
                $aData['expand'] = serialize($expand);
            }
            $aRes = $oCert->update(array('verify_id' => $iVid), $aData);
            if ($aRes == false) {
                $this->alert(array('state' => 0, 'msg' => '更新失败'), 1);
            } else {
                $uid = $aCert['user_id'];
                $oUser = new zbj_service_user($uid);
                $oMdlInfo = new zbj_model_mb_info();
                switch ($aCert['type']) {
                    case 1:
                        $typename = '简介';
                        $newselfinfo = $expand['key'];
                        $aInfo = $oMdlInfo->selectone("user_id=$uid",'selfinfo');
                        if($aInfo['selfinfo'] != $newselfinfo && $newselfinfo){//驳回后的再通过将简介更新为新的简介
                            $oMdlInfo->update("user_id=$uid", array('selfinfo' => "$newselfinfo"));//未通过改成老的简介
                        }
                        break;
                    case 16:
                        $typename = '昵称';
                        $brandname = $expand['new']; //昵称
                        $oMdlInfo->update("user_id=$uid", "brandname='$brandname'");
                        $oMdlBrand = new model_mb_brand();
                        $oMdlBrand->update("user_id=$uid", array('state' => 1, 'brandname' => $brandname));
                        //更新昵称缓存
                        $oCache = new zbj_lib_cache('memcache');
                        $cacheName = 'zbjcore.service.user.getBrand.brandName_t5_' . $uid;
                        $oCache->set($cacheName, array('brand' => $brandname, 'nickname' => $aCert['nickname']), 1800);
                        //更新搜索引擎
                        $oUser->addSearchQueue();
                        break;
                    case 17:
                        $typename = '认证说明';break;
                    case 20:
                        $typename = '头像';
                        if(empty($expand['big'])){//来自T4，因为后审，没有生成正式目录的大中小三张图片
                            $cut = $expand ['cuted'] ? false : $expand ['cut'];
                            $uid = abs ( intval ( $uid ) );
                            $uid = sprintf ( "%09d", $uid );
                            $dir1 = substr ( $uid, 0, 3 );
                            $dir2 = substr ( $uid, 3, 2 );
                            $dir3 = substr ( $uid, 5, 2 );
                            $realpath = $dir1 . '/' . $dir2 . '/' . $dir3 . '/';
                            $accepted = 'user_avat_new/';
                            $filename = "_avatar_" . substr ( $uid, - 2 );
                            $file = array ('name' => 'avator', 'tmp_name' => 'avator_tmp', 'type' => 'avator' );
                            $size = array ('size[0]' => '48x48', 'size[1]' => '80x80', 'size[2]' => '200x200' );
                            $rs = $this->CutRemoteFile($file, $filename, $accepted, $realpath, '', $size, 0, $expand ['img'], $cut);
                            $expand ['cuted'] = $accepted . $realpath . '200x200' . $filename . '.jpg';
                            $expand ['small'] = $accepted . $realpath . '48x48' . $filename . '.jpg';
                            $expand ['middle'] = $accepted . $realpath . 'small' . $filename . '.jpg'; //80x80
                            $expand ['big'] = $accepted . $realpath . '200x200' . $filename . '.jpg';
                            $aCDate ['expand'] = serialize($expand);
                            if ($rs['state'] != 1) {
                                $aCDate['status'] = 0;
                                $oCert->update(array('verify_id' => $iVid), $aCDate);
                                return $this->alert(array('state' =>0, 'msg' => '网络繁忙导致图片裁剪失败! 请重试提交'), 1);
                            }else{
                                $oCert->update(array('verify_id' => $iVid), $aCDate);
                            }
                        }
                        break;
                    default:
                        break;
                }
                if ($oUser->get('realstatus') && in_array($aCert['type'],array(16,17))) {
                    //昵称和认证说明标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
                    $aTmpfrom = $oCert->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
                    $aUrl = $aTmpfrom['from'] == 1 ? zbj_lib_Constant::YAN_URL . '/certification/index-from-t5' : zbj_lib_Constant::YAN_URL . '/certification/index';
                } elseif($aCert['type'] == 20) {
                    $aUrl = zbj_lib_Constant::UC_URL . '/mydata/photo';
                } else{
                    $aUrl = zbj_lib_Constant::UC_URL . '/mydata/baseinfo';
                }
                //发送站内信
                $noticeTitle = "恭喜！您提交的认证申请审核通过！";
                $sNickname = $aCert['nickname'];
                $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;恭喜，您提交的" . $typename . "修改申请已审核通过。您可以<a href='" . $aUrl . "' target='_blank'>点此查看</a>。";
                $msgData = array(
                    'type' => '3',
                    't_userid' => $uid,
                    't_nickname' => $sNickname,
                    'title' => $noticeTitle,
                    'cont' => $noticeContent,
                    'cat_id' => 6
                );
                $ssmg = new SSendmsg();
                $ssmg->sendMsg($msgData);
                $sallot = new zbj_service_allot(14);
                $sallot->processed($iVid);
                return $this->alert(array('state' =>1, 'msg' => '更新成功'), 1);
            }
        } else {
            if ($sReasons) {
                $aReason = explode(',',$sReasons);
                $reason = $this->reasonReplace($aReason, 2);
            }
            $otherReason = zbj_lib_BaseUtils::getStr($_REQUEST['other']);       //其他原因
            if ($otherReason) {
                $reason = $reason ? $reason . ';' . $otherReason : $otherReason;
            }
            $aRes = $oCert->update(array('verify_id' => $iVid), array('status' => 2, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()), 'op_result' => "$reason",'cp_user' => $this->_nickname,'manager_id' => $this->_userid));
            if ($aRes == false) {
                $this->alert(array('state' =>0, 'msg' => '更新失败'), 1);
            } else {
                $uid = $aCert['user_id'];
                $oUser = new zbj_service_user($uid);
                $oMdlInfo = new zbj_model_mb_info();
                switch($aCert['type']){
                    case 1:
                        $typename = '简介';
                        $expand = unserialize($aCert['expand']);
                        $oldselfinfo = $expand['oldinfo']['selfinfo'];
                        $oMdlInfo->update("user_id=$uid", array('selfinfo' => ""));//未通过改成老的简介
                        break;
                    case 16:
                        $typename = '昵称';
                        //昵称拒绝，对于未进行身份认证的用户，昵称变为用户名
                        $realstatus = intval($_REQUEST['nav']);
                        if (0 == $realstatus) {
                            $brandname = $aCert['nickname'];
                            $oMdlInfo->update("user_id=$uid", "brandname='$brandname'");
                        } else {
                        	$expand = unserialize($aCert['expand']);
                        	$brandname = $expand['old']; //昵称
                        	$oMdlInfo->update("user_id=$uid", "brandname='$brandname'");
                        	$oMdlBrand = new model_mb_brand();
                        	$oMdlBrand->update("user_id=$uid", array('state' => 1, 'brandname' => $brandname));
                        }
                        //更新昵称缓存
                        $oCache = new zbj_lib_cache('memcache');
                        $cacheName = 'zbjcore.service.user.getBrand.brandName_t5_' . $uid;
                        $oCache->set($cacheName, array('brand' => $brandname, 'nickname' => $aCert['nickname']), 1800);
                        //更新搜索引擎
                        $oUser->addSearchQueue();
                        break;
                    case 17:
                        $typename = '认证说明';
                        break;
                    case 20:
                        $typename = '头像';
                        $expand = unserialize($aCert['expand']);
                        $sImg = $expand['img'];
                        //删除头像图片
                        $accepted = zbj_lib_Constant::UPFILEURLOLD;  // 'tempdir/user_avat_new/'   2013版默认移动到正式目录
                        $filename = substr($sImg, 32, 10);
                        $img = $expand['img'];
                        $img = substr($img,8);
                        $img = $accepted . $img;
                        $small = $accepted .$expand['small'];
                        $middle = $accepted . $expand['middle']; //80x80
                        $big = $accepted . $expand['big'];
//                        if($this->_nickname == '黎盛斌')                            var_dump(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.$small.'&code='.md5($small.zbj_lib_Constant::DEL_FACE_KEY));
                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($img).'&code='.md5($img.zbj_lib_Constant::DEL_FACE_KEY));
                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($small).'&code='.md5($small.zbj_lib_Constant::DEL_FACE_KEY));
                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($middle).'&code='.md5($middle.zbj_lib_Constant::DEL_FACE_KEY));
                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($big).'&code='.md5($big.zbj_lib_Constant::DEL_FACE_KEY));
//                        @file_get_contents(lib_Constant::FACE_URL.'/upload.php?a=remove&uid='.$uid.'&code='.md5($uid.$this->del_key));

                        $this->del_upcloud_resource($uid);
                        break;
                }
                if ($oUser->get('realstatus') && in_array($aCert['type'],array(16,17))) {
                    //昵称和认证说明标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
                    $aTmpfrom = $oCert->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
                    $aUrl = $aTmpfrom['from'] == 1 ? zbj_lib_Constant::YAN_URL . '/certification/index-from-t5' : zbj_lib_Constant::YAN_URL . '/certification/index';
                } elseif($aCert['type'] == 20) {
                    $aUrl = zbj_lib_Constant::UC_URL . '/mydata/photo';
                } else {
                    $aUrl = zbj_lib_Constant::UC_URL . '/mydata/baseinfo';
                }
                //发送站内信
                $noticeTitle = "您提交的认证申请未通过！";
                $sNickname = $aCert['nickname'];
                $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的" . $typename . "修改申请由于<b>" . $reason . "</b>，未能通过审核。您可以<a href='" . $aUrl . "' target='_blank'>点此重新提交</a>。<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;如有疑问，请致电客服热线：400 188 6666";
                $msgData = array(
                    'type' => '3',
                    't_userid' => $uid,
                    't_nickname' => $sNickname,
                    'title' => $noticeTitle,
                    'cont' => $noticeContent,
                    'cat_id' => 6
                );
                $ssmg = new SSendmsg();
                $ssmg->sendMsg($msgData);
                $backurl = $nav == 0 ? '/user/certusercert-nav-1':'/user/certusercert';
                $sallot = new zbj_service_allot(14);
                $sallot->processed($iVid);
                return $this->alert(array('state' =>1, 'msg' => '更新成功'), 1);
            }
        }
    }

    /*
     * 批量资料审核操作
     */

    public function pageCertSetCertAll($inPath) {

        $_POST = zbj_lib_BaseUtils::saddslashes($_POST);
        $accrej = $_POST ['accrej'];
        if (empty($accrej)) {
            return $this->alert(array('state' =>0, 'msg' => '请至少选择一个进行操作'), 1);
        }
        if(is_array($accrej)){
            $iCount = count($accrej);
            $iSucNum = 0;
        	$iFailNum = 0;
            $oCert = new zbj_model_mb_usercert();
            $oMdlInfo = new zbj_model_mb_info();
            $oMdlBrand = new model_mb_brand();
            $oUser = new zbj_service_user();
            $ssmg = new SSendmsg();
            $oCache = new zbj_lib_cache('memcache');
            foreach ($accrej as $k => $value) {
                $all[$k] = explode(',', $value);
                $iVid = $all[$k][0];
                $uid = $all[$k][1];
                $iType = $all[$k][2];
                $aCert = $oCert->selectone(array('verify_id' => $iVid), '*');
                if (empty($aCert) || $aCert['status'] == $iType) {//无对应记录或已更新
                    continue;
                }
                if ($iType == 1) {//通过
                    $expand = unserialize($aCert['expand']);
                    $aData = array(
                        'status' => 1,
                        'opdateline' => time(),
                        'opdateymd' => date('Y-m-d', time()),
                        'cp_user' => $this->_nickname,
                    	'manager_id' => $this->_userid
                    );
                    if ($aCert['type'] == 17) {
                        $expand['passed'] = $expand['new'];
                        $aData['expand'] = serialize($expand);
                    }
                    $expand['passed'] = $expand['new'];
                    if ($oCert->update(array('verify_id' => $iVid), $aData)) {
                        $iSucNum++;
                        $oUser->setId($uid);
                        switch ($aCert['type']) {
                            case 1:
                                $typename = '简介';
                                $expand = unserialize($aCert['expand']);
                                $newselfinfo = $expand['key'];
                                $aInfo = $oMdlInfo->selectone("user_id=$uid",'selfinfo');
                                if($aInfo['selfinfo'] != $newselfinfo && $newselfinfo){//驳回后的再通过将简介更新为新的简介
                                    $oMdlInfo->update("user_id=$uid", array('selfinfo' => "$newselfinfo"));//未通过改成老的简介
                                }
                                break;
                            case 16:
                                $typename = '昵称';
                                $brandname = $expand['new']; //昵称
                                $oMdlInfo->update("user_id=$uid", "brandname='$brandname'");
                                $oMdlBrand->update("user_id=$uid", array('state' => 1, 'brandname' => $brandname));
                                //更新昵称缓存
                                $cacheName = 'zbjcore.service.user.getBrand.brandName_t5_' . $uid;
                                $oCache->set($cacheName, array('brand' => $brandname, 'nickname' => $aCert['nickname']), 1800);
                                //更新搜索引擎
                                $oUser->addSearchQueue();break;
                            case 17:
                                $typename = '认证说明';break;
                            case 20:
                                $typename = '头像';
                                if(empty($expand['big'])){//来自T4，因为后审，没有生成正式目录的大中小三张图片
                                    $cut = $expand ['cuted'] ? false : $expand ['cut'];
                                    $uid = abs ( intval ( $uid ) );
                                    $uid = sprintf ( "%09d", $uid );
                                    $dir1 = substr ( $uid, 0, 3 );
                                    $dir2 = substr ( $uid, 3, 2 );
                                    $dir3 = substr ( $uid, 5, 2 );
                                    $realpath = $dir1 . '/' . $dir2 . '/' . $dir3 . '/';
                                    $accepted = 'user_avat_new/';
                                    $filename = "_avatar_" . substr ( $uid, - 2 );
                                    $file = array ('name' => 'avator', 'tmp_name' => 'avator_tmp', 'type' => 'avator' );
                                    $size = array ('size[0]' => '48x48', 'size[1]' => '80x80', 'size[2]' => '200x200' );
                                    $rs = $this->CutRemoteFile($file, $filename, $accepted, $realpath, '', $size, 0, $expand ['img'], $cut);
                                    $expand ['cuted'] = $accepted . $realpath . '200x200' . $filename . '.jpg';
                                    $expand ['small'] = $accepted . $realpath . '48x48' . $filename . '.jpg';
                                    $expand ['middle'] = $accepted . $realpath . 'small' . $filename . '.jpg'; //80x80
                                    $expand ['big'] = $accepted . $realpath . '200x200' . $filename . '.jpg';
                                    $aCDate ['expand'] = serialize($expand);
                                    if ($rs['state'] != 1) {
                                        $aCDate['status'] = 0;
                                        $oCert->update(array('verify_id' => $iVid), $aCDate);
                                        $iSucNum++;$iSucNum++;//更新失败
                                    }else{
                                        $oCert->update(array('verify_id' => $iVid), $aCDate);
                                    }
                                }
                                break;
                            default:
                                break;
                        }

                        if ($oUser->get('realstatus') && in_array($aCert['type'],array(16,17))) {
                            //昵称和认证说明标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
                            $aTmpfrom = $oCert->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
                            $aUrl = $aTmpfrom['from'] == 1 ? zbj_lib_Constant::YAN_URL . '/certification/index-from-t5' : zbj_lib_Constant::YAN_URL . '/certification/index';
                        } elseif($aCert['type'] == 20) {
                            $aUrl = zbj_lib_Constant::UC_URL . '/mydata/photo';
                        } else {
                            $aUrl = zbj_lib_Constant::UC_URL . '/mydata/baseinfo';
                        }
                        //发送站内信
                        $noticeTitle = "恭喜！您提交的认证申请审核通过！";
                        $sNickname = $aCert['nickname'];
                        $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;恭喜，您提交的" . $typename . "修改申请已审核通过。您可以<a href='" . $aUrl . "' target='_blank'>点此查看</a>。";
                        $msgData = array(
                            'type' => '3',
                            't_userid' => $uid,
                            't_nickname' => $sNickname,
                            'title' => $noticeTitle,
                            'cont' => $noticeContent,
                            'cat_id' => 6
                        );
                        $ssmg->sendMsg($msgData);
                    }
                    $sallot = new zbj_service_allot(14);
                    $sallot->processed($iVid);
                    unset($aCert);
                } else {//拒绝
                    $aReasons = $_POST['reduse' . $iVid];
                    //写入拒绝表单
                    if ($aReasons) {
	                    $reason = $this->reasonReplace($aReasons,2);
                    }
                    $otherReason = zbj_lib_BaseUtils::getStr($_POST ['allcomment' . $iVid]);
                    if ($otherReason) {
                        $reason = $reason ? $reason . ';' . $otherReason : $otherReason;
                    }
                    if($oCert->update("verify_id=$iVid", array('status' => 2, 'opdateline' => time(), 'opdateymd' => date('Y-m-d', time()), 'op_result' => "$reason",'cp_user' => $this->_nickname,'manager_id' => $this->_userid))){
						$uid = $aCert['user_id'];
                    	$oUser->setId($uid);
                    	$iSucNum++;
                        switch($aCert['type']){
                             case 1:
                                $typename = '个人简介';
                                $expand = unserialize($aCert['expand']);
                                $oldselfinfo = $expand['oldinfo']['selfinfo'];
                                $oMdlInfo->update("user_id=$uid", array('selfinfo' => ''));//未通过改成老的简介
                                break;
                            case 16:
                                $typename = '昵称';
                                if (0 == $oUser->get('realstatus')) {//昵称拒绝，对于未进行身份认证的用户，昵称变为用户名
                                    $uid = $aCert['user_id'];
                                    $brandname = $aCert['nickname'];
                                    $oMdlInfo->update("user_id=$uid", "brandname='$brandname'");
                                } else {
                                	$expand = unserialize($aCert['expand']);
                                	$brandname = $expand['old']; //昵称
                                	$oMdlInfo->update("user_id=$uid", "brandname='$brandname'");
                                	$oMdlBrand = new model_mb_brand();
                                	$oMdlBrand->update("user_id=$uid", array('state' => 1, 'brandname' => $brandname));
                                }
                                //更新昵称缓存
                                $cacheName = 'zbjcore.service.user.getBrand.brandName_t5_' . $uid;
                                $oCache->set($cacheName, array('brand' => $brandname, 'nickname' => $aCert['nickname']), 1800);
                                //更新搜索引擎
                                $oUser->addSearchQueue();
                                break;
                             case 17:
                                $typename = '认证说明';break;
                             case 20:
                                $typename = '头像';
                                //删除头像图片
                                $expand = unserialize($aCert['expand']);
                                $sImg = $expand['img'];
                                //删除头像图片
                                $accepted = zbj_lib_Constant::UPFILEURLOLD;  // 'tempdir/user_avat_new/'   2013版默认移动到正式目录
                                $filename = substr($sImg, 32, 10);
                                $img = $expand['img'];
                                $img = substr($img,8);
                                $img = $accepted . $img;
                                $small = $accepted .$expand['small'];
                                $middle = $accepted . $expand['middle']; //80x80
                                $big = $accepted . $expand['big'];
                                @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($img).'&code='.md5($img.zbj_lib_Constant::DEL_FACE_KEY));
		                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($small).'&code='.md5($small.zbj_lib_Constant::DEL_FACE_KEY));
		                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($middle).'&code='.md5($middle.zbj_lib_Constant::DEL_FACE_KEY));
		                        @file_get_contents(zbj_lib_Constant::DEL_FACE_URL.'/filemain.php?url='.urlencode($big).'&code='.md5($big.zbj_lib_Constant::DEL_FACE_KEY));
                                 $this->del_upcloud_resource($uid);
                                 break;
                        }
                        if ($oUser->get('realstatus') && in_array($aCert['type'],array(16,17))) {
                            //昵称和认证说明标志身份认证来自于T5还是T4，便于发消息后重新认证跳转
                            $aTmpfrom = $oCert->_db->selectOne('mb_tmp_realfrom', array('user_id' => $uid));
                            $aUrl = $aTmpfrom['from'] == 1 ? zbj_lib_Constant::YAN_URL . '/certification/index-from-t5' : zbj_lib_Constant::YAN_URL . '/certification/index';
                        } else {
                            $aUrl = zbj_lib_Constant::UC_URL . '/mydata/baseinfo';
                        }
                        //发送站内信
                        $noticeTitle = "您提交的认证申请未通过！";
                        $sNickname = $aCert['nickname'];
                        $noticeContent = "亲爱的" . $sNickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的" . $typename . "修改申请由于<b>" . $reason . "</b>，未能通过审核。您可以<a href='" . $aUrl . "' target='_blank'>点此重新提交</a>。<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;如有疑问，请致电客服热线：400 188 6666";
                        $msgData = array(
                            'type' => '3',
                            't_userid' => $uid,
                            't_nickname' => $sNickname,
                            'title' => $noticeTitle,
                            'cont' => $noticeContent,
                            'cat_id' => 6
                        );
                        $ssmg->sendMsg($msgData);
                    }
                    $sallot = new zbj_service_allot(14);
                    $sallot->processed($iVid);
                }
            }
            $iFailNum = $iCount - $iSucNum;
//            $backurl = $nav == 0 ? '/user/certusercert-nav-1':'/user/certusercert';
            return $this->alert(array('state' =>1, 'msg' =>'共操作' . $iCount . '个，成功' . $iSucNum . '个，失败' . $iFailNum . '个'), 1);
        } else {
            return $this->alert(array('state' =>0, 'msg' => '数据错误'), 1);
        }
    }

    /*
     * 身份认证点击看大图
     */
    public function pageCertviewimage($inPath){
        $aGET = $this->getUrlParams($inPath);
        $iCid = intval($aGET['cid']);
        $iFlag = intval($aGET['flag']);
        $oReal = new zbj_model_mb_real();
        $aReal = $oReal->selectOne(array('check_id' => $iCid), '*');
        if(empty($aReal)){
            return $this->printmsg('参数错误！');
        }
        switch($iFlag){
            case 1:
                $this->_aParams['img'] = $aReal['cardpic'];break;
            case 2:
                $this->_aParams['img'] = $aReal['cardpic1'];break;
            case 3:
                $this->_aParams['img'] = $aReal['dbpic1'];break;
            case 4:
                $this->_aParams['img'] = $aReal['dbpic2'];break;
            case 5:
                $this->_aParams['img'] = $aReal['letterpic'];break;
            case 6:
               $this->_aParams['img'] = $aReal['organizationimg'];break;
        }
        $this->_aParams['realtype'] = $aReal['realtype'];
        $this->_aParams['picdomain'] = zbj_lib_Constant::UPFILEURLOLD;
//        var_dump($this->_aParams['img']);
        echo $this->render('user/cert/viewimage.html', $this->_aParams);
    }

    /*
     * 手动更新认证状态(拉取)
     */
    public function pageCertGetStatus($inPath){

        $urlvalue = $this->getUrlParams($inPath);
        $uid = intval($urlvalue['uid']);
        if(!$uid){
            return $this->ShowMsg('参数错误');
        }
        $userModel = new zbj_service_user($uid);
        $yijifu = new zbj_model_mb_yijifu();
        $aYjf = $yijifu->selectOne(array('user_id' => $uid), 'yuser_id,nickname');
        if (empty($aYjf)) {
            return $this->ShowMsg('无yijifu对应账号');
        }
        $oSrvUser = new service_user();
        $yjfuser = $oSrvUser->getYjfUser($aYjf['yuser_id'],'real'); 
        
        $infoModel = new zbj_model_mb_info();
		$userInfo = $infoModel->selectOne(array('user_id'=>$uid),'user_id,realtype');
        //返回数据的逻辑判断
		if($yjfuser === false || empty($yjfuser)) {
			return $this->ShowMsg('从易极付提取认证数据失败！');
		}else if($yjfuser['userStatus'] != 'T') {
			//return $this->ShowMsg('该用户还未激活在易极付的帐户！');
		}else if($yjfuser['userType'] == 'P' && $userInfo['realtype']==2) {
			return $this->ShowMsg('用户类型不一致！');
		}
	
		/*
		else if($yjfuser['userType'] != 'P') {
			return $this->ShowMsg('该用户在易极付不属于个人用户！');
		}else if($yjfuser['certifyStatus']!='A'){
			return $this->ShowMsg('无该用户在易极付的认证记录！');
		}
		*/
		// 是个人用户并激活并认证通过，则保存数据到猪八戒
		switch($yjfuser['certType']){
			case 'ID':$cardType = 2;break;	// 第二代身份证
			case 'HOME_RETURN':$cardType = 4;break; // 回乡证
			case 'TAIWAN':$cardType = 5;break; // 台胞证
			case 'PASSPORT':$cardType = 6;break; //
			case 'ARMY_ID': // 军官证
			case 'OFFICERS_CARD': // 警官证
			case 'SOLDIER_CARD':$cardType = 10;break; // 警官证
			default:$cardType = 10;break;//其它
		}
		$realtype = $yjfuser['userType']=='P'?1:2;
		$yjfimg = json_decode($yjfuser['licenceImgPathInfo'],true);
		$addtime = empty($yjfuser['certificationtime'])?$this->_time:strtotime($yjfuser['certificationtime']);
		$aData = array (
			'user_id' 	=> $uid,
			'nickname' 	=> $aYjf['nickname'],
			'truename' 	=> $yjfuser['realName'],
			'realtype' 	=> $realtype,
			'cardtype' 	=> $cardType,
			'zone' 		=> 1,
			'cardid' 	=> $yjfuser['certNo'],
			'cardpic' 	=> empty($yjfimg['certFrontPath'])?' ':$yjfimg['certFrontPath'],
			'cardpic1' 	=> empty($yjfimg['certBackPath'])?' ':$yjfimg['certBackPath'],
			'cardymd' 	=> strtotime($yjfuser['licenseValidTime'])==0?0:date('Ymd',strtotime($yjfuser['licenseValidTime'])),
			'address'	=> empty($yjfuser['address'])?'中国':$yjfuser['address'],
			'status' 	=> $yjfuser['certifyStatus']=='A'?2:1,// 2:已通过，1:未通过，0：新申请
			'addtime' 	=> $addtime,
			'addtimeymd' => date('Y-m-d',$addtime),
			'uncode' 	=> 0,
			'ip'		=> zbj_lib_BaseUtils::getIp(),
			'browser'	=> urldecode(http_build_query($_SERVER)),
			'deal_time'	=> $addtime,
			'deal_managerid' => $this->_userid,
			'deal_managername' => $this->_nickname,
		//	'dbmobile' 	=> $yjfuser['email'],
		//	'dbphone' 	=> $yjfuser['mobile'],
		);
		// 更新实名认证表
		$realModel = new zbj_model_mb_real();
		$realUser = $realModel->selectOne(array('user_id'=>$uid),'check_id,user_id,status','','order by check_id DESC');
		
		$realSuc = true;
		if(!empty($realUser['check_id'])){
			if($realUser['status'] != $aData['status']){
				if ($aData['status']==2) {
					$aData['enable'] = 1; 
					$realSuc = $realModel->update(array('check_id'=>$realUser['check_id']),$aData)?true:false;
				}else{
					$aData['enable'] = 2; 
					unset($aData['truename']);
					$realSuc = $realModel->update(array('user_id'=>$realUser['user_id']),$aData)?true:false;
				}
				
			}
		}else{
			$realSuc = $realModel->insert($aData)?true:false;
		}
		if(!$realSuc){
			$this->ShowMsg('实名认证信息入库失败!');
		}
		// 更新用户认证状态
		$realstatus = $yjfuser['certifyStatus']=='A'?2:0; // 2:已通过，1:认证中，0：未通过
		$userModel->set('realstatus', $realstatus);
		if($realstatus == 2 || $realstatus==1){
			$userModel->set('realsuccesstime',$this->_time);
		}
		$userModel->save();
		
		if ($realstatus==2) {
			$aInfo = array (
			'truename' 	=> $aData['truename'],
			'realtype' 	=> $realtype,
			'cardtype' 	=> $cardType,
			'cardpic' 	=> $aData['cardpic'],
			'cardpic1' 	=> $aData['cardpic1'],
			'realplace' => 1,	
			'cardid'	=> $aData['cardid']
		);
		if($yjfuser['email']) $aInfo['email'] = $yjfuser['email'];
		if($yjfuser['phone']) $aInfo['mobile'] = $yjfuser['phone'];
		
		//更新个人INFO表
		if (!empty($userInfo['realtype']) && $userInfo['realtype']!=$realtype) {
			unset($aInfo['realtype']);
		}
		$infoModel->update(array('user_id'=>$uid),$aInfo);
		}
		
		
		// 更新YJF用户昵称
    //	$yijifu->update(array('user_id'=>$uid),array('ynickame'=>$yjfuser['realName']));
		
		return $this->ShowMsg('更新用户实名认证信息成功');
    }


    /*
     * aReason原因数组数字 type 1身份认证 2资料审核
     */
    private function reasonReplace($aReason,$type = 2){

        if($type == 1){
            foreach ($aReason as $k => $v) {
                switch ($v) {
                    case 1:
                        $reasonval = "上传执照年检记录不完整";
                        break;
                    case 2:
                        $reasonval = "营业执照模糊无法识别内容，请上传清晰证件";
                        break;
                    case 3:
                        $reasonval = "请提供彩色营业执照（副本）数码照，不支持黑白复印件";
                        break;
                    case 4:
                        $reasonval = "请完整填写公函内容并加盖公章";
                        break;
                    case 5:
                        $reasonval = "公函模糊无法识别内容，请上传清晰证件";
                        break;
                    case 6:
                        $reasonval = "请提供彩色申请公函数码照，不支持黑白复印件";
                        break;
                    case 7:
                        $reasonval = "请确保账户资料，执照内容，公函信息保持一致";
                        break;
                    case 8:
                        $reasonval = "认证说明不得夸大其辞，需与机构性质一致";
                        break;
                    case 9:
                        $reasonval = "请确保昵称中不含有联系方式等违规信息";
                        break;
                    case 10:
                        $reasonval = "上传营业执照非副本";
                        break;
                    case 11:
                    	$reasonval = "输入的代码与组织机构代码证书中的不一致，请修改";
                    	break;
                    case 12:
                    	$reasonval = "上传的组织机构代码证非真实证书，请重新上传 ";
                    	break;
                    default:
                        break;
                }
                if ($reason) {
                    $reason .= '；' . $reasonval;
                } else {
                    $reason = $reasonval;
                }
            }
        }else{
            foreach ($aReason as $k => $v) {
                switch ($v) {
                    case 1:
                        $reasonval = "昵称包含特殊字符";
                        break;
                    case 2:
                        $reasonval = "昵称涉嫌抄袭";
                        break;
                    case 3:
                        $reasonval = "包含实物，医疗，金融，广告等违禁内容";
                        break;
                    case 4:
                        $reasonval = "昵称包含QQ，电话，邮箱，网址等联系方式";
                        break;
                    case 5:
                        $reasonval = "个人简介涉嫌抄袭";
                        break;
                    case 6:
                        $reasonval = "个人简介无意义，或包含过多标点、重复性内容";
                        break;
                    case 7:
                        $reasonval = "个人简介含极端性宣传内容或违禁内容";
                        break;
                    case 8:
                        $reasonval = "个人简介包含QQ，电话，邮箱，网址等联系方式";
                        break;
                    case 9:
                        $reasonval = "认证说明涉嫌抄袭";
                        break;
                    case 10:
                        $reasonval = "认证说明无意义，或包含过多标点、重复性内容";
                        break;
                    case 11:
                        $reasonval = "认证说明含极端性宣传内容或违禁内容";
                        break;
                    case 12:
                        $reasonval = "认证说明包含QQ，电话，邮箱，网址等联系方式";
                        break;
                    case 13:
                        $reasonval = "头像涉嫌抄袭";
                        break;
                    case 14:
                        $reasonval = "头像质量较差，请上传清晰的头像";
                        break;
                    case 15:
                        $reasonval = "头像含有违禁内容";
                        break;
                    case 16:
                        $reasonval = "头像尺寸请设置为200 px *200 px";
                        break;
                    case 17:
                        $reasonval = "请上传与昵称一致的头像";
                        break;
                    case 18:
                        $reasonval = "头像包含QQ，电话，邮箱，网址等联系方式";
                        break;	
                    default:
                        break;
                }
                if ($reason) {
                    $reason .= '；' . $reasonval;
                } else {
                    $reason = $reasonval;
                }
            }
        }
        return $reason;
    }

    /**
     * 修改前台用户brandname
     */
    public function pageEditBrandname($inPath) {
    	$urlParam = $this->getUrlParams($inPath);
    	$user_id = zbj_lib_BaseUtils::getStr($urlParam['uid'], 'int');
    	$param['user_id'] = $user_id;
    	if(count($_POST) > 0){
    		$uid = zbj_lib_BaseUtils::getStr($_POST['user_id'], 'int');
    		$brandname = zbj_lib_BaseUtils::getStr($_POST['brandname']);
    		if(!$brandname) {
    			return $this->printmsg('请输入品牌名！', 0, 'brandname');
    		}
    		$result = zbj_lib_BaseUtils::apicall('user', 'editBrandname', array('uid'=>$uid, 'brandname'=>$brandname));
    		if($result) {
    			if($result['code'] > 0) {
    				return $this->printmsg('修改成功！', 2, null, SlightPHP::createUrl ( "/user/view", array('uid'=>$uid) ));
    			}else{
    				return $this->printmsg ( "操作失败。" . $result['codestr'] );
    			}
    		}else{
    			echo '修改品牌名接口失败！';
    		}
    	}
    	return $this->render('user/ajax/editbrandname.dialog.html', $param);
    }
    /**
     * 用户名片，TODO还需要处理
     */
    public function pageInfoCard($inPath) {
    	$urlparam = $this->getUrlParams($inPath);
    	$user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
    	if (!$user_id) {
    		return $this->printmsg('会员不存在,或者没填写查询条件!');
    	}
    	$param = array();
    	/**
    	 * 获取基本信息
    	 */
    	$param = $this->getCommonUserInfo($user_id);
//     	print_r($param);
    	return $this->render('user/index/infocard.html', $param);
    }

    //头像审核时调用 远程文件操作 不上传真实图片
	private function CutRemoteFile($_file, $filename, $productname = "task", $path = "", $key = "", $_size = array(), $mark = 1, $move = false, $cut = false) {
		if ($_file) {
			$nowtime = time();
			$_file_type = 0;
			$type_img = array('jpg', 'gif', 'jpeg', 'png', 'bmp');
			$ext = strtolower(end(explode(".", $_file['name'])));
			if (in_array($ext, $type_img))
				$_file_type = 1;
			if ($ext == 'gif')
				$_file_type = 3;

			//图片尺寸
			if (count($_size) > 0) {
				foreach ($_size as $vkey => $value) {
					$query[$vkey] = $value;
				}
			}

			//移动临时图片至正式目录,头像审核时传入
			if ($move) {
				$query['localfile'] = $move; // $move = 'tempdir/user_face_new/_avator_009238824.jpg';
			}

			if ($cut) {
				$query['crop'] = $cut;  // "600x400+20+10" 裁剪框尺寸+X偏移+Y偏移
			}
			$query['path'] = $productname . ($path ? $path : date("/Y-m/d/", $this->_time)) . ($key ? $key . "/" : "");
			$query['type'] = 1;  //为图片时填1,非图片文件填
			//唯一文件名由自己构造,不能使用上传文件的名字，有可能重复,可以使用自增id、时间截或随机等为文件名,后缀要准确0
			$query['name'] = ($filename ? $filename : uniqid()) . '.jpg';  // $_suffix  =  '.jpg'
			$query['key'] = $key;   //任务为tid(纯数字),其它业务图片或文件自定但不能为纯数字
			$query['scale'] = 1;   //不足裁剪尺寸则放大
			if (!$mark) {
				$query['nomask'] = 1;
			}
			return zbj_lib_Uploadfilesv::postfile($query, "", "", "");
		}else
			return null;
	}
	
	/*
     * 奖金管理
     */
	public function pageReward($inPath) {
//      define('DEBUG', 1);
		$urlvalue = $this->getUrlParams($inPath);
		$nav = $urlvalue['nav'] ? intval($urlvalue['nav']) : 2;
		$page = $urlvalue ? intval($urlvalue['page']) : 1;
		$limit = 50;
		$params ['uid'] = $uid = $_GET['uid'] ? intval($_GET['uid']) : intval($urlvalue['uid']);
		$nickname = $_GET['nickname'] ? zbj_lib_BaseUtils::getstr($_GET['nickname']) : '';
		$brandname = $_GET['brandname'] ? zbj_lib_BaseUtils::getstr($_GET['brandname']) : '';
		if ($nav == 2) {
			$rewardstate = $_GET['rewardstate'] ? intval($_GET['rewardstate']) : 0;
			$oMbInfo = new zbj_model_mb_info();
			if ($nickname) {
				$aInfo = $oMbInfo->selectone(array('nickname' => $nickname), 'user_id');
				if ($aInfo) {
					$uid = $aInfo['user_id'];
				}
			}
			if ($brandname) {
				$aInfo = $oMbInfo->selectone(array('brandname' => $brandname), 'user_id');
				if ($aInfo) {
					$uid = $aInfo['user_id'];
				}
			}
			if ($uid) {
				$condition['user_id'] = $uid;
			}
			switch ($rewardstate) {
				case 0:
					$condition[] = "reward_month > 0";
					break;
				case 1:
					$condition[] = "reward_year > 0";
					break;
				case 2:
					$condition[] = "reward_month > 0 or reward_year > 0 or has_reward_month > 0 or has_reward_year > 0";
					break;
				default:
					$condition[] = "reward_month > 0";
					break;
			}

			$oMbCount = new zbj_model_mb_count();
			$oMbCount->setLimit($limit);
			$oMbCount->setPage($page);
			$oMbCount->setCount(true);
			$rewardlist = $oMbCount->select($condition, 'user_id,nickname,reward_month,reward_year,has_reward_month,has_reward_year');
			if ($rewardlist->items) {
				$params ['monthtotal'] = 0; //待发月奖
				$params ['yeartotal'] = 0; //待发年奖
				foreach ($rewardlist->items as $value) {
					$uids[] = $value['user_id'];
					$params ['monthtotal'] += $value['reward_month'];
					$params ['yeartotal'] += $value['reward_year'];
				}
			}
            $params['rewardsum'] = $oMbCount->selectOne($condition, 'sum(reward_month) as monthsum,sum(reward_year) as yearsum');
			$params['uids'] = implode(',', $uids);
			$params['list'] = $rewardlist->items;
			$params['totalsize'] = $rewardlist->totalSize;
			if ($rewardlist->totalSize > $limit) {
				$params['pagebar'] = $this->PageBar($rewardlist->totalSize, $limit, $page, $inPath, "style4", "?" . http_build_query($_GET));
			}
			$params ['totalpage'] = $rewardlist->totalPage;
			$params ['nav'] = $nav;
			$params ['rewardstate'] = $rewardstate;
			$params ['nickname'] = $nickname;
			$params ['brandname'] = $brandname;
			return $this->render('user/reward/rewarduser.html', $params);
		} else {
			$cycle = $_GET['cycle'] ? intval($_GET['cycle']) : 0;
			$taskid = $_GET['taskid'] ? intval($_GET['taskid']) : '';
			$mInfo = new zbj_model_mb_info();
			if ($brandname) {
				$aInfo = $mInfo->selectone(array('brandname' => $brandname), 'user_id');
				if ($aInfo) {
					$uid = $aInfo['user_id'];
				}
			}
			if ($cycle) {
				switch ($cycle) {
					case 1:
					case 3:
					case 5:
					case 7:
					case 8:
					case 10:
					case 12:
						$startymd = "2013-$cycle-1";
						$endymd = "2013-$cycle-31";
						break;
					case 4:
					case 6:
					case 9:
					case 11:
						$startymd = "2013-$cycle-1";
						$endymd = "2013-$cycle-30";
						break;
					case 2:
						$startymd = '2013-2-1';
						$endymd = '2013-2-28';
						break;
				}
				$condition[] = "dateymd between '$startymd' and '$endymd'";
			}
			if ($uid) {
				$condition['user_id'] = $uid;
			}
			if ($nickname) {
				$condition['nickname'] = $nickname;
			}
			if ($taskid) {
				$condition['task_id'] = $taskid;
			}
			$mReward=new zbj_model_mb_reward();
			$mReward->setCount(true);
			$mReward->setPage($page);
			$mReward->setLimit($limit);
			$rewardlist = $mReward->select($condition, '*', '', 'order by dateline DESC');
			$params['list'] = $rewardlist->items;
			$params['totalsize'] = $rewardlist->totalSize;
			
			if ($rewardlist->totalSize > $limit) {
				$params['pagebar'] = $this->PageBar($rewardlist->totalSize, $limit, $page, $inPath, "style4", "?" . http_build_query($_GET));
			}
			if ($rewardlist->items) {
				$params ['monthtotal'] = 0; //月奖
				$params ['yeartotal'] = 0; //年奖
				foreach ($rewardlist->items as $value) {
					$params ['monthtotal'] += $value['reward_month'];
					$params ['yeartotal'] += $value['reward_year'];
				}
			}
			$params ['totalpage'] = $rewardlist->totalPage;
			$params ['cycle'] = $cycle;
			$params ['uid'] = $uid;
			$params ['nav'] = $nav;
			$params ['nickname'] = $nickname;
			$params ['brandname'] = $brandname;
			$params ['taskid'] = $taskid;
			$params ['nextmonth'] = date('m', time()) == 12 ? 1 : date('m', time()) + 1;
			return $this->render('user/reward/reward.html', $params);
		}
	}

	/*
	 * 导出奖金到EXCEL表
	 */

	public function pageRewardOut($inPath) {
//                define('DEBUG', 1);
		$urlvalue = $this->getUrlParams($inPath);
		$type = $urlvalue['type'] ? intval($urlvalue['type']) : '';
		$sUids = zbj_lib_BaseUtils::getStr($urlvalue['uids']);
		if (!$type) {
			return $this->ShowMsg('参数错误');
		}
		if (empty($sUids)) {
			return $this->ShowMsg('缺少用户ID');
		}
		$condition[] = "user_id in ($sUids)";
		$oModel = new zbj_model_mb_count();
		$aReward = $oModel->select($condition, 'user_id,nickname,reward_month,reward_year,has_reward_month,has_reward_year');
		$oMbReward = new zbj_model_mb_reward();
//        var_dump($aReward);exit;
		header("Content-type:application/vnd.ms-excel");
		header("Content-Disposition:filename=reward.xls");

		echo iconv('utf-8', 'gb2312', "\"用户ID\"\t");
		echo iconv('utf-8', 'gb2312', "\"用户名\"\t");
		if ($type == 1) {
			echo iconv('utf-8', 'gb2312', "\"月绩效\"\t");
		} else {
			echo iconv('utf-8', 'gb2312', "\"年终奖\"\t");
		}
		echo iconv('utf-8', 'gb2312', "\"任务号\"\t");
		echo iconv('utf-8', 'gb2312', "\"任务名称\"\t");
		echo iconv('utf-8', 'gb2312', "\"单笔绩效\"\n");

		if (is_array($aReward->items)) {
			$iRewardSum = 0.00;
			if ($type == 1) {
				foreach ($aReward->items as $value) {
					if ($value['reward_month'] > 0) {
						echo iconv('utf-8', 'gb2312', "\"{$value['user_id']}\"\t");
						echo iconv('utf-8', 'gb2312', "\"{$value['nickname']}\"\t");
						echo iconv('utf-8', 'gb2312', "\"{$value['reward_month']}\"\n");
						$aDetail = $oMbReward->select(array('user_id' => $value['user_id'], 'state' => 0, 'month_state' => 0), '*');
						if (is_array($aDetail->items)) {
							foreach ($aDetail->items as $v) {
								echo "\t\t\t";
								echo iconv('utf-8', 'gb2312', "\"{$v['task_id']}\"\t");
								echo iconv('utf-8', 'gb2312', "\"{$v['title']}\"\t");
								echo iconv('utf-8', 'gb2312', "\"{$v['reward_month']}\"\n");
							}
						}
						echo "\n";
						$iRewardSum += $value['reward_month'];
					}
				}
			} else {
				foreach ($aReward->items as $value) {
					if ($value['reward_year'] > 0) {
						echo iconv('utf-8', 'gb2312', "\"{$value['user_id']}\"\t");
						echo iconv('utf-8', 'gb2312', "\"{$value['nickname']}\"\t");
						echo iconv('utf-8', 'gb2312', "\"{$value['reward_year']}\"\n");
						$aDetail = $oMbReward->select(array('user_id' => $value['user_id'], 'state' => 0, 'month_state' => 0), '*');
						if (is_array($aDetail->items)) {
							foreach ($aDetail->items as $v) {
								echo "\t\t\t";
								echo iconv('utf-8', 'gb2312', "\"{$v['task_id']}\"\t");
								echo iconv('utf-8', 'gb2312', "\"{$v['title']}\"\t");
								echo iconv('utf-8', 'gb2312', "\"{$v['reward_year']}\"\n");
							}
						}
						echo "\n";
						$iRewardSum += $value['reward_year'];
					}
				}
			}
		}

		echo iconv('utf-8', 'gb2312', "\n");
		echo iconv('utf-8', 'gb2312', "\"共计奖金\"\t");
		echo iconv('utf-8', 'gb2312', "\"{$iRewardSum}\"\t");
	}

	/*
	 * 批量处理服务商奖金
	 */

	public function pageRewardBatch($inPath) {
		$urlvalue = $this->getUrlParams($inPath);
		$type = $urlvalue['type'] ? intval($urlvalue['type']) : '';
		if (!$type) {
			return $this->printmsg('请选择操作类型', 0);
		}
		if(!$_POST){
			return $this->printmsg('没有参数', 0);
		}
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		$aUids = $_POST ['uids'];
		$iCount = count($aUids);
		if ($iCount == 0) {
			return $this->printmsg('请至少选择一个进行操作', 0);
		}
		$iSuccess = 0;
		$iFail = 0;
		$oMbCount = new zbj_model_mb_count();
		$oMbReward = new zbj_model_mb_reward();
		$oSrvUser = new zbj_service_user();
		$time = time();
		$ym = date("Y-m");
		$ymd = date("Y-m-d");
	//	define('DEBUG', 1);
		if ($type == 1) {//批量发放月奖金

			if (is_array($aUids)) {
				$lastmonth = date('m', time()) - 1;
				foreach ($aUids as $value) {
					$uid = $value;
					$aCount = $oMbCount->selectone(array('user_id' => $uid), 'user_id,nickname,reward_month,reward_year,has_reward_month,has_reward_year');
					if (!$aCount) {//用户ID错误
						continue;
					}
					if ($aCount['reward_month'] == 0) {//无奖金需要发放
						continue;
					}
					$reward_month = $aCount['reward_month'];
					$oSrvUser->setId($uid);
					//发放月奖金
					if ($oSrvUser->recharge($ym . "系统发放月绩效给" . $uid, $reward_month, 10, 78, array('trade_no' => $ym . $uid . '1078')) === false) {
						//写入日志
						$oSrvUser->addUserLog($ym . "系统发放月绩效" . $reward_month . "元给" . $uid . "发放失败，原因:" . $oSrvUser->getError(), 10);
						continue;
					} else {
						try {
							$oMbCount->beginTransaction('mb');
							if ($oMbReward->update(array('user_id' => $uid, 'state' => 0, 'month_state' => 0), array('month_state' => 1, 'month_dateline' => $time, 'month_dateymd' => $ymd)) === false) {
								throw new Exception('reward表更新失败!');
							}
							if ($oMbCount->update(array('user_id' => $uid), "reward_month = 0.00,has_reward_month = has_reward_month + $reward_month") === false) {
								throw new Exception('info表更新失败!');
							}
							$oMbCount->commit('mb');
							$iSuccess++;
							//写入日志
							$oSrvUser->addUserLog($ym . "系统发放月绩效" . $reward_month . "元给" . $uid, 10);

							$ssmg = new SSendmsg();
							//向发起方发送消息
							//notice
							$nickname = $aCount['nickname'];
							$noticeTitle = "2013年" . $lastmonth . "月月绩效奖金已发放";
							$noticeContent = "尊敬的" . $nickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;您在2013年" . $lastmonth . "月积累的月绩效奖金" . $reward_month . "元，已在本月1号发放到您的账户。希望您本月再接再厉，赢取更多奖金！ <a href='http://www.zhubajie.com' target='_blank'>点此查看余额</a>。";
							//t5
							$msgData = array(
								'type' => '3',
								't_userid' => $uid,
								't_nickname' => $nickname,
								'title' => $noticeTitle,
								'cont' => $noticeContent,
								'cat_id' => 6
							);
							$ssmg->sendMsg($msgData);
							//mobile
							$mobile = $oSrvUser->getAuthMobile();
							$msgContent = "尊敬的" . $nickname . "：您好！您在2013年" . $lastmonth . "月积累的月绩效奖金" . $reward_month . "元，已发放到您的账户。请登入猪八戒网进行查看。http://www.zhubajie.com/";
							if ($mobile) {
								$smsData = array(
									'type' => 2,
									'mobile' => $mobile,
									'cont' => $msgContent,
									'userid' => $uid,
									'nickname' => $nickname,
									'cat_id' => 6
								);
								$ssmg->sendMsg($smsData);
							}
						} catch (Exception $e) {
							$oMbCount->rollBack('mb');
						}
					}
				}
				$iFail = $iCount - $iSuccess;
				return $this->printmsg("共操作" . $iCount . "条数据，成功" . $iSuccess . "条，失败" . $iFail . "条！", 1);
			}
		}elseif($type == 3){//批量发放年终奖
		//	define('DEBUG',1); 
			if (is_array($aUids) && !empty($aUids)) {
				$lastyear = date('Y', $time);
				foreach ($aUids as $uid) { // 只发2013年的年终奖
					$oReward = $oMbReward->selectOne("user_id='{$uid}' and dateymd>='2013-01-01' and dateymd<'2013-11-28' and year_state=0 and state=0", 'user_id,nickname,sum(reward_year) as year_amount','group by user_id');
					$reward_year = $oReward['year_amount'];
					if (empty($oReward) || !is_numeric($reward_year) || $reward_year <= 0){ continue; }//无奖金需要发放

					$oSrvUser->setId($uid);
					$nickname = $oReward['nickname'];
					//发放年终奖金
					if ($oSrvUser->recharge("系统发放{$lastyear}年年终奖给" . $nickname, $reward_year, 10, 79, array('trade_no' => date('Y00',$time).sprintf("%010d", $uid).'1079')) === false) {
						//写入日志
						$oSrvUser->addUserLog("系统发放{$lastyear}年年终奖" . $reward_year . "元给" . $nickname . "发放失败，原因:" . $oSrvUser->getError(), 10);
						continue;
					} else {
						try {
							$oMbReward->beginTransaction('mb');
							if ($oMbReward->update("user_id='{$uid}' and dateymd>='2013-01-01' and dateymd<'2013-11-28' and year_state=0 and state=0", array('year_state' => 1, 'year_dateline' => $time, 'year_dateymd' => $ymd)) === false) {
								throw new Exception('reward表更新失败!');
							}
							if ($oMbCount->update(array('user_id' => $uid), "reward_year = 0.00,has_reward_year = has_reward_year + $reward_year") === false) {
								throw new Exception('count表更新失败!');
							}
							$oMbReward->commit('mb');
							$iSuccess++;
							//写入日志
							$oSrvUser->addUserLog($ym . "系统发放年终奖" . $reward_year . "元给" . $nickname, 10);

							$ssmg = new SSendmsg();
							//向发起方发送消息
							//notice
							
							$noticeContent = "尊敬的" . $nickname . "：<br />&nbsp;&nbsp;&nbsp;&nbsp;您在{$lastyear}年的年终奖金" . $reward_year . "元，已发放到您的账户。希望您再接再厉，赢取更多奖金！ <a href='http://www.zhubajie.com' target='_blank'>点此查看余额</a>。";
							//t5
							$msgData = array(
								'type' => '3',
								't_userid' => $uid,
								't_nickname' => $nickname,
								'title' => "{$lastyear}年年终奖金已发放",
								'cont' => $noticeContent,
								'cat_id' => 6
							);
							$ssmg->sendMsg($msgData);
							//mobile
							$mobile = $oSrvUser->getAuthMobile();
							$msgContent = "尊敬的" . $nickname . "：您好！您在{$lastyear}年的年终奖金" . $reward_year . "元，已发放到您的账户。请登入猪八戒网进行查看。http://www.zhubajie.com/";
							if ($mobile) {
								$smsData = array(
									'type' => 2,
									'mobile' => $mobile,
									'cont' => $msgContent,
									'userid' => $uid,
									'nickname' => $nickname,
									'cat_id' => 6
								);
								$ssmg->sendMsg($smsData);
							}
						} catch (Exception $e) {
							$oMbReward->rollBack('mb');
						}
					}
				}
				$iFail = $iCount - $iSuccess;
				return $this->printmsg("共操作" . $iCount . "条数据，成功" . $iSuccess . "条，失败" . $iFail . "条！", 1);
			}
			
		} elseif ($type == 2) {//批量取消年终奖
			if (is_array($aUids)) {
				foreach ($aUids as $value) {
					$uid = $value;
					$aCount = $oMbCount->select(array('user_id' => $uid), 'user_id,nickname,reward_year,has_reward_year');
					if (!$aCount) {//用户ID错误
						continue;
					}
					if ($aCount['reward_year'] == 0) {//无奖金取消
						continue;
					}
					try {
						$oMbCount->beginTransaction('mb');
//						$reward_year = $aCount['reward_year'];
						if ($oMbReward->update(array('user_id' => $uid, 'state' => 0, 'year_state' => 0), array('reward_year' => 0.00, 'reward' => 0.00)) === false) {
							throw new Exception('reward表更新失败!');
						}
						if ($oMbCount->update(array('user_id' => $uid), "reward_year = 0.00") === false) {
							throw new Exception('info表更新失败!');
						}
						$oMbCount->commit('mb');
						$iSuccess++;
						//写入日志
						$oSrvUser->setId($uid);
						$oSrvUser->addUserLog($ym . "取消" . $uid . "的年奖金", 10);
					} catch (Exception $e) {
						$oMbCount->rollBack('mb');
					}
				}
				$iFail = $iCount - $iSuccess;
				return $this->printmsg("共操作" . $iCount . "条数据，成功" . $iSuccess . "条，失败" . $iFail . "条！", 1);
			}
		} else {
			return $this->printmsg('参数错误', 0);
		}
		return $this->printmsg('操作成功', 1);
	}

	/*
	 * 修改奖金
	 */

	public function pageRewardEdit($inPath) {
		if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
		if (!$_POST) {
			$urlvalue = $this->getUrlParams($inPath);
			$rewardid = $urlvalue['rewardid'] ? intval($urlvalue['rewardid']) : '';
			if (!$rewardid) {
				return $this->printmsg("参数错误！",0);
			}
			$oReward = new zbj_model_mb_reward($rewardid);
			$aReward = $oReward->get();
			if (empty($aReward)) {
				return $this->printmsg("没有此条记录！",0);
			}
			$params['reward'] = $aReward;
			return $this->render('user/reward/rewardedit.html', $params);
		}
//		define('DEBUG', 1);
		$rewardid = intval($_POST['rewardid']);
		$rewardmonth = floatval($_POST['rewardmonth']);
		$rewardyear = floatval($_POST['rewardyear']);
		$state = intval($_POST['state']);
		$failtype = intval($_POST['failtype']);
		if ($state == 1 && !$failtype) {
			return $this->printmsg("请选择取消原因！", 0);
		}
		$oReward = new zbj_model_mb_reward($rewardid);
		$aReward = $oReward->selectOne(array('reward_id' => $rewardid), 'user_id,reward_month,month_state,year_state,reward_year,state,fail_type');
		if (empty($aReward)) {
			return $this->printmsg("没有此条记录！", 0);
		}
		if ($aReward['month_state'] == 1 && $aReward['reward_month'] != $rewardmonth) {
			return $this->printmsg("月绩效已发放，无法进行操作！", 0);
		}
		if ($aReward['year_state'] == 1 && $aReward['reward_year'] != $rewardyear) {
			return $this->printmsg("年终奖已发放，无法进行操作！", 0);
		}
		$oReward->set('reward_month', $rewardmonth);
		$oReward->set('reward_year', $rewardyear);
		$oReward->set('reward', $rewardmonth + $rewardyear);
		$oReward->set('state', $state);
		if ($failtype) {
			$oReward->set('fail_type', $failtype);
		}
		if ($oReward->save()) {
			$uid = $aReward['user_id'];
			$oCount = new zbj_model_mb_count($uid);
			$aCount = $oCount->selectOne(array('user_id' => $uid), 'reward_month,reward_year');
			$hasnotmonth = $aCount['reward_month'];
			$hasnotyear = $aCount['reward_year'];
			if ($state == 1) {//取消
				$hasnotmonth = 0;
				$hasnotyear = 0;
			} else {
				if ($aReward['reward_month'] >= $rewardmonth) {//减少或不变
					$cutmonth = $aReward['reward_month'] - $rewardmonth;
					$hasnotmonth = $hasnotmonth - $cutmonth;
				} else {//增加
					$addmonth = $rewardmonth - $aReward['reward_month'];
					$hasnotmonth = $hasnotmonth + $addmonth;
				}
				if ($aReward['reward_year'] >= $rewardyear) {//减少或不变
					$cutyear = $aReward['reward_year'] - $rewardyear;
					$hasnotyear = $hasnotyear - $cutyear;
				} else {//增加
					$addyear = $rewardyear - $aReward['reward_year'];
					$hasnotyear = $hasnotyear + $addyear;
				}
			}
			if ($oCount->update(array('user_id' => $uid), array('reward_month' => $hasnotmonth, 'reward_year' => $hasnotyear))) {
				$oSrvUser = new zbj_service_user($uid);
				//写入日志
				if ($state == 1) {
					$oSrvUser->addUserLog($ym . "由于" . $failtype . "取消" . $uid . "的奖金", 10);
				} else {
					$oSrvUser->addUserLog($ym . "修改" . $uid . "的奖金", 10);
				}
				return $this->printmsg("修改成功！", 1, null, $_SERVER['HTTP_REFERER']);
			} else {
				$oReward->update(array('reward_id' => $rewardid), $aReward);
				return $this->printmsg("修改失败！", 0);
			}
		} else {
			return $this->printmsg("您未作修改！", 0);
		}
	}
	/**
	 * 客服锁定
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagecustomersetlock($inPath) {
		$lockuser = array (
				'顾留中',
				'杜春永',
				'李英',
				'余红梅',
				'刘玉梅',
				'江玲'
		);//可以锁用户
		$onlylocktoself = array (
		);//只能锁定到自已
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = intval ( $urlparams ['uid'] );
		if (! $urlparams ['uid']) {
			if (count ( $_POST )) {
				return $this->printmsg ( "系统错误。", 0 );
			} else {
				return "系统错误";
			}
		}
		$s_customer = new service_customer ( $urlparams ['uid'] );
		$s_manager = new zbj_service_manager ( $this->_userid );
		$manager_id = $s_customer->checklock ();
		if (count ( $_POST ) == 0) {
			$this->tplvar = array (
					'uid' => $urlparams ['uid'],
					'manager_id'=>$manager_id?$manager_id:$this->_userid,
			);
			$s_manager=new service_manager(0);
			$this->tplvar['list']=$s_manager->getIndustryuser(0);
			if ($manager_id) {//解锁 或锁定其它人
				$s_orgmanager=new service_manager($manager_id);
				if (
					$manager_id == $this->_userid ||
					in_array ( $this->_nickname, $lockuser ) ||
					($s_manager->get('isleader') && $s_orgmanager->get('group_id')==$s_manager->get('group_id'))
				) {
					return $this->render ( 'user/customer/releaselockforIndustry.html', $this->tplvar );
				}else{
					return "你没有权限解锁或锁定该用户。";
				}
				
			} else {
				if (in_array ( $this->_nickname, $onlylocktoself )) {
					return $this->render ( 'user/customer/addlockonce.html', $this->tplvar );
				} else {
					return $this->render ( 'user/customer/addlockforIndustry.html', $this->tplvar );
				}
			}
		} else {
			if (in_array ( $this->_nickname, $onlylocktoself )) {
				$_POST['locktype']=1;
				$_POST['remainder']=1;
				$_POST['manager_id']=$this->uinfo->getId();
			}
			if ($manager_id) {//解锁 或锁定其它人
				if($_POST['lockother'] && $_POST['manager_id']){//锁定给其它人员
					switch ($_POST ['locktype']){
						case 1:
							$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配次数。",0,'remainder');
							}
							break;
						case 2:
							$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配到期时间。",0,'time');
							}
							break;
						default:
							return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
					}
					$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
					if ($s_customer->addlock ( $s_managercustom, $_POST ['locktype'], $_POST ['lockvalue'], null, $s_manager )) {
						$this->addLog($urlparams ['uid'], '用户被锁定给' . $s_managercustom->get("name"), 'user');
						return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
					} else {
						return $this->printmsg ( "锁定用户失败。原因：".$s_customer->getError(), 2, null, $_SERVER ['HTTP_REFERER'] );
					}
				}else{
					if ($manager_id) {
						if($s_customer->releaselock ( $s_manager )){
							$s_customer->updatelock ();
							$this->addLog($urlparams ['uid'], '用户被解锁', 'user');
							return $this->printmsg("解锁用户成功。",2,null,$_SERVER ['HTTP_REFERER']);
						}else{
							return $this->printmsg ( "解锁用户失败。".$s_customer->getError(), 0, 'lockother', $_SERVER ['HTTP_REFERER'] );
						}
					}
				}
			} else {
				$_POST['manager_id']=intval($_POST['manager_id']);
				if($_POST['manager_id']<=0){
					return $this->printmsg("请选择用户。",0,'manager_id');
				}
				switch ($_POST ['locktype']){
					case 1:
						$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配次数。",0,'remainder');
						}
						// 						if($_POST['lockvalue']>=20){
						// 							return $this->printmsg("您锁定的次数太多了请保持在20次以内一些。",0,'remainder');
						// 						}
						break;
					case 2:
						$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配到期时间。",0,'time');
						}
						// 						if ($_POST ['lockvalue'] - time () > 86400 * 60) {
						// 							return $this->printmsg ( "您锁定的时间太长了，请保持60天以内。", 0, 'time' );
						// 						}
						break;
					default:
						return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
				}
				$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
				if ($s_customer->addlock ( $s_managercustom, $_POST ['locktype'], $_POST ['lockvalue'], null, $s_manager )) {
					$this->addLog($urlparams ['uid'], '用户被锁定给' . $s_managercustom->get("name"), 'user');
					return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
				} else {
					return $this->printmsg ( "锁定用户失败。".$s_customer->getError(), 1, null, $_SERVER ['HTTP_REFERER'] );
				}
			}
		}
	}
	/**
	 * 客服锁定 这里只允许锁定七天并且提交锁定审核
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagecustomersetlock2($inPath) {
		$lockuser = array (
				'顾留中'
		);//可以锁用户
		$onlylocktoself = array (
		);//只能锁定到自已
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = intval ( $urlparams ['uid'] );
		if (! $urlparams ['uid']) {
			if (count ( $_POST )) {
				return $this->printmsg ( "系统错误。", 0 );
			} else {
				return "系统错误";
			}
		}
		$s_allot=new zbj_service_allot(63);
		if (! in_array($this->_userid, $s_allot->getusers())) {
			if (count ( $_POST )) {
				return $this->printmsg ( "您不在锁定用户七天的行列。", 0 );
			} else {
				return "您不在锁定用户七天的行列";
			}
		}
		$s_customer = new service_customer ( $urlparams ['uid'] );
		$s_manager = new zbj_service_manager ( $this->_userid );
		$manager_id = $s_customer->checklock ();
		if (count ( $_POST ) == 0) {
			$this->tplvar = array (
					'uid' => $urlparams ['uid'],
					'manager_id'=>$manager_id?$manager_id:$this->_userid,
			);
			$s_manager=new service_manager(0);
			if ($manager_id) {//解锁 或锁定其它人
				return "用户已经处于锁定，如果要锁定到自己请先解锁。";
			} else {
				return $this->render ( 'user/customer/addlock7day.html', $this->tplvar );
			}
		} else {
			if ($manager_id) {//解锁 或锁定其它人
				return $this->printmsg ( "用户已经处于锁定，如果要锁定到自己请先解锁。", 0, 'locktype' );
			} else {
				if($s_manager->get('user_id')<=0){
					return $this->printmsg("请选择用户。",0,'manager_id');
				}
				$_POST['locktype']=2;
				$_POST['remainder']=1;
				$_POST['manager_id']=$s_manager->get('user_id');
				$_POST ['lockvalue'] = (time()+604800);
				$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
				if ($s_customer->addlock ( $s_managercustom, $_POST ['locktype'], $_POST ['lockvalue'], null, $s_manager )) {
					$m_managerbind=new model_cp_managerbind();
					$data=array();
					$data['createtime']=date('Y-m-d H:i:s');
					$data['createymd']=date('Y-m-d');
					$data['user_id']=intval($urlparams ['uid']);
					$data ['user_name'] = $s_customer->get ( 'nickname' );
					$data['manager_id']=$this->_userid;
					$option=array();
					$option['content']=zbj_lib_BaseUtils::getStr($_REQUEST['content']);
					$files=array();
					foreach (explode('-,',$_REQUEST['files']) as $file){
						$files[]=unserialize($file);
					}
					$option['files']=$files;
					$data['options']=serialize($option);
					$m_managerbind->insert($data);
					$this->addLog($urlparams ['uid'], '用户被锁定给' . $s_managercustom->get("name"), 'user');
					return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
				} else {
					return $this->printmsg ( "锁定用户失败。".$s_customer->getError(), 1, null, $_SERVER ['HTTP_REFERER'] );
				}
			}
		}
	}
	/**
	 * 客服锁定
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagesalersetlock($inPath) {
	    return '功能停用';
		$lockuser = array (
				'顾留中','陈名','谢久光','吴双江'
		);//可以锁用户
		$onlylocktoself = array (
		);//只能锁定到自已
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = intval ( $urlparams ['uid'] );
		if (! $urlparams ['uid']) {
			if (count ( $_POST )) {
				return $this->printmsg ( "系统错误。", 0 );
			} else {
				return "系统错误";
			}
		}
		$s_customer = new service_customer ( $urlparams ['uid'] );
		$s_manager = new zbj_service_manager ( $this->_userid );
		$s_sell_follow = new service_sellFollow($urlparams ['uid']);
		
		$manager_id = $s_customer->get ('info.saler_id');
		if (count ( $_POST ) == 0) {
			$this->tplvar = array (
					'uid' => $urlparams ['uid'],
					'manager_id'=>$manager_id?$manager_id:$this->_userid,
			);
			$s_manager=new service_manager(0);
			$this->tplvar['list']=$s_manager->getIndustryuser(0,7);
			if ($manager_id) {//解锁 或锁定其它人
				$s_orgmanager=new service_manager($manager_id);
				if (
				$manager_id == $this->_userid ||
				in_array ( $this->_nickname, $lockuser ) ||
				($s_manager->get('isleader') && $s_orgmanager->get('group_id')==$s_manager->get('group_id'))
				) {
					return $this->render ( 'user/customer/releaselockforIndustry.html', $this->tplvar );
				}else{
					return "你没有权限解锁或锁定该用户。";
				}
			} else {
				if (in_array ( $this->_nickname, $onlylocktoself )) {
					return $this->render ( 'user/customer/addlockonce.html', $this->tplvar );
				} else {
					return $this->render ( 'user/customer/addlockforIndustry.html', $this->tplvar );
				}
			}
		} else {
			if (in_array ( $this->_nickname, $onlylocktoself )) {
				$_POST['locktype']=1;
				$_POST['remainder']=1;
				$_POST['manager_id']=$this->uinfo->getId();
			}
			if ($manager_id) {//解锁 或锁定其它人
				if($_POST['lockother'] && $_POST['manager_id']){//锁定给其它人员
					switch ($_POST ['locktype']){
						case 1:
							$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配次数。",0,'remainder');
							}
							break;
						case 2:
							$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配到期时间。",0,'time');
							}
							break;
						default:
							return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
					}
					$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
					if ($s_customer->changeLockSelllimit ((int)$_POST ['manager_id'],$this->_userid)) {
						$s_sell_follow->add($manager_id, $this->_userid, $s_sell_follow->createExpireTime(2), 0, 1, 2, 0, '锁定');
						if((int)$_POST ['manager_id']==$this->_userid){
							$this->addLog($urlparams ['uid'], "服务商经纪人{$this->_nickname}锁定了服务商。", 'user');
						}else{
							$this->addLog($urlparams ['uid'], "{$this->_nickname}将服务商锁定给 服务商经纪人" . $s_managercustom->get("name").'。', 'user');
						}
						return $this->printmsg ( "锁定会员服务商成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
					} else {
						return $this->printmsg ( "锁定用户失败。原因：".$s_customer->getError(), 0, null, $_SERVER ['HTTP_REFERER'] );
					}
				}else{
					if ($s_customer->changeLockSelllimit (0,$this->_userid)) {
						$s_sell_follow->add(0, $this->_userid, 0, 0, 0, 0, 0, '销售顾问自动解锁', 2);
						$this->addLog($urlparams ['uid'], '会员服务商被解锁', 'user');
						return $this->printmsg("解锁会员服务商成功。",2,null,$_SERVER ['HTTP_REFERER']);
					}else{
						return $this->printmsg ( "解锁会员服务商失败。".$s_customer->getError(), 0, 'lockother');
					}
				}
			} else {
				$_POST['manager_id']=intval($_POST['manager_id']);
				if($_POST['manager_id']<=0){
					return $this->printmsg("请选择用户。",0,'manager_id');
				}
				switch ($_POST ['locktype']){
					case 1:
						$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配次数。",0,'remainder');
						}
						// 						if($_POST['lockvalue']>=20){
						// 							return $this->printmsg("您锁定的次数太多了请保持在20次以内一些。",0,'remainder');
						// 						}
						break;
					case 2:
						$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配到期时间。",0,'time');
						}
						// 						if ($_POST ['lockvalue'] - time () > 86400 * 60) {
						// 							return $this->printmsg ( "您锁定的时间太长了，请保持60天以内。", 0, 'time' );
						// 						}
						break;
					default:
						return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
				}
				$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
				if ($s_customer->changeLockSelllimit ((int)$_POST ['manager_id'],$this->_userid)) {
					$s_sell_follow->add($_POST['manager_id'], $this->_userid, $s_sell_follow->createExpireTime(2), 0, 1, 2, 0, '锁定');
					if((int)$_POST ['manager_id']==$this->_userid){
						$this->addLog($urlparams ['uid'], "服务商经纪人{$this->_nickname}锁定了服务商。", 'user');
					}else{
						$this->addLog($urlparams ['uid'], "{$this->_nickname}将服务商锁定给服务商经纪人" . $s_managercustom->get("name").'。', 'user');
					}
					$this->addLog($urlparams ['uid'], '会员服务商被锁定给' . $s_managercustom->get("name"), 'user');
					return $this->printmsg ( "锁定会员服务商成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
				} else {
					return $this->printmsg ( "锁定会员服务商失败。".$s_customer->getError(), 0, null, $_SERVER ['HTTP_REFERER'] );
				}
			}
		}
	}
	/**
	 * 会员服务顾问
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagesalersellerlock($inPath) {
	    $urlparams = $this->getUrlParams ( $inPath );
	    $urlparams ['uid'] = intval ( $urlparams ['uid'] );
	    if (! $urlparams ['uid']) {
	        if (count ( $_POST )) {
	            return $this->printmsg ( "系统错误。", 0 );
	        } else {
	            return "系统错误";
	        }
	    }
	    lib_BaseUtils::apiInit(5,array('membership_sdk'));
	    $s_user=new com\zhubajie\membership\interfaces\UserServiceClient(null);
	    lib_BaseUtils::apigetclient($s_user);
	    $followuser=$s_user->getfollowuser( $urlparams ['uid']);
	    $s_manager = new zbj_service_manager ( $this->_userid );
	    if($s_manager->get('isleader')==0){
	        if (count ( $_POST )) {
	            return $this->printmsg ( "您不是部门leader无权限操作。", 0 );
	        } else {
	            return "您不是部门leader无权限操作。";
	        }
	    }
	    $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
	    lib_BaseUtils::apigetclient($follow_service);
	
	    $manager_id = $followuser->seller_id;
	    if (count ( $_POST ) == 0) {
	        $this->tplvar = array (
	            'uid' => $urlparams ['uid'],
	            'manager_id'=>$manager_id?$manager_id:$this->_userid,
	        );
// 	        $s_manager2=new service_manager(0);
// 	        $this->tplvar['list']=service_manager::getallotuser(6,1);
	        $salerallotmanagers=service_manager::getallotuser(6,1);
	        $salermanagers=array();
	        foreach ($salerallotmanagers as $val){
	            $salermanagers=array_merge($salermanagers,$val['ids']);
	        }
	        $salermanagers=array_unique($salermanagers);
	        // 		var_dump($salermanagers);
	        $usercondition=array();
	        if(is_array($salerallotmanagers)){
	            $usercondition[]= " user_id in (".implode(',', $salermanagers).")";
	        }else{
	            $usercondition['user_id']=0;
	        }
	        $m_cp_user = new zbj_model_cp_user ( );
	        $ulist = $m_cp_user->select($usercondition, '*', '', 'order by name')->items;
	        $sCpUser = new service_cpuser();
	        $groups = $sCpUser->getGroup();
	        if($ulist){
	            foreach ($ulist as $key => $value) {
	                $this->tplvar['list'][$value['group_id']]['group_name'] = $groups[$value['group_id']]['name'];
	                $this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] = $value['name'];
	                if ($value['isleave'] == 1) {
	                    $this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（离职）';
	                }else if($value['isleave'] == 2) {
	                    $this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（调岗）';
	                }else if($value['isleave'] == 3) {
	                    $this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（休假）';
	                }
	            }
	        }
	        
	        
	        
	        
	        if ($manager_id) {//解锁 或锁定其它人
	            if ($manager_id == $this->_userid || $s_manager->get('isleader')) {
	                $this->tplvar['tip']="1.可直接解锁服务商，解锁后会员销售将不再进行跟进。<br />2.可将服务商锁定给另一会员销售，完成调配";
                    return $this->render('user/customer/releaselock.html', $this->tplvar);
                } else {
                    return "你没有权限解锁或锁定该用户。";
                }
            } else {
                return $this->render('user/customer/addlock.html', $this->tplvar);
            }
	    } else {
	        if ($manager_id) {//解锁 或锁定其它人
	            if($_POST['lockother'] && $_POST['manager_id']){//锁定给其它人员
	                $result=$s_user->updateFollowSeller((int)$urlparams ['uid'], (int)$_POST ['manager_id']);
	                $s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
	                if ($result->success) {
	                    $params = array(
	                        'user_id' => (int)$urlparams ['uid'], //项目内调用时可不传
	                        'source' => 3, //0系统分配；1机会分配；2自主认领；3主管锁定；
	                        'expire_time' =>  time()+86400, //下次跟进时间戳，根据具体业务选择是否传递
	                    );
	                    $follow_service->follow($params);
	                    if((int)$_POST ['manager_id']==$this->_userid){
	                        $this->addLog($urlparams ['uid'], "会员服务顾问{$this->_nickname}锁定了服务商。", 'user');
	                    }else{
	                        $this->addLog($urlparams ['uid'], "{$this->_nickname}将服务商锁定给会员服务顾问" . $s_managercustom->get("name").'。', 'user');
	                    }
	                    return $this->printmsg ( "锁定会员服务商成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
	                } else {
	                    return $this->printmsg ( "锁定用户失败。原因：".$result->message, 0, null, $_SERVER ['HTTP_REFERER'] );
	                }
	            }else{
// 	                $shipinfo=$s_user->getMembershipInfo((int)$urlparams ['uid'],0);
// 	                if(time()<=$shipinfo->info->expireTime){
// 	                    return $this->printmsg ( "用户还处于签约会员状态不能解锁.", 0, 'lockother');
// 	                }
	                $result=$s_user->updateFollowSeller((int)$urlparams ['uid'], 0);
	                if ($result->success) {
	                    $params = array(
	                        'user_id' => (int)$urlparams ['uid'], //项目内调用时可不传
	                        'is_sea' => 1,
	                        'enter_sea_reason' => 3, //进入公海原因：1主动放弃；2未及时跟进；3主管解锁；
	                    );
	                    $follow_service->follow($params);
	                    $this->addLog($urlparams ['uid'], '会员服务商被解锁', 'user');
	                    return $this->printmsg("解锁会员服务商成功。",2,null,$_SERVER ['HTTP_REFERER']);
	                }else{
	                    return $this->printmsg ( "解锁会员服务商失败。".$result->message, 0, 'lockother');
	                }
	            }
	        } else {
	            $_POST['manager_id']=intval($_POST['manager_id']);
	            if($_POST['manager_id']<=0){
	                return $this->printmsg("请选择用户。",0,'manager_id');
	            }
	            $s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
	            $result=$s_user->updateFollowSeller((int)$urlparams ['uid'], (int)$_POST ['manager_id']);
	            if ($result->success) {
	                $params = array(
	                    'user_id' => (int)$urlparams ['uid'], //项目内调用时可不传
	                    'source' => 3, //0系统分配；1机会分配；2自主认领；3主管锁定；
	                    'expire_time' =>  time()+86400, //下次跟进时间戳，根据具体业务选择是否传递
	                );
	                $follow_service->follow($params);
	                if((int)$_POST ['manager_id']==$this->_userid){
	                    $this->addLog($urlparams ['uid'], "会员服务顾问{$this->_nickname}锁定了服务商。", 'user');
	                }else{
	                    $this->addLog($urlparams ['uid'], "{$this->_nickname}将服务商锁定给会员服务顾问" . $s_managercustom->get("name").'。', 'user');
	                }
	                return $this->printmsg ( "锁定会员服务商成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
	            } else {
	                return $this->printmsg ( "锁定会员服务商失败。".$result->message, 0, null, $_SERVER ['HTTP_REFERER'] );
	            }
	        }
	    }
	}
	/**
	 * 会员销售客服锁定
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagesalermanagerlock($inPath) {
	    $urlparams = $this->getUrlParams ( $inPath );
	    $urlparams ['uid'] = intval ( $urlparams ['uid'] );
	    if (! $urlparams ['uid']) {
	        if (count ( $_POST )) {
	            return $this->printmsg ( "系统错误。", 0 );
	        } else {
	            return "系统错误";
	        }
	    }
	    
	    lib_BaseUtils::apiInit(5,array('membership_sdk'));
	    $s_user=new com\zhubajie\membership\interfaces\UserServiceClient(null);
	    lib_BaseUtils::apigetclient($s_user);
	    $followuser=$s_user->getfollowuser( $urlparams ['uid']);
	    $s_manager = new zbj_service_manager ( $this->_userid );
	    if($s_manager->get('isleader')==0){
	        if (count ( $_POST )) {
	            return $this->printmsg ( "您不是部门leader无权限操作。", 0 );
	        } else {
	            return "您不是部门leader无权限操作。";
	        }
	    }
	    $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
	    lib_BaseUtils::apigetclient($follow_service);
	    
	    $manager_id = $followuser->manager_id;
	    if (count ( $_POST ) == 0) {
	        $this->tplvar = array (
	            'uid' => $urlparams ['uid'],
	            'manager_id'=>$manager_id?$manager_id:$this->_userid,
	        );
	        $s_manager2=new service_manager(0);
	        $this->tplvar['list']=$s_manager2->getIndustryuser(7,0);
	        if ($manager_id) {//解锁 或锁定其它人
                if ($manager_id == $this->_userid || $s_manager->get('isleader')) {
                    return $this->render('user/customer/releaselockforIndustry.html', $this->tplvar);
                } else {
                    return "你没有权限解锁或锁定该用户。";
                }
	        } else {
                return $this->render('user/customer/addlockforIndustry.html', $this->tplvar);
            }
	    } else {
	        if ($manager_id) {//解锁 或锁定其它人
	            if($_POST['lockother'] && $_POST['manager_id']){//锁定给其它人员
	                $result=$s_user->updateFollowManager((int)$urlparams ['uid'], (int)$_POST ['manager_id']);
	                $s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
	                if ($result->success) {
	                    $params = array(
	                        'user_id' => (int)$urlparams ['uid'], //项目内调用时可不传
	                        'source' => 3, //0系统分配；1机会分配；2自主认领；3主管锁定；
	                        'expire_time' => time()+86400, //下次跟进时间戳，根据具体业务选择是否传递
	                    );
	                    $follow_service->follow($params);
	                    if((int)$_POST ['manager_id']==$this->_userid){
	                        $this->addLog($urlparams ['uid'], "会员销售{$this->_nickname}锁定了服务商。", 'user');
	                    }else{
	                        $this->addLog($urlparams ['uid'], "{$this->_nickname}将服务商锁定给会员销售" . $s_managercustom->get("name").'。', 'user');
	                    }
	                    return $this->printmsg ( "锁定会员服务商成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
	                } else {
	                    return $this->printmsg ( "锁定用户失败。原因：".$result->message, 0, null, $_SERVER ['HTTP_REFERER'] );
	                }
	            }else{
	                $shipinfo=$s_user->getMembershipInfo((int)$urlparams ['uid'],0);
	                if(time()<=$shipinfo->info->expireTime){
	                    return $this->printmsg ( "用户还处于签约会员状态不能解锁.", 0, 'lockother');
	                }
	                $result=$s_user->updateFollowManager((int)$urlparams ['uid'], 0);
	                if ($result->success) {
                        $params = array(
                            'user_id' => (int)$urlparams ['uid'], //项目内调用时可不传
                            'is_sea' => 1,
                            'enter_sea_reason' => 3, //进入公海原因：1主动放弃；2未及时跟进；3主管解锁；
                        );
                        $follow_service->follow($params);
	                    $this->addLog($urlparams ['uid'], '会员服务商被解锁', 'user');
	                    $s_config=new zbj_service_allot(6);
	                    $s_config->processed((int)$urlparams['uid']);
	                    $s_config=new zbj_service_allot(99);
	                    $s_config->processed((int)$urlparams['uid']);
	                    return $this->printmsg("解锁会员服务商成功。",2,null,$_SERVER ['HTTP_REFERER']);
	                }else{
	                    return $this->printmsg ( "解锁会员服务商失败。".$result->message, 0, 'lockother');
	                }
	            }
	        } else {
	            $_POST['manager_id']=intval($_POST['manager_id']);
	            if($_POST['manager_id']<=0){
	                return $this->printmsg("请选择用户。",0,'manager_id');
	            }
	            $result=$s_user->updateFollowManager((int)$urlparams ['uid'], (int)$_POST ['manager_id']);
	            $s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
	            if ($result->success) {
	                $params = array(
	                    'user_id' => (int)$urlparams ['uid'], //项目内调用时可不传
	                    'source' => 3, //0系统分配；1机会分配；2自主认领；3主管锁定；
	                    'expire_time' =>  time()+86400, //下次跟进时间戳，根据具体业务选择是否传递
	                );
	                $follow_service->follow($params);
	                if((int)$_POST ['manager_id']==$this->_userid){
	                    $this->addLog($urlparams ['uid'], "会员销售{$this->_nickname}锁定了服务商。", 'user');
	                }else{
	                    $this->addLog($urlparams ['uid'], "{$this->_nickname}将服务商锁定给会员销售" . $s_managercustom->get("name").'。', 'user');
	                }
	                return $this->printmsg ( "锁定会员服务商成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
	            } else {
	                return $this->printmsg ( "锁定会员服务商失败。".$result->message, 0, null, $_SERVER ['HTTP_REFERER'] );
	            }
	        }
	    }
	}
	/**
	 * 客服锁定
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagewksetlock($inPath) {
		$lockuser = array (
				'顾留中','杜春永','王宗锐'
		);//可以锁用户
		$onlylocktoself = array (
		);//只能锁定到自已
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = intval ( $urlparams ['uid'] );
		if (! $urlparams ['uid']) {
			if (count ( $_POST )) {
				return $this->printmsg ( "系统错误。", 0 );
			} else {
				return "系统错误";
			}
		}
		$s_customer = new service_customer ( $urlparams ['uid'] );
		$s_manager = new zbj_service_manager ( $this->_userid );
		$manager_id = $s_customer->get ('info.manager_id');
		if (count ( $_POST ) == 0) {
			$this->tplvar = array (
					'uid' => $urlparams ['uid'],
					'manager_id'=>$this->_userid,
			);
			$s_allot=new zbj_service_allot(18);
			$users18=$s_allot->getusers();
			$s_allot=new zbj_service_allot(19);
			$users19=$s_allot->getusers();
			$s_allot=new zbj_service_allot(20);
			$users20=$s_allot->getusers();
			$s_allot=new zbj_service_allot(50);
			$users50=$s_allot->getusers();
			$s_allot=new zbj_service_allot(64);
			$users64=$s_allot->getusers();
			$s_allot=new zbj_service_allot(66);
			$users66=$s_allot->getusers();
			$s_allot=new zbj_service_allot(67);
			$users67=$s_allot->getusers();
			$s_allot=new zbj_service_allot(68);
			$users68=$s_allot->getusers();
			$s_allot=new zbj_service_allot(69);
			$users69=$s_allot->getusers();
			$s_allot=new zbj_service_allot(70);
			$users70=$s_allot->getusers();
			$users=array_merge($users18,$users19,$users20,$users50,$users64,$users66,$users67,$users68,$users69,$users70);
			//$users=array_merge($users18,$users19,$users20,$users50);
			if(is_array($users)){
				$condition[]= " user_id in (".implode(',', $users).")";
			}
			
// 			if (in_array ( $this->_nickname, $lockuser )) {//204-顾留中,318-李英
// 			} else {
// 			}
			$m_cp_user = new zbj_model_cp_user ( );
			$ulist = $m_cp_user->select($condition, '*', '', 'order by name')->items;
			$sCpUser = new service_cpuser();
			$groups = $sCpUser->getGroup();
			if($ulist){
				foreach ($ulist as $key => $value) {
					$this->tplvar['list'][$value['group_id']]['group_name'] = $groups[$value['group_id']]['name'];
					$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] = $value['name'];
					if ($value['isleave'] == 1) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（离职）';
					}else if($value['isleave'] == 2) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（调岗）';
					}else if($value['isleave'] == 3) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（休假）';
					}
				}
			}
			if ($manager_id) {//解锁 或锁定其它人
				$s_orgmanager=new service_manager($manager_id);
				if (
				$manager_id == $this->_userid ||
				in_array ( $this->_nickname, $lockuser ) || $s_manager->get('isleader')
				) {
					return $this->render ( 'user/customer/releaselock.html', $this->tplvar );
				}else{
					return "你没有权限解锁或锁定该用户。";
				}
			} else {
				if (in_array ( $this->_nickname, $onlylocktoself )) {
					return $this->render ( 'user/customer/addlockonce.html', $this->tplvar );
				} else {
					return $this->render ( 'user/customer/addlock.html', $this->tplvar );
				}
			}
		} else {
			if (in_array ( $this->_nickname, $onlylocktoself )) {
				$_POST['locktype']=1;
				$_POST['remainder']=1;
				$_POST['manager_id']=$this->uinfo->getId();
			}
			if ($manager_id) {//解锁 或锁定其它人
				if($_POST['lockother'] && $_POST['manager_id']){//锁定给其它人员
					switch ($_POST ['locktype']){
						case 1:
							$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配次数。",0,'remainder');
							}
							break;
						case 2:
							$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配到期时间。",0,'time');
							}
							break;
						default:
							return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
					}
					$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
					if ($s_customer->changeLockSeller ((int)$_POST ['manager_id'])) {
						if((int)$_POST ['manager_id']==$this->_userid){
							$this->addLog($urlparams ['uid'], "知识产权顾问{$this->_nickname}锁定了用户。", 'user');
						}else{
							$this->addLog($urlparams ['uid'], "{$this->_nickname}将用户锁定给知识产权顾问" . $s_managercustom->get("name").'。', 'user');
						}
						return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
					} else {
						return $this->printmsg ( "锁定用户失败。原因：".$s_customer->getError(), 2, null, $_SERVER ['HTTP_REFERER'] );
					}
				}else{
					if ($manager_id) {
						if ($s_customer->changeLockSeller (0)) {
							$this->addLog($urlparams ['uid'], '用户被解锁', 'user');
							return $this->printmsg("解锁用户成功。",2,null,$_SERVER ['HTTP_REFERER']);
						}else{
							return $this->printmsg ( "解锁用户失败。".$s_customer->getError(), 0, 'lockother', $_SERVER ['HTTP_REFERER'] );
						}
					}
				}
			} else {
				$_POST['manager_id']=intval($_POST['manager_id']);
				if($_POST['manager_id']<=0){
					return $this->printmsg("请选择用户。",0,'manager_id');
				}
				switch ($_POST ['locktype']){
					case 1:
						$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配次数。",0,'remainder');
						}
// 						if($_POST['lockvalue']>=20){
// 							return $this->printmsg("您锁定的次数太多了请保持在20次以内一些。",0,'remainder');
// 						}
						break;
					case 2:
						$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配到期时间。",0,'time');
						}
// 						if ($_POST ['lockvalue'] - time () > 86400 * 60) {
// 							return $this->printmsg ( "您锁定的时间太长了，请保持60天以内。", 0, 'time' );
// 						}
						break;
					default:
						return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
				}
				$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
				if ($s_customer->changeLockSeller ((int)$_POST ['manager_id'])) {
					if((int)$_POST ['manager_id']==$this->_userid){
						$this->addLog($urlparams ['uid'], "知识产权顾问{$this->_nickname}锁定了用户。", 'user');
					}else{
						$this->addLog($urlparams ['uid'], "{$this->_nickname}将用户锁定给知识产权顾问" . $s_managercustom->get("name").'。', 'user');
					}
					return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
				} else {
					return $this->printmsg ( "锁定用户失败。".$s_customer->getError(), 1, null, $_SERVER ['HTTP_REFERER'] );
				}
			}
		}
	}
	
	/**
	 * 锁定商标版权-案件代理人
	 *
	 * @param unknown_type $inPath
	 * @return Ambigous <boolean, string>|string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pageagentsetlock($inPath) {
		$lockuser = array (
				'顾留中','杜春永','王宗锐'
		);//可以锁用户
		$onlylocktoself = array (
		);//只能锁定到自已
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = intval ( $urlparams ['uid'] );
		if (! $urlparams ['uid']) {
			if (count ( $_POST )) {
				return $this->printmsg ( "系统错误。", 0 );
			} else {
				return "系统错误";
			}
		}
		$s_customer = new service_customer ( $urlparams ['uid'] );
		$s_manager = new zbj_service_manager ( $this->_userid );
		$manager_id = $s_customer->get ('info.agent_manager_id');
		if (count ( $_POST ) == 0) {
			$this->tplvar = array (
					'uid' => $urlparams ['uid'],
					'manager_id'=>$this->_userid,
			);
			$s_allot=new zbj_service_allot(72);
			$users = $s_allot->getusers();
			if(is_array($users)){
				$condition[]= " user_id in (".implode(',', $users).")";
			}
			// 			if (in_array ( $this->_nickname, $lockuser )) {//204-顾留中,318-李英
			// 			} else {
			// 			}
			$m_cp_user = new zbj_model_cp_user ( );
			$ulist = $m_cp_user->select($condition, '*', '', 'order by name')->items;
			$sCpUser = new service_cpuser();
			$groups = $sCpUser->getGroup();
			if($ulist){
				foreach ($ulist as $key => $value) {
					$this->tplvar['list'][$value['group_id']]['group_name'] = $groups[$value['group_id']]['name'];
					$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] = $value['name'];
					if ($value['isleave'] == 1) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（离职）';
					}else if($value['isleave'] == 2) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（调岗）';
					}else if($value['isleave'] == 3) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（休假）';
					}
				}
			}
			if ($manager_id) {//解锁 或锁定其它人
				$s_orgmanager=new service_manager($manager_id);
				if ($manager_id == $this->_userid ||in_array ( $this->_nickname, $lockuser ) || $s_manager->get('isleader')) {
					return $this->render ( 'user/customer/releaselock.html', $this->tplvar );
				}else{
					return "你没有权限解锁或锁定该用户。";
				}
			} else {
				if (in_array ( $this->_nickname, $onlylocktoself )) {
					return $this->render ( 'user/customer/addlockonce.html', $this->tplvar );
				} else {
					return $this->render ( 'user/customer/addlock.html', $this->tplvar );
				}
			}
		} else {
			if (in_array ( $this->_nickname, $onlylocktoself )) {
				$_POST['locktype']=1;
				$_POST['remainder']=1;
				$_POST['manager_id']=$this->uinfo->getId();
			}
			if ($manager_id) {//解锁 或锁定其它人
				if($_POST['lockother'] && $_POST['manager_id']){//锁定给其它人员
					switch ($_POST ['locktype']){
						case 1:
							$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配次数。",0,'remainder');
							}
							break;
						case 2:
							$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
							if($_POST['lockvalue']<=0){
								return $this->printmsg("请输入分配到期时间。",0,'time');
							}
							break;
						default:
							return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
					}
					$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
					if ($s_customer->changeLockAgent ((int)$_POST ['manager_id'])) {
						if((int)$_POST ['manager_id']==$this->_userid){
							$this->addLog($urlparams ['uid'], "知识产权顾问{$this->_nickname}锁定了用户。", 'user');
						}else{
							$this->addLog($urlparams ['uid'], "{$this->_nickname}将用户锁定给知识产权顾问" . $s_managercustom->get("name").'。', 'user');
						}
						return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
					} else {
						return $this->printmsg ( "锁定用户失败。原因：".$s_customer->getError(), 2, null, $_SERVER ['HTTP_REFERER'] );
					}
				}else{
					if ($manager_id) {
						if ($s_customer->changeLockAgent (0)) {
							$this->addLog($urlparams ['uid'], '用户被解锁', 'user');
							return $this->printmsg("解锁用户成功。",2,null,$_SERVER ['HTTP_REFERER']);
						}else{
							return $this->printmsg ( "解锁用户失败。".$s_customer->getError(), 0, 'lockother', $_SERVER ['HTTP_REFERER'] );
						}
					}
				}
			} else {
				$_POST['manager_id']=intval($_POST['manager_id']);
				if($_POST['manager_id']<=0){
					return $this->printmsg("请选择用户。",0,'manager_id');
				}
				switch ($_POST ['locktype']){
					case 1:
						$_POST ['lockvalue'] = intval ( $_POST ['remainder'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配次数。",0,'remainder');
						}
						// 						if($_POST['lockvalue']>=20){
						// 							return $this->printmsg("您锁定的次数太多了请保持在20次以内一些。",0,'remainder');
						// 						}
						break;
					case 2:
						$_POST ['lockvalue'] = strtotime ( $_POST ['time'] );
						if($_POST['lockvalue']<=0){
							return $this->printmsg("请输入分配到期时间。",0,'time');
						}
						// 						if ($_POST ['lockvalue'] - time () > 86400 * 60) {
						// 							return $this->printmsg ( "您锁定的时间太长了，请保持60天以内。", 0, 'time' );
						// 						}
						break;
					default:
						return $this->printmsg ( "错误的锁定方法。", 0, 'locktype' );
				}
				$s_managercustom = new zbj_service_manager ( $_POST ['manager_id'] );
				if ($s_customer->changeLockAgent ((int)$_POST ['manager_id'])) {
					if((int)$_POST ['manager_id']==$this->_userid){
						$this->addLog($urlparams ['uid'], "知识产权顾问{$this->_nickname}锁定了用户。", 'user');
					}else{
						$this->addLog($urlparams ['uid'], "{$this->_nickname}将用户锁定给知识产权顾问" . $s_managercustom->get("name").'。', 'user');
					}
					return $this->printmsg ( "锁定用户成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
				} else {
					return $this->printmsg ( "锁定用户失败。".$s_customer->getError(), 1, null, $_SERVER ['HTTP_REFERER'] );
				}
			}
		}
	}
	
	public function pagelawsetlock($inPath){
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = intval ( $urlparams ['uid'] );
		if (! $urlparams ['uid']) {
			if (count ( $_POST )) {
				return $this->printmsg ( "系统错误。", 0 );
			} else {
				return "系统错误";
			}
		}
		$s_manager = new zbj_service_manager ( $this->_userid );
		lib_BaseUtils::apiInit(10,array('ub-client'));
		$userBizClient = new com\zhubajie\ub\interfaces\UserBizAttrServiceIfClient(null);
		lib_BaseUtils::apigetclient($userBizClient);
		$userBiz = $userBizClient->getUserAttr ( $urlparams ['uid'], array (
				'EXPAND'
		) );
		$expand = unserialize ( $userBiz->usersFields [$urlparams ['uid']] ['EXPAND'] );
		$law_manager_id = $expand ['law_manager_id'];
		if($_POST){
			$manager_id = lib_BaseUtils::getStr($_POST['manager_id'],'int');
			
			$lockother = lib_BaseUtils::getStr($_POST['lockother'],'int');//锁定其他用户
			$locktype = lib_BaseUtils::getStr($_POST['locktype'],'int');
			if ($law_manager_id) {
				//锁定其他人
				if ($lockother && $manager_id) {
					if ($manager_id == $this->_userid) {
						$logtxt = '法律顾问'.$this->_truename.'锁定了用户';
					}else{
						lib_BaseUtils::apiInit();
						$bossuserClient = new com\zhubajie\boss\interfaces\userServiceClient(null);
						lib_BaseUtils::apigetclient($bossuserClient);
						$bossuser = $bossuserClient->getUser($manager_id);
						$logtxt = $this->_truename.'将用户锁定给法律顾问'.$bossuser->truename;
					}
				}else{
					$logtxt = '用户的法律顾问被解锁';
					$manager_id = 0;
				}
			}else{
				if ($manager_id == $this->_userid) {
					$logtxt = '法律顾问'.$this->_truename.'锁定了用户';
				}else{
					lib_BaseUtils::apiInit();
					$bossuserClient = new com\zhubajie\boss\interfaces\userServiceClient(null);
					lib_BaseUtils::apigetclient($bossuserClient);
					$bossuser = $bossuserClient->getUser($manager_id);
					$logtxt = $this->_truename.'将用户锁定给法律顾问'.$bossuser->truename;
				}
			}
			$expand ['law_manager_id'] = $manager_id;
			$userBizDTO = new com\zhubajie\ub\dataobject\userbiz\UserBizAttrDTO ();
			$userBizDTO->value = serialize ( $expand );
			$userBizDTO->field = 'EXPAND';
			$userBizDTO->option = com\zhubajie\ub\dataobject\userbiz\OptionType::SET;
			$res = $userBizClient->setUserAttr ( $urlparams ['uid'], array (
					$userBizDTO
			) );
			if ($res->success) {
				if ($manager_id == $this->_userid) {
					$this->addLog($urlparams ['uid'], $logtxt, 'user');
				}else{
					$this->addLog($urlparams ['uid'], $logtxt, 'user');
				}
				return $this->printmsg($manager_id == 0?'解锁成功':"锁定成功",1,null,$_SERVER ['HTTP_REFERER']);
			}else{
				return $this->printmsg($manager_id == 0?'解锁失败':"锁定失败".$res->message,0);
			}
		}else{
			$lockuser = array (
					'谭清'
			);//可以锁用户
			$onlylocktoself = array (
			);//只能锁定到自已
			$this->tplvar = array (
					'uid' => $urlparams ['uid'],
					'manager_id'=>$this->_userid,
			);
			$s_allot=new zbj_service_allot(76);
			$users = $s_allot->getusers();
			if(is_array($users)){
				$condition[]= " user_id in (".implode(',', $users).")";
			}
			$m_cp_user = new zbj_model_cp_user ( );
			$ulist = $m_cp_user->select($condition, '*', '', 'order by name')->items;
			$sCpUser = new service_cpuser();
			$groups = $sCpUser->getGroup();
			if($ulist){
				foreach ($ulist as $key => $value) {
					$this->tplvar['list'][$value['group_id']]['group_name'] = $groups[$value['group_id']]['name'];
					$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] = $value['name'];
					if ($value['isleave'] == 1) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（离职）';
					}else if($value['isleave'] == 2) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（调岗）';
					}else if($value['isleave'] == 3) {
						$this->tplvar['list'][$value['group_id']]['user'][$value['user_id']] .= '（休假）';
					}
				}
			}
			if ($law_manager_id) {//解锁 或锁定其它人
				$s_orgmanager=new service_manager($law_manager_id);
				if ($law_manager_id == $this->_userid ||in_array ( $this->_truename, $lockuser ) || $s_manager->get('isleader')) {
					return $this->render ( 'user/customer/releaselock.html', $this->tplvar );
				}else{
					return "你没有权限解锁或锁定该用户。".$this->_truename;
				}
			} else {
				if (in_array ( $this->_nickname, $onlylocktoself )) {
					return $this->render ( 'user/customer/addlockonce.html', $this->tplvar );
				} else {
					return $this->render ( 'user/customer/addlock.html', $this->tplvar );
				}
			}
		}
	}
	/**
	 * 设置用户锁定
	 * @param unknown_type $inPath
	 * @return string|Ambigous <string, void, boolean, mixed, unknown>|Ambigous <boolean, string>
	 */
	public function pagesetLock($inPath){
		$urlparams=$this->getUrlParams($inPath);
		$urlparams['uid']=zbj_lib_BaseUtils::getStr($urlparams['uid'],'int');
		if(!count($_POST)){
			if(empty($urlparams['uid'])){
				return "用户不合法";
			}
			$s_user=new zbj_service_user($urlparams['uid']);
			$ajaxparams=array();
			$ajaxparams['user']=$s_user->get();
			return $this->render('user/index/setlock.html', $ajaxparams);
		}
		$_POST['reason']=zbj_lib_BaseUtils::getStr($_POST['reason'],'string');
		$_POST['locks']=zbj_lib_BaseUtils::getStr($_POST['locks'],'int');
		$_POST['locktime']=zbj_lib_BaseUtils::getStr($_POST['locktime'],'int');
		if($_POST['reason']==''){
			return $this->printmsg("输入操作原因。",0,'reason');
		}
		$s_user=new zbj_service_user($urlparams['uid']);
		if($_POST['locks']==$s_user->get('locks')){
			return $this->printmsg("用户已经处理这个状态，不需要操作。",0,'locks');
		}
		if($_POST['locks']==1 && $_POST['locktime']===''){
			return $this->printmsg("输入锁定时间。",0,'locktime');
		}
		if($_POST['locks']==0){//解锁
			$log="解锁用户，原因：";
			$s_user->set('locks', 0);
		}else{
			$_POST['locktime']*=3600;
			$log="锁定用户，{$_POST['locktime']}秒。原因：";
			$s_user->lock(zbj_lib_BaseUtils::getStr($_POST['locktime']));
		}
		if($s_user->save()){
			$s_user->addUserLog($log.zbj_lib_BaseUtils::getStr($_POST['reason']),0,'','','',0,$this->_userid);
			//添加后台操作日志
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
				'type' => 'user',
				'pk_id' => $urlparams['uid'],
				'status' => 0,
				'content' => $log.zbj_lib_BaseUtils::getStr($_POST['reason']),
				'user_id' => $this->_userid,
				'name' => $this->_nickname,
				'create_time' => time()
			));
			return $this->printmsg("操作成功",2,null,$_SERVER ['HTTP_REFERER']);
		}else{
			return $this->printmsg("操作失败请稍后 再试。",0,null,$_SERVER ['HTTP_REFERER']);
		}
	}
	/**
	 * 设置用户组
	 * @param unknown_type $inPath
	 * @return string|Ambigous <string, void, boolean, mixed, unknown>|Ambigous <boolean, string>
	 */
	public function pagesetgroup($inPath){
		$urlparams=$this->getUrlParams($inPath);
		if(!in_array($this->_nickname,array('顾留中'))){
			return "无权限设置，请联系顾留中进行特权帐号登记。";
		}
		$urlparams['uid']=zbj_lib_BaseUtils::getStr($urlparams['uid'],'int');
		if(!count($_POST)){
			if(empty($urlparams['uid'])){
				return "用户不合法";
			}
			$s_user=new zbj_service_user($urlparams['uid']);
			$ajaxparams=array();
			$ajaxparams['user']=$s_user->get();
			return $this->render('user/index/setgroup.html', $ajaxparams);
		}
		$_POST['groups']=zbj_lib_BaseUtils::getStr($_POST['groups'],'int');
		$s_user=new zbj_service_user($urlparams['uid']);
		$s_user->set('groups',$_POST['groups']?$_POST['groups']:0);
		$log="设置用户组,组ID为".($_POST['groups']?$_POST['groups']:0);
		if($s_user->save()){
			$s_user->addUserLog($log.zbj_lib_BaseUtils::getStr($_POST['reason']),0,'','','',0,$this->_userid);
			//添加后台操作日志
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
				'type' => 'user',
				'pk_id' => $urlparams['uid'],
				'status' => 0,
				'content' => $log.zbj_lib_BaseUtils::getStr($_POST['reason']),
				'user_id' => $this->_userid,
				'name' => $this->_nickname,
				'create_time' => time()
			));
			return $this->printmsg("操作成功",2,null,SlightPHP::createUrl('/user/view',array('uid'=>$urlparams['uid'])));
		}else{
			return $this->printmsg("操作失败请稍后 再试。",0,null,SlightPHP::createUrl('/user/view',array('uid'=>$urlparams['uid'])));
		}
	}
	
	/**
	 * 屏蔽用户的稿件,评论,点评
	 */
	public function pageShieldWorks($inPath) {
		$urlparams = $this->getUrlParams($inPath);
		$uid = zbj_lib_BaseUtils::getStr($urlparams['uid'], 'int');
		if (!count($_POST)) {
			$m_item = new model_cp_optionitem();
			$condition = array('option_id' => 8, 'is_hide' => 0, 'pid' => 0);
			$item = $m_item->select($condition, '*', null, 'order by sort')->items;
			$params['refuse_reason'] = $item;
			$params['uid'] = $uid;
			return $this->render('user/ajax/shield.dialog.html', $params);
		}
		if (!$uid) {
			return $this->printmsg('缺少参数', 0);
		}
		$refuse_desc = trim(lib_BaseUtils::getStr($_POST['refuse_desc']));
		if(!$refuse_desc){
			return $this->printmsg("请输入屏蔽原因", 0, 'refuse_desc');
		}
		$type = $_POST['type'];
		$islock = (int) $_POST['islock'];
		$msg = '';
		if ($type) {
			foreach ($type as $t) {
				switch ((int) $t) {
					case 1://稿件
						$mWorks = new zbj_model_mk_works();
						$wlist = $mWorks->select(array('user_id' => $uid, 'open_state' => 0),'works_id')->items;
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '8', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						$allnum = 0;
						$snum = 0;
						if ($wlist) {
							$allnum = count($wlist);
							$sWorks = new service_works();
							foreach ($wlist as $value) {
								if ($sWorks->shieldWorks($value['works_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
									$snum++;
								}
							}
						}
						$msg .= "需屏蔽{$allnum}条稿件，成功了{$snum}条;";
						break;
					case 2://任务评论
						$mComment = new zbj_model_mk_taskcomment();
						$clist = $mComment->select(array('user_id' => $uid, 'state' => 0),'comment_id')->items;
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						$allnum = 0;
						$snum = 0;
						if ($clist) {
							$allnum = count($clist);
							$sTaskComment = new service_taskcomment();
							foreach ($clist as $value) {
								if ($sTaskComment->shieldComment($value['comment_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
									$snum++;
								}
							}
						}
						$msg .= "需屏蔽{$allnum}条任务评论，成功了{$snum}条;";
					case 3://稿件点评
						$mComment = new zbj_model_mk_workscomment();
						$clist = $mComment->select(array('user_id' => $uid, 'state' => 0),'comment_id')->items;
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						$allnum = 0;
						$snum = 0;
						if ($clist) {
							$allnum = count($clist);
							$sWorksComment = new service_workscomment();
							foreach ($clist as $value) {
								if ($sWorksComment->shieldComment($value['comment_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
									$snum++;
								}
							}
						}
						$msg .= "需屏蔽{$allnum}条稿件点评，成功了{$snum}条;";
						break;
				}
			}
		}
		if($islock){
			$s_user = new zbj_service_user($uid);
			if($s_user->lock(0)){
				$s_user->addUserLog("永久锁定用户。原因：$refuse_desc", 0, '', '', '', 0, $this->_userid);
				//添加后台操作日志
				$this->addLog($uid,"{$this->_nickname}[{$this->_userid}]永久锁定用户[$uid],原因：$refuse_desc",'user');
			}
			$msg .='已经永久锁定用户';
		}
		return $this->printmsg($msg, 1, null, $_SERVER ['HTTP_REFERER']);
	}
	/**
	 * 修改用户认证手机
	 * @param unknown_type $inPath
	 * @return string|Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pagemodifymobile($inPath) {
		$urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = zbj_lib_BaseUtils::getStr ( $urlparams ['uid'], 'int' );
		if ($urlparams ['uid'] <= 0 && ! count ( $_POST )) {
			return "用户不合法。";
		}
		$s_user = new zbj_service_user ( $urlparams ['uid'] );
		if ($s_user->get ( 'mobilestatus' ) == 1) {
			return "用户已经认证";
		}
		if (! count ( $_POST )) {
			$ajaxparams = array ();
			$ajaxparams ['uid'] = $urlparams ['uid'];
			$ajaxparams ['mobile'] = $s_user->get ( 'info.mobile' );
			return $this->render ( 'user/ajax/modifymobile.html', $ajaxparams );
		}
		$mobile = trim(zbj_lib_BaseUtils::getStr($_POST ['mobile']));
		if (! zbj_lib_BaseUtils::IsMobile ( $mobile )) {
			return $this->printmsg ( "手机格式不正确。", 0, 'mobile' );
		}
		// 检测重复
		$m_account = new zbj_model_mb_account ();
		$condition = "usermobile = '{$mobile}'" ;
		$condition .= " AND user_id <> " . $s_user->get ( 'user_id' );
		if ($m_account->selectOne ( $condition )) {
			return $this->printmsg ( "此手机已经认证过了，请填写其它手机试一下。", 0, 'mobile' );
		}
		$db_usermobile = $s_user->get('usermobile');
		$s_user->set ( 'usermobile', $mobile );
		$s_user->set ( 'mobilestatus', 1 );
		if ($s_user->save ()) {
			//后台日志
			$this->addLog($urlparams ['uid'], $this->_nickname . "修改用户[{$urlparams ['uid']}]手机认证", 'user');
			//用户日志
			if ($db_usermobile) {
				$s_user->addUserLog("人工把认证手机[{$db_usermobile}]修改成了[{$mobile}]", 0, $db_usermobile, $mobile, '', 0, $this->_userid);
			} else {
				$s_user->addUserLog("人工添加用户认证手机[{$mobile}]", 0, "", $mobile, '', 0, $this->_userid);
			}
			return $this->printmsg ( "操作成功" , 2, null, $_SERVER ['HTTP_REFERER']);
		} else {
			return $this->printmsg ( "操作失败" . $s_user->getError () );
		}
	}
	/**
	 * 取消手机认证
	 */
	public function pageclearmbcert($inPath){
		$urlParams = $this->getUrlParams($inPath);
		$params = array();
		//	$uid=$urlParams['uid']?(int)$urlParams['uid']:0;
		$uid = $_GET['uid'] ? (int) $_GET['uid'] : (int) $urlParams['uid'];
		//得到用户数据
		if (!count($_POST)) {
			if (empty($uid)) {
				return "用户不合法";
			}
			$params['uid'] = $uid;
			return $this->render('user/ajax/clearmobilestatus.html', $params);
		}
		$s_user = new zbj_service_user($uid);
		$s_customer=new service_customer($uid);
		$db_usermobile = $s_user->getAuthMobile();
// 		if(!$db_usermobile){
// 			return $this->printmsg("没有绑定手机无需操作。", 0, 'clearreason');
// 		}
// 		if ($s_customer->get('mobilestatus') == 0) {
// 			return $this->printmsg("没有绑定手机无需操作。", 0, 'clearreason');
// 		}
		$clearcontent = zbj_lib_BaseUtils::getStr($_POST['clearreason']);
		if (trim($clearcontent) == '') {
			return $this->printmsg("请输入操作原因。", 0, 'clearreason');
		}
		if($s_customer->get('customer.mobile')==''){
			$s_customer->set('customer.mobile',$db_usermobile);
			$s_customer->save();
		}
		$s_user->set('mobilestatus', 0);
		$s_user->set('usermobile', '');
		if ($s_user->save()) {
			//后台日志
			$this->addLog($uid, $this->_nickname . "取消了[$uid]手机认证", 'user');
			//用户日志
			if ($s_user->addUserLog("取消了[{$db_usermobile}]手机认证,原因：" . $clearcontent, "", $db_usermobile, "", "", 0, $this->_userid)) {
				return $this->printmsg("操作成功", 2, null, SlightPHP::createUrl('/user/view', array('uid' => $uid)));
			}
			return $this->printmsg("操作成功,但是记录日志失败。", 0);
		} else {
			return $this->printmsg("操作失败请稍后 再试。", 0);
		}
	}
	/**
	 * 取消邮箱认证
	 */
	public function pageclearmail($inPath){
		$urlParams = $this->getUrlParams($inPath);
		$params = array();
		//	$uid=$urlParams['uid']?(int)$urlParams['uid']:0;
		$uid = $_GET['uid'] ? (int) $_GET['uid'] : (int) $urlParams['uid'];
		//得到用户数据
		if (!count($_POST)) {
			if (empty($uid)) {
				return "用户不合法";
			}
			$params['uid'] = $uid;
			return $this->render('user/ajax/clearmailstatus.html', $params);
		}
		$s_user = new zbj_service_user($uid);
		$db_useremail = $s_user->getAuthEmail();
		if(!$db_useremail){
			return $this->printmsg("没有认证邮箱无需操作。", 0, 'clearreason');
		}
		// 		if ($s_customer->get('mobilestatus') == 0) {
		// 			return $this->printmsg("没有绑定手机无需操作。", 0, 'clearreason');
		// 		}
		$clearcontent = zbj_lib_BaseUtils::getStr($_POST['clearreason']);
		if (trim($clearcontent) == '') {
			return $this->printmsg("请输入操作原因。", 0, 'clearreason');
		}
		$s_user->set('emailstatus', 0);
		$s_user->set('useremail', '');
		if ($s_user->save()) {
			//后台日志
			$this->addLog($uid, $this->_nickname . "取消了[$uid]邮箱认证,原因：" . $clearcontent, 'user');
			//用户日志
			if ($s_user->addUserLog("取消了[{$db_useremail}]邮箱认证,原因：" . $clearcontent, "", $db_useremail, "", "", 0, $this->_userid)) {
				return $this->printmsg("操作成功", 2, null, SlightPHP::createUrl('/user/view', array('uid' => $uid)));
			}
			return $this->printmsg("操作成功,但是记录日志失败。", 0);
		} else {
			return $this->printmsg("操作失败请稍后 再试。", 0);
		}
	}
	/**
	 * 修改用户密码
	 */
	public function pageEditPwd($inPath) {
		$urlParams = $this->getUrlParams ( $inPath );
		$uid = zbj_lib_BaseUtils::getStr($urlParams['uid'], 'int', 0);
		$params=array();
		$params['uid'] = $uid;
		if(count($_POST)) {
			$uid = zbj_lib_BaseUtils::getStr($_POST['uid'], 'int', 0);
			$pwd = zbj_lib_BaseUtils::getStr($_POST['password']);
			if (!$uid) {
				return $this->printmsg("用户id不合法！",0);
			}
			if (!$pwd) {
				return $this->printmsg("密码不能为空！",0,'password');
			}
			$s_user = new zbj_service_user($uid);
			if(strlen($pwd) != 32) {
				$pwd = $s_user->checkPwdUpgrade($pwd);
			}
			$m_account = new zbj_model_mb_account();
			if($m_account->update(array('user_id'=>$uid), array('password'=>$pwd)) !== false){
				$s_user = new zbj_service_user($uid);
				$s_user->addUserLog('修改了密码', $typeId = 0, $oldData = '', $newData = '', $remark = '', $source = 0,$this->_userid);
				$this->addLog($uid, $this->_nickname . '修改了用户密码', 'user');
				return $this->printmsg ( "操作成功" , 2, null, $_SERVER ['HTTP_REFERER']);
			}else{
				return $this->printmsg("操作失败");
			}
		}
		return $this->render('user/ajax/editpwd.html', $params);
	}
	/**
	 * 通过用户昵称和手机号码查询用户手机验证码
	 * mb_cert_log
	 */
	public function pageGetCertCode($inPath) {
		$params = array();
		if (count($_GET)) {
			$type = zbj_lib_BaseUtils::getStr($_GET['type']);
			$urlparam = $this->getUrlParams($inPath);
			$page = zbj_lib_BaseUtils::getStr($urlparam['page'],'int');
			$limit=20;
			//交易
			if($type == 1) {
				$user_id = zbj_lib_BaseUtils::getStr($_GET['user_id'], 'int', 0);
				$phone = zbj_lib_BaseUtils::getStr($_GET['phone']);
				if (!$user_id && !$phone) {
					return $this->printmsg("请输入用户id和手机号码！",0);
				}
				$condition = array();
				if ($user_id) {
					$condition['user_id'] = $user_id;
				}
				if ($phone) {
					$condition['phone'] = $phone;
				}
				$condition['state'] = 0;
				$m_certLog = new zbj_model_mb_certlog();
				$m_certLog->setPage($page);
				$m_certLog->setLimit($limit);
				$m_certLog->setCount(true);
				$certLogObj = $m_certLog->select($condition, 'user_id, phone, code, datetime, clg_id', null, 'order by clg_id desc');
				$params['certlog'] = $certLogObj->items;
				$params['pagebar'] = $this->PageBar($certLogObj->totalSize,$limit,$page,$inPath,"style4",$_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '');
			}
			//注册
			if($type == 2) {
				$account = zbj_lib_BaseUtils::getStr($_GET['phone']);
				if (!$account) {
					return $this->printmsg("请输入用户手机号码或邮箱！",0);
				}
				$m_verified = new zbj_model_mb_accountverified();
				$m_verified->setPage($page);
				$m_verified->setLimit($limit);
				$m_verified->setCount(true);
				$leftjoin = array(
						'mb_account_key' => 'mb_account_key.vf_id = mb_account_verified.vf_id'
						);
				$verifiedObj = $m_verified->select(array('account'=>$account), 'mb_account_verified.account, mb_account_key.value, mb_account_key.regtime', null, 'order by mb_account_key.key_id desc', $leftjoin);
				$params['verified'] = $verifiedObj->items;
				$params['pagebar'] = $this->PageBar($verifiedObj->totalSize,$limit,$page,$inPath,"style4",$_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '');
			}
			
		}
		return $this->render('user/cert/getcertcode.html', $params);
	}

    /**
     * 关闭密码保护
     */
    public function pagepassloginprotect() {
        $mdlSF = new zbj_model_mb_safeaccprotect();
        $safeinfo = $mdlSF->selectOne("user_id=0");
        $safe = (int)$safeinfo['issetlogin'];
        if (intval($_GET['set'])) {
            $safe = $safe ? 0 : 1;
            if (empty($safeinfo)) {
                $item = array('user_id'=>0,'nickname'=>'','issetlogin'=>$safe,'loginsettime'=>time());
                $mdlSF->insert($item);
            } else {
                $mdlSF->update("user_id=0",array('issetlogin'=>$safe,'loginsettime'=>time()));
            }
        }
        return $this->printmsg($safe);
    }

	/**
	 * 编辑用户内部资料
	 *
	 * @param $inPath unknown_type
	 */
  	public function pageEditPerson($inPath) {
        $urlparams = $this->getUrlParams ( $inPath );
		$urlparams ['uid'] = zbj_lib_BaseUtils::getStr ( $urlparams ['uid'], 'int' );
		if ($urlparams ['uid'] <= 0 && ! count ( $_POST )) {
			echo "用户不合法。";
		}
        //t=1时，是从雇主详情页面传入的页面
        $urlparams ['t'] = zbj_lib_BaseUtils::getStr ( $urlparams ['t'], 'int' );

		$m_customerperson = new zbj_model_mb_customerperson ( $urlparams ['uid'] );
		if (! count ( $_POST )) {
                $ajaxparams = array ();
			$ajaxparams ['person'] = $m_customerperson->get ();
                $ajaxparams ['uid'] = $urlparams ['uid'];
			$s_option=new service_cpoption(15);
                $ajaxparams ['option_15']=$s_option->getItems();
            $s_option=new service_cpoption(16);
			    $ajaxparams ['option_16']=$s_option->getItems();
            $s_option=new service_cpoption(17);
			    $ajaxparams ['option_17']=$s_option->getItems();
			$s_option=new service_cpoption(18);
                $ajaxparams ['option_18']=$s_option->getItems();

			//省
			$mRegion = new zbj_model_mb_region();
			$ajaxparams ['provinces'] = $mRegion->select(array("parent_id" => 1))->items;
            $mb_info = zbj_model_api::get('zbj_model_mb_info');
            $ajaxparams['mbinfo'] = $mb_info->selectOne(array('user_id' => $aTask['user_id']),'mobile,email,qq,provname,cityname');
			if($urlparams ['t'] == 1){
                return $this->render ( 'user/ajax/editpersonview.html', $ajaxparams );
            }else{
                return $this->render ( 'user/ajax/editperson.html', $ajaxparams );
            }
		}

        //修改个资料
        if($urlparams ['t'] != 1){
            if(empty($_POST['lastname'])) return $this->printmsg("姓名不能为空",0);
            if(empty($_POST['mobile'])) return $this->printmsg("手机号不能为空",0);
            if(!zbj_lib_BaseUtils::IsMobile(trim($_POST['mobile'])) && trim($_POST['mobile']) != '') return $this->printmsg("请正确填写手机号。",0);
            if (!preg_match("/^((0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/",trim($_POST['phone'])) && trim($_POST['phone']) != '') return $this->printmsg("请正确填写座机号。",0);
            if(!zbj_lib_BaseUtils::IsQQ(trim($_POST['qq'])) && trim($_POST['qq']) != '') return $this->printmsg("请正确填写qq号。",0);
            if( !preg_match("/^[a-z0-9-_.]+@[\da-z][\.\w-]+\.[a-z]{2,4}$/i", trim($_POST['email'])) && trim($_POST['email']) != '') return $this->printmsg("请正确填写邮箱。",0);
            if( !preg_match("/^[0-9a-zA-Z]{3,12}$/",trim($_POST['wechat'])) && trim($_POST['wechat']) != '') return $this->printmsg("请正确填写微信号。",0);
            if(empty($_POST['employer_label'])) return $this->printmsg("角色不能为空",0);
            if(empty($_POST['industry'])) return $this->printmsg("行业不能为空",0);
            if(empty($_POST['industry2'])) return $this->printmsg("行业不能为空",0);
            if(empty($_POST['province']) || empty($_POST['city'])) return $this->printmsg("地区不能为空",0);
        }

        //增加团队人数和配合度功能,雇主详情页使用
        if($urlparams ['t'] == 1){
            $adaptability = intval($_POST['adaptability']);
            if ($adaptability <= 0 ) {
                return  $this->printmsg('请选择配合度');
            }
            if($adaptability > 11 || $adaptability < 1){
                return  $this->printmsg('配合度数据有误');
            }
            $_POST['adaptability'] = $adaptability;
            if ( ! ctype_digit($_POST['team_num']) ) {
                return  $this->printmsg('请填写正确的团队人数');
            }
            $team_num    = intval($_POST['team_num']);
            if($team_num < 0 || $team_num >= 10000){
                return  $this->printmsg('团队人数只能介于0-9999,0为未设置');
            }
            $_POST['team_num'] = $team_num;
        }

		if (! $_POST ['lastname']) {
			return $this->printmsg ( "请填写姓名", 0, 'lastname' );
		}
		if (! $_POST ['salutationtype']) {
			//return $this->printmsg ( "请选择性别", 0, 'salutationtype' );
		}
		if (! $_POST ['mobile'] && ! $_POST ['phone']) {
			//return $this->printmsg ( "请填写手机或座机至少填写一个。", 0, 'mobile' );
		}
		
		$row = $m_customerperson->selectOne(array('user_id' => $urlparams ['uid']));
		if ($row) {
			$return = $m_customerperson->update ( array ('user_id' => $urlparams ['uid'] ), $_POST );
		} else {
			$_POST ['user_id'] = $urlparams ['uid'];
			$return = $m_customerperson->insert ( $_POST );
		}
		if ($return) {
			//用户日志
			if ($row['lastname'] != $_POST['lastname']) {
				$log .= ",姓名[{$row['lastname']}]改为[{$_POST['lastname']}]";
			}
			if ($row['salutationtype'] != $_POST['salutationtype']) {
				$log .= ",性别[{$row['salutationtype']}]改为[{$_POST['salutationtype']}]";
			}
			if ($row['mobile'] != $_POST['mobile']) {
				$log .= ",手机[{$row['mobile']}]改为[{$_POST['mobile']}]";
			}
			if ($row['phone'] != $_POST['phone']) {
				$log .= ",座机[{$row['phone']}]改为[{$_POST['phone']}]";
			}
            if ($row['qq'] != $_POST['qq']) {
                $log .= ",qq[{$row['qq']}]改为[{$_POST['qq']}]";
            }
            if ($row['email'] != $_POST['email']) {
                $log .= ",email[{$row['email']}]改为[{$_POST['email']}]";
            }
            if ($row['employer_label'] != $_POST['employer_label']) {
                $log .= ",角色[{$row['employer_label']}]改为[{$_POST['employer_label']}]";
            }
            if ($row['wechat'] != $_POST['wechat']) {
                $log .= ",微信[{$row['wechat']}]改为[{$_POST['wechat']}]";
            }
			if ($row['industry'] != $_POST['industry']) {
				$log .= ",行业[{$row['industry']}]改为[{$_POST['industry']}]";
			}
			if ($row['province'] != $_POST['province']) {
				$log .= ",省[{$row['province']}]改为[{$_POST['province']}]";
			}
			if ($row['city'] != $_POST['city']) {
				$log .= ",市[{$row['city']}]改为[{$_POST['city']}]";
			}
            if ($row['com_scale'] != $_POST['com_scale']) {
                $log .= ",企业规模[{$row['com_scale']}]改为[{$_POST['com_scale']}]";
            }
			if ($row['about'] != $_POST['about']) {
				$log .= ",备注[{$row['about']}]改为[{$_POST['about']}]";
			}
            //雇主详情页使用
            if ($row['pay_ability'] != $_POST['pay_ability']) {
                $log .= ",经济条件[{$row['pay_ability']}]改为[{$_POST['pay_ability']}]";
            }
            if ($row['company'] != $_POST['company']) {
                $log .= ",企业名称[{$row['company']}]改为[{$_POST['company']}]";
            }
            if ($row['adaptability'] != $_POST['adaptability']) {
                $log .= ",配合度[{$row['adaptability']}]改为[{$_POST['adaptability']}]";
            }
            if ($row['team_num'] != $_POST['team_num']) {
                $log .= ",团队人数[{$row['team_num']}]改为[{$_POST['team_num']}]";
            }
			//后台日志
			$this->addLog($urlparams ['uid'], $this->_nickname . "编辑用户内部资料[{$urlparams ['uid']}]" . $log, 'user');
			$sUser = new zbj_service_user($urlparams ['uid']);
			$sUser->addUserLog('编辑用户内部资料' . $log, 0, json_encode($row), json_encode($_POST), '', 0, $this->_userid);
			if (strpos ( $_SERVER ['HTTP_REFERER'], '/record' ) === false) {
				return $this->printmsg ( "操作成功" , 2, null, $_SERVER ['HTTP_REFERER'] );
			} else {
				return $this->printmsg ( "操作成功", 2 );
			}
		} else {
			return $this->printmsg ( "保存失败,可能没有修改。", 0, null, null );
		}
	}
	
	/**
	 * 登录日志列表
	 */
	public function pageLoginLog($inPath) {
		$urlparm = $this->getUrlParams ( $inPath );
		$uid = zbj_lib_BaseUtils::getStr($urlparm['uid'], 'int', 0);
		if (!$uid) {
			return $this->printmsg('用户id不合法！');
		}
		$params = array();
		$params = $this->getCommonUserInfo($uid);
		$m_log = new zbj_model_lg_login();
		$curpage = isset ( $urlparm ['page'] ) ? $urlparm ['page'] : 1;
		$limit = 10;
		$m_log->setCount(true);
		$m_log->setLimit($limit);
		$m_log->setPage($curpage);
		$rs = $m_log->select(array('user_id'=>$uid), '*', null, 'order by login_id desc');
		$params ['pagebar'] = $this->PageBar ( $rs->totalSize, $limit, $curpage, $inPath, 'style4');
		$params ['loginlog'] = $rs->items;
		$params ['uid'] = $urlparm ['uid'];
		return $this->render ( "user/index/loginlog.html", $params );
	}
	/**
	 * 取消微博认证
	 */
	public function pageDelWeiBo($inPath) {
		$urlParams = $this->getUrlParams ( $inPath );
		$id = lib_BaseUtils::getStr ( $urlParams ['wid'], "int" );
		if (!$id) {
			return $this->printmsg('微博主键id不合法！');
		}
		$m_weibo = new zbj_model_mb_weibo();
		if ($m_weibo->delete(array('weibo_id' => $id))) {
			$oWeibo = $m_weibo->selectOne(array('weibo_id' => $id), 'user_id');
			if($oWeibo){
				$this->addLog($oWeibo['user_id'], $this->_nickname . '取消了微博认证', 'user');
			}
			return $this->printmsg("操作成功。", 2, null, $_SERVER['HTTP_REFERER']);
		}else{
			return $this->printmsg("操作失败！");
		}
	}
	/**
	 * 快速登录
	 */
	public function pagequicklogin($inPath){
		$urlparams=$this->getUrlParams($inPath);
		//采用用户名登录
		if (isset($_GET['name']) && $_GET['name']) {
			$model = new zbj_model_mb_account();
			$nickname = zbj_lib_BaseUtils::getStr($_GET['name']);
			$result = $model->selectOne('nickname="'.$nickname.'"', 'user_id');
			$userid = (int)$result['user_id'];
		} else {
			$userid = (int)$urlparams['uid'];
		}
		if($urlparams['tid']){
			$model = new zbj_model_mk_task();
			$condi = array('task_id'=>intval($urlparams['tid']));
			$result = $model->selectOne($condi, 'user_id');
			$userid = (int)$result['user_id'];
		}
// 		if($_GET['do'] == 'out'){
// 			$cookie['userkey'] = '';
// 			$cookie['userid'] = '';
// 			$cookie['nickname'] = '';
// 			zbj_lib_BaseUtils::ssetcookie($cookie, 0 , '/', zbj_lib_Constant::DOMAIN);
// 			$this->redirect(zbj_lib_Constant::USERLOGIN);
// 			exit;
// 		}
		$srvUser = new service_user($userid);
		if(!$srvUser->get('nickname')){
			return $this->printmsg("用户不存在",2);
		}
		$url=$_REQUEST['url'];
		if(!$url){
			$action=array();
			if($urlparams['tid']){
				$action[]=array('url'=>zbj_lib_Constant::TASK_URL.'/'.$urlparams['tid'],'text'=>'任务页');
// 				$action[]="打开<a href=\"".zbj_lib_Constant::TASK_URL.'/'.$urlparams['tid']."\" target=\"_blank\">任务页</a>";
			}
// 			$action[]="打开<a href=\"".zbj_lib_Constant::HOME_URL.'/'.$userid."\" target=\"_blank\">用户页</a>";
// 			$action[]="打开<a href=\"".zbj_lib_Constant::MAIN_URL."\" target=\"_blank\">猪八戒首页</a>";
			$action[]=array('url'=>zbj_lib_Constant::HOME_URL.'/'.$userid,'text'=>'用户页');
			$action[]=array('url'=>zbj_lib_Constant::MAIN_URL,'text'=>'猪八戒首页');
			$this->tplvar['action']=$action;
			return $this->render('user/ajax/quicklogin.html',$this->tplvar);
		}
		$this->addLog($userid,'从后台登录了用户帐号,登录后进入'.zbj_lib_BaseUtils::getStr($url),'user');
		return $this->redirect($srvUser->getLoginBuyerAccountUrl($this->_userid, $url));
		
		$cookie['userid'] = $userid;
		$cookie['safe'] = 1;
		$cookie['skey'] = md5 ($userid.$cookie['safe'].zbj_lib_Constant::ZBJ_SYSUSERKEY );
		$cookie['hasinvite'] = 1;
		$cookie['invitekey'] = md5($userid . zbj_lib_Constant::ZBJ_SYSUSERKEY );
		$cookie['nickname'] = $srvUser->get('nickname');
		$cookie['brandname'] = $srvUser->get('info.brandname');
		$cookie['userkey'] = md5 ($userid.$srvUser->get('nickname').zbj_lib_Constant::ZBJ_SYSUSERKEY );
		zbj_lib_BaseUtils::ssetcookie($cookie, 600 , '/', zbj_lib_Constant::DOMAIN);
		$action=array();
		if($urlparams['tid']){
			$action[]=array('url'=>zbj_lib_Constant::TASK_URL.'/'.$urlparams['tid'],'text'=>'任务页');
			//"打开<a href=\"".zbj_lib_Constant::TASK_URL.'/'.$urlparams['tid']."\" target=\"_blank\"></a>";
		}
		$action[]=array('url'=>zbj_lib_Constant::HOME_URL.'/'.$userid,'text'=>'用户页');
		//$action[]="打开<a href=\"".zbj_lib_Constant::HOME_URL.'/'.$userid."\" target=\"_blank\">用户页</a>";
		$action[]=array('url'=>zbj_lib_Constant::MAIN_URL,'text'=>'猪八戒首页');
// 		$action[]="打开<a href=\"".zbj_lib_Constant::MAIN_URL."\" target=\"_blank\">猪八戒首页</a>";
		$srvUser->addUserLog('从后台登录了用户帐号',0,null,null,null,0,$this->_userid);
		$this->addLog($userid,'从后台登录了用户帐号','user');
		return $this->printmsg("登录成功,您可以作如下操作：<br />".implode('<br />', $action),1);
	}
	
	/**
	 * 信用度考试题库
	 */
	public function pageCreditExam($inPath) {
		$urlparam = $this->getUrlParams($inPath);
		$page = (int)$urlparam['page'] ? (int)$urlparam['page'] : 1;
		$limit = 20;
		$exampool = new zbj_model_mb_creditexampool();
		$exampool->setCount(TRUE);
        $exampool->setPage($page);
        $exampool->setLimit($limit);
		$result = $exampool->select(array(), '*', '', 'order by pid desc');
		$expList = $result->items;
		if ($result->totalSize > $limit) {
            $this->tplvar ['pagebar'] = $this->PageBar($result->totalSize, $limit, $page, $inPath, "style3", $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '');
        }
        $this->tplvar ['list'] = $expList;
        $this->tplvar ['totalsize'] = $result->totalSize;
        $this->tplvar ['totalpage'] = $result->totalPage;
        return $this->render('user/credit/exam.html', $this->tplvar);
	}
	
	/**
	 * 信用度考试题库添加/编辑
	 */
	public function pageCreditExamEdit($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        if (count($_POST) == 0) {
            $pid = (int) $urlparam ['id'];
            if ($pid > 0) {
            	$exampool = new zbj_model_mb_creditexampool($pid);
                $exam = $exampool->selectOne(array('pid' => $pid));
                $this->tplvar ['exam'] = $exam;
            }
            return $this->render('user/credit/examedit.html', $this->tplvar);
        } else {
            $pid = (int) $_POST ['pid'];
            $exampool = new zbj_model_mb_creditexampool($pid);
            if ($pid > 0) {
                $exam = $exampool->selectOne(array('pid' => $pid));
                if (empty($exam)) {
                    return $this->printmsg('您要编辑的数据不存在，请刷新点确定后再试一下。', 1, null, '/user/creditexam');
                }
            }
            $title = zbj_lib_BaseUtils::getStr($_POST ['title']);
            if (!trim($title)) {
                return $this->printmsg('请输考试题目。', 0, 'title');
            }
        	$answera = zbj_lib_BaseUtils::getStr($_POST ['answera']);
            if (!trim($answera)) {
                return $this->printmsg('请输考试答案A。', 0, 'answera');
            }
        	$answerb = zbj_lib_BaseUtils::getStr($_POST ['answerb']);
        	$answerc = zbj_lib_BaseUtils::getStr($_POST ['answerc']);
        	$answerd = zbj_lib_BaseUtils::getStr($_POST ['answerd']);
        	$answere = zbj_lib_BaseUtils::getStr($_POST ['answere']);
            $rulelink = zbj_lib_BaseUtils::getStr($_POST ['rulelink']);
            $answer = (int) $_POST ['answer'];
            if (!in_array($answer, array(1, 2, 3, 4, 5))) {
                return $this->printmsg('请选择正确答案。', 0, 'answer');
            }

            $item = array(
                'title' => $title,
                'answer' => $answer,
                'answera' => $answera,
                'answerb' => $answerb,
                'answerc' => $answerc,
                'answerd' => $answerd,
            	'answere' => $answere,
                'rulelink' => $rulelink,
                'updatetime' => $this->_time
            );
            if ($pid) {
                $res = $exampool->update(array('pid' => $pid), $item);
            } else {
                $res = $exampool->insert($item);
            }
            if ($res) {
                return $this->printmsg('操作成功', 1, null, '/user/creditexam');
            } else {
                return $this->printmsg('操作失败', 0);
            }
        }
    }

    /**
     * 信用度考试题库删除
     */
    public function pageCreditExamDel($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $pid = (int) $urlparam ['id'];
        $exampool = new zbj_model_mb_creditexampool($pid);
        if (count($exampool->getData()) == 0) {
            return $this->printmsg('您要删除的数据不存在，请刷新点确定后再试一下。', 1, null, '/user/creditexam');
        }
        if ($exampool->del()) {
            return $this->printmsg('删除成功', '1', '', '/user/creditexam');
        } else {
            return $this->printmsg('删除失败', 1);
        }
    }
    
    /*
     * 信用度明细
     */
    public function pageCreditLog($inPath){
        $urlparam = $this->getUrlParams($inPath);
        $uid = (int) $urlparam ['uid'];
        if(!$uid){
            return $this->printmsg('参数错误');
        }
        $params = $this->getCommonUserInfo($uid);
        $iPage = $urlparam['page'] ? intval($urlparam['page']) : 1;
        $iLimit = 10;
        $oMdlLog = new zbj_model_mb_creditlog();
        $oMdlLog->setCount(true);
        $oMdlLog->setpage($iPage);
        $oMdlLog->setLimit($iLimit);
        $aLogList = $oMdlLog->select(array('user_id'=>$uid),'*','','order by id DESC');
        if($aLogList->items){
            $params['loglist'] = $aLogList->items;
            if($aLogList->totalSize > $iLimit){
                $params['pagebar'] = $this->pageBar($aLogList->totalSize, $iLimit, $iPage, $inPath, 'style4');
            }
        }
        //是否有冻结记录
        $aFreeze = $oMdlLog->selectOne("user_id={$uid} and type in (5,6)", 'count(id) as num');
        if($aFreeze['num'] > 0){
            $params['havefreeze'] = 1;
        }
        $oUser = new zbj_service_user($uid);
        $credit = $oUser->getCredit();
        if($credit < 100){
            $oMdlRecover = new zbj_model_mb_creditrecover();
            $aRecover = $oMdlRecover->selectOne(array('user_id'=>$uid));
            if($aRecover){
                $needtime = $aRecover['recovertime'] - $this->_time;
                if($needtime <= 0){
                    $needday = 0;
                }else{
                    $needday = ceil($needtime/86400.00);
                }
                $params['needday'] = $needday;//恢复到90天或100天需要天数
                if($credit <= 80){//节点处罚
                    if($aRecover['punishtime'] > $this->_time){//处罚中
                        $step = 1;
                    }else{
                        $oMdlExam = new zbj_model_mb_creditexam();
                        $aExam = $oMdlExam->selectOne(array('user_id'=>  $uid));
                        if($aExam['ispass'] == 0){
                            $step = 2;//需要考试
                        }else{
                            $step = 3;//等待恢复
                        }
                    }
                    //处罚所需时间
                    if($credit > 60){
                        $params['punishday'] = 3;
                    }elseif($credit > 40 && $credit <= 60){
                        $params['punishday'] = 7;
                    }elseif($credit > 0 && $credit <= 40){
                        $params['punishday'] = 14;
                    }else{
                        $params['punishday'] = 100;//永久封号
                    }
                    $params['step'] = $step;
                    $params['recover'] = $aRecover;
                }
            }
        }
        $params['creditpoints'] = $credit;
        $params['freezingcredit'] = $oUser->get('info.freezingcredit');
//        var_dump($params);exit;
        return $this->render('user/index/creditlog.html', $params);
    }
    
    /*
     * 信用度低于80分的用户列表
     */
    public function pageLowCredit($inPath){
        
        $urlvalue = $this->getUrlParams($inPath);
        $iPage = $urlvalue['page'] ? $urlvalue['page'] : 1;
        $iLimit = 20;
        $oInfo = new zbj_model_mb_info();
        $oInfo->setCount(true);
        $oInfo->setLimit($iLimit);
        $oInfo->setPage($iPage);
        $condition = 'creditlevel < 4';
        if($_GET){
            $type = intval($_GET['type']);
            $key = zbj_lib_BaseUtils::getStr($_GET['key']);
            if(!$type){
                return $this->ShowMsg('请选择类别');
            }
            if($type && empty($key)){
                return $this->ShowMsg('关键字不能为空');
            }
            switch ($type) {
                case 1:
                    $condition .= " and user_id={$key}";
                    break;
                case 2:
                    $condition .= " and nickname={$key}";
                    break;
                case 3:
                    $condition .= " and brandname={$key}";
                    break;
                default:
                    break;
            }
            $params['type'] = $type;
            $params['key'] = $key;
        }
        $aRes = $oInfo->select($condition, 'user_id,nickname,brandname,creditpoints,freezingcredit,creditlevel');
        $params['lowlist'] = $aRes->items;
        if($aRes->totalSize > $iLimit){
            $params['pagebar'] = $this->pageBar($aRes->totalSize, $iLimit, $iPage, $inPath, 'style4');
        }
        $params['totalpage'] = $aRes->totalPage;
        $params['totalsize'] = $aRes->totalSize;
        return $this->render('user/credit/lowcredit.html', $params);
    }
    
    /*
     * 修改信用度（增加）
     */
    public function pageEditCredit($inPath){
        if(count($_POST)) {
			$uid = zbj_lib_BaseUtils::getStr($_POST['uid'], 'int', 0);
			$point = intval($_POST['point']);
            $msg = zbj_lib_BaseUtils::getStr($_POST['msg']);
			if (!$uid) {
				return $this->printmsg("用户id不合法！",0);
			}
			if (!$point) {
				return $this->printmsg("分值不能为空！",0,'point');
			}
            if (empty($msg)) {
				return $this->printmsg("原因不能为空！",0,'msg');
			}
			$s_user = new zbj_service_user($uid);
			if($_POST['do'] == 1){
				if($s_user->deduceCredit($msg, $point, $this->_userid) !== false){
					$s_user->addUserLog('由于['.$msg.']，后台手动扣除'.$point.'分信用值');
					return $this->printmsg ( "操作成功" , 2, null, $_SERVER ['HTTP_REFERER']);
				}else{
					return $this->printmsg("操作失败，原因：".$s_user->getError());
				}
			}else{
				if($s_user->addCredit($msg, $point,$this->_userid) !== false){
					$s_user->addUserLog('由于['.$msg.']，后台手动加'.$point.'分信用值');
					return $this->printmsg ( "操作成功" , 2, null, $_SERVER ['HTTP_REFERER']);
				}else{
					return $this->printmsg("操作失败，原因：".$s_user->getError());
				}
			}
		}
        $urlvalue = $this->getUrlParams($inPath);
        $params['uid'] = intval($urlvalue['uid']);
		$params['do'] = intval($urlvalue['do']);
		$params['noticeName'] = $params['do'] == 1 ? "扣" : "加";
		return $this->render('user/credit/ajaxedit.html', $params);
    }

	/**
	 * 金牌服务商添加/编辑
	 */
	public function pageRecommendEdit($inPath) {
		$urlparam = $this->getUrlParams($inPath);//define('DEBUG', 1);
		$mbinfo = new zbj_model_mb_info();
		$mbcategory = new zbj_model_mb_usercategory();
		if (count($_POST) == 0) {
			$id = (int) $urlparam ['id'];
			if ($id > 0) {
				$info = $mbinfo->selectOne(array('user_id' => $id));
				$this->tplvar ['info'] = $info;
				$usercatalog = $mbcategory->select("user_id={$id} and is_resident=1", '*')->items;
				if ($usercatalog) {
					$srvCategory = new zbj_service_category();
					foreach ($usercatalog as $k => $v) {
						$srvCategory->setid($v['category_id']);
						$cateName = $srvCategory->getPath();
						$usercatalog[$k]['category1name'] = $cateName[0]['category_name'];
						$usercatalog[$k]['category2name'] = $cateName[1]['category_name'];
						$usercatalog[$k]['category_name'] = $cateName[2]['category_name'];
					}
				}
				$this->tplvar ['usercatalog'] = $usercatalog;
			}
			//客服组
			$cpuser = new zbj_model_cp_user();
			$auids = $cpuser->select(array('group_id' => 72), 'user_id,name')->items;
			$this->tplvar ['auids'] = $auids;
			return $this->render('user/recommend/edituser.html', $this->tplvar);
		} else {
			$id = (int) $_POST ['id'];
			$manager_id = intval($_POST ['manager_id']);
			$state = intval($_POST ['state']);
			$userinfo = $mbinfo->selectOne("user_id='{$id}'", 'user_id,nickname,isfws');
			if (empty($userinfo)) {
				return $this->printmsg('无效ID', 0);
			}
			$catalogid = $_POST ['catalogid'];
			$ismainck = $_POST ['ismain'];
			//define('DEBUG', 1);
			$mbcategory->update("user_id={$id}", array('is_resident'=>0,'is_main'=>0));
			if (count($catalogid)) {
				$arr = array();
				foreach ($catalogid as $k => $v) {
					if (!in_array($v, $arr)) {
						$arr[] = $v;
						$cataid = explode('_', $v);
						if (empty($cataid[2])) {
							continue;
						}
						$ismain = (int)$ismainck[$k];
						//写入mb_user_category
						$item = array(
							'category1id' => $cataid[0],
							'category2id' => $cataid[1],
							'category_id' => $cataid[2],
							'user_id' => $id,
							'nickname' => $userinfo['nickname'],
							'is_resident' => 1,
							'is_main' => $ismain
						);
						$re = $mbcategory->selectOne("user_id={$id} and category_id={$cataid[2]}");
						if ($re) {
							$res = $mbcategory->update("user_id={$id} and category_id={$cataid[2]}", $item);
						} else {
							$res = $mbcategory->insert($item);
						}
					}
				}
			}
			$item = array();
			if ($manager_id) {
				$s_manager = new zbj_service_manager($manager_id);
				$item['manager_id'] = $manager_id;
				$item['manager_name'] = $s_manager->get('name');
				$res = $mbinfo->update("user_id='{$id}'", $item);
			}
			if ($res !== false) {
				//更新
				$userser = new zbj_service_user($id);
				$userser->addSearchQueue(1,'U');
				return $this->printmsg('操作成功', 2, null, $_SERVER ['HTTP_REFERER']);
			} else {
				return $this->printmsg('操作失败', 0);
			}
		}
	}
	
	/**
	 * 频道选分类/服务商组选服务商
	 * type 123/0
	 */
	public function pageGetChannelCatalog($inPath) {
		$urlparam = $this->getUrlParams($inPath);
		$type = (int)$urlparam['type']? (int)$urlparam['type'] : 0;
		if (in_array($type, array(1,2,3))) {//分类一二三级
			$catId = intval($urlparam['id']);
			$virtual = new zbj_service_category();
			$treelist = $virtual->getTree();
			if ($type == 1) {
				$catalist = $treelist;
			} elseif ($type == 2) {
				$catalist = $treelist[$catId]['list'];
			} else {
				foreach ($treelist as $v1) {
					if ($v1['list']) {
						foreach ($v1['list'] as $v2) {
							if ($v2['category_id'] == $catId) {
								$catalist = $v2['list'];
								break;
							}
						}
					}
				}
			}
			if ($catalist) {
				foreach ($catalist as $k => $v) {
					if ($v['is_show'] == 1) {
						$data[] = array('id' => $v['category_id'], 'name' => $v['category_name']);
					}
				}
			}
		} elseif ($type == 5) {//T5分类
			$channel_id = (int)$urlparam['id'];
			if (empty($channel_id)) {
				return json_encode(array());
			}
			$recomuser = new zbj_model_mb_recommenduser();
			$catalog = $recomuser->select("channel_id={$channel_id} and type=0", 'catalog_id,catalog_name', 'group by catalog_id')->items;
			if (count($catalog)) {
				foreach ($catalog as $v) {
					$data[] = array('id' => $v['catalog_id'], 'name' => $v['catalog_name']);
				}
			}
		} elseif ($type == 6) {//列表评价tip
			$uid = (int)$urlparam['id'];
			$mdlremark = new zbj_model_cp_remark();
			$mdlremark->setLimit(5);
			$marklist = $mdlremark->select("pk_id={$uid} and type_id=6 and is_log=0 and remark_catalog=2",'*','','order by remark_id desc')->items;
			if ($marklist) {
				foreach ($marklist as $v) {
					$data .= "<div><span style='float:left;'>{$v['content']}</span><br />{$v['name']} ".date('Y-m-d H:i:s', $v['create_time'])."</div>";
				}
			}
			return 	$data ? $data : '';
		}
		if ($data) {
			return json_encode($data);
		} else {
			return json_encode(array());
		}
	}
	
	/**
     * 金牌服务商列表
     */
    public function pageRecommendUser($inPath) {
		//define('DEBUG', 1);
		$urlparam = $this->getUrlParams($inPath);
		$page = (int)$urlparam['page'] ? (int)$urlparam['page'] : 1;
		$limit = 25;
		$mbinfo = new zbj_model_mb_info();
		$cpuser = new zbj_model_cp_user();
		$isr = (int)$urlparam['isr'];
		$this->tplvar['isr'] = $isr;
		$usr = (int)$urlparam['usr'] ? (int)$urlparam['usr'] : 0;
		$this->tplvar['usr'] = $usr;
		$ajax = (int)$urlparam['ajax'];
		
		//客服组
		$auids = $cpuser->select(array('group_id' => 72), 'user_id,name')->items;
		$this->tplvar ['auids'] = $auids;

		//搜索
		//分类
		$condition = array();
    	$category1id = intval($_GET['c1id'])?intval($_GET['c1id']):0;
		$search['c1id'] = $category1id;
		$category2id = intval($_GET['c2id'])?intval($_GET['c2id']):0;
		$search['c2id'] = $category2id;
		$category3id = intval($_GET['c3id'])?intval($_GET['c3id']):0;
		$search['c3id'] = $category3id;
		//define('DEBUG', 1);
		//派单信息
		if ($usr) {
			switch ($usr) {
				case 1://收藏
					$con = "manager_id={$this->_userid} and isfollow=1";
					break;
				case 2://派过单
					$con = "manager_id={$this->_userid} and isfollow=0";
					break;
			}
			$user = $mbinfo->_db->selectOne('mb_recommend_log',$con,'group_concat(DISTINCT user_id) as uid');
			if ($user['uid']) {
				$condition[] = "c.user_id in({$user['uid']})";
			} else {
				return $this->render('user/recommend/userlist.html', $this->tplvar);
			}
		}
		if ($isr == 1) {
			//任务信息
			$task_id = intval($urlparam['tid']);
			if ($task_id) {
				$srvTask = new zbj_service_task($task_id);
				$srvTask = $srvTask->init();
				$taskinfo = $srvTask->get();
				$this->tplvar['taskinfo'] = $taskinfo;
                if (!$_GET) {
                    $search['c1id'] = $taskinfo['category1id'];
                    $search['c2id'] = $taskinfo['category2id'];
                    $search['c3id'] = $taskinfo['category_id'];
                }

			}
			//地区
			$cache = new zbj_lib_cache('memcache');
			$cach_name = 'cp.app.controller.user.province_list';
			$province_list = $cache->get($cach_name);
			if (empty($province_list)){
				$mdl_region = new zbj_model_mb_region();
				$item = 'region_name,region_ename,region_id';
				$province_list = $mdl_region->select('level=2',$item)->items;
				$cache->set($cach_name,$province_list,3600*24);
			}
			$search['province_list'] = $province_list;
			$province = intval($_GET['pvid']);
			$search['pvid'] = $province;
			if ($province) {
				$leftjoin['mb_info i'] = 'c.user_id=i.user_id';
				$condition[] = "i.province={$province}";
			}
			//收入筛选
			$monmin = intval($_GET['monmin']);
			$search['monmin'] = $monmin;
			$monmax = intval($_GET['monmax']);
			$search['monmax'] = $monmax;
			$avgmin = intval($_GET['avgmin']);
			$search['avgmin'] = $avgmin;
			$avgmax = intval($_GET['avgmax']);
			$search['avgmax'] = $avgmax;
			if ($monmin) {
				$condition[] = "income_month>={$monmin}";
			}
			if ($monmax) {
				$condition[] = "income_month<={$monmax}";
			}
			if ($avgmin) {
				$condition[] = "income_avg>={$avgmin}";
			}
			if ($avgmax) {
				$condition[] = "income_avg<={$avgmax}";
			}
			//接受率
			$reply = intval($_GET['reply']);
			$search['reply'] = $reply;
			if ($reply == 1) {
				$condition[] = "reply_num/recommend_num>=0.8";
			} elseif ($reply == 2) {
				$condition[] = "reply_num/recommend_num>=0.6";
			} elseif ($reply == 3) {
				$condition[] = "reply_num/recommend_num>=0.4";
			} elseif ($reply == 4) {
				$condition[] = "reply_num/recommend_num<0.4";
			}
		}
		//分类
		if ($search['c3id']) {
			$condition[] = "c.category_id={$search['c3id']}";
		} elseif ($search['c2id']) {
			$condition[] = "c.category2id={$search['c2id']}";
		} elseif ($search['c1id']) {
			$condition[] = "c.category1id={$search['c1id']}";
		}
    
		//客服
		$manager_id = intval($_GET['uid']);
		$search['uid'] = $manager_id;
		if ($manager_id) {
			$leftjoin['mb_info i'] = 'c.user_id=i.user_id';
			$condition[] = "i.manager_id={$manager_id}";
		}
    	//性质
		$team_type = intval($_GET['team_type']);
		$search['team_type'] = $team_type;
		if ($team_type) {
			$leftjoin['mb_info i'] = 'c.user_id=i.user_id';
		}
		if ($team_type == 1) {
			$condition[] = "i.realtype='1'";
		} elseif ($team_type == 2) {
			$condition[] = "i.realtype='3'";
		} elseif ($team_type == 3) {
			$condition[] = "i.realtype='2'";
		}
		//状态（准/金牌）
		$state = intval($_GET['state']);
		if (!$usr && !$state) {
			$state = 3;
		}
		$search['state'] = $state;
		$condition[] = "c.is_resident=1";
		$mdlGoldApply = zbj_model_api::get('zbj_model_mb_recommendapply');
		$condition_apply['state'] = 0; 
		switch ($state) {
			case 1:
				$condition[] = "c.is_gold=2";
				break;
			case 2:
				$condition[] = "c.is_gold=1";
				break;
			case 3:
				$condition[] = "c.is_gold in(1,2,3,4)";
				break;
			case 4:
				$condition[] = "c.is_gold=0";
				break;
			case 6:
				$condition[] = "c.is_gold=4";
				break;
			case 7:
				$condition[] = "c.is_gold=3";
				break;
			case 8://新申请
				$condition_apply['apply_num'] = 1; 
				$condition_apply['type'] = 0; 
				break;
			case 9://重新申请
				$condition_apply[] = 'apply_num>1'; 
				break;
			case 10: //退出申请
				$condition_apply['type'] = 1; 
				break;
		}
		
		//用户筛选
		$userid = intval($_GET['userid']);
		if ($userid) {
			$search['userid'] = $userid;
			$page = 1;
			$condition_apply['user_id'] = $userid;
		}
		
		//排序
		$o = zbj_lib_BaseUtils::getStr($_GET['o']);
		$search['o'] = $o;
		$ud = intval($_GET['ud']);
		$search['ud'] = $ud;
		if ($o) {
			$order = 'order by ';
			if ($o == 'reply') {
				$order .= 'reply_num/recommend_num';
			} elseif ($o == 'succeed') {
				$order .= 'succeed_num/recommend_num';
			} else {
				$order .= "{$o}";
			}
			$order .= $ud == 1 ? ' desc' : ' asc';
		}
		$this->tplvar ['search'] = $search;

		if ( in_array($state, array(8,9,10))) {
			$uids_apply = $mdlGoldApply->select($condition_apply, 'user_id')->items;
			$uids_apply = zbj_lib_BaseUtils::indexArray($uids_apply, 'user_id', 'user_id');
			if (empty($uids_apply)) {
				$this->tplvar ['ulist'] = array();
				$this->tplvar ['pagebar'] = '';
				$this->tplvar ['totalsize'] = 0;
				return $this->render('user/recommend/userlist.html', $this->tplvar);
			}
			$condition[] = 'c.user_id IN (' . implode(',', $uids_apply) . ')';
		}
		if ($userid) {
			$condition = "i.user_id={$userid}";
			$todayymd = date('Ymd', time()).'00';
			$todayymd = (int)$todayymd;
			$item = "i.*,sum(u.recommend_num) as recommend_num,sum(u.reply_num) as reply_num,sum(u.working_num) as working_num,sum(u.succeed_num) as succeed_num,sum(u.undeal_num) as undeal_num,sum(case when u.today_num>={$todayymd} then u.today_num else 0 end) as today_num,sum(u.income_month) as income_month,sum(u.income_yday) as income_yday,sum(u.income_avg) as income_avg";
			$group = 'group by i.user_id';
			$left['mb_recommend_user u'] = 'i.user_id=u.user_id';
			$ulists = $mbinfo->_db->select('mb_info i', $condition, $item, $group, $order, $left, array('dbinfo'=>'co_member'));
		} else {
			$mbinfo->_db->setLimit($limit);
			$mbinfo->_db->setPage($page);
			$mbinfo->_db->setCount(true);//define('DEBUG', 1);
			if ($isr == 1) {
				$todayymd = date('Ymd', time()).'00';
				$todayymd = (int)$todayymd;
				$leftjoin['mb_recommend_user u'] = 'c.user_id=u.user_id AND c.category_id=u.catalog_id';
//				$order = $order ? $order : 'order by income_month desc';
				$order = $order ? $order : 'order by is_gold desc,income_month desc';
				$item = "c.*,sum(u.recommend_num) as recommend_num,sum(u.reply_num) as reply_num,sum(u.working_num) as working_num,sum(u.succeed_num) as succeed_num,sum(u.undeal_num) as undeal_num,sum(case when u.today_num>={$todayymd} then u.today_num else 0 end) as today_num,sum(u.income_month) as income_month,sum(u.income_yday) as income_yday,sum(u.income_avg) as income_avg";
				//$item = "c.*";
				$group = 'group by c.user_id';
				$ulists = $mbinfo->_db->select('mb_user_category c', $condition, $item, $group, $order, $leftjoin, array('dbinfo'=>'co_member'));
			} else {
				$order = $order ? $order : 'order by c.user_id asc';
				$item = 'c.*';
				$group = 'group by c.user_id';
				$ulists = $mbinfo->_db->select('mb_user_category c', $condition, $item, $group, $order, $leftjoin, array('dbinfo'=>'co_member'));
			}
		}
		$ulist = $ulists->items;//var_dump($ulist);
		if ($ulist) {
			$mbcategory = new zbj_model_mb_usercategory();
			foreach ($ulist as $v) {
				$arruid[] = $v['user_id'];
			}
			$uids = implode(',', $arruid);//define('DEBUG', 1);
			//获取用户信息
			$mdlinfo = new zbj_model_mb_info();
			$infolist = $mdlinfo->select("user_id in({$uids})",'user_id,ability,provname,realtype,manager_name')->items;
			//获取分类
			$catalist = $mbcategory->select("user_id in({$uids}) and is_resident=1", 'category1id,category2id,user_id')->items;
			if ($isr == 1) {
				//收藏
				$loglist = $mdlinfo->_db->select('mb_recommend_log',"manager_id={$this->_userid} and user_id in({$uids}) and isfollow=1")->items;
				//评价
				$mdlremark = new zbj_model_cp_remark();
				$marklist = $mdlremark->select("remark_id in(select max(remark_id) from cp_remark where pk_id in({$uids}) and type_id=6 and is_log=0 and remark_catalog=2 group by pk_id)")->items;
				//统计数据
				$todayymd = date('Ymd', time()).'00';
				$todayymd = (int)$todayymd;
				$items = "user_id,sum(recommend_num) as recommend_num,sum(reply_num) as reply_num,sum(working_num) as working_num,sum(succeed_num) as succeed_num,sum(undeal_num) as undeal_num,sum(case when today_num>={$todayymd} then today_num else 0 end) as today_num,sum(income_month) as income_month,sum(income_yday) as income_yday,sum(income_avg) as income_avg";
				$ruser = $mdlinfo->_db->select('mb_recommend_user',"user_id in({$uids}) and type=4",$items,'group by user_id')->items;
			}
			foreach ($ulist as $k => $v) {
				if ($infolist) {
					foreach ($infolist as $vl) {
						if ($v['user_id'] == $vl['user_id']) {
							$ulist[$k]['ability'] = $vl['ability'];
							$ulist[$k]['provname'] = $vl['provname'];
							$ulist[$k]['realtype'] = $vl['realtype'];
							$ulist[$k]['manager_name'] = $vl['manager_name'];
						}
					}
				}
				if ($loglist) {
					foreach ($loglist as $v2) {
						if ($v2['user_id'] == $v['user_id']) {
							$ulist[$k]['follow'] = 1;
						}
					}
				}
				if ($catalist) {
					foreach ($catalist as $v3) {
						if ($v3['user_id'] == $v['user_id']) {
							if (!in_array($v3['category1id'], (array)$ulist[$k]['c1name'])) {
								$ulist[$k]['c1name'][] = $v3['category1id'];
							}
							if (!in_array($v3['category2id'], (array)$ulist[$k]['c2name'])) {
								$ulist[$k]['c2name'][] = $v3['category2id'];
							}
						}
					}
				}
				if ($marklist) {
					foreach ($marklist as $v4) {
						if ($v4['pk_id'] == $v['user_id']) {
							$ulist[$k]['remark'] = $v4['content'];
						}
					}
				}
				if ($ruser) {
					foreach ($ruser as $v5) {
						if ($v5['user_id'] == $v['user_id']) {
							$ulist[$k] = array_merge($ulist[$k], $v5);
						}
					}
				}
				if ($v['today_num']) {
					$toymd = substr($v['today_num'],-2,2);
					$ulist[$k]['today_num'] = intval($toymd);
				}
			}
		}
		//取金牌服务商申请相关信息
		if ($ulist) {
			$uids_apply = zbj_lib_BaseUtils::indexArray($ulist, 'user_id', 'user_id');
			$condition_apply = array('state' =>0);
			$condition_apply[] = 'user_id IN (' . implode(',', $uids_apply) . ')'; 
			$list_apply = zbj_lib_BaseUtils::indexArray($mdlGoldApply->select($condition_apply, 'user_id,type,scale,apply_num')->items, 'user_id');
			foreach ($ulist as $k=>$info_u) {
				$uid = $info_u['user_id'];
				if ($list_apply[$uid]) {
					$ulist[$k]['scale'] = $list_apply[$uid]['scale'];
					if ($list_apply[$uid]['type'] == 1) {
						$apply_status = '申请退出';
					} else {
						$apply_status = $list_apply[$uid]['apply_num'] > 1 ? '重新申请' : '新申请';
					}
					$ulist[$k]['apply_status'] = $apply_status;
				}
			}
		}
		$querystring = $_SERVER['QUERY_STRING'];
		$pagebar = $this->PageBar($ulists->totalSize, $limit, $page, $inPath, 'style4', $querystring);
		$this->tplvar ['pagebar'] = $pagebar;
		$this->tplvar ['totalsize'] = $ulists->totalSize;
		$this->tplvar ['ulist'] = $ulist;
		$sCategory = new service_category();
		$this->tplvar['categorys'] = $sCategory->getCategorys();
        if ($task_id > 0) {
            $this->tplvar ['task_id'] = $task_id;
        }
		return $this->render('user/recommend/userlist.html', $this->tplvar);
	}
	
	/**
	 * 派过单的需求
	 */
	public function pageRecommendTask($inPath) {
		$urlparam = $this->getUrlParams($inPath);//define('DEBUG', 1);
		$page = (int)$urlparam['page'] ? (int)$urlparam['page'] : 1;
		$limit = 25;
		$mTask = new zbj_model_mk_task();
		$mTaskInfo = new zbj_model_mk_taskinfo();
		$mFollow = new model_mk_follow();
		$taskTable = $mTask->tableName();
		$taskInfoTable = $mTaskInfo->tableName();
		$followTable = $mFollow->tableName();
		//派过单任务
		$condition[] = "isfollow=0";
		if ($_GET['start']) {
			$condition[] = "addymd>='{$_GET['start']}'";
		}
		if ($_GET['end']) {
			$condition[] = "addymd<='{$_GET['end']}'";
		}
		//处理人
		$group_id = $_GET['gid'];
		$user_id = $_GET['uid'];
		if ($user_id) {
			$condition['manager_id'] = $user_id;
		} elseif ($group_id) {
			$cpuser = new zbj_model_cp_user();
			$auids = $cpuser->select(array('group_id' => $group_id), 'user_id')->items;
			if ($auids) {
				$condition[] = "manager_id in (" . lib_BaseUtils::array2Single($auids, 'user_id') . ")";
			}else{
				$this->ShowMsg("空组");
			}
		}elseif(!isset($group_id)&&!isset($user_id)){
			$condition['manager_id'] = $this->_userid;
		}
		$mbinfo = new zbj_model_mb_info();
		$loglist = $mbinfo->_db->select('mb_recommend_log',$condition)->items;
		if ($loglist) {
			foreach ($loglist as $v) {
				$tid[] = $v['task_id'];
			}
			$tids = implode(',', $tid);
		}
		//小组、处理人
		$usergroups = new zbj_model_cp_usergroups();
		$this->tplvar['groups'] = $usergroups->select("pid=42 and group_id not in (81,71)  or group_id in (22,106,72)", '`group_id`,`name`')->items;
		if ($tids) {
			$tcondition[] = "{$taskTable}.task_id in({$tids})";
		} else {
			return $this->render('user/recommend/task.html', $this->tplvar);
		}
		//交易状态
		$state = $_GET['state'];
		switch ($state) {
			case 0://所有
				$tcondition[] = "{$taskTable}.mode in (10,11,12)";
				$tcondition[] = "{$taskTable}.state!=4";
				break;
			case 1://未托管
				$tcondition[] = "{$taskTable}.hosted_amount<=0";
				$tcondition[] = "(({$taskTable}.mode = 10 and {$taskTable}.state in (1,2)) or ({$taskTable}.mode in (11,12) and {$taskTable}.state=3))";
				$tcondition[] = "{$followTable}.issys=0";
				break;
			case 2://已托管投标中
				$tcondition[] = "(({$taskTable}.mode=10 and {$taskTable}.starttime<{$this->_time} and {$taskTable}.endtime>{$this->_time} and {$taskTable}.state=2) or ({$taskTable}.mode in (11,12) and {$taskInfoTable}.end_type!=5 and {$taskInfoTable}.isaccept_sl!=1 and {$taskTable}.state!=4)) and {$taskTable}.hosted_amount>0";
				break;
			case 3://已托管待选标
				$tcondition[] = "{$taskTable}.mode=10";
				$tcondition[] = "{$taskTable}.amount>0";
				$tcondition[] = "{$taskTable}.hosted_amount>0";
				$tcondition[] = "{$taskTable}.endtime<=" . $this->_time;
				$tcondition[] = "{$taskTable}.ispublicity=0";
				$tcondition[] = "{$taskTable}.state=2";
				break;
			case 4://已选标
				$tcondition[] = "(({$taskTable}.mode=10 and {$taskTable}.state=3) or ({$taskTable}.mode in (11,12) and isaccept_sl=1 and {$taskTable}.state!=4))";
				break;
			case 5://交易完成
				$tcondition[] = "(({$taskTable}.mode=10 and {$taskTable}.state=4) or ({$taskTable}.mode in (11,12) and end_type not in (2,5)))";
				break;
			default:
				$tcondition[] = "{$taskTable}.mode in (10,11,12)";
				break;
		}
		//交易类型
		switch ($_GET['mode']) {
			case 2://悬赏
				$tcondition[] = "{$taskTable}.mode=10";
				break;
			case 1://雇佣
				$tcondition[] = "{$taskTable}.mode in (11,12)";
				break;
		}
		//赏金
		switch ((int) $_GET['amount']) {
			case 1://100以下
				$tcondition[] = "{$taskTable}.amount < 100";
				break;
			case 2://100以上
				$tcondition[] = "{$taskTable}.amount >= 100";
				break;
			case 3://500以上
				$tcondition[] = "{$taskTable}.amount >= 500";
				break;
			case 4://1000以上
				$tcondition[] = "{$taskTable}.amount >= 1000";
				break;
			case 5://5000以上
				$tcondition[] = "{$taskTable}.amount >= 5000";
				break;
		}
		//分类
		if ($_GET['c1id']) {
			$tcondition[] = "{$taskTable}.category1id=".(int) $_GET['c1id'];
			$search['c1id'] = (int) $_GET['c1id'];
		}
		if ($_GET['c2id']) {
			$tcondition[] = "{$taskTable}.category2id=".(int) $_GET['c2id'];
			$search['c2id'] = (int) $_GET['c2id'];
		}
		if ($_GET['c3id']) {
			$tcondition[] = "{$taskTable}.category_id=".(int) $_GET['c3id'];
			$search['c3id'] = (int) $_GET['c3id'];
		}
		$this->tplvar['search'] = $search;
		$o = $_GET['o']; //排序条件
		$ud = (int) $_GET['ud']; //升降序
		if ($o) {
			$orderby = "order by $o " . ($ud == 1 ? 'desc' : 'asc');
		}
		
		$mTask->setLimit($limit);
		$mTask->setPage($page);
		$mTask->setCount(true);
		$items = "{$taskTable}.*";
		$leftjoin = array(
				$taskInfoTable => "{$taskTable}.task_id={$taskInfoTable}.task_id",
				$followTable => "{$taskTable}.task_id={$followTable}.task_id",
		);
		$oTask = $mTask->select($tcondition, $items, '', $orderby, $leftjoin);
		$tasklist = $oTask->items;
		if ($tasklist) {
			$mldaction = new zbj_model_mb_recommendaction();
			foreach ($tasklist as $v) {
				$taskid[] = $v['task_id'];
			}
			$taskids = implode(',', $taskid);
			$aclist = $mldaction->select("task_id in({$taskids})",'user_id,task_id,max(action_type) as action_type','group by user_id,task_id')->items;
			foreach ($tasklist as $k => $v) {
				if ($loglist) {
					foreach ($loglist as $v1) {
						if ($v1['task_id'] == $v['task_id']) {
							$tasklist[$k]['addtime'] = $v1['addtime'];
						}
					}
				}
				if ($aclist) {
					foreach ($aclist as $v2) {
						if ($v2['task_id'] == $v['task_id']) {
							$tasklist[$k]['action'][] = $v2;
						}
					}
				}
			}
		}
		$this->tplvar['list'] = $tasklist;//var_dump($tasklist);
		$querystring = $_SERVER['QUERY_STRING'];
		$pagebar = $this->PageBar($ulists->totalSize, $limit, $page, $inPath, 'style4', $querystring);
		$this->tplvar ['pagebar'] = $pagebar;
		$this->tplvar['totalsize'] = $oTask->totalSize;
		$sCategory = new service_category();
		$this->tplvar['categorys'] = $sCategory->getCategorys();
		return $this->render('user/recommend/task.html', $this->tplvar);
	}
	
	/**
	 * 收藏的服务商
	 */
	public function pageFollowUser($inPath) {
		$urlparam = $this->getUrlParams($inPath);
		$uid = (int)$_POST['uid'];
		$mbinfo = new zbj_model_mb_info();//define('DEBUG',1);
		$info = $mbinfo->_db->selectOne('mb_recommend_log',"manager_id={$this->_userid} and user_id={$uid} and isfollow=1");
		if ($info) {
			$res = $mbinfo->_db->delete('mb_recommend_log',"manager_id={$this->_userid} and user_id={$uid} and isfollow=1");
		} else {
			$item = array(
					'manager_id' => $this->_userid,
					'manager_name' => $this->_nickname,
					'user_id' => $uid,
					'isfollow' => 1,
					'addtime' => time()
			);
			$res = $mbinfo->_db->insert('mb_recommend_log',$item);
		}
		if ($res) {
			return json_encode(array('state'=>1,'msg'=>'操作成功'));
		} else {
			return json_encode(array('state'=>1,'msg'=>'操作失败'));
		}
	}
	
	/**
     * 金牌服务商统计列表
     */
    public function pageRecommendIncome($inPath) {
		$urlparam = $this->getUrlParams($inPath);//define('DEBUG', 1);
		$page = (int)$urlparam['page'] ? (int)$urlparam['page'] : 1;
		$limit = 25;
		$mbinfo = new zbj_model_mb_info();
		$mbcategory = new zbj_model_mb_usercategory();
		$cpuser = new zbj_model_cp_user();
		$mdlRank = new zbj_model_mb_recommendrank();
		//客服组
		//$auids = $cpuser->select(array('group_id' => 72), 'user_id,name')->items;
		$auids = array(array('user_id'=>149, 'name'=>'陈晓楠'),
				array('user_id'=>582, 'name'=>'侯鑫'),
				array('user_id'=>993, 'name'=>'唐海燕'),
				array('user_id'=>983, 'name'=>'吴双江')
		);
		$this->tplvar ['auids'] = $auids;
		
		//搜索
		$manager_id = intval($_GET['uid']);
		$search['uid'] = $manager_id;
		if ($manager_id) {
			$conditioni[] = "i.manager_id={$manager_id}";
		}
    	$industry_id = intval($_GET['c1id'])?intval($_GET['c1id']):0;
		$search['c1id'] = $industry_id;
		if ($industry_id) {
			$conditionc[] = "c.category1id={$industry_id}";
			$conditionc[] = "c.is_resident=1";
		}
		$channel_id = intval($_GET['c2id'])?intval($_GET['c2id']):0;
		$search['c2id'] = $channel_id;
		if ($channel_id) {
			$conditionc[] = "c.category2id={$channel_id}";
		}
		$catalog_id = intval($_GET['c3id'])?intval($_GET['c3id']):0;
		$search['c3id'] = $catalog_id;
		if ($catalog_id) {
			$conditionc[] = "c.category_id={$catalog_id}";
		}
		$state = intval($_GET['state'])?intval($_GET['state']):5;
		$search['state'] = $state;
		switch ($state) {//1银牌2金牌3钻石4皇冠5签约服务商6普通
			case 1:
				$conditiona[] = "a.goldstatus=1";
				break;
			case 2:
				$conditiona[] = "a.goldstatus=2";
				break;
			case 3:
				$conditiona[] = "a.goldstatus=3";
				break;
			case 4:
				$conditiona[] = "a.goldstatus=4";
				break;
			case 5:
				$conditiona[] = "a.goldstatus>0";
				break;
			default:
				$conditiona[] = "a.goldstatus=0";
				break;
		}
		$userid = intval($_GET["userid"]);
		if ($userid) {
			$conditiona = "a.user_id={$userid}";
			$search['userid'] = $userid;
		}
		$type = intval($urlparam["type"])?intval($urlparam["type"]):0;
		$search['type'] = $type;
		if(zbj_lib_BaseUtils::chkdate($_GET['startdate'])) {
			$start = $_GET['startdate'];
			$search['startdate'] = $_GET['startdate'];
		}
		if(zbj_lib_BaseUtils::chkdate($_GET['enddate'])) {
			$end = $_GET['enddate'];
			$search['enddate'] = $_GET['enddate'];
		}
		if (strtotime($end) - strtotime($start) > 31*86400) {
			return $this->ShowMsg('时间段不能大于31天');
		} elseif (strtotime($start) > strtotime($end)) {
			return $this->ShowMsg('时间段输入错误');
		}
		$this->tplvar ['search'] = $search;

		if (empty($start) || empty($end)) {
			return $this->render('user/recommend/userincome.html', $this->tplvar);
		}
		$ymd = date('Y-m-d', $this->_time);
		if ($start == $ymd) {
			$istoday = 1;
		} elseif ($start < $ymd && $end >= $ymd) {
			$istoday = 2;
		}
		//define('DEBUG', 1);
		if ($state != 6) {
			$groupby = 'group by user_id';
			$scon = 'c.is_resident=1 and c.goldstatus>0';
			if ($userid) $scon = "c.user_id={$userid}";
			$ulist = $mbcategory->_db->select('mb_user_category c', $scon, 'user_id', $groupby, '', '', array('dbinfo'=>'co_member'))->items;
			if ($ulist) {
				foreach ($ulist as $v) {
					$uid[] = $v['user_id'];
				}
				$uids = implode(',', $uid);
			}
		} 
		if ($state == 6 || $istoday != 1) {
			$mdlRank->setLimit($limit);
			$mdlRank->setPage($page);
			$mdlRank->setCount(true);
			$newcona = implode(' and ', (array)$conditiona);
			$newconi = $conditioni ? ' and '.implode(' and ', (array)$conditioni) : '';
			$newconc = implode(' and ', (array)$conditionc);
			$con = "date between '{$start}' and '{$end}'";
			$con .= " and exists (select 1 from mb_account as a,mb_info as i where {$newcona}{$newconi} and a.user_id=mb_recommend_rank.user_id and i.user_id=mb_recommend_rank.user_id)";
			if ($newconc) $con .= " and exists (select 1 from mb_user_category as c where {$newconc} and c.user_id=mb_recommend_rank.user_id)";
			$item = 'user_id,sum(ser_hosted_amount) as gycount,sum(task_hosted_amount) as xscount,sum(task_trade_amount) as bidcount';
			$item .= ',sum(ser_hosted_num) as gydanbao,sum(task_hosted_num) as xsbid,sum(task_trade_num) as bidbid';
			$item .= ',(sum(ser_hosted_amount)+sum(task_hosted_amount)+sum(task_trade_amount)) as allcount';
			$group = 'group by user_id';
			$order = 'order by allcount desc';
			$ranklists = $mdlRank->select($con, $item, $group, $order, '', array('dbinfo'=>'co_member'));
			$ranklist = $ranklists->items;
			$totalsize = $ranklists->totalSize;
			if ($ranklist) {
				foreach ($ranklist as $v) {
					$uid[] = $v['user_id'];
				}
				$uids = implode(',', $uid);
			}
		}
		//今天数据
		if ($istoday) {
			$uids = $uids ? $uids : 0;
			$mdlOrder = new zbj_model_fn_order();
			//雇佣托管
			$con = "ispay=1 AND payymd='{$ymd}' AND ptype in(24,25) AND sl_user_id in({$uids}) AND stype=16";
			$item = 'sl_user_id,sum(price) as price';
			$group = 'group by sl_user_id';
			$gyday = $mdlOrder->select($con, $item, $group, '', '', array('dbinfo'=>'co_finance'))->items;
			//悬赏中标
			$con = "createymd='{$ymd}' AND ptype=23 AND stype=16 AND sl_user_id in({$uids})";
			$xsday = $mdlOrder->select($con, $item, $group, '', '', array('dbinfo'=>'co_finance'))->items;
			//招标中标
			$con = "createymd='{$ymd}' AND ptype=28 AND stype=16 AND sl_user_id in({$uids})";
			$bidday = $mdlOrder->select($con, $item, $group, '', '', array('dbinfo'=>'co_finance'))->items;
		}
		if ($istoday == 1 && $uid) {
			$ranklists = array();
			foreach ($uid as $k => $v) {
				$ranklists[$k]['user_id'] = $v;
				if ($gyday) {
					foreach ($gyday as $vg) {
						if ($v == $vg['sl_user_id']) {
							$ranklists[$k]['gycount'] = $vg['price'];
						}
					}
				}
				if ($xsday) {
					foreach ($xsday as $vx) {
						if ($v == $vx['sl_user_id']) {
							$ranklists[$k]['xscount'] = $vx['price']/0.8;
						}
					}
				}
				if ($bidday) {
					foreach ($bidday as $vb) {
						if ($v == $vb['sl_user_id']) {
							$ranklists[$k]['bidcount'] = $vb['price'];
						}
					}
				}
				$ranklists[$k]['allcount'] = $ranklists[$k]['gycount']+$ranklists[$k]['xscount']+$ranklists[$k]['bidcount'];
			}
			$ranklists = $this->array_sort($ranklists, 'allcount', 'desc');
			$ranklists = array_values($ranklists);
			foreach ($ranklists as $k => $v) {
				if ($k >= $limit*($page-1) && $k < $limit*$page) {
					$ranklist[] = $v;
				}
			}
			$totalsize = count($uid);
		}
		if ($ranklist) {
			$colms = array();
			foreach ($ranklist as $k => $v) {
				$luid[] = $v['user_id'];
				//按天统计信息
				if ($type) {
					$gycondition = "user_id={$v['user_id']} and date between '{$start}' and '{$end}'";
					$gyitem ='ser_hosted_amount,task_hosted_amount,task_trade_amount,date';
					$gygroup = 'group by date';
					$gylist = $mdlRank->select($gycondition,$gyitem,$gygroup,'','',array('dbinfo'=>'co_member'))->items;
					if ($gylist) {
						foreach ($gylist as $kl => $vl) {
							if (!in_array($vl['date'], $colms)) {
								$t = strtotime($vl['date']);
								$colms[$t] = $vl['date'];
							}
						}
					}
					$ranklist[$k]['gylist'] = $gylist;
				}
			}
			$luids = implode(',', $luid);
			//查询状态
			$gstatus = $mbinfo->_db->select('mb_account',"user_id in({$luids})",'user_id,goldstatus','','','',array('dbinfo'=>'co_member'))->items;
			//查询分类
			$condition = "c.user_id in({$luids})";
			$groupby = 'group by c.user_id';
			$left = array('mb_info i'=>'i.user_id=c.user_id');
			$item = 'c.user_id,group_concat(distinct c.category2id) as category2id,i.isfws,i.manager_id,i.manager_name';
			$category = $mbcategory->_db->select('mb_user_category c',$condition, $item, $groupby, '', $left, array('dbinfo'=>'co_member'))->items;
			foreach ($ranklist as $k => $v) {
				$ranklist[$k]['xsdanjia'] = $v['xsbid']>0 ? round($v['xscount']/$v['xsbid'],2) : 0;//悬赏单价
				$ranklist[$k]['gydanjia'] = $v['gydanbao']>0 ? round($v['gycount']/$v['gydanbao'],2) : 0;//雇佣单价
				$ranklist[$k]['biddanjia'] = $v['bidbid']>0 ? round($v['bidcount']/$v['bidbid'],2) : 0;//招标单价
				//状态
				if ($gstatus) {
					foreach ($gstatus as $vs) {
						if ($v['user_id'] == $vs['user_id']) {
							$ranklist[$k]['goldstatus'] = $vs['goldstatus'];
						}
					}
				}
				//分类
				if ($category) {
					foreach ($category as $vc) {
						if ($v['user_id'] == $vc['user_id']) {
							$ranklist[$k]['manager_name'] = $vc['manager_name'];
							$ranklist[$k]['category2id'] = $vc['category2id'] ? explode(',', $vc['category2id']) : '';//频道
						}
					}
				}
				//今天数据
				if ($istoday == 2) {
					if ($gyday) {
						foreach ($gyday as $vg) {
							if ($vg['sl_user_id'] == $v['user_id']) {
								$ranklist[$k]['gycount'] = $v['gycount']+$vg['price'];//雇佣金额
							}
						}
					}
					if ($xsday) {
						foreach ($xsday as $vx) {
							if ($vx['sl_user_id'] == $v['user_id']) {
								$ranklist[$k]['xscount'] = $v['xscount']+$vx['price']/0.8;//悬赏金额
							}
						}
					}
					if ($bidday) {
						foreach ($bidday as $vb) {
							if ($vb['sl_user_id'] == $v['user_id']) {
								$ranklist[$k]['bidcount'] = $v['bidcount']+$vb['price'];//招标金额
							}
						}
					}
					$ranklist[$k]['allcount'] = $ranklist[$k]['xscount']+$ranklist[$k]['gycount']+$ranklist[$k]['bidcount'];
				}
				//按天统计信息
				if ($istoday && !in_array($ymd, (array)$colms)) {
					$t = strtotime($ymd);
					$colms[$t] = $ymd;
				}
				if ($type && $colms) {
					ksort($colms);
					$list = array();
					foreach ($colms as $kk => $vl) {
						$amount = 0;
						if ($v['gylist']) {
							foreach ($v['gylist'] as $val) {
								if ($val['date'] == $vl) {
									switch ($type) {
										case 1:
											$amount += $val['task_hosted_amount']+$val['ser_hosted_amount']+$val['task_trade_amount'];
											break;
										case 2:
											$amount += $val['task_hosted_amount'];
											break;
										case 3:
											$amount += $val['ser_hosted_amount'];
											break;
									}
								}
							}
						}
						if ($vl == $ymd) {
							$amountvg = $amountvx = 0;
							if ($gyday) {
								foreach ($gyday as $vg) {
									if ($vg['sl_user_id'] == $v['user_id']) {
										$amountvg = $vg['price'];//雇佣金额
									}
								}
							}
							if ($xsday) {
								foreach ($xsday as $vx) {
									if ($vx['sl_user_id'] == $v['user_id']) {
										$amountvx = $vx['price']/0.8;//悬赏金额
									}
								}
							}
							if ($bidday) {
								foreach ($bidday as $vb) {
									if ($vb['sl_user_id'] == $v['user_id']) {
										$amountbid = $vb['price'];//招标金额
									}
								}
							}
							switch ($type) {
								case 1:$amount += $amountvx+$amountvg+$amountbid;break;
								case 2:$amount += $amountvx;break;
								case 3:$amount += $amountvg;break;
							}
						}
						$list[$kk] = $amount;
					}
					$ranklist[$k]['count'] = $list;//列表
				}
			}
		}
		$this->tplvar ['ulist'] = $ranklist;
		$this->tplvar ['colms'] = $colms;
		$querystring = $_SERVER['QUERY_STRING'];
		$pagebar = $this->PageBar($totalsize, $limit, $page, $inPath, 'style4', $querystring);
		$this->tplvar ['url'] = $querystring;
		$this->tplvar ['pagebar'] = $pagebar;
		$this->tplvar ['totalsize'] = $totalsize;
		$sCategory = new service_category();
		$this->tplvar['categorys'] = $sCategory->getCategorys();
		return $this->render('user/recommend/userincome.html', $this->tplvar);
	}
	
	/**
	 * 二维数组排序
	 */
	function array_sort($arr,$keys,$type='asc'){
		$keysvalue = $new_array = array();
		foreach ($arr as $k=>$v){
			$keysvalue[$k] = $v[$keys];
		}
		if($type == 'asc'){
			asort($keysvalue);
		}else{
			arsort($keysvalue);
		}
		reset($keysvalue);
		foreach ($keysvalue as $k=>$v){
			$new_array[$k] = $arr[$k];
		}
		return $new_array;
	}
	
	/**
	 * 统计数据 更新一个人近三个月数据
	 */
	public function pageRecommendRankOne($inPath) {
		$path = $this->getUrlParams($inPath);//define('DEBUG', 1);
		$uid = (int)$_REQUEST['id'];
		if (empty($uid)) {
			return json_encode(array('msg'=>'请输入ID'));
		}
		$mdlOrder = new zbj_model_fn_order();
		$month = date('Y-m-d',strtotime('-4 month'));
		$ymd = date('Y-m-d', time()-86400);
		$dbinfo = array('dbinfo'=>'co_finance');
		//雇佣托管
		$con = "ispay=1 AND (payymd between '{$month}' AND '{$ymd}') AND ptype in(24,25) AND sl_user_id={$uid} AND stype=16";
		$item = 'payymd,sum(price) as price';
		$group = 'group by payymd';
		$ser_h_amount = $mdlOrder->select($con,$item,$group,'','',$dbinfo)->items;
		$ser_h_num = $mdlOrder->select($con,'payymd,count(1) as num',$group,'','',$dbinfo)->items;
		//雇佣收入
// 		$con = "(over_ymd between '{$month}' AND '{$ymd}') AND sl_user_id={$uid} AND stype=16 AND state=1 AND ptype in(24,25)";
// 		$item = 'over_ymd,sum(at_price) as price';
// 		$group = 'group by over_ymd';
// 		$ser_t_amount = $mdlOrder->select($con,$item,$group,'','',$dbinfo)->items;
// 		$ser_t_num = $mdlOrder->select($con,'over_ymd,count(1) as num',$group,'','',$dbinfo)->items;
		//悬赏中标
		$con = "(createymd between '{$month}' AND '{$ymd}') AND ptype=23 AND stype=16 AND state!=2 AND sl_user_id={$uid}";
		$item = 'createymd,sum(price) as price';
		$group = 'group by createymd';
		$task_h_amount = $mdlOrder->select($con,$item,$group,'','',$dbinfo)->items;
		$task_h_num = $mdlOrder->select($con,'createymd,count(1) as num',$group,'','',$dbinfo)->items;
		//悬赏收入
		$con = "(createymd between '{$month}' AND '{$ymd}') AND ptype=28 AND stype=16 AND state!=2 AND sl_user_id={$uid}";
		$item = 'createymd,sum(price) as price';
		$group = 'group by createymd';
		$task_t_amount = $mdlOrder->select($con,$item,$group,'','',$dbinfo)->items;
		$task_t_num = $mdlOrder->select($con,'createymd,count(1) as num',$group,'','',$dbinfo)->items;
		$list = array();
		if ($ser_h_amount) {
			foreach ($ser_h_amount as $v) {
				$list[$v['payymd']]['ser_hosted_amount'] = $v['price'];
			}
			foreach ($ser_h_num as $v) {
				$list[$v['payymd']]['ser_hosted_num'] = $v['num'];
			}
		}
// 		if ($ser_t_amount) {
// 			foreach ($ser_t_amount as $v) {
// 				$list[$v['over_ymd']]['ser_trade_amount'] = $v['price'];
// 			}
// 			foreach ($ser_t_num as $v) {
// 				$list[$v['over_ymd']]['ser_trade_num'] = $v['num'];
// 			}
// 		}
		if ($task_h_amount) {
			foreach ($task_h_amount as $v) {
				$list[$v['createymd']]['task_hosted_amount'] = $v['price']/0.8;
			}
			foreach ($task_h_num as $v) {
				$list[$v['createymd']]['task_hosted_num'] = $v['num'];
			}
		}
		if ($task_t_amount) {
			foreach ($task_t_amount as $v) {
				$list[$v['over_ymd']]['task_trade_amount'] = $v['price'];
			}
			foreach ($task_t_num as $v) {
				$list[$v['over_ymd']]['task_trade_num'] = $v['num'];
			}
		}
		if ($list) {
			$mdlRank = new zbj_model_mb_recommendrank();
			$mdlRank->delete("user_id={$uid}");
			$srvUser = new zbj_service_user($uid);
			$nickname = $srvUser->get('nickname');
			foreach ($list as $k => $v) {
				$v['user_id'] = $uid;
				$v['nickname'] = $nickname;
				$v['date'] = $k;
				if($mdlRank->selectOne("user_id={$uid} and date='{$k}'", 'id')){
					$mdlRank->update("user_id={$uid} and date='{$k}'", $v);
				}else{
					$mdlRank->insert($v);
				}
			}
		}
		return json_encode(array('msg'=>'更新完毕'));
	}
	
	/**
     * 金牌服务商统计导出EXCEL
     */
    public function pageRecommendExcel($inPath) {
		$urlparam = $this->getUrlParams($inPath);//define('DEBUG', 1);
		$state = (int)$_GET['state'];
		$mdlRank = new zbj_model_mb_recommendrank();
		if(zbj_lib_BaseUtils::chkdate($_GET['startdate'])) {
			$start = $_GET['startdate'];
		} else {
			$start = date('Y-m-d', time()-86400);
		}
		if(zbj_lib_BaseUtils::chkdate($_GET['enddate'])) {
			$end = $_GET['enddate'];
		} else {
			$end = date('Y-m-d', time()-86400);
		}
		if (strtotime($end) - strtotime($start) > 31*86400) {
			return $this->ShowMsg('时间段不能大于31天');
		}
		$ranktab = 'mb_recommend_rank';
		$gycondition = "date>='{$start}' AND date<='{$end}'";
		if ($state == 6) {
			
		} else {
			$con = "a.goldstatus>0";
			$gycondition .= " AND exists (select 1 from mb_account as a where {$con} and a.user_id={$ranktab}.user_id)";
		}
		$group = "group by {$ranktab}.user_id";
		$left = array('mb_user_category c'=>"c.user_id = {$ranktab}.user_id");
		$item = "{$ranktab}.user_id,sum(ser_hosted_amount) as shamount,sum(task_hosted_amount) as thamount,sum(task_trade_amount) as bidamount";
		$gylist = $mdlRank->select($gycondition,$item,$group,'','',array('dbinfo'=>'co_member'))->items;
		if ($gylist) {
			foreach ($gylist as $v) {
				$uid[] = $v['user_id'];
			}
			$uids = implode(',', $uid);
			//状态
			$mbaccount = new zbj_model_mb_account();
			$account = $mbaccount->select("user_id in({$uids})")->items;
			$goldname = array(0=>'普通',1=>'银牌',2=>'金牌',3=>'钻石',4=>'皇冠');
			if ($account) {
				foreach ($account as $v) {
					$gold[$v['user_id']] = $goldname[$v['goldstatus']];
				}
			}
			//客服
			/* $mbinfo = new zbj_model_mb_info();
			$info = $mbinfo->select("user_id in({$uids})")->items;
			if ($info) {
				foreach ($info as $v) {
					$manager[$v['user_id']] = $v['manager_name'];
				}
			} */
			//类目
			$mbcategory = new zbj_model_mb_usercategory();
			$category = $mbcategory->select("user_id in({$uids}) and is_main=1 and is_resident=1",'','group by user_id')->items;
			if ($category) {
				foreach ($category as $v) {
					$cate[$v['user_id']] = $v['category1id'];
					/* if (!in_array($v['category1id'],(array)($cate[$v['user_id']])))
						$cate[$v['user_id']][] = $v['category1id']; */
				}
			}
		}
		$goldname = array(0=>'普通',1=>'银牌',2=>'金牌',3=>'钻石',4=>'皇冠');
		$mdlcategory = new zbj_model_mk_category();
		$tree = $mdlcategory->select(array())->items;
		foreach ($tree as $v) {
			$catelist[$v['category_id']] = trim($v['category_name']);
		}
		
		header("Content-type:application/vnd.ms-excel");
		header("Content-Disposition:filename=userIncome.xls");
		echo iconv('utf-8','gbk',"\"卖家ID\"\t");
		echo iconv('utf-8','gbk',"\"状态\"\t");
		//echo iconv('utf-8','gbk',"\"客服\"\t");
		echo iconv('utf-8','gbk',"\"雇佣担保金\"\t");
		echo iconv('utf-8','gbk',"\"悬赏担保金\"\t");
		echo iconv('utf-8','gbk',"\"招标担保金\"\t");
		echo iconv('utf-8','gbk',"\"分类\"\n");
		if ($gylist) {
			foreach ($gylist as $value) {
				//$goldstatus = $gold[$value['user_id']]?$goldname[$gold[$value['user_id']]]:'普通';
				echo iconv('utf-8','gbk',"\"{$value['user_id']}\"\t");
				echo iconv('utf-8','gbk',"\"{$gold[$value['user_id']]}\"\t");
				//echo iconv('utf-8','gbk',"\"{$manager[$value['user_id']]}\"\t");
				echo iconv('utf-8','gbk',"\"{$value['shamount']}\"\t");
				echo iconv('utf-8','gbk',"\"{$value['thamount']}\"\t");
				echo iconv('utf-8','gbk',"\"{$value['bidamount']}\"\t");
				echo iconv('utf-8','gbk',"\"{$catelist[$cate[$value['user_id']]]}\"\n");
				/* if ($cate[$value['user_id']]) {
					$catename = '';
					foreach ($cate[$value['user_id']] as $v) {
						if ($catename) $catename .= ','.$catelist[$v];
						else $catename .= $catelist[$v];
					}
				}
				echo iconv('utf-8','gbk',"\"{$catename}\"\n"); */
			}
		}		
	}
	
	private function getRecommendUserRefUrl($default='/user/recommenduser') {
		$prev_url = $_SERVER['HTTP_REFERER'];
		return strstr(strtolower($prev_url), strtolower($default)) !== false ? $prev_url : $default; 
	}
   
	/**
	 *签约服务商入驻
	 */
	public function pageJoinMarket($inPath) {
		$url = $this->getUrlParams($inPath);
		$uid = $url['uid'];
		if (empty($uid)) return $this->printmsg('无法获取需要入驻的用户id', 0);
		$srv = new zbj_service_user($uid);
		$supported_cids = array(18=>'LOGO设计');
		$params['joined_list'] = $joined_list = $srv->getJoinedMarketList();
		$joined_cids = zbj_lib_BaseUtils::indexArray($joined_list, 'catalog_id', 'catalog_name');
		$available_cids = array_diff($supported_cids, $joined_cids);

		if (empty($_POST)) {
			$params['uid'] = $uid;
			$params['joined_list'] = $joined_list;
			$params['available_cids'] = $available_cids;
			$params['logo_coz'] = $srv->checkInMarket(18) === false ? $srv->getError() : ''; 
			return $this->render('user/market/ajax_join.html', $params);
		}

		if (empty($available_cids)) return $this->printmsg('没有可入驻的专区', 2);

		$cid = (int) $_POST['cid'];
		if (empty($cid)) return $this->printmsg('请选择要入驻的专区', 0);
		$is_admin = true;
		if ($srv->joinMarket($cid, $is_admin) === false) {
			return $this->printmsg('入驻失败 ' . $srv->getError(), 0);
		} else {
			return $this->printmsg('入驻成功', 2);
		}
	}
	

	/**
	 *签约服务商管理
	 *
	 */
	public function pageMarketUser($inPath) {
		//列表操作请求
		$optype = intval($_GET['optype']);
		if ($optype > 0) {
			return $this->marketUserOp($optype);
		}
	 

    	$urlparam = $this->getUrlParams($inPath);
    	$page = (int)$urlparam['page'] ? (int)$urlparam['page'] : 1;
    	$limit = 20;
    	$mdl_ru = zbj_model_api::get('zbj_model_mb_recommenduser');

    	//客服组
    	$mdl_cp = zbj_model_api::get('zbj_model_cp_user');
		$users_cp = $mdl_cp->select(array('group_id' => 93), 'user_id,name')->items;
		$users_cp = zbj_lib_BaseUtils::indexArray($users_cp, 'user_id', 'name');
		array_unshift($users_cp, '全部');
		$this->tplvar['allotuser']=$users_cp;
		
		$condition = array();
		$condition[] = 'mb_recommend_user.type=3';
		$condition[] = 'mb_recommend_user.catalog_id>0';
		if ($_GET) {
            //搜索
			$manager_id = intval($_GET['manager_id']);
			if ($manager_id) {
				$condition[] = "r.manager_id={$manager_id}";
				$search['manager_id'] = $manager_id;
			}
			$catalog_id = intval($_GET['catalog_id']) ? intval($_GET['catalog_id']) : 0;
			$search['catalog_id'] = $catalog_id;
			if ($catalog_id) {
				$condition[] = "mb_recommend_user.catalog_id={$catalog_id}";
			}
			$userid = intval($_GET['userid']);
			if ($userid) {
				$condition[] = "mb_recommend_user.user_id={$userid}";
				$search['userid'] = $userid;
			}
			$this->tplvar ['search'] = $search;
		}
		
    	$mdl_ru->setLimit($limit);
    	$mdl_ru->setPage($page);
    	$mdl_ru->setCount(true);
    	$leftjoin = array('mb_recommend as r'=>'mb_recommend_user.user_id=r.user_id');
    	$orderby = 'ORDER BY mb_recommend_user.id DESC';
    	$rslt = $mdl_ru->select($condition, 'mb_recommend_user.*,r.manager_id,r.manager_name,r.job,r.team_type,r.team_num', '', $orderby, $leftjoin);
    	$list = $rslt->items;
    	if ($list) {
			$ru_ids_up = array();
        	foreach ($list as $k => $v) {
				$list[$k]['islock'] = $this->isMarketUserLocked($v);
				if ($v['market_state'] == 2 && $v['locktime'] > 0 && $this->_time > $v['locktime']) {
					$ru_ids_up[] = $v['id'];
				}
			}
			if ($ru_ids_up) { //更新屏蔽过期的
				$up_data = array(
					'market_state'=>1,
					'locktime'=>0
				);
				$mdl_ru->update('id IN (' . implode(',', $ru_ids_up) . ')', $up_data);
			}
    	}
    	$this->tplvar['list'] = $list;
    	$this->tplvar['pagebar'] = $this->PageBar($rslt->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
    	$this->tplvar['total'] = $rslt->totalSize;
    	return $this->render('user/market/list.html', $this->tplvar);
	}

	private function marketUserOp($optype) {
		switch ($optype) {
		case 1:
			return $this->shieldMarketUser();
			break;
		case 2:
			return $this->unshieldMarketUser();
			break;
		default:
			return $this->printmsg('不支持的操作类型');
		}
	
	}
	
	private function isMarketUserLocked($info) {
		if ($info['market_state'] == 1) {
			return false;
		} elseif ($info['market_state'] == 2) {
			return $this->_time > $info['locktime'] ? false : true;
		} elseif ($info['market_state'] == 0) {
			return true;
		}
	}

	private function shieldMarketUser() {
		$ruid = intval($_GET['ruid']);
		$info = $this->getMarketUserInfo($ruid);
		if ($info === false) {
			return $this->printmsg($this->error, 1);
		}

		if ($_POST) {
			$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
			$lockday = $_POST['lockday'];
			if (empty($lockday)) {
				return $this->printmsg('您还没选择屏蔽时间', 0);
			}
			if ($lockday == 'forever') {
				$up_data = array('market_state'=>0, 'locktime'=>0);
				$lockday = 0;
				$log = '永久屏蔽';
			} else {
				$lockday = intval($lockday);
				if ( in_array($lockday, array(1,7))) {
					$up_data = array(
						'market_state'=>2,
						'locktime'=>$this->_time+86400*$lockday
					);
					$log = "屏蔽{$lockday}天";
				} else {
					return $this->printmsg('不支持的屏蔽时间', 0);
				}
			} 

			if ($this->updateMarketUserInfo($ruid, $up_data)) {
				//写日志
				if ($_POST['ismsg'] == 1) {
					$this->sendSpWarrMsg($info['user_id'], $info['nickname'], $lockday);
				}
				$log = "因\"{$_POST['coz']}\"原因, {$log}不能在[{$info['catalog_name']}]专区内交稿";
				if ($this->addMarketUserLog($info['user_id'], $log) === false) {
					return $this->printmsg('操作成功,写用户日志失败,'.$this->error, 1);
				}
				$this->addMarketLockHistory($info['user_id'], $lockday, $info['catalog_name']);
				return $this->printmsg('操作成功', 2, null, $this->getRecommendUserRefUrl('/user/MarketUser'));
			} else {
				return $this->printmsg('操作失败，更新锁定数据失败' . $this->error, 1);
			}
		}
		$params['lock_history'] = $this->getMarketLockHistory($info['user_id']);
		$info['ruid'] = $ruid;
		$params['info'] = $info;
		return $this->render('user/market/ajax_shield.html', $params);
	}

	/**
	 *获取屏蔽历史
	 */
	private function getMarketLockHistory($uid) {
		$srv = new zbj_service_user($uid);
		$expand = unserialize($srv->get("info.expand"));
		return (array) $expand['market_lock'];
	}
	
	/**
	 *加入屏蔽历史记录
	 */
	private function addMarketLockHistory($uid, $lockday, $catalog_name) {
		$srv = new zbj_service_user($uid);
		$expand = unserialize($srv->get('info.expand'));
		$lock_info = $expand['market_lock'];
		$new_log = array(
			'create_time'=>$this->_time,
			'lock_day'=>$lockday,
			'catalog_name'=>$catalog_name
		);
		$lock_info['recent'][] = $new_log;
		rsort($lock_info['recent']);
		$lock_info['recent'] = array_chunk($lock_info['recent'], 3);
		$expand['market_lock'] = array(
			'lock_num'=>(int)$lock_info['lock_num'] + 1,
			'recent'=> $lock_info['recent'][0]
		);
		//unset($expand['market_lock']);
		$srv->set('info.expand', serialize($expand));
		return $srv->save();
	}

	private function unshieldMarketUser() {
		$ruid = intval($_GET['ruid']);
		$info = $this->getMarketUserInfo($ruid);
		if ($info === false) {
			return $this->printmsg($this->error, 1);
		}
		if ($this->isMarketUserLocked($info) === false) {
			return $this->printmsg('用户未被屏蔽，勿需恢复', 1);
		}
		$up_data = array(
			'market_state'=>1,
			'locktime'=>0
		);
		if ($this->updateMarketUserInfo($ruid, $up_data)) {
			$log = "解除禁止用户在[{$info['catalog_name']}]专区交稿";
			$msg = '恢复成功';
			if ($this->addMarketUserLog($info['user_id'], $log) === false) $msg .= ',写日志失败';
			return $this->printmsg($msg, 2, null, $this->getRecommendUserRefUrl('/user/MarketUser'));
		} else {
			return $this->printmsg('恢复失败,数据更新失败' . $this->error, 0);
		}
	}

	/**
	 *写用户日志
	 */
	private function addMarketUserLog($uid, $log) {
		$srv = new zbj_service_user($uid);
		$data_old = $data_new = $remark = '';
		$is_user_act = $log_type = 0;
		$rslt = $srv->addUserLog($log, $log_type, $data_old, $data_new, $remark, $is_user_act, $this->_userid);
		if ($rslt === false ) {
			$this->error = $srv->getError(); return false;
		} 
		return true;
	}

	/**
	 *获取签约入住记录信息
	 */
	private function getMarketUserInfo($ruid) {
		if (intval($ruid) <= 0) {
			$this->error = '无法获取服务商签约入住记录id';return false;
		}
		$mdl = zbj_model_api::get('zbj_model_mb_recommenduser', $ruid);
		$info = $mdl->get();
		if (empty($info) || $info['type'] != 3) {
			$this->error ='服务商签约入住记录不存在';return false;
		}
		return $info;
	}
	
	private function updateMarketUserInfo($ruid, $data) {
		if (intval($ruid) <= 0) {
			$this->error = '无法获取服务商签约入住记录id';return false;
		}
		if (empty($data)) {
			$this->error = '没有设置更新数据';return false;
		}
		$mdl = zbj_model_api::get('zbj_model_mb_recommenduser', $ruid);
		$condition = "id={$ruid} AND type=3";
		return $mdl->update($condition, $data);
	}

    /**
     * 发送专场站内告警信息
     * 
     * @param int $to_userid
     * @param string $to_nickname
     * @param int $warrning_day
     */
    private function sendSpWarrMsg($to_userid, $to_nickname, $warrning_day) {
    	$to_userid = intval($to_userid);
    	if($to_userid < 1) {
    		return;
    	}
    	
    	$msg = '';
    	$warrning_day = intval($warrning_day);
    	if($warrning_day == 0) {
    		$msg = '由于您在Logo设计专场中违规交稿，已永久失去在专场交稿的资格，如有疑问请联系猪八戒网。';
    	} else {
			$msg = "由于您在Logo设计专场中违规交稿，已暂时失去了在专场的交稿资格，时间为：{$warrning_day}天。";
			$msg .= $warrning_day == 7 ?  '请遵守专场交稿规范，下次违规，你将永久失去在专场交稿的资格。' : '请遵守专场交稿规范!';
    	}
    	
    	$data = array(
    		"type" => 3, // 站内信
    		"t_userid" => $to_userid,
    		"t_nickname" => $to_nickname,
    		"f_userid" => 0,
    		"f_nickname" => '',
    		"title" => 'LOGO设计专场违规警告',
    		"cat_id" => 111, // 当我发起的维权/举报被处理时，请通知我
    		"cont" => $msg
    	);
    	
    	$ssmg = new SSendmsg();
    	$ret = $ssmg->sendMsg($data);
    }
    
	/**
	 * 处理用户的能力值信用值
	 */
	function pagehandleevaluation($inPath){
		$url = $this->getUrlParams($inPath);
		$uid = intval($url['uid']);
		if(!$uid){
			return $this->printmsg ( "参数错误" );
		}
		$srvUser = new zbj_service_user($uid);
		if(!$srvUser->get('nickname')){
			return $this->printmsg ( "用户不存在" );
		}
		if($_POST){
			$num = (float)$_POST['num'];
			$content = zbj_lib_BaseUtils::getStr($_POST['content']);
			if($num and $content and $_POST['tid']){
				$tid = intval($_POST['tid']);
				$srvTask = new zbj_service_task($tid);
				$srvTask = $srvTask->init();
				$data = array();
				$type = 1;
				$data['num'] = sprintf("%0.2f", $num);
				if($type == 1){
					$model = new zbj_model_mb_evaluation();
					$res = $model->selectOne("task_id={$tid} and user_id={$uid} and type=2");
					if(!$res){
						return $this->printmsg ( "该交易没有获得能力值" );
					}
					if($num>$res['ability']){
						return $this->printmsg ( "赠送能力值不能大于交易获得的能力值:{$res['ability']}" );
					}
					$model->update("evaluation_id={$res['evaluation_id']}","at_amount=0");
					$model = new zbj_model_mb_ability();
					$aRs = $model->selectOne("task_id={$tid} and type=6");
					if($aRs){
						$model->update("task_id={$tid} and type=6","ability={$data['num']}");
					}else{
						$items = array();
						$items['ability'] = $data['num'];
						$items['task_id'] = $tid;
						$items['order_id'] = $res['order_id'];
						$items['ev_id'] = $res['evaluation_id'];
						$items['title'] = $res['title'];
						$items['user_id'] = $res['user_id'];
						$items['nickname'] = $res['nickname'];
						$items['amount'] = $res['amount'];
						$items['f_user_id'] = $res['puser_id'];
						$items['f_nickname'] = $res['pnickname'];
						$items['dateline'] = $this->_time;
						$items['dateymd'] = date('Y-m-d',$this->_time);
						$items['type'] = 6;
						if($model->insert($items) === false){
							return $this->printmsg($model->getDbError());
						}
					}
				}
				$e = new zbj_service_evaluation();
				$e->upUserEvaluation($srvUser,2);
				$srvTask->addTaskActionLog("{$data['m_name']}对任务进行了操作。赠送能力值：{$data['num']}。处理原因:{$content}", false);
				return $this->printmsg ( "处理成功" );
			}else{
				return $this->printmsg ( "填写不完整" );
			}
		}else{
			$params['uid'] = $uid;
			return $this->render('user/ajax/handleevaluation.html', $params);
		}
	}

    public function pageMyList($inPath)
    {
        return $this->pageList($inPath, TRUE);
    }

    //雇主库的列表，暂时先取这个名字
    public function pageList($inPath, $my_list = FALSE)
    {
		$this->url = $this->getUrlParams($inPath);
        $tpl_datas = array();
        $page_size = 20;
		$page = isset($this->url['page']) ? (int) $this->url['page'] : 1;
        $params = $this->_getListSelectParams();

		$config_service = new service_config();
        $config_service = $config_service->init(20);//雇主库配置就是20

        //处理字段的选择
		if ($_POST['field']) {
			foreach ($_POST['field'] as $value) {
				$config_service->setField($value);
			}
			$config_service->addConfig($this->_userid);
		}


        $is_all_tab = !$my_list;//2为tab中的所有雇主
        $all_fields = $config_service->getFields();
        $fields = $config_service->getFieldsByUser($this->_userid);
        if ($my_list) {
            $tpl_datas['leftnav'] = array(410);
        } else {
            $tpl_datas['leftnav'] = array(400);
        }

        $tpl_datas['allfields'] = $all_fields;
        $tpl_datas['fields'] = $fields;
		$tpl_datas['fields_key'] = array_keys($tpl_datas['fields']);
        $tpl_datas['title'] = '雇主库';
        $tpl_datas['params'] = $params;
        $tpl_datas['tabs'] = $this->_getListTabs($is_all_tab);
        if (!isset($params['cur_tab'])) {
            if ($is_all_tab) {
                $params['cur_tab'] = 2;
            } else {
                $params['cur_tab'] = 6;
            }
        }
        $tpl_datas['cur_tab'] = $params['cur_tab'];
        $tpl_datas['user_categories'] = $this->_getListUserCategories($params['cur_tab'] == 2);
        if ($params['cur_tab'] == 5) {
            list($tpl_datas['max_lock_num'], $tpl_datas['locked_num']) = $this->_getListHaveLockedNum();
            $tpl_datas['left_lock_num'] = $tpl_datas['max_lock_num'] - $tpl_datas['locked_num'];
        }
        $person_index_model = new model_mb_customerpersonindex();
        //所有雇主时，统计锁定客服数
        if ($params['cur_tab'] == 2 || $params['cur_tab'] == 5) {
        	$totalNum = $person_index_model->selectOne(null, 'count(1) as num');
        	$tpl_datas['totalNum'] = isset($totalNum['num']) ? $totalNum['num'] : 0;//雇主总数
        	
        	$totalLockNum = $person_index_model->selectOne(array('lockvalue'=>'2145801601', 'locktype' =>2 ), 'count(1) as num');
        	$tpl_datas['totalLockNum'] = isset($totalLockNum['num']) ? $totalLockNum['num'] : 0;//锁定雇主总数
        	$time = time();
        	$totalSeaNum = $person_index_model->selectOne("(`locktype`=0 or (`locktype`=1 and `lockvalue`=0) or (`locktype`=2 and `lockvalue`<{$time}))", 'count(1) as num');
        	$tpl_datas['totalSeaNum'] = isset($totalSeaNum['num']) ? $totalSeaNum['num'] : 0;//公海雇主总数
        }
        if ($params['cur_tab'] == 7) {
        	$m_user = new zbj_model_cp_user();
        	$adviser = $m_user->selectOne('group_id in (7,8,74,75,76,101,102,104)', 'count(1) as num, sum(maxlocknum) as locknum');
        	$tpl_datas['adviserNum'] = isset($adviser['num']) ? $adviser['num'] : 0;//交易顾问总数
        	$tpl_datas['adviserMaxLockNum'] = isset($adviser['locknum']) ? $adviser['locknum'] : 0;//交易顾问总数
        }

        //交易顾问
		$usergroups = new zbj_model_cp_usergroups();
        $tpl_datas['groups'] = $usergroups->select("pid=42 and group_id not in (81,71)  or group_id = 22", '`group_id`,`name`')->items;
        //行业数据
        $tpl_datas['industries'] = $this->_getListIndustyOptions();
        //等级数据
        $tpl_datas['integral_levels'] = $this->_getListIntegralLevelOptions();

        //消费select
        list($expend_levels, $level_map_range) = $this->_getListExpendLevels();
        $tpl_datas['expend_levels'] = $expend_levels;

        //认证类型
        $tpl_datas['real_types'] = $this->_getListRealtypes();
        //发布次数
        list($tpl_datas['pub_numthes'], $pub_numthes_range) = $this->_getListPubNumsOptions();
        //信用度
        list($tpl_datas['creditpoints'], $creditpoints_range) = $this->_getListCreditpointOptions();
        //规模大小
        $tpl_datas['com_scales'] = $this->_getListComScaleOptions();
        //地区信息
        $tpl_datas['regions'] = $this->_getListRegionOptions();
        
        $where = $this->_getListGenWhereByParams($params);
//         $person_index_model = new model_mb_customerpersonindex();
        $condition = '';
        if (!empty($where)) {
            $condition = implode(' and ', $where);
        }
        //var_dump($condition);
        $order_by = $this->_getListGenOrderByParams($params);
        //var_dump($order_by);
        $person_index_model->setCount(true);
        $person_index_model->setPage($page);
        $person_index_model->setLimit($page_size);
//         define(DEBUG, 1);
        $res = $person_index_model->select($condition, '*', '', $order_by);
//         exit;
        $index_datas = array();
        $total = 0;
        if ($res) {
            foreach ($res->items as $row) {
                $index_datas[$row['user_id']] = $row;
            }
            $total = $res->totalSize;
        }
        $config_service->fillFieldsDatas(array_keys($fields), $index_datas);
        $render_datas = $this->_getListDatasPrepareRender($index_datas, $fields);
        $tpl_datas['index_datas'] = $index_datas;
        $tpl_datas['render_datas'] = $render_datas;
        $tpl_datas['total'] = $total;
        $tpl_datas['pagebar'] = $this->PageBar($total, $page_size, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
        return $this->render('user/list/list.html', $tpl_datas);
    }

    /**
     * @param bool $flag 标志位
     * @param int $id 页面id
     * @return array
     */
    private function getChannelName($flag=false,$id=0){
        $arr=array();
        $arr[1]='画册频道';
        $arr[2]='装修设计';
        $arr[3]='包装设计';
        $arr[4]='动画视频';
        $arr[5]='商标设计';
       if($flag === true && $id != 0){
           return $arr[$id];
       }
        return $arr;
    }

    /**获取雇主快速登记列表配置
     * @param $config_id  页面配置id
     * @return array
     */
    public function getConfigChannelInfo($config_id){
        switch($config_id){
            case 1://画册频道
                $arr=array('编号','用户id','称呼','联系电话','行业','提交时间','提交页面');
                $brr=array('reg_id','user_id','real_name','mobile_num','industry','add_time','page_id');
                break;
            case 2://建筑设计
                $arr=array('编号','用户id','称呼','电话号码','类目','面积','设计风格','期望时间','提交时间','提交页面');
                $brr=array('reg_id','user_id','real_name','mobile_num','category','area','design_style','expected_time','add_time','page_id');
                break;
            case 3://包装设计
                $arr=array('编号','用户id','称呼','电话号码','类目','提交时间','提交页面');
                $brr=array('reg_id','user_id','real_name','mobile_num','category','add_time','page_id');
                break;
            case 4://动画视频
                $arr=array('编号','用户id','称呼','电话号码','类目','预算','时长','期望时间','提交时间','提交页面');
                $brr=array('reg_id','user_id','real_name','mobile_num','category','budget','length','expected_time','add_time','page_id');
                break;
            case 5://商标设计
                $arr=array('编号','用户id','称呼','商标名称','电话号码','是否注册','提交时间','提交页面');
                $brr=array('reg_id','user_id','real_name','trademark_name','mobile_num','is_regist','add_time','page_id');
                break;
            default:
                $arr=array('编号','用户id','称呼','联系电话','行业','提交时间','提交页面','IP地址');
                $brr=array('reg_id','user_id','real_name','mobile_num','industry','add_time','page_id','ip');
        }
        $data=array(
            'title_arr'=>$arr,
            'fields_arr'=>$brr
        );
        return $data;
    }
    /**
     * @param $inpath 雇主快速登记
     * @return mixed
     */
    public function pageFastReg($inpath){
        $url=$this->getUrlParams($inpath);
        $page = intval($url['page']);
        if($page <= 0){
            $page = 1;
        }
        $model_reg = new model_mk_registration();
        $condition =array();
        $page_id = intval($_GET['page_id']);
        if($page_id != 0){
            $condition['page_id'] = $page_id;
            $config_arr = $this->getConfigChannelInfo($page_id);
        }else{
            $config_arr = $this->getConfigChannelInfo(1);
        }
        $date_start = zbj_lib_BaseUtils::getStr($_GET['date_start']);
        if($date_start!=''){
            $condition[] = ' add_ymd >= "'.$date_start.'"';
        }
        $date_end = zbj_lib_BaseUtils::getStr($_GET['date_end']);
        if($date_end){
            $condition[] =' add_ymd <= "'.$date_end.'"';
        }
        $page_size = 10;
        $model_reg->setCount(true);
        $model_reg->setPage($page);
        $model_reg->setLimit($page_size);
        $fields =$config_arr['fields_arr'];
        $order = ' order by reg_id desc';
        $result = $model_reg->select($condition,$fields,'',$order);
        $pageBar = $this->pageBar($result->totalSize,$page_size,$result->page,$inpath,'style4',$_SERVER['QUERY_STRING']);
        $tpl_datas =array();
        $tpl_datas['tabs'] = $this->_getListTabs(true);
        $tpl_datas['cur_tab'] = 8;//导航选中栏目
        $res = $result->items;

        foreach($res as $k=>$v){
                $res[$k]['page_id'] = $this->getChannelName(true,$v['page_id']);
        }
        $tpl_datas['fields_arr'] = $config_arr['fields_arr'];
        $tpl_datas['title_arr'] = $config_arr['title_arr'];
        $tpl_datas['res']=$res;
        $tpl_datas['pagebar'] = $pageBar;
        $tpl_datas['total']=$result->totalSize;
        $tpl_datas['channel'] = $this->getChannelName();
        $str = '';
        foreach($_GET as $k=>$v){
            $str.=$k.'='.$v.'&';
        }
        $str = rtrim($str,'&');
        $tpl_datas['condition_get'] = $str;
        $tpl_datas['pageName'] = $this->getChannelName(true,$_GET['page_id']);
        $tpl_datas['page_id']  = intval($_GET['page_id']);
        $tpl_datas['page'] = $page;
        return $this->render('user/fastreg/fastreg.html', $tpl_datas);
    }

    /**
     * 导出快速登记信息
     */
    public function pageAlbumOutExcel(){
        $condition=array();
        $model_reg = new model_mk_registration();
        $page_id = intval($_GET['page_id']);
        if($page_id != 0){
            $condition['page_id'] = $page_id;
            $config_arr = $this->getConfigChannelInfo($page_id);
        }else{
            $config_arr = $this->getConfigChannelInfo(1);
        }
        $date_start = zbj_lib_BaseUtils::getStr($_GET['date_start']);
        if($date_start!=''){
            $condition[] = ' add_ymd >= "'.$date_start.'"';
        }
        $date_end = zbj_lib_BaseUtils::getStr($_GET['date_end']);
        if($date_end){
            $condition[] =' add_ymd <= "'.$date_end.'"';
        }
        $fields =$config_arr['fields_arr'];
        $order = ' order by reg_id desc';
        $result = $model_reg->select($condition,$fields,'',$order);
        if($page_id==0){
            $prefix = '所有页面';
        }else{
            $prefix = $this->getChannelName(true,$page_id);
        }
        $fileName = $prefix.'_'.$this->_ymd;//文件名
        $res = (array)$result->items;
        foreach($res as $k=>$v){
            $res[$k]['add_time'] =  date('Y-m-d H:i:s',$v['add_time']) ;
            $res[$k]['page_id']  =  $this->getChannelName(true,$v['page_id']);
        }
        SExcel::outputExcel($fileName,$res,$config_arr['title_arr'],$prefix);
    }
    /**
     * 根据当前管理者账户获取已经锁定的用户数
     * array(max_lock_num, locked_num
     * 页面 user/list
     */
    private function _getListHaveLockedNum()
    {
        $max_lock_num = 0;
        $locked_num = 0;

        $cp_user_model = new zbj_model_cp_user();
        $condition = array('user_id' => $this->_userid);
        $user = $cp_user_model->selectOne($condition, 'user_id, maxlocknum');
        if ($user) {
            $max_lock_num = $user['maxlocknum'];
        }

        $time = time();
        $sql = "select count(0) as num from mb_customer_person where managerid={$this->_userid} and ((locktype=1 and lockvalue>0) or (locktype=2 and lockvalue>{$time}))";
        $person_model = new model_mb_customerperson();
        $ret = $person_model->query($sql);
        if ($ret) {
            $locked_num = $ret[0]['num'];
        }

        return array($max_lock_num, $locked_num);
    }

    //查询数据输出前对数据解析为需要展示的数据，比如gender的 0 转换为 女
    //页面 user/list
    private function _getListDatasPrepareRender($index_datas, $fields)
    {
        static $user_service = NULL;
        if (!is_object($user_service)) {
            $user_service = new zbj_service_user();
        }
        $render_datas = $index_datas;
        $com_scale_options = $this->_getListComScaleOptions();

        foreach ($index_datas as $user_id => $row) {
            $data_row = &$render_datas[$user_id];
            foreach ($fields as $f => $fc) {
                if ($f == 'gender') {
                    if ($row[$f] == 1) {
                        $data_row[$f] = '男';
                    } else {
                        $data_row[$f] = '女';
                    }
                } elseif ($f == 'realtype') {
                    $realtypes = $this->_getListRealtypes(FALSE);
                    $data_row[$f] = $realtypes[$row[$f]];
                } elseif ($f == 'regtime') {
                    $data_row[$f] = substr($row[$f], 0, 10);
                } elseif ($f == 'industry') {
                    $industries = $this->_getListIndustyOptions();
                    $data_row[$f] = $industries[$row[$f]]['name'];
                } elseif ($f == 'lock_state') {
                    $v = '未锁定';
                    $lock_type = $row['locktype'];
                    $lock_value = $row['lockvalue'];
                    if ($this->_getListCheckLockState($lock_type, $lock_value)) {
                        $v = '锁定';
                    }
                    $data_row[$f] = $v;
                } elseif ($f == 'integral') {
                    $data_row[$f] = 'Lv' . $user_service->getAccountLevel($row[$f], TRUE);
                } else {
                    $data_row[$f] = $row[$f];
                }
            }
            //锁定类型的展示
            $lock_type_str = '';
            if ($this->_getListCheckLockState($row['locktype'], $row['lockvalue'])) {
                $static_lock_time = strtotime('2037-12-31 00:00:01');
                if ($row['locktype'] == 1 || ($row['locktype'] == 2 && $row['lockvalue'] == $static_lock_time)) {
                    $lock_type_str = '永久';
                } else {
                    $lock_type_str = '暂时';
                }
            }
            $data_row['lock_type_str'] = $lock_type_str;

            //公司规模展示
            $data_row['com_scale'] = $com_scale_options[$row['com_scale']];
        }
        return $render_datas;
    }

    //根据参数获得排序
    //页面 user/list
    private function _getListGenOrderByParams($params)
    {
        $order = 'asc';
        if (isset($params['ud']) && $params['ud'] == 1) {
            $order = 'desc';
        }

        if (isset($params['o'])) {
            $field = $params['o'];
            $order = 'order by ' . $params['o'] . " {$order}";
        } else {
            $order = 'order by `locktype` desc,`lockvalue` desc, `reward_buy_amount` desc, `pub_numth` desc, `loginendtime` desc';
        }
        return $order;
    }

    //根据参数生成where查询语句
    //页面 user/list
    private function _getListGenWhereByParams($params)
    {
        /**
         * 首先确定哪些重要索引字段有值（能大幅减小索引范围的）
         * 先建立这些字段的where,优先使用该索引。
         *
         * 根据params字段建立索引
         */
        $where = array();
        $user_service = new zbj_service_user();
        $params = $this->_getListParseSelectParams($params);

        //重要的索引字段和其对应的低命中率索引值，例如managerid的0(对应公海)
        //处理managerid
        if (isset($params['managerid'])) {
            $v = $params['managerid'];
            if (is_array($v)) {
                $v = '(' . implode(',', $v) . ')';
                $where[] = '`managerid` IN ' . $v;
            } else {
                $where[] = '`managerid`=' . (int) $v;
            }
        }

        if (isset($params['usercategory'])) {
            switch ($params['usercategory']) {
            case 3:
                $params['lock_state'] = "false";
                break;
            case 4:
                $params['lock_state'] = "true";
                break;
            default:
                break;
            }
        }

        //处理lock_state
        if (isset($params['lock_state'])) {
            $time = time();
            if ($params['lock_state'] == 'true') {
                $where[] = "((`locktype`=1 and `lockvalue`>0) or (`locktype`=2 and `lockvalue`='2145801601'))";
            } else {
                $where[] = "(`locktype`=0 or (`locktype`=1 and `lockvalue`=0) or (`locktype`=2 and `lockvalue`<{$time}))";
            }
        }

        if (isset($params['realtype'])) {
            $v = (int) $params['realtype'];
            $where[] = "`realtype`={$v}";
        }

        //处理industry
        if (isset($params['industry']) && is_numeric($params['industry'])) {
            $industry = @mysql_escape_string($params['industry']);
            $where[] = "`industry`={$industry}";
        }
        //消费字段where处理
        $expend_fields = array(
            'expenditure', 'reward_buy_amount', 'de_buy_amount',
        );
        list($expend_levels, $level_map_range) = $this->_getListExpendLevels();
        foreach ($expend_fields as $field) {
            if (!isset($params[$field])) {
                continue;
            }
            $range = $level_map_range[$params[$field]];
            $range_where = $this->_getListGenRangeWhere($field, $range[0], $range[1]);
            if ($range_where) {
                $where[] = $range_where;
            }
        }
        
        //tab选择
        if (isset($params['cur_tab'])) {
            switch ($params['cur_tab']) {
            case 3:
                $where[] = "`realtype`=2";//企业雇主
                break;
            case 4:
                $where[] = "`realtype`=1";//个人雇主
                break;
            case 6:
                $where[] = "`managerid`={$this->_userid} and `locktype`=2 and `lockvalue` =2145801601";//个人雇主
                break;
            case 5:
                $where[] = "`locktype`=0";
                break;
            case 7:
                $where[] = "`locktype`=2 and `lockvalue` =2145801601";//已锁定雇主
                break;
            default:
                break;
            }
        }


        //注册时间
        $regtime_where = $this->_getListGenRangeWhere('regtime', @$params['regtime_start'], @$params['regtime_end']);
        if ($regtime_where) {
            $where[] = $regtime_where;
        }
        //登录时间范围
        $loginendtime_where = $this->_getListGenRangeWhere('loginendtime', @$params['loginendtime_start'], @$params['loginendtime_end']);
        if ($loginendtime_where) {
            $where[] = $loginendtime_where;
        }

        //跟进事件范围
        $calltime_where = $this->_getListGenRangeWhere('calltime', @$params['calltime_start'], @$params['calltime_end']);
        if ($calltime_where) {
            $where[] = $calltime_where;
        }

        //能力值范围查询
        if (isset($params['integral_level'])) {
            $f = 'integral';
            list($min, $max) = $user_service->getIntegralFromAccountLevel($params['integral_level']);
            $where[] = $this->_getListGenRangeWhere($f, $min, $max);
        }

        //发布次数处理
        if (isset($params['pub_numth'])) {
            list($options, $pub_numthes_range) = $this->_getListPubNumsOptions();
            if (isset($pub_numthes_range[$params['pub_numth']])) {
                $range = $pub_numthes_range[$params['pub_numth']];
                $where[] = $this->_getListGenRangeWhere('pub_numth', $range[0], $range[1]);
            }
        }

        //信用度处理
        if (isset($params['creditpoints'])) {
            list($options, $creditpoints_range) = $this->_getListCreditpointOptions();
            if (isset($creditpoints_range[$params['creditpoints']])) {
                $range = $creditpoints_range[$params['creditpoints']];
                $where[] = $this->_getListGenRangeWhere('creditpoints', $range[0], $range[1]);
            }
        }

        //规模大小处理
        if (isset($params['com_scale'])) {
            $options = $this->_getListComScaleOptions();
            if (isset($options[$params['com_scale']])) {
                $where[] = "`com_scale`={$params['com_scale']}";
            }
        }
        //性别处理
        if (isset($params['gender'])) {
            $v = $params['gender'] == 'male' ? '1' : '0';
            $where[] = "`gender`='{$v}'";
        }
        //是否有QQ
        if (isset($params['have_qq'])) {
            if($params['have_qq'] == 'true') {
                $where[] = "`qq`!=''";
            } else {
                $where[] = "`qq`=''";//数据库默认值为0
            }
        }

        //地区处理
        if (isset($params['com_address'])) {
            $v = @mysql_escape_string($params['com_address']);
            $where[] = "`com_address`='{$v}'";
        }

        //手机状态
        if (isset($params['mobilestatus'])) {
            $v = $params['mobilestatus'] == 'true' ? '1' : '0';
            $where[] = "`mobilestatus`={$v}";
        }
        //邮箱状态
        if (isset($params['emailstatus'])) {
            $v = $params['emailstatus'] == 'true' ? '1' : '0';
            $where[] = "`emailstatus`={$v}";
        }

        return $where;
    }

    //将范围查询where语句生成封装一下
    //页面 user/list
    private function _getListGenRangeWhere($field, $min = NULL, $max = NULL, $eq = TRUE)
    {
        $tmp_where = array();
        if ($min) {
            $cmp = $eq ? '>=' : '>';
            $v = @mysql_escape_string($min);
            $tmp_where[] = "`{$field}`{$cmp}'{$v}'";
        }

        if ($max) {
            $cmp = $eq ? '<=' : '<';
            $v = @mysql_escape_string($max);
            $tmp_where[] = "`{$field}`{$cmp}'{$v}'";
        }

        if (empty($tmp_where)) {
            return FALSE;
        } else {
            $where = implode(' AND ', $tmp_where);
            $where = "({$where})";
            return $where;
        }
    }

    /**
     * 对前端直接传入参数做解析,方便后端更方便处理
     * 例如将zero转为0
     * 页面 user/list
     */
    private function _getListParseSelectParams($params)
    {
        //因为0在前端代表全部，如果有值为0的被转换为zero输出了,这里做一层转换
        $zero_to_0_fields = array(
            'realtype', 'integral_level',
        );

        foreach ($zero_to_0_fields as $f) {
            if (isset($params[$f]) && $params[$f] == 'zero') {
                $params[$f] = '0';
            }
        }

        if (isset($params['gid']) && !isset($params['managerid'])) {
            $group_id = $params['gid'];
			$cpuser = new zbj_model_cp_user();
			$ret = $cpuser->select(array('group_id' => $group_id), 'user_id');
            $m_ids = array();
            if ($ret) {
                $ret = $ret->items;
                foreach ($ret as $row) {
                    $m_ids[] = $row['user_id'];
                }
		        $params['managerid'] = $m_ids;
            }
        }

        return $params;
    }

    /**
     * 获取list页面所需要的参数
     * 该方法最多做检查，值修改需要前端能理解
     * 获取查询参数，做一些基本的判断
     * 页面 user/list
     */
    private function _getListSelectParams()
    {
        /*
        $default_params = array(
            'cur_tab' => '2',//当前选择的tab
            'usercategory' => '',//默认没有分类筛选
            'managerid' => '0',//交易顾问ID
            'industry' => '0', //行业
            'expenditure' => '0',//总消费金额,是一个范围值
            'regtime_start' => '',//注册时间范围
            'regtime_end' => '',
            'loginendtime_start' => '',//最后登录时间范围
            'loginendtime_end' => '',
            'calltime_start' => '',//最近跟进时间，库里边注释为最后回访时间
            'calltime_end' => '',
            'realtype' => '', //mb_info.realtype 认证类型
            'integral' => '', //活跃等级 mb_info.integral 根据规则计算等级筛选
            'pub_numth' => '', //发布次数mb_count.pub_numth 
            'lock_state' => '', //锁定,对应person表state
            'creditpoints' => '', //mb_info.creditpoints 信用度
            'com_scale' => '',//规模大小
            'gender' => '',//性别，salutationtype 原来时称呼的意思，先表示性别值为男或者女
            'mobilestatus' => '',//mb_account.mobilestatus 手机认证
            'emailstatus' => '',//mb_account.emailstatus 邮箱认证
            'have_qq' => '',//是否有qq信息,person表qq字段为空判定
            'com_address' =>'',//person表，为何这个字段是地区呢？值为“北京”，“重庆”等
            'reward_buy_amount' => '',//需求消费
            'de_buy_amount' => '0',//雇佣消费 mb_count.de_buy_amount 
            //'' => '',//增值消费
            'task_num' => '',//是否有进行中交易
        );
         */

        $tmp_params = array_merge($_GET, $_POST);
        $params = array();

        foreach ($tmp_params as $key => $v) {
            if (!empty($v)) {//可能以后需要单独函数判断
                $params[$key] = $v;
            }
        }

        //时间字段参数验证
        $time_fields = array(
            'regtime', 'loginendtime', 'calltime'
        );
        foreach ($time_fields as $f) {
            $start_field = $f.'_start';
            $end_field = $f.'_end';
            if (isset($params[$start_field])) {
                $sv = $params[$start_field];
                $sv_ts = strtotime($sv);
                if (!empty($sv) && $sv_ts === FALSE) {
                    unset($params[$start_field]);
                }
            }

            if (isset($params[$end_field])) {
                $ev = $params[$end_field];
                $ev_ts = strtotime($ev);
                if (!empty($ev) && $ev_ts === FALSE) {
                    unset($params[$end_field]);
                }
            }
        }

        //消费等级参数限制
        $expend_level_fields = array(
            'expenditure', 'de_buy_amount'
        );
        list($expend_levels, $level_map_range) = $this->_getListExpendLevels();
        foreach ($expend_level_fields as $f) {
            if (!isset($params[$f])) {
                continue;
            }
            $v = $params[$f];
            if ($v != '0' && !isset($level_map_range[$v])) {
                unset($params[$f]);
            }
        }

        return $params;
    }

    //私海Tab的类型
    //页面 user/list
    private function _getListTabs($all = TRUE)
    {
        //参数名priseatype
        $tabs = array(
            '1' => '概述',
            '2' => '所有雇主',
            '7' => '锁定雇主',
            '6' => '我的雇主',
            '3' => '企业雇主',
            '4' => '个人雇主',
            '5' => '公海',
            '6' => '添加香港馆雇主',
            '7' => '香港馆雇主',
            '8'=>'雇主快速登记',
        );
        if ($all) {
            unset($tabs[9]);
        } else {
            unset($tabs[2]);
        }

        return $tabs;
    }

    //雇主类型筛选项，如果筛选看具体的处理方式和配置
    //页面 user/list
    private function _getListUserCategories($public_sea = FALSE)
    {
        //参数名usercategory
        $categories = array(
            '0' => '全部',
            //'1' => '活跃雇主',
            //'2' => 'VIP雇主',
            '3' => '公海雇主',
            '4' => '非公海雇主',
        );
        if (!$public_sea) {
            unset($categories[3]);
            unset($categories[4]);
        }

        return $categories;
    }

    //页面 user/list
    private function _getListIntegralLevelOptions()
    {
        $user_service = new zbj_service_user();
        $integral_config = $user_service->accountLevelConfig();
        $options = array(
            '0' => '全部'
        );

        foreach ($integral_config as $level_num => $config) {
            $level_num_v = $level_num;
            if ($level_num == 0) {
                $level_num_v = 'zero';
            }
            $options[$level_num_v] = 'Lv' . $level_num;
        }

        return $options;
    }


    //页面 user/list
    private function _getListRegionOptions()
    {
        static $options = array();
        if (!empty($options)) {
            return $options;
        }

        $region_service = new zbj_service_region();
        $regions = $region_service->getChildren();
        $ret = array();
        foreach ($regions as $r) {
            $ret[$r['region_id']] = $r['region_name'];
        }
        return $ret;
    }
    //发布次数的选项
    //页面 user/list
    private function _getListPubNumsOptions()
    {
        $pub_num_options = array(
            '0' => '全部',
            '1' => '1-5',
            '2' => '6-20',
            '3' => '21-50',
            '4' => '51-70',
            '5' => '71-100',
            '6' => '101及以上',
        );

        $pub_num_map_range = array(
            '1' => array(1, 5),
            '2' => array(6, 20),
            '3' => array(21, 50),
            '4' => array(51, 70),
            '5' => array(71, 100),
            '6' => array(101, NULL),
        );

        return array($pub_num_options, $pub_num_map_range);
    }

    //页面 user/list
    private function _getListIndustyOptions()
    {
        static $industries = array();
        if (empty($industries)) {
            $s_option = new service_cpoption(16);
            $items = $s_option->getItems();
            foreach ($items as $i) {
                $industries[$i['item_id']] = $i;
            }
        }
        return $industries;
    }

    //规模大小选项
    //页面 user/list
    private function _getListComScaleOptions()
    {
        static $com_scale_options = array('0' => '不限');
        if (count($com_scale_options) <= 1) {
            $s_option = new service_cpoption(18);
            $items = $s_option->getItems();
            foreach ($items as $i) {
                $com_scale_options[$i['item_id']] = $i['name'];
            }
        }

        return $com_scale_options;
    }

    //页面 user/list
    private function _getListCreditpointOptions()
    {
        $credit_point_options = array(
            '0' => '全部',
            '1' => '0-39',
            '2' => '40-59',
            '3' => '60-79',
            '4' => '80及以上',
        );

        $credit_point_map_range = array(
            '1' => array(0, 39),
            '2' => array(40, 59),
            '3' => array(60, 79),
            '4' => array(80, NULL),
        );

        return array($credit_point_options, $credit_point_map_range);
    }

    //页面 user/list
    private function _getListRealtypes($for_options = TRUE)
    {
        //0:无 1:个人 2:企业,3个体经营（弃用）,4:事业单位团体（弃用） 5：政府 6：学校 7：媒体 
        $real_types = array(
            '0' => '全部',
            '1' => '个人',
            '2' => '企业',
            '5' => '政府',
            '7' => '媒体',
            '6' => '学校',
            'zero' => '未认证',//数据库中数据为0，这里0被全部占用，使用的时候需要转义一下
        );
        if (!$for_options) {
            $real_types[0] = $real_types['zero'];
            unset($real_types['zero']);
        }
        return $real_types;
    }

    //页面 user/list
    private function _getListExpendLevels()
    {
        $levels = array(
            '0' => '全部',
            '1' => '1-50',
            '2' => '51-200',
            '3' => '201-500',
            '4' => '501-1000',
            '5' => '1001-3000',
            '6' => '3001-10000',
            '7' => '10001及以上',
        );

        $level_map_range = array(
            '1' => array(1, 50),
            '2' => array(51, 200),
            '3' => array(201, 500),
            '4' => array(501, 1000),
            '5' => array(1001, 3000),
            '6' => array(3001, 10000),
            '7' => array(10001, NULL),
        );

        return array($levels, $level_map_range);
    }

    //页面 user/list
    private function _getListCheckLockState($lock_type, $lock_value)
    {
        if (($lock_type == 1 && $lock_value > 0) || ($lock_type == 2 && $lock_value > time())) {
            return TRUE;
        } else {
            return FALSE;
        }
    }
    
    /**
     * 发送信息
     */
    public function pageSendMsg($inPath){    	
    	if(zbj_lib_BaseUtils::isAjax()){
    		$url = $this->getUrlParams($inPath);
    		$uid = zbj_lib_BaseUtils::getStr($url['uid'], 'string');
    		
    		if(!count($_POST)){
    			$model_cp_user = new zbj_model_cp_user();
				$this->tplvar['cp_user'] = $model_cp_user->selectOne(array('user_id'=> $this->_userid), 'name, worknum, tel');
    			
				$service_user = new zbj_service_user($uid);
				$phone = $service_user->getAuthMobile();
				$this->tplvar['auth_phone'] = $phone? $phone: 0; 
				
				$m_customerperson = new zbj_model_mb_customerperson($uid);
        		$phone = $m_customerperson->getdata('mobile');
				$this->tplvar['customer_phone'] = $phone? $phone: 0;
				
				$account = zbj_lib_BaseUtils::apicall('user', 'getAccount', array('uid' => $uid));
				$phone = $account['data']['usermobile'];
				$this->tplvar['account_phone'] = $phone? $phone: 0;
    			
    			return $this->render('user/ajax/sendmsg.dialog.html', $this->tplvar);
    		}
			   
	    	$msg_type = zbj_lib_BaseUtils::getStr ( $_POST ['msgType'], 'int', 0 );
			$title = trim ( zbj_lib_BaseUtils::getStr ( $_POST ['title'], "string" ) );
			$content = zbj_lib_BaseUtils::reMoveXss($_POST['content']);
			$content = zbj_lib_BaseUtils::sstripslashes($content);
			$mobile_phone = trim(zbj_lib_BaseUtils::getStr ($_POST['mobile_phone'], "string"));
			
			if($msg_type == 0){
				return $this->printmsg ("请选择消息类型。", 0, 'msgType' );
			}
			
			if($msg_type == 1){
				if ($title == '') {
					return $this->printmsg ("请输入标题。", 0, 'title' );
				}
			}else{
				if(!$mobile_phone){
					return $this->printmsg ("请选择手机号。", 0, 'mobile_phone' );
				}
			}
			
			if ($content == '') {
				return $this->printmsg ("请输入内容。", 0, 'content' );
			}
			
			$user_info = zbj_lib_BaseUtils::apicall('user', 'getInfo', array('uid' => $uid));
			$nickname = $user_info['data']['nickname']?$user_info['data']['nickname']:$user_info['data']['brandname'];
			
			if($msg_type == 1){
				$msginfo = array ('type' => 3, 'cat_id' => 6, 'f_userid' => "0", 'f_nickname' => "后台推送", 't_userid' => $uid, 't_nickname' => $nickname, 'title' => $title, 'cont' => $content );
			}else{
				$content = strip_tags($content);
				$msginfo = array ('type' => 2, 'mobile' => $mobile_phone, 'cont' => $content, 'userid'=>$this->_userid, 'nickname'=>$this->_nickname);
			}
			
			$ssmg = new SSendmsg ();
			$ssmg->sendMsg ( $msginfo );
			if($msg_type == 1){
				$this->addLog($uid, $this->_nickname . "发送了站内信: 内容：".$content, 'user');	
			}else{
				$this->addLog($uid, $this->_nickname . "发送了短信: 内容：".$content, 'user');	
			}
			
			return $this->printmsg("发送成功",2,null);
    	}
    }

    /**
     * 派单 2013-09-02 加
     **/
    public function pageSendSingle($inPath) {
		$task_id = zbj_lib_BaseUtils::getStr($_POST['taskId'], 'int');
		$wkKey = $_POST['witkeyId'];
		if (!$task_id) {
			return $this->printmsg('请指定任务ID',0);
		}
		if (empty($wkKey)) {
			return $this->printmsg('请指定派单服务商',0);
		} else {
            //调用派单方法
            $fail = 0;
            $srvTask = new zbj_service_task($task_id);
            $srvTask = $srvTask->init();
            $aTask = $srvTask->get();
            if (empty($aTask)) {
                return $this->printmsg('指定的订单不存在',0);
            }
            $category_id = $aTask['category_id'];
            
            $sucess_msg = array();
            $false_msg = array();
            foreach ($wkKey as $key=>$value) {
                $uid = intval($value);
                
                $m_mb_info = new zbj_model_mb_info();
				$witkey = $m_mb_info->selectOne(array('user_id'  => $uid));
                
                $s_recommendaction = new service_recommendwk();
				if (! $s_recommendaction->isAllTreatment($uid)) {
					$false_msg[] = array('msg' => '该服务商还有订单未处理，请推荐其他服务商', 'brandname' => $witkey['brandname']);
					
					continue;
				}
				
				$s_recommend = new zbj_service_recommend($uid, $task_id);
                $fl = $s_recommend->recommend(1, $this->_userid);
                
                if ($fl === false) {
                	$false_msg[] = array('msg' => $s_recommend->getError(), 'brandname' => $witkey['brandname']);
                } else {
                	//人工派单更新recommendinfo表,from 2014-01-16
                	$m_recommendinfo = new zbj_model_mb_recommendinfo($uid);
                	if($m_recommendinfo->getData("user_id"))
                	{
                		$m_recommendinfo->update("user_id={$uid}", '`recommend_num`=`recommend_num` + 1,`undeal_num`=`undeal_num` + 1,`today_num`=`today_num` + 1');
                	}else
                	{
                		$item = array('user_id'=>$uid,'recommend_num'=>1,'undeal_num'=>1,'today_num'=>1);
                		$m_recommendinfo->insert($item);
                	}
                	//end
                	
                	$sucess_msg[] = array('brandname' => $witkey['brandname']);
                	
                    //更新统计数据
//                    $oRecommend = new zbj_service_recommand();
//                    $res = $oRecommend->udpRcdData($category_id, $uid, 1, $this->_userid, $this->_nickname, $task_id);
                    
                    //给服务商发送短信
                    $task_title = $aTask['title'];
					$task_title = strlen($task_title) > 15? substr($task_title, 0, 15).'...': $task_title;
					$content = '官方推荐优质需求“'.$task_title.'”投标即可获雇主联系方式,还可享受5%佣金特权,立即登录猪八戒网服务商中心官方推荐订单查看';
					$s_user = new zbj_service_user($uid);
					if($s_user->getAuthMobile()){
						$msg_info = array ('type' => 2, 'mobile' => $s_user->getAuthMobile(), 'cont' => $content, 'userid'=>$this->_userid, 'nickname'=>$this->_nickname);
						$ssmg = new SSendmsg ();
						$ssmg->sendMsg($msg_info);
					}
                    
					//添加日志 by houxiaopeng
					$s_witkey[$key] = $witkey['nickname'];
					//更新mk_task_opis派单时间
//					$m_task_opis = new zbj_model_mk_taskopis();
//					$m_task_opis->update(array('task_id' => $task_id), array('latest_recommend_time' => $this->_time, 'latest_recommend_date' => date('Y-m-d', date($this->_time))));
                
                	//更新mb_recommend_opis
                	$s_recommendaction->updateMonthRecommendNum($uid);
                	
                	//手动派单成功后，推送消息给移动app
            		$s_recommendaction->postData($srvTask, $s_user);

                    //派单成功的，跟新alloted字段
                    $sqls[$key] = "update mk_task_seller set alloted=1 where user_id={$uid} and task_id={$task_id};"; 
                }
            }
            /*$sqls = array(
                   0 =>"update mk_task_seller set alloted=1 where user_id=18 and task_id=5173402;",
                   1 =>"update mk_task_seller set alloted=1 where user_id=18 and task_id=5173402;",
                );*/
            
            //派单成功的，跟新alloted字段 by houxiaopeng
            if(!empty($sqls)){
                $mdlSeller = zbj_model_api::get('zbj_model_mk_taskseller');
                $allotedsql = implode('',$sqls);
                $mdlSeller->query($allotedsql);
            }

            //添加日志 by houxiaopeng
            if(!empty($s_witkey)){
                $m_witkey = implode(',',$s_witkey);
                $s_manager = new service_manager($this->_userid);
                $witkeynum = count($s_witkey);
                if(intval($witkeynum) == 1){
                    $this->addLog($task_id, "交易顾问:{$s_manager->get('name')} 给服务商：".$m_witkey.$witkeynum."人派单");
                }else{
                    $this->addLog($task_id, "交易顾问:{$s_manager->get('name')} 给服务商：".$m_witkey."等".$witkeynum."人派单");
                }
            }
            
            
            if (count($sucess_msg)) {
				//给雇主发送短信
				$s_user = new zbj_service_user ($aTask['user_id']);
				
	            $content = "尊敬的用户".$s_user->get('info.brandname')."，我们为您推荐了可能满足您需求的服务商，他们将于最近与您取得联系，请关注!";
				if($s_user->getAuthMobile()){
					$msg_info = array ('type' => 2, 'mobile' => $s_user->getAuthMobile(), 'cont' => $content, 'userid'=>$this->_userid, 'nickname'=>$this->_nickname);
					$ssmg = new SSendmsg ();
					$ssmg->sendMsg($msg_info);
				}
			}
		}
		
		if (count($wkKey) == count($sucess_msg)) {
			return $this->printmsg("派单操作成功", 1, '', $_SERVER['HTTP_REFERER']);
		} else {
			$msg = '';
			if (count($sucess_msg) >= 1) {
				$msg = count($sucess_msg)."个服务商派单成功:";
				foreach ($sucess_msg as $value) {
					$msg .= $value['brandname']."； ";
				}
				
				$msg = count($sucess_msg)."个服务商派单失败:";
				foreach ($sucess_msg as $value) {
					$msg .= $value['brandname']." 失败原因：".$value['msg']."；";
				}
			} else {
				$msg = count($false_msg)."个服务商派单失败:";
				foreach ($false_msg as $value) {
					$msg .= $value['brandname']." 失败原因：".$value['msg']."；";
				}
			}
			
			return $this->printmsg($msg, 0, '', $_SERVER['HTTP_REFERER']);
		}
	}

    public function pageisSingeOk($inPath) {
        $userid = zbj_lib_BaseUtils::getStr($_GET['uid'], 'int');
        if (!zbj_lib_BaseUtils::isAjax()) {
            echo "NO ajax";
            exit();
        }
        if (!$userid) {
            return $this->printmsg('参数错误',0);
        }
//        $mdlsign = new zbj_model_mk_tasksign();
//        $date = date('Y-m-d', $this->_time);
//        $count = $mdlsign->selectOne("user_id = {$userid} and isworks = 0 and isinvite = 1", "count(0) as n");
//        $actn = $count['n'];
//        if ($actn >= 10) {
//            return $this->printmsg('该用户积压未处理推荐超过限额',0);
//        }
//        $mdlaction = new zbj_model_mb_recommendaction();
//        $count = $mdlaction->selectOne("user_id = {$userid} and action_type = 1 and ymd = '{$date}'", "count(0) as n");
//        $dayn = $count['n'];
//        if ($dayn >= 10) {
//            return $this->printmsg('该用户今日推荐限额已超',0);
//        }
        return $this->printmsg('满足条件',1);
    }
    
    /**
     * 服务商入驻审核
     */
    public function pageFwsCert($inPath) {
    	$path = $this->getUrlParams($inPath);
    	$status = (int)$_GET['status'];
    	$state = (int)$_GET['state'];
    	$type = (int)$_GET['type'];
    	$key = zbj_lib_BaseUtils::getStr($_GET['key']);
    	$start = $_GET ['start'];
        $end = $_GET ['end'];
        $page = (int)$path['page'] ? (int)$path['page'] : 1;
        $limit = 20;
        $allot_manager_id=zbj_lib_BaseUtils::getStr($_REQUEST['allot_manager_id'],'int');
        switch ($status) {
        	case 0: $condition[] = "uc.status=0";break;
        	case 1: $condition[] = "uc.status=1";break;
        	case 2: $condition[] = "uc.status=2";break;
        }
        switch ($state) {
        	case 1: $condition[] = "uc.type=30";break;
        	case 2: $condition[] = "uc.type=31";break;
        	default: $condition[] = "uc.type in(30,31)";break;
        }
        if ($key) {
	        switch ($type) {
	        	case 1: $condition[] = "a.user_id={$key}";break;
	        	case 2: $condition[] = "a.nickname='{$key}'";break;
	        	case 3: $condition[] = "a.username='{$key}'";break;
	        } 
        }
        if ($start) {
        	$condition[] = "uc.dateymd>='{$start}'";
        }
        if ($end) {
        	$condition[] = "uc.dateymd<='{$end}'";
        }
        if ($allot_manager_id) {
        	$condition[] = "uc.allot_manager_id={$allot_manager_id}";
        }
//         define('DEBUG', $value);
        $mdlUserCert = new zbj_model_mb_usercert();//define('DEBUG',1);
        $mdlUserCert->setLimit($limit);
        $mdlUserCert->setPage($page);
        $mdlUserCert->setCount(true);
        $item = '*';
        $left = array('mb_account a'=>'uc.user_id=a.user_id');
        $res = $mdlUserCert->_db->select('mb_user_cert uc',$condition,$item,'','order by verify_id desc',$left);
        
        $list = $res->items;
        if ($list) {
        	foreach($list as $v) {
        		$uid[] = $v['user_id'];
        		$vid[] = $v['verify_id'];
        		$expand = unserialize($v['expand']);
        		$cid2[] = $expand['id'] ? $expand['id'] : 0;
        		$cid2[] = $expand['oldc2'] ? $expand['oldc2'] : 0;
        		$cid2[] = $expand['newc2'] ? $expand['newc2'] : 0;
        		if ($expand['info']) {
	        		foreach ($expand['info'] as $k2 => $c2) {
	        			if ($c2['category_id'] && !in_array($c2['category_id'], (array)$cid3)) {
	        				$cid3[] = $c2['category_id'];
	        			}
	        		}
        		}
        	}
        	$uids = implode(',',$uid);
        	$vids = implode(',',$vid);
        	$cid2s = implode(',',$cid2);
        	$cid3s = implode(',',$cid3);
	        $condition = "user_id in({$uids})";
	        $info = $mdlUserCert->_db->select('mb_info',"user_id in({$uids})",'user_id,selfinfo,realtype')->items;
	        $real = $mdlUserCert->_db->select('mb_real',"user_id in({$uids}) and status='2'",$item)->items;
	        $cert = $mdlUserCert->_db->select('mb_user_cert',"user_id in({$uids}) and type=17",'user_id,expand,status')->items;
	        $cate2 = $mdlUserCert->_db->select('mk_category',"category_id in({$cid2s})",'*')->items;
	        $cate3 = $mdlUserCert->_db->select('mk_category',"category_id in({$cid3s})",'*')->items;
	        if ($cate3) {
	        	foreach ($cate3 as $v3) {
	        		if (!in_array($v3['parent_id'], (array)$c2id))
	        			$c2id[] = $v3['parent_id'];
	        	}
	        	$c2ids = implode(',', $c2id);
	        	$c2ate = $mdlUserCert->_db->select('mk_category',"category_id in({$c2ids})",'*')->items;
	        	if ($c2ate) {
	        		foreach ($c2ate as $v2) {
	        			$c2list[$v2['category_id']] = $v2['category_name'];
	        		}
	        	}
	        }
	        foreach ($list as $k => $v) {
        		$expand = unserialize($v['expand']);
        		$category = array();
        		//1级类目名称
        		if ($cate2) {
        			foreach ($cate2 as $v0) {
        				if ($v0['category_id'] == $expand['oldc2']) {
        					$category['oldc2name'] = $v0['category_name'];
        				}
        				if ($v0['category_id'] == $expand['newc2']) {
        					$category['c2name'] = $v0['category_name'];
        				}
        				if ($v0['category_id'] == $expand['id']) {
        					$category['c2name'] = $v0['category_name'];
        				}
        			}
        		}
        		//3级
        		if ($expand['info']) {
        			foreach ($expand['info'] as $k2 => $c2) {
        				if ($cate3) {
        					foreach ($cate3 as $c3) {
        						if ($c2['category_id'] == $c3['category_id']) {
	        						if (!in_array($c2list[$c3['parent_id']], (array)$category['info'])) {
	        							$category['info'][] = $c2list[$c3['parent_id']];
	        						}
        						}
        					}
        				}
        			}
        		}
        		$list[$k]['category'] = $category;
        		//用户详情
        		if ($info) {
        			foreach($info as $v1) {
        				if ($v['user_id'] == $v['user_id']) {
        					$list[$k]['info'] = $v1;
        				}
        			}
        		}
        		//实名认证信息
        		if ($real) {
        			foreach($real as $v2) {
        				if ($v['user_id'] == $v2['user_id']) {
        					$list[$k]['real'] = $v2;
        				}
        			}
        		}
        		//认证说明
        		if ($cert) {
        			foreach($cert as $v3) {
                        if ($v['user_id'] == $v3['user_id']) {
                            $expand = unserialize($v3['expand']);
                            if ($v3['status'] == '2') {
                            	$list[$k]['intro'] = $expand['new'];
                            } else {
                            	$list[$k]['intro'] = $expand['old'];
                            }
                        }
        			}
        		}
        	}
        }
		$this->tplvar ['pagebar'] = $this->PageBar($res->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);;
		$this->tplvar ['totalsize'] = $res->totalSize;
		$this->tplvar ['pagesize'] = $res->pageSize;
        $this->tplvar['list'] = $list;//var_dump($list);
        $this->tplvar['ids'] = $vids;
        $this->tplvar['picdomain'] = zbj_lib_Constant::UPFILEURLOLD;
        $s_allot=new zbj_service_allot(11);
        $this->tplvar['managers']=$s_allot->getusers();
        return $this->render('user/recommend/fwscert.html', $this->tplvar);
    }
    
    /**
     * 服务商入驻审核操作
     */
    public function pageSetFwsCert($inPath) {
    	$path = $this->getUrlParams($inPath);
    	
        $iVid = intval($_REQUEST['id']);        //对应记录ID
        $iType = intval($_REQUEST['type']);      //操作类型  1:通过 2:拒绝
        
        if (empty($iVid)) {
            return $this->printmsg('参数错误', 1, null);
        }
        $oCert = new zbj_model_mb_usercert();
        $aCert = $oCert->selectOne(array('verify_id' => $iVid), '*');
        if (empty($aCert)) {
            return $this->printmsg('无相应记录', 1, null);
        }
        if ($aCert ['status'] == $iType) {
            return $this->printmsg('已处理', 1, null, '/user/fwscert');
        }
		$uid = $aCert['user_id'];
        if ($iType == 1) {//通过
            $srvProviders = new zbj_service_providers($uid);
            $expand = unserialize($aCert ['expand']);
            if ($aCert['type'] == 30) {
            	$res = $srvProviders->providersJoin($expand['id'],$expand['info'],$expand['is_main']);
            } elseif ($aCert['type'] == 31) {
            	$res = $srvProviders->editProvidersJoin($expand['oldc2'],$expand['newc2'],$expand['info']);
            }
            if ($res != true) {
            	return $this->printmsg('更新失败：'.$srvProviders->getError(), 1, null);
            }
            $item = array(
            	'status' => 1,
            	'cp_user' => $this->_nickname,
            	'opdateline' => $this->_time,
            	'opdateymd' => date('Y-m-d', $this->_time)
            );
            if (!$oCert->update(array('verify_id' => $iVid), $item)) {
            	return $this->printmsg('更新失败：usercert表状态更新失败', 1, null);
            }
            //发送站内信
            $msg['user_id'] = $uid;
            $msg['nickname'] = $aCert['nickname'];
            $url = zbj_lib_Constant::UC_URL.'/witkey/index';
            $msg['m_title'] = "恭喜！您入驻服务商审核成功！";
            $msg['m_content'] = "亲爱的".$aCert['nickname']."：<br />&nbsp;&nbsp;&nbsp;&nbsp;恭喜你已通过审核成功入驻成为猪八戒网服务商，现在就去<a href='".$url."' target='_blank'>服务商中心</a>看看如何包装自己吧!。";
            $msg['s_content'] = "恭喜你已通过审核成功入驻成为猪八戒网服务商，现在你可以享受服务商的各种特权了。【猪八戒网】";
            $this->tosendsmg(array(1,2), $msg);
            $s_allot = new zbj_service_allot ( 11 );
            $s_allot ->processed($iVid);
            return $this->printmsg('更新成功', 1, null, '/user/fwscert');
        } elseif ($iType == 2) {//拒绝
        	$aReason = $_REQUEST['reason'];
	        if ($aReason) {
	        	foreach ($aReason as $v) {
		        	switch ($v) {
		        		case 1: $rname = '入驻类目与简介不符';break;
		        		case 2: $rname = '入驻类目与企业经营范围不符';break;
		        	}
		        	if ($reason) {
		        		$reason .= '；'.$rname;
		        	} else {
		        		$reason = $rname;
		        	}
	        	}
	        }
	        $otherReason = zbj_lib_BaseUtils::getStr($_REQUEST['other']);       //其他原因
	        if ($otherReason) {
	            $reason = $reason ? $reason.'；'.$otherReason : $otherReason;
	        }
	        //define('DEBUG', 1);
			$item = array(
                'status' => 2,
	            'cp_user' => $this->_nickname,
	            'opdateline' => $this->_time,
	            'opdateymd' => date('Y-m-d', $this->_time),
                'op_result' => $reason
			);
			if (!$oCert->update(array('verify_id' => $iVid), $item)) {
				return $this->printmsg('更新失败：usercert表状态更新失败', 1, null);
			}
            //发送站内信
            $msg['user_id'] = $uid;
            $msg['nickname'] = $aCert['nickname'];
            $url = zbj_lib_Constant::UC_URL.'/witkey/index';
            $msg['m_title'] = "您提交的服务商入驻申请未通过";
            $msg['m_content'] = "亲爱的".$aCert['nickname']."：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的服务商入驻申请被驳回，原因如下：<br />".$reason."。<br />请按照网站规定重新申请入驻，感谢您对猪八戒网的支持。<a href='".$url."' target='_blank'>服务商中心>></a>";
            $msg['s_content'] = "您在猪八戒网提交的服务商入驻申请被驳回，请及时登录网站查看。www.zhubajie.com【猪八戒网】";
            $this->tosendsmg(array(1,2), $msg);
            $s_allot = new zbj_service_allot ( 11 );
            $s_allot ->processed($iVid);
            return $this->printmsg('更新成功', 1, null, '/user/fwscert');
        } elseif ($iType == 4) {//重新拒绝
        	$aReason = $_REQUEST['reason'];
	        if ($aReason) {
	        	foreach ($aReason as $v) {
		        	switch ($v) {
		        		case 1: $rname = '入驻类目与简介不符';break;
		        		case 2: $rname = '入驻类目与企业经营范围不符';break;
		        	}
		        	if ($reason) {
		        		$reason .= '；'.$rname;
		        	} else {
		        		$reason = $rname;
		        	}
	        	}
	        }
	        $otherReason = zbj_lib_BaseUtils::getStr($_REQUEST['other']);       //其他原因
	        if ($otherReason) {
	            $reason = $reason ? $reason.'；'.$otherReason : $otherReason;
	        }
	        //define('DEBUG', 1);
	        $srvProviders = new zbj_service_providers($uid);
	        $expand = unserialize($aCert ['expand']);
	        $newid = $expand['id'] ? $expand['id'] : $expand['newc2'];
	        $res = $srvProviders->changeStatus($newid);
	        if ($res != true) {
	        	return $this->printmsg('更新失败：'.$srvProviders->getError(), 1, null);
	        }
			$item = array(
                'status' => 2,
	            'cp_user' => $this->_nickname,
	            'opdateline' => $this->_time,
	            'opdateymd' => date('Y-m-d', $this->_time),
                'op_result' => $reason
			);
			if (!$oCert->update(array('verify_id' => $iVid), $item)) {
				return $this->printmsg('更新失败：usercert表状态更新失败', 1, null);
			}
            //发送站内信
            $msg['user_id'] = $uid;
            $msg['nickname'] = $aCert['nickname'];
            $url = zbj_lib_Constant::UC_URL.'/witkey/index';
            $msg['m_title'] = "您提交的服务商入驻申请未通过";
            $msg['m_content'] = "亲爱的".$aCert['nickname']."：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的服务商入驻申请被驳回，原因如下：<br />".$reason."。<br />请按照网站规定重新申请入驻，感谢您对猪八戒网的支持。<a href='".$url."' target='_blank'>服务商中心>></a>";
            $msg['s_content'] = "您在猪八戒网提交的服务商入驻申请被驳回，请及时登录网站查看。www.zhubajie.com【猪八戒网】";
            $this->tosendsmg(array(1,2), $msg);
            $s_allot = new zbj_service_allot ( 11 );
            $s_allot ->processed($iVid);
            return $this->printmsg('更新成功', 1, null, '/user/fwscert');
        }
    }
    
    /**
     * 服务商入驻审核批量操作
     */
    public function pageSetFwsCertAll($inPath) {
    	$sVids = zbj_lib_BaseUtils::getStr($_REQUEST['ids']);
        if (empty($sVids)) {
            return $this->printmsg('参数错误', 1, null, '/user/fwscert');
        }
        $iVids = explode(',', $sVids);
        $iCount = count($iVids);
        $iType = intval($_REQUEST['type']);
        $ssmg = new SSendmsg();
        $oCert = new zbj_model_mb_usercert();
        $iSucNum = 0;
        foreach($iVids as $v) {
        	$iVid = (int)$v;
	        $aCert = $oCert->selectOne(array('verify_id' => $iVid), '*');
	        if (empty($aCert) || $aCert ['status'] == $iType) {
	            continue;
	        }
	        $s_allot = new zbj_service_allot ( 11 );
	        $uid = $aCert['user_id'];
	        if ($iType == 1) {//通过
                $srvProviders = new zbj_service_providers($uid);
                $expand = unserialize($aCert ['expand']);
                if ($aCert['type'] == 30) {
                	$res = $srvProviders->providersJoin($expand['id'],$expand['info'],$expand['is_main']);
                } elseif ($aCert['type'] == 31) {
                	$res = $srvProviders->editProvidersJoin($expand['oldc2'],$expand['newc2'],$expand['info']);
                }
                if ($res != true) {
                	return $this->printmsg('更新失败：'.$srvProviders->getError(), 1, null);
                }
                $item = array(
                	'status' => 1,
                	'cp_user' => $this->_nickname,
                	'opdateline' => $this->_time,
                	'opdateymd' => date('Y-m-d', $this->_time)
                );
                if (!$oCert->update(array('verify_id' => $iVid), $item)) {
                	return $this->printmsg('更新失败：usercert表状态更新失败', 1, null);
                }
                $s_allot ->processed($iVid);
                $iSucNum++;
	            //发送站内信
	            $msg['user_id'] = $uid;
	            $msg['nickname'] = $aCert['nickname'];
	            $url = zbj_lib_Constant::UC_URL.'/witkey/index';
	            $msg['m_title'] = "恭喜！您入驻服务商审核成功！";
	            $msg['m_content'] = "亲爱的".$aCert['nickname']."：<br />&nbsp;&nbsp;&nbsp;&nbsp;恭喜你已通过审核成功入驻成为猪八戒网服务商，现在就去<a href='".$url."' target='_blank'>服务商中心</a>看看如何包装自己吧!。";
	            $msg['s_content'] = "恭喜你已通过审核成功入驻成为猪八戒网服务商，现在你可以享受服务商的各种特权了。【猪八戒网】";
	            $this->tosendsmg(array(1,2), $msg);
	        } else {//拒绝
	        	$aReason = $_REQUEST['reason'];
	        	$reason = '';
		        if ($aReason) {
		        	foreach ($aReason as $v) {
			        	switch ($v) {
			        		case 1: $rname = '入驻类目与简介不符';break;
			        		case 2: $rname = '入驻类目与企业经营范围不符';break;
			        	}
			        	if ($reason) {
			        		$reason .= '；'.$rname;
			        	} else {
			        		$reason = $rname;
			        	}
		        	}
		        }
		        $otherReason = zbj_lib_BaseUtils::getStr($_REQUEST['other']);       //其他原因
		        if ($otherReason) {
		            $reason = $reason ? $reason.'；'.$otherReason : $otherReason;
		        }
		        $item = array(
	        		'status' => 2,
	        		'cp_user' => $this->_nickname,
	        		'opdateline' => $this->_time,
	        		'opdateymd' => date('Y-m-d', $this->_time),
	        		'op_result' => $reason
		        );
		        if (!$oCert->update(array('verify_id' => $iVid), $item)) {
		        	return $this->printmsg('更新失败：usercert表状态更新失败', 1, null);
		        }
		        $s_allot ->processed($iVid);
		        $iSucNum++;
	            //发送站内信
	            $msg['user_id'] = $uid;
	            $msg['nickname'] = $aCert['nickname'];
	            $url = zbj_lib_Constant::UC_URL.'/witkey/index';
	            $msg['m_title'] = "您提交的服务商入驻申请未通过";
	            $msg['m_content'] = "亲爱的".$aCert['nickname']."：<br />&nbsp;&nbsp;&nbsp;&nbsp;很抱歉，您提交的服务商入驻申请被驳回，原因如下：<br />".$reason."。<br />请按照网站规定重新申请入驻，感谢您对猪八戒网的支持。<a href='".$url."' target='_blank'>服务商中心>></a>";
	            $msg['s_content'] = "您在猪八戒网提交的服务商入驻申请被驳回，请及时登录网站查看。www.zhubajie.com【猪八戒网】";
	            $this->tosendsmg(array(1,2), $msg);
	        }
        }
        $iFailNum = $iCount - $iSucNum;
		return $this->printmsg('共操作'.$iCount.'个，成功'.$iSucNum.'个，失败'.$iFailNum.'个', 1, null, '/user/fwscert');
    }
    
    /**
     * 消息发送
     */
    public function tosendsmg($type, $msg) {
    	$ssmg = new SSendmsg();
    	//发送站内信
    	if (in_array(1, $type)) {
	    	$msgData = array(
    			'type' => 3,
    			't_userid' => $msg['user_id'],
    			't_nickname' => $msg['nickname'],
    			'title' => $msg['m_title'],
    			'cont' => $msg['m_content'],
    			'cat_id' => 6
	    	);
	    	$ssmg->sendMsg($msgData);
    	}
    	//发送短信
    	if (in_array(2, $type)) {
	    	$oUser = new zbj_service_user($msg['user_id']);
	    	$mobile = $oUser->getAuthMobile();
	    	if ($mobile) {
	    		$smsData = array(
    				'type' => 2,
    				'mobile' => $mobile,
    				'cont' => $msg['s_content'],
    				'userid' => $msg['user_id'],
    				'nickname' => $msg['nickname'],
    				'cat_id' => 8
	    		);
	    		$ssmg->sendMsg($smsData);
	    	}
    	}
    }
	
	/**
	 * 收藏Ta
	 */
	public function pageCollect(){
	}
	
	/**
	*根据1级分类取分类类别 如开发类 设计类
	*/
	private function getCategoryGroup($category1id) {
		$groups[1] = array(1,2,3,4,5,6,7,8,9,10,11);//设计类
		$groups[2] = array(12, 13, 14, 4671);//开发类
		$groups[3] = array(15); //推广类
		$groups[4] = array(16,17,18,19,20);//文案类
		$groups[5] = array(21);//影音类
		$groups_index_category1id = array();
		foreach ($groups as $group_id => $v1) {
			foreach ($v1 as $category_id) {
				$groups_index_category1id[$category_id] = $group_id;
			}
		}
		return (int) $groups_index_category1id[$category1id];
	}

	
	/**
	 * 官方派单
	 */
	public function pageOfficial($inPath){
		$urlparam = $this->getUrlParams($inPath);
		$data['page'] = $urlparam['page'] ? (int)$urlparam['page'] : 1;
		$data['page_size'] = 10;
		if ($_GET['collector'] == 1) {//收藏
			$type = 31;
		} else {//全部
			$type = 30;
		}
		//分类
		if($_GET['c1id']){
			$data['category1'] = (int) $_GET['c1id'];
		}
		if($_GET['c2id']){
			$data['category2'] = (int) $_GET['c2id'];
		}
		if($_GET['c3id']){
			$data['category3'] = (int) $_GET['c3id'];
		}
		//交易顾问
		$group_id = $_GET['gid'];
		$user_id = $_GET['uid'];
		if ($_GET['own'] == 1) {
			$user_id = $this->_userid;
		}
		if ($user_id) {
			$data['manager'] = $user_id;
		} elseif ($group_id) {
			$cpuser = new zbj_model_cp_user();
			$auids = $cpuser->select(array('group_id' => $group_id), 'user_id')->items;
			if ($auids) {
				$data['manager'] = lib_BaseUtils::array2Single($auids, 'user_id');
			} else {
				$data['manager'] = $user_id;
			}
		}
		//地区
		if($_GET['pvid']){
			$data['province'] = (int) $_GET['pvid'];
		}
		//收入（月）
		if($_GET['monmin']){
			$data['income_min'] = (int) $_GET['monmin'];
		}
		if($_GET['monmax']){
			$data['income_max'] = (int) $_GET['monmax'];
		}
		//均单价
		if($_GET['avgmin']){
			$data['income_avg_min'] = (int) $_GET['avgmin'];
		}
		if($_GET['avgmax']){
			$data['income_avg_max'] = (int) $_GET['avgmax'];
		}
		//会员类型
		if (isset($_GET['state']) && $_GET['state'] != -1) {
			$data['member_level'] = (int) $_GET['state'];
		}
		//接受率
		switch ((int) $_GET['reply']) {
			case 1://80%以上
				$data['accept_rate_max'] = 1;
				$data['accept_rate_min'] = 0.8;
				break;
			case 2://60%以上
				$data['accept_rate_max'] = 1;
				$data['accept_rate_min'] = 0.6;
				break;
			case 3://40%以上
				$data['accept_rate_max'] = 1;
				$data['accept_rate_min'] = 0.4;
				break;
			case 4://40%以下
				$data['accept_rate_max'] = 0.4;
				$data['accept_rate_min'] = 0;
				break;
			default:
				break;
		}
		//服务商ID
		if ($_GET['userid']) {
			$data['id'] = (int) $_GET['userid'];
		}
		//是否允许派单
		if ($_GET['isallow'] == 1) {
			$data['is_allow'] = 1;
		}
		//在线
		if ($_GET['online'] == 1) {
			$data['online'] = 1;
		}
		//最近登录时间
		if($_GET['activitymin']){
			$data['activity_min'] = strtotime($_GET['activitymin']);
		}
		if($_GET['activitymax']){
			$data['activity_max'] = strtotime($_GET['activitymax']);
		}
		//收藏

		if ($type == 31) {
			if ($_GET['cuid']) {
				$data['collector'] = (int)$_GET['cuid'];
			} elseif ($_GET['cgid']) {
				$cpuser = new zbj_model_cp_user();
				$auids = $cpuser->select(array('group_id' => (int)$_GET['cgid']), 'user_id')->items;
				if ($auids) {
					$data['collector'] = lib_BaseUtils::array2Single($auids, 'user_id');
				} else {
					$data['collector'] = (int)$_GET['cuid'];
				}
			}else{
				$data['collector'] = $this->_userid;
			}
		}
		//当前用户
		$data['collector_filter'] = $this->_userid;
		//排序
		if($_GET['o']){
			$data['sort'] = $_GET['o'] . ':' . ($_GET['ud'] == 1 ? 'desc' : 'asc');
		}
		//任务信息
		$task_id = intval($urlparam['tid']);
		
		$params['task_id'] = $task_id;
		$params['c1id'] = $_GET['c1id'];
		$params['c2id'] = $_GET['c2id'];
		$params['c3id'] = $_GET['c3id'];
		if ($task_id) {
			$srvTask = new zbj_service_task($task_id);
			$srvTask = $srvTask->init();
			$taskinfo = $srvTask->get();
			$params['taskinfo'] = $taskinfo;
			$getNames = array_keys($_GET);
			
			//行业运营特殊需求
			if ((13 == $srvTask->get('mode')) && ($srvTask->kuaiYinIsFromVcardChannel() || $srvTask->isFromKuaiYinChannel())) {
				$data['task_id'] = $task_id;
			} else {
				if (! ($params['c1id'] || $params['c2id'] || $params['c3id'])) {
					$params['c1id'] = $data['category1'] = $taskinfo['category1id'];
					$params['c2id'] = $data['category2'] = $taskinfo['category2id'];
					$params['c3id'] = $data['category3'] = $taskinfo['category_id'];
				}
			}
		}
		
		//------------字段-------------
		$sConfig = new service_config();
		$sConfig = $sConfig->init($type);
		$field = $_POST['field'];
		
		if ($field) {
			$sConfig->setField('name');
			foreach ($field as $value) {
				$sConfig->setField($value);
			}
			$sConfig->addConfig($this->_userid);
		}
		$fieldsConfig = $sConfig->getFieldsByUser($this->_userid);
		$fields = array_keys($fieldsConfig);
		
		//列表
//		if($_GET['d']==1){
//			echo '<a href="'.zbj_lib_Constant::MATCH_URL .lib_api::API_RECOMMENDUSER_WITKEY.'?'.http_build_query($data).'" target="_blank">'.zbj_lib_Constant::MATCH_URL .lib_api::API_RECOMMENDUSER_WITKEY.'?'.http_build_query($data).'</a>';
//		}
//		$reponse = lib_api::requset(lib_api::API_RECOMMENDUSER_WITKEY, $data);
		
		$reponse = zbj_lib_BaseUtils::apicall('user', 'witkey', $data);
		$reponse = $reponse['data'];
		
		$sCategory = new service_category();
		if ($reponse['items']) {
			$categorys = $sCategory->getCategorys();
			foreach ($reponse['items'] as $key => $value) {
				//分类
				$categoryname = array();
				if ($value['category']) {
					foreach ($value['category'] as $cid) {
						$categoryname[] = $categorys[$cid['category3id']]['category_name'];
					}
				}
				$reponse['items'][$key]['categoryname'] = implode(',', $categoryname);
				//交易顾问名
				if ($value['manager']) {
					$sCpUser = new service_cpuser($value['manager']);
					$reponse['items'][$key]['manager_name'] = $sCpUser->getUser('name');
				} else {
					$reponse['items'][$key]['manager_name'] = "无";
				}
				//今日派单
				if (strlen($value['recommend_today']) == 10) {
					if (substr($value['recommend_today'], 0, 8) == date('Ymd')) {
						$reponse['items'][$key]['recommend_today'] = (int)substr($value['recommend_today'], 8, 2);
					} else {
						$reponse['items'][$key]['recommend_today'] = 0;
					}
				}
			}
		}
		$params['list'] = $reponse['items'];
		$params['total'] = (int)$reponse['total'];
		$params['pagebar'] = $this->PageBar($params['total'], $data['page_size'], $data['page'], $inPath);
//		pf($params);
		//地区
		$cache = new zbj_lib_cache('memcache');
		$cach_name = 'cp.app.controller.user.province_list';
		$province_list = $cache->get($cach_name);
		if (empty($province_list)){
			$mdl_region = new zbj_model_mb_region();
			$item = 'region_name,region_ename,region_id';
			$province_list = $mdl_region->select('level=2',$item)->items;
			$cache->set($cach_name,$province_list,3600*24);
		}
		$params['province_list'] = $province_list;
		//分类
		$params['category1'] = $sCategory->getChild();
		//小组、处理人
		$s_cpallot = new service_cpallot();
		$params['groups'] = $s_cpallot->getAllotGroup(7);
		//$usergroups = new zbj_model_cp_usergroups();
		//$params['groups'] = $usergroups->select("pid=42 and group_id not in (81,71)  or group_id in (22,106,72)", '`group_id`,`name`')->items;
		//
		$params['levels'] = array('普通会员', '银牌', '金牌', '钻石', '皇冠'); //会员等级
		$params['realtype'] = array('无', '个人', '企业', '个体经营', '事业单位团体', '政府', '学校', '媒体');
		//配置
		$params['fields'] = $fieldsConfig;
		$params['fields_key'] = $fields;
		$params['allfields'] = $sConfig->getFields();

		return $this->render('user/recommend/official.html', $params);
	}
	
	/**
	 * @abstract 交易顾问为雇主发布需求
	 */
	public function pageReleaseTaskByManager () {
		$uid = zbj_lib_BaseUtils::getStr($_POST['uid'], 'int');
		$origin = zbj_lib_BaseUtils::getStr($_POST['origin'], 'int');
		
		$this->addLog($uid,'操作了代雇主填单', 'user');
		
		$s_cpuser = new service_user($uid);
		return $this->json(array('url' => $s_cpuser->getLoginBuyerAccountUrl($this->_userid, zbj_lib_Constant::TASK_URL."/pub/step1?from_cid={$origin}", 2)));
	}
	
	/**
	 * @abstract 服务商增值服务购买情况统计
	 */
	public function pageValueAddedServices ($inPath) {
		$url = $this->getUrlParams($inPath);
		$user_id = zbj_lib_BaseUtils::getStr($url['uid'], 'int');
		if (! $user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $params = $this->getCommonUserInfo($user_id); 
        $filter_type = $_GET['filter_type'] ? zbj_lib_BaseUtils::getStr($_GET['filter_type'], 'int') : 1;
        $page = $url['page'] ? zbj_lib_BaseUtils::getStr($url['page'], 'int') : 1;
        $this->__initTgtUser();
        $tgt_user_info = $this->userClient->getAdUserDOById($user_id);
        $params['is_pause'] = $tgt_user_info->data->is_pause;
        
        switch ($filter_type) {
        	case 1: case 2:
        		$params['location'] = $this->userVasLog($user_id);
        		break;
        	case 3:
        		$limit = 10;
        		$params['coupon'] = $this->userCoupon($user_id, $page, $limit);
        		$params['pagebar'] = $this->PageBar($params['coupon']['total'], $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
        		break;
        }
        
        $params['filter_type'] = $filter_type;
		return $this->render('user/index/valueAddedServices.html', $params);
	}
	
	public function pagetgtUserFreeze( $inPath ) {
		$url = $this->getUrlParams($inPath);
		$user_id = (int)$url['uid'];
		$freeze = (int)$_GET['fr'];
		$freeze = $freeze ? $freeze : 1;
		$this->__initTgtUser();
		switch ($freeze) {
			case 1://解冻
				$rs = $this->userClient->unfreezeUser( $user_id );
				break;
			case 2://冻结
				$rs = $this->userClient->freezeUser( $user_id );
				break;
		}
		if ( $rs->isSuccess === false ) {
			return $this->printmsg("操作失败", 0, null, $_SERVER['HTTP_REFERER']);
		}
		return $this->printmsg("操作成功", 2, null, $_SERVER['HTTP_REFERER']);
	}
	
	//加载推广通用户
	private function __initTgtUser() {
		$sdk_lib = array('mercury-client', 'zbj_sdk');
		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET, 30, $sdk_lib);
		$this->userClient = new com\zhubajie\mercury\sdk\interfaces\AdUserServiceClient(NULL);
		zbj_lib_ApiClient::build($this->userClient);
	}
	
	//用户购买记录
	protected function userVasLog($user_id = 0) {
		//新推荐位
		$srv_vas = new zbj_service_vas();
		$srv_vir = new zbj_service_categoryvirtual();
        $lmd_sch = new zbj_model_mb_vasearchkey();
		$location_ids = array(52, 22, 32, 58, 63, 55, 68, 73, 78, 83, 88, 93,98,99);//设置后台显示的推荐位
		foreach ( $location_ids as $k => $v ) {
			$location = $srv_vas->checkVasLocation($v);
			$son_location = $srv_vas->getVasLocationByParentId($v);
			$vas_info = array();
			if ( $son_location ) {
                $vasPaidListing = $vasPaidListing1 = $vasPaidListing2 = array();
                $size1 = $size2 = $size3 = 0;
				foreach ($son_location as $slk => $slv) {
					$vasPaidListing = $srv_vas->getVasPaidListing($slv, $user_id, 0);
					$vasPaidListing2 = $srv_vas->getVasPaidListing($slv, $user_id, 0, 2);
					$size2 += count($vasPaidListing2);//生效的个数
					$vasPaidListing1 = $srv_vas->getVasPaidListing($slv, $user_id, 0, 1);//未生效和正在生效的记录
					$size1 += count($vasPaidListing1) - count($vasPaidListing2);//未生效的个数
					$size3 += count($vasPaidListing) - count($vasPaidListing1);//过期的个数
					 
					if ( $vasPaidListing ) {
						foreach ( $vasPaidListing as $vpk => $vpv ) {
							$vas_info[] = $vpv;
						}
						foreach ($vas_info as $vik => $viv) {
                            if (in_array($viv['location_id'], array(52,55))) { 
                                $lmd_sch->setPkid($viv['virtual_id']);
                                $temp_sch = $lmd_sch->get();
                                $vas_info[$vik]['virtual_name'] = $temp_sch['search_name'];
                            }else{
                                $vas_info[$vik]['virtual_name'] = $viv['location_name'];
                            }
							$vas_info[$vik]['link'] = $srv_vas->getLinkByLocation($vpv['location_id']);
						}
					}
				}
				$location['size1'] = $size1;
				$location['size2'] = $size2;
				$location['size3'] = $size3;
				$location['list'] = $vas_info;
			} else {
				$vasPaidListing = $srv_vas->getVasPaidListing($v, $user_id, 0);
				$vasPaidListing2 = $srv_vas->getVasPaidListing($v, $user_id, 0, 2);
				$size2 = count($vasPaidListing2);//生效的个数
				$vasPaidListing1 = $srv_vas->getVasPaidListing($v, $user_id, 0, 1);//未生效和正在生效的记录
				$size1 = count($vasPaidListing1) - count($vasPaidListing2);//未生效的个数
				$size3 = count($vasPaidListing) - count($vasPaidListing1);//过期的个数
				$location['size1'] = $size1;
				$location['size2'] = $size2;
				$location['size3'] = $size3;
				if ( $vasPaidListing ) {
					foreach ( $vasPaidListing as $vpk => $vpv ) {
						$vas_info[$vpk] = $vpv;
                        if (in_array($vpv['location_id'], array(52,55))) {
                            $lmd_sch->setPkid($vpv['virtual_id']);
                            $temp_sch = $lmd_sch->get('','search_name');
                            $vas_info[$vpk]['virtual_name'] = $temp_sch['search_name'];
                            $s = $vpv['location_id'] == 52 ? 'p' : 's';
                            $vas_info[$vpk]['link'] = zbj_lib_Constant::SEARCH_URL.'/'.$s.'/?kw='.urlencode($temp_sch['search_name']);
                        }else{
                            $srv_vir->setId($vpv['virtual_id']);
                            $vas_info[$vpk]['virtual_name'] = $srv_vir->get('virtual_name');
                            $vas_info[$vpk]['link'] = $srv_vas->getLinkByLocation($v, $vpv['virtual_id']);
                        }
						if ($vpv['virtual_id'] == 1000459) {
							$vas_info[$vpk]['virtual_name'] = '搜索结果页';
						}
					}
					$location['list'] = $vas_info;
				}
			}
			
			$locations[$k] = $location;
		}
		return $locations;
	}
	
	protected function userCoupon($user_id, $page, $page_size = 20) {
		$page = max(intval($page),1);
		$srv_gift = new zbj_service_sellergiftcard($user_id);
		$rslt =  $srv_gift->getLog($page, $page_size);
		if ($rslt['items']) {
			foreach ($rslt['items'] as $k => $v) {
				$v_new = $v;
				$v_new['option_arr'] = json_decode($v['options']);
				$v_new['expire_time'] = $v_new['valid_end_time'];
				$v_new['expire_date'] = date('Y-m-d', $v_new['expire_time']);
				$v_new['datetime'] = date('Y-m-d H:i', $v_new['dateline']);
				switch (intval($v['type'])) {
					case zbj_service_sellergiftcard::TYPE_SEND:
						$v_new['type'] = 'receive';
						break;
					case zbj_service_sellergiftcard::TYPE_COST:
						$v_new['type'] = 'use';
						break;
				}
				$rslt['items'][$k] = $v_new;
			}
		}
		if (!defined('GIFT_CARD_FOR_SITE')) define('GIFT_CARD_FOR_SITE', 4);
		if (!defined('GIFT_CARD_FOR_VALUE_ADDED')) define('GIFT_CARD_FOR_VALUE_ADDED', 3);
		$coupon_balance = $srv_gift->getValidGiftCardMoney(array(GIFT_CARD_FOR_SITE, GIFT_CARD_FOR_VALUE_ADDED));
		$coupon['coupon_balance'] = floatval($coupon_balance['total_balance']);
		$coupon['total'] = $rslt['totalSize'];
		$coupon['list'] = $rslt['items'];
		return $coupon;
	}

    /**
     * 新版服务赠送，目前支持首页店铺推荐位，类目页店铺推荐位
     * @param $user_id 用户id
     * @param $type
     * @param $lid 位置id
     * @return bool
     */
	public function allotBuyServices($user_id,$type,$lid) {
		$srv_vas = new zbj_service_vas();
		$srv_vir = new zbj_service_categoryvirtual();
		if ( $lid == 52 || $lid == 55 || $lid == 99) {
			$mdl_vasearchkey = new zbj_model_mb_vasearchkey();
		}
		
		$location = $srv_vas->checkVasLocation($lid);
		if ( $location === false ) {
			return $this->printmsg("该增值服务关闭", 0);
		}
		
		if ( $location['cat'] == 2 ) {
			return $this->printmsg("位置ID错误", 0);
		}
		
		if ( in_array($lid, array(25, 26, 51, 55)) ) {
			$mdl_spservice = new zbj_model_sp_service();
			$condition = array(
					'user_id' => $user_id,
					'state' => 2,
					'status' => 1
			);
			$item = 'service_id as id,user_id,subject as title,amount,sales,category_id,category1id,category2id';
			$orderby = 'order by sales DESC';
			$services = $mdl_spservice->select($condition, $item, '', $orderby)->items;
			$params['services'] = $services;
		}
		
		$cvirtual_list = array();
		switch ($location['iscatevir']){
			case 1:
				$show_search_category = 1;
				$location = $srv_vas->checkVasLocation($lid);
				$son_location_ids = $srv_vas->getVasLocationByParentId($lid);
				$default_category = array(1000065, 1000319, 1000459);
				if ( in_array($lid, array(52, 55,99)) ) {
					$lists = $this->sendSearchKeyVas($lid, $services[0]['service_id'] > 0 ? $services[0]['service_id'] : $user_id);
				} else {
					$lists = $this->sendVirtualVas($lid, $services[0]['service_id'] > 0 ? $services[0]['service_id'] : $user_id);
				}
				
				break;
			default:
				$show_search_category = 0;
				$lists = $this->sendSingleVas($lid, $user_id);
		}
		$params['lists'] = $lists;
		$params['lid'] = $lid;
		$params['show_search_category'] = $show_search_category;
		$params['user_id'] = $user_id;
		
		if ( $_POST ) {
			$location_ids = $_POST['location_id'];
			if ( $location_ids ) {
				foreach ($location_ids as $lik => $liv) {
					$day = (int)$_POST['day'][$lik];
					if ( $day > 0 ) {
						$save_location = $srv_vas->checkVasLocation($liv);
						$data[$lik]['location_id'] = $liv;
						$data[$lik]['day'] = $day;
						$data[$lik]['user_id'] = $user_id;
						$data[$lik]['virtual_id'] = $_POST['vid'][$lik];
						$data[$lik]['stype'] = $save_location['stype'];
						if ( in_array($liv, array(25, 26, 51, 55)) ) {
							$data[$lik]['service_id'] = zbj_lib_BaseUtils::getStr($_POST['service'], 'int');
						}
					}
				}
			}
			
			if ( $data ) {
				foreach ($data as $dv) {
					$rs = $srv_vas->sendVasPaidListing($dv);
					if ( $dv['location_id'] == 52 || $dv['location_id'] == 55 || $dv['location_id'] == 99 ) {
						$mdl_vasearchkey->setPkid($dv['virtual_id']);
						$rs = $mdl_vasearchkey->get();
						$name = $rs['search_name'];
					} else {
						$srv_vir->setId($dv['virtual_id']);
						$name = $srv_vir->get('virtual_name');
					}
					
					if ( $rs === false ) {
						$log .= $name." 插入数据失败".$srv_vas->getError()." ";
					} else {
						$log .= $name." 赠送成功  ";
					}
				}
			}
			
			return $this->printmsg($log, 2, null, $_SERVER['HTTP_REFERER']);
		} else {
			return $this->render ( 'user/ajax/buyServices.dialog.html', $params );
		}
	}
    /**
     *
     * @abstract 官方赠送或交易顾问代服务商购买服务
     */
    public function pageBuyServices($inPath) {
        $url = $this->getUrlParams($inPath);
        $user_id = zbj_lib_BaseUtils::getStr($url['uid'], 'int');
        $type = zbj_lib_BaseUtils::getStr($url['type'], 'int'); //1：购买；0：赠送；
        $lid = zbj_lib_BaseUtils::getStr($url['lid'], 'int'); //位置ID
	    return $this->allotBuyServices($user_id,$type,$lid);
	}

    /**创意设计类目列表推荐位及创意设计搜索列表推荐位
     * @param $inPath
     * @return bool
     */
	public function pageCreativeDesign($inPath) {
        $url = $this->getUrlParams($inPath);
        $user_id = zbj_lib_BaseUtils::getStr($url['uid'], 'int');
        $type = zbj_lib_BaseUtils::getStr($url['type'], 'int'); //1：购买；0：赠送；
        $lid = zbj_lib_BaseUtils::getStr($url['lid'], 'int'); //位置ID
        return $this->allotBuyServices($user_id,$type,$lid);
	}

	protected function sendSingleVas($lid, $user_id) {
		$srv_vas = new zbj_service_vas();
		$srv_vir = new zbj_service_categoryvirtual();
        if ( in_array($lid, array(32, 58, 63, 68, 73, 78, 83, 88, 93)) ) {
            switch ( $lid ) {
                case 32:
                    $lids = array(13,14,15,16,17,18,19,20,21,23,24,25);
                    break;
                case 58:
                    $lids = array(59, 60, 61, 62);
                    break;
                case 63:
                    $lids = array(64, 65, 66, 67);
                    break;
                case 68:
                    $lids = array(69, 70, 71, 72);
                    break;
                case 73:
                    $lids = array(74, 75, 76, 77);
                    break;
                case 78:
                    $lids = array(79, 80, 81, 82);
                    break;
                case 83:
                    $lids = array(84, 85, 86, 87);
                    break;
                case 88:
                    $lids = array(89, 90, 91, 92);
                    break;
                case 93:
                    $lids = array(94, 95, 96, 97);
                    break;
            }

            foreach ( $lids as $k => $v ) {
                $location = $srv_vas->checkVasLocation($v);
                $lists[$k] = $location;
                $lists[$k]['price'] = $location['price'];
                $lists[$k]['virtual_name'] = $location['location_name'];
                $earliestTime = $srv_vir->getVasEarlistTime($user_id, $v, $left_num);
                if ( $left_num ) {
                    $explain = '立刻开始（剩余'.$left_num.'个位置）';
                } else {
                    $explain = date('Y-m-d H:i:s', $earliestTime)."生效";
                }
                $lists[$k]['explain']= $explain;
                $lists[$k]['day'] = 0;
            }
        } else {
            $location = $srv_vas->checkVasLocation($lid);
            $lists[0] = $location;
            $lists[0]['price'] = $location['price'];
            $lists[0]['virtual_name'] = $location['location_name'];
            $earliestTime = $srv_vir->getVasEarlistTime($user_id, $lid, $left_num);
            if ( $left_num ) {
                $explain = '立刻开始（剩余'.$left_num.'个位置）';
            } else {
                $explain = date('Y-m-d H:i:s', $earliestTime)."生效";
            }
            $lists[0]['explain']= $explain;
            $lists[0]['day'] = 0;
        }
		return $lists;
	}
	
	protected function sendSearchKeyVas($lid, $id) {
		$srv_vas = new zbj_service_vas();
		$mdl_vasearchkey = new zbj_model_mb_vasearchkey();
		$location = $srv_vas->checkVasLocation($lid);
		$default_searchkey = array(10018, 10019);
		foreach ( $default_searchkey as $k => $v ) {
			$lists[$k]['virtual_id'] = $v;
			$lists[$k]['location_id'] = $lid;
			$mdl_vasearchkey->setPkId($v);
			$rs = $mdl_vasearchkey->get();
			$price = $rs[$location['price_field']];
			$lists[$k]['price'] = $price > 0 ? $price : $location['price'];
			$lists[$k]['virtual_name'] = $rs['search_name'];
			$earliestTime = $srv_vas->getVasEarlistTime($v, $id, $lid, $left_num);
			if ( $left_num ) {
				$explain = '立刻开始（剩余'.$left_num.'个位置）';
			} else {
				$explain = date('Y-m-d H:i:s', $earliestTime)."生效";
			}
			$lists[$k]['explain'] = $explain;
			$lists[$k]['day'] = 0;
		}
		
		return $lists;
	}
	
	protected function sendVirtualVas($lid) {
		$srv_vas = new zbj_service_vas();
		$srv_vir = new zbj_service_categoryvirtual();
		$default_category = array(1000065, 1000319, 1000459);
		$location = $srv_vas->checkVasLocation($lid);
		foreach ( $default_category as $k => $v ) {
			if ( ($lid == 33 || $lid == 50 || $lid == 51 ) && $v == 1000459 ) {
				break;
			}
			$lists[$k]['virtual_id'] = $v;
			$lists[$k]['location_id'] = $lid;
			$srv_vir->setId($v);
			$price = $srv_vir->get($location['price_field']);
			$lists[$k]['price'] = $price > 0 ? $price : $location['price'];
			$lists[$k]['virtual_name'] = $srv_vir->get('virtual_name');
			$earliestTime = $srv_vir->getVasEarlistTime($user_id, $lid, $left_num);
			if ( $v == 1000459 ) {
                if ($lid == 22) {
                    $lists[$k]['virtual_name'] = '标志频道';
                }else{
                    $lists[$k]['virtual_name'] = '搜索结果页';
                }
			}
			if ( $left_num ) {
				$explain = '立刻开始（剩余'.$left_num.'个位置）';
			} else {
				$explain = date('Y-m-d H:i:s', $earliestTime)."生效";
			}
			$lists[$k]['explain'] = $explain;
			$lists[$k]['day'] = 0;
		}
		
		return $lists;
	}
	
	public function pageclearVasCache($inPath) {
		$url = $this->getUrlParams($inPath);
		$user_id = (int)$url['uid'];
		$lid = (int)$url['lid'];
		$virtual_id = (int)$url['vid'];
		
		if ( $lid > 0 ) {
			$srv_vas = new zbj_service_vas();
			$rs = $srv_vas->clearVasPaidListingCache($lid, $user_id,  $virtual_id);
		} else {
			$cache = new zbj_lib_cache('memcache');
			$name = "zbjcore.service.sellerpac.limit.list10.".$user_id;
			$cache->set($name, '');
			$rs = $cache->del($name);
		}
		
		if ( $rs ) {
			return $this->printmsg("清除缓存成功", 2, null, $_SERVER['HTTP_REFERER']);
		}
		return $this->printmsg("清除缓存失败", 0);
	}
	
	//赠送代金券
	public function pageSendGiftAmount($inPath) {
		$url = $this->getUrlParams($inPath);
		$user_id = (int)$url['uid'];
		if(!$user_id){
			return $this->printmsg ( "参数错误" );
		}
		$srv_user = new zbj_service_user($user_id);
		if(!$srv_user->get('nickname')){
			return $this->printmsg ( "用户不存在" );
		}
		if($_POST){
			$amount = (float)$_POST['num'];
			$content = zbj_lib_BaseUtils::getStr($_POST['content']);
			$act = zbj_lib_BaseUtils::getStr($_POST['act'], 'int');
			$range = zbj_lib_BaseUtils::getStr($_POST['range'], 'int');
			if($amount && $content && $act && $range){
				$srv_gift = new zbj_service_sellergiftcard ($user_id);
				switch ( $act ) {
					case 1://赠送代金券
						$actName = '赠送';
						$rs = $srv_gift->sendGiftCard($range, $amount, 90, 0, 0, $content);
						break;
					case 2://扣除代金券
						$actName = '扣除';
						$result = $srv_gift->freezeGiftCard($amount, $range, 0, 0, $content);
						if ( $result === false ) {
							return $this->printmsg(0, $actName.'代金券失败！'.$srv_gift->getError());
						}
						$rs = $srv_gift->useGiftCard($amount, $range, 0);
						break;
				}
				if (!$rs) {
					return $this->printmsg(0, $actName.'代金券失败！'.$srv_gift->getError());
				}
				$this->addLog($user_id, $this->_nickname.$actName.'用户'.$amount.'代金券，原因：'.$content, 'user');
				return $this->printmsg ( $actName."成功" );
			}else{
				return $this->printmsg ( "请填写完整" );
			}
		}
		$params['uid'] = $user_id;
		return $this->render('user/ajax/sendgift.html', $params);
	}
	
	/*
	 * 官方访谈
	 */
	public function pageInterview($inPath) {
		$urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        $param = array();
        $param = $this->getCommonUserInfo($user_id);
        $limit = 20;
        $curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
        $mdlInter = new zbj_model_zt_interview();
        $mdlInter->setLimit($limit);
        $mdlInter->setPage($curpage);
        $mdlInter->setCount(true);
        $aInter = $mdlInter->select("user_id = {$user_id}", "*");
        
        $param ['pagebar'] = $this->PageBar($aInter->totalSize, $limit, $curpage, $inPath, 'style4');
        $param ['interlist'] = $aInter->items;
        return $this->render('user/index/interview.html', $param);
	}

    /**
     * 服务商类目入驻属性
     */
    public function pageWitkeyCheckinProperty($inPath){

        $url = $this->getUrlParams($inPath);
        $user_id = (int) $url['uid'] ? (int) $url['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('缺少参数uid');
        }
        $s_user = new zbj_service_user($user_id);
        if($s_user->get('user_id')<=0) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }

        $this->tplvar = $this->getCommonUserInfo($user_id);
        $condition = array('user_id' => $user_id);

        $mdlUserPropertyInfo =new zbj_model_mb_usercategoryinfo();
         if(zbj_lib_BaseUtils::isPostRequest()) {
            //保存备注
             $note = zbj_lib_BaseUtils::getStr($_POST['note']);
             if (mb_strlen($note)>500) {
                 return $this->printmsg('字数不能超过500');
             }
            if($mdlUserPropertyInfo->selectOne($condition)){
                //更新
                       $data_update = array(
                        'update_time' => $this->_time,
                        'update_ymd'  => $this->_ymd,
                        'note'        => $note,
                        'nickname'    => $this->_nickname,
                        'last_cp_uid' => $this->_userid,
                    );
                if($mdlUserPropertyInfo->update($condition,$data_update) === false){
                    return $this->printmsg('备注更新不成功！');
                } else {
                    return $this->printmsg('备注更新成功！',2, null, $_SERVER['HTTP_REFERER']);
                }
            }else{
                //创建
                    $data_create = array(
                    'user_id'    => $user_id,
                    'nickname'   => $this->_nickname,
                    'create_time'=> $this->_time, //添加时间
                    'create_ymd' => $this->_ymd,//添加日期
                    'note'       => $note,
                    'last_cp_uid'=> $this->_userid,
                );
                 if($mdlUserPropertyInfo->insert($data_create) === false){
                    return $this->printmsg('备注保存不成功！');
                } else {
                     return $this->printmsg('备注保存成功！', 2, null, $_SERVER['HTTP_REFERER']);
                }
            }

        }

        //重构数组：思路查询各级分类出现的次数

        $mdlUCate = new zbj_model_mb_usercategory();//define('DEBUG',1);
        $uc = 'mb_user_category';
        $where = "{$uc}.user_id={$user_id} and {$uc}.is_resident=1";
        $fields = "{$uc}.*,ext_name,GROUP_CONCAT(val_name) as val_names";
        $group_by = "GROUP BY {$uc}.category_id,ext_id";
        $order_by = 'ORDER BY category1id ASC,category2id ASC';
        $left = array('mb_user_category_ext ue'=>"{$uc}.user_id=ue.user_id and {$uc}.category_id=ue.category_id");
        $properties = $mdlUCate->select($where, $fields, $group_by, $order_by, $left)->items;
        if ($properties) {
            $category_info_list = array();
            $mdlCate = new zbj_model_mk_category();
            $category = $mdlCate->select(array('is_show' => 1))->items;
            foreach($category as $v) {
                $category_info_list[$v['category_id']] = array(
                    'category_id' => $v['category_id'],
                    'category_name' => $v['category_name'],
                );
            }
            $category_nums = $first_show_arr = array();
            foreach ($properties as &$v) {
                $category_nums[$v['category1id']] = intval($category_nums[$v['category1id']]) + 1;
                $category_nums[$v['category2id']] = intval($category_nums[$v['category2id']]) + 1;
                $category_nums[$v['category_id']] = intval($category_nums[$v['category_id']]) + 1;
            }
            foreach ($properties as &$v) {
                $v['category1name'] = $category_info_list[$v['category1id']]['category_name'];
                $v['category2name'] = $category_info_list[$v['category2id']]['category_name'];
                $v['category_name'] = $category_info_list[$v['category_id']]['category_name'];
                if (in_array($v['category1id'], $first_show_arr)) {
                    $category_info['category1id_show'] = false;
                } else {
                    $category_info['category1id_show'] = true;
                    $category_info['category1id_row_num'] = $category_nums[$v['category1id']];
                    $first_show_arr[] = $v['category1id'];
                }
                if (in_array($v['category2id'], $first_show_arr)) {
                    $category_info['category2id_show'] = false;
                } else {
                    $category_info['category2id_show'] = true;
                    $category_info['category2id_row_num'] = $category_nums[$v['category2id']];
                    $first_show_arr[] = $v['category2id'];
                }
                if (in_array($v['category_id'], $first_show_arr)) {
                    $category_info['category3id_show'] = false;
                } else {
                    $category_info['category3id_show'] = true;
                    $category_info['category3id_row_num'] = $category_nums[$v['category_id']];
                    $first_show_arr[] = $v['category_id'];
                }
                $v['category_info'] = $category_info;
            }

        }
        //获取备注信息
        $this->tplvar['note'] = $mdlUserPropertyInfo->selectOne($condition, 'note');
        $this->tplvar['uid']=$user_id;
        $this->tplvar['properties'] = $properties;
        $token = md5($user_id.$this->_userid.date('Ymd').'tmUbDvwitKR5TViGWW9hYCKey8Z92Wtw'.zbj_lib_Constant::ZBJ_SYSUSERKEY);
        $this->tplvar['token'] = $token;
        $this->tplvar['mid'] = $this->_userid;
        return $this->render('user/index/witkeyCheckinProperty.html', $this->tplvar);

    }
	/**
	 * 雇主保障
	 */
	public function pagesecurity($inPath){
		$urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
        if (!$user_id) {
            return $this->printmsg('会员不存在,或者没填写查询条件!');
        }
        /**
         * 获取基本信息
         */
        $param = array();
        
        $s_user = new zbj_service_user($user_id);        
        if($s_user->get('user_id')<=0){
        	return $this->printmsg('会员不存在,或者没填写查询条件!');
        } 
        
        //获取用户参与消保的情况
        $security = new zbj_service_security();   
        $usersecurity = $security->getsecuritycountByUserId($user_id);
        $param = $this->getCommonUserInfo($user_id);
        if($usersecurity['issecurityuser']==1){
        	$param['usersecurity'] = $usersecurity;
        }  
        //获取用户消保日志信息
        $useractionlog = new zbj_model_mb_securitysuseractionlog();        
       	$curpage = isset($urlparam['page'])?$urlparam['page'] : 1; 
        $limit=15;
		$useractionlog->setLimit($limit); 
		$useractionlog->setPage($curpage);     
        $useractionlog->setCount(true);		
        $paymenglogmd = $useractionlog->select("`user_id`={$user_id}","*","","order by addymd desc,log_id desc");
        $paymentlist = array();
        foreach($paymenglogmd->items as $key=>$item){
        	$datetime = date('Y-m-d H:i',$item['addtime']);
        	$logcontent = $item['content'];
        	/*$policy = new zbj_service_policy($item['policyid']);
        	if($item['category']==1){        		
        		$logcontent="现金方式 加入 {$policy->get('policyname')} 额度为 {$policy->get('amount')} 元，已缴纳 {$item['amount']} 元";
        	}else if($item['category']==2){        		
        		$logcontent="保险方式 加入 {$policy->get('policyname')} 额度为 {$policy->get('amount')} 元，缴纳保费 {$item['amount']} 元";
        	}else if($item['category']==3){        		
        		$logcontent="{$policy->get('policyname')} 补缴保障金，缴纳金额：{$item['amount']} 元";
        	}else if($item['category']==4){        		
        		$logcontent="{$policy->get('policyname')} 退还保费，保单[{$policy->get('policyno')}]退保,退还金额：{$item['amount']} 元";
        	}else if($item['category']==5){        		
        		$logcontent="{$policy->get('policyname')} 退还保障金，退还金额：{$item['amount']} 元";
        	}else if($item['category']==6){        		
        		$logcontent="修改技能，缴纳金额：{$item['amount']} 元";
        	}else if($item['category']==7){  
        		$modelpolicypayout = new zbj_model_mb_securityspolicyindemnity($item['indemnityid']);      		
        		$logcontent="{$policy->get('policyname')} 产生赔付，关联需求为：{$modelpolicypayout->getData('task_id')}，关联争议为：{$modelpolicypayout->getData('reportid')}，赔付金额为 {$item['amount']} 元";
        	}else if($item['category']==8){  
        		$modelpolicypayout = new zbj_model_mb_securityspolicyindemnity($item['indemnityid']);      		
        		$logcontent="{$policy->get('policyname')} 赔付偿还，关联需求为：{$modelpolicypayout->getData('task_id')}，关联争议为：{$modelpolicypayout->getData('reportid')}，赔付金额为 {$item['amount']} 元";
        	}else if($item['category']==9){ 
        		if($policy->get('type')==1){         		   		
        			$logcontent="{$policy->get('policyname')} 保单[{$policy->get('policyno')}]失效";
        		}else if($policy->get('type')==2 && $policy->get('balance')==0){
        			$logcontent="{$policy->get('policyname')} 现金额度使用完";
        		}
        	}*/       	
        	$paymentlist[]=array('datetime'=>$datetime,'logcontent'=>$logcontent);
        }
        //获取保单赠送记录
        $giveModel = new zbj_model_mb_securitysgivepolicy();
        $giveData = $giveModel->select("user_id={$user_id} and state>0","*","","order by sec_id")->items;
        $givelist = array();
        foreach ($giveData as $key => $value) {
            $temparr = array();
            $temparr['user_id'] = $value['user_id'];
            $temparr['nickname'] = $s_user->get('nickname');
            $temparr['sec_id'] = intval($value['sec_id']);
            $temparr['sectype'] = $security->_sectype[$temparr['sec_id']]['title'];
            $temparr['createtime'] = date('Y-m-d H:i',$value['createtime']);
            $temparr['updatetime'] = $value['updatetime']>0?date('Y-m-d H:i',$value['updatetime']):'/';
            $policy = new zbj_service_policy($value['policyid']);
            $temparr['policyno'] = $policy->get("policyno");
            $temparr['payamount'] = $policy->get("payamount");
            $temparr['amount'] = $policy->get("amount");
            $givelist[] = $temparr;
        }
        $param['givelist'] = $givelist;
        //获取现金解冻记录
        $cashthawModel = new zbj_model_mb_securityscashthaw();
        $cashthawData = $cashthawModel->select("user_id={$user_id}","*","","order by sec_id")->items;
        $cashthawlist = array();
        $policyModel = new zbj_model_mb_securityspolicy();
        foreach ($cashthawData as $key => $value) {
            $temparr = array();
            $temparr['user_id'] = $value['user_id'];
            $temparr['nickname'] = $s_user->get('nickname');
            $temparr['sec_id'] = intval($value['sec_id']);
            $temparr['sectype'] = $value['secname'];
            $temparr['createtime'] = date('Y-m-d H:i',$value['createtime']);           
            $policydata = $policyModel->select("policyid in(".$value['oldpolicyid'].")","policyno")->items;
            $policyids = array();
            foreach($policydata as $pptmp){                
                $policyids[] = $pptmp['policyno'];                
            }            
            $temparr['oldpolicy'] = implode("<br/>", $policyids);
            if(empty($policyids)){
                continue;
            }
            $temparr['newpolicy'] = '';
            if($value['newpolicyid']>0){
                $policy = new zbj_service_policy($value['newpolicyid']);
                $temparr['newpolicy'] = $policy->get('policyno');
            }           
            $temparr['userbackamount'] = $value['userbackamount'];
            $temparr['policyamount'] = $value['policyamount'];
            $cashthawlist[] = $temparr;
        }
        $param['cashthawlist'] = $cashthawlist;
        $param['paymenglog'] = $paymentlist;
        $param['pagebar'] = $this->PageBar($paymenglogmd->totalSize, $limit, $curpage, $inPath, 'style1');		
		return $this->render('user/index/security.html', $param);
	}
	
	/**
	 * 签约会员服务跟进/签约跑进
	 * 
	 * @author yuanzhuang
	 */
	public function pageSellFollow ($inPath) {
		$url_params = $this->getUrlParams($inPath);
		
		$user_id = zbj_lib_BaseUtils::getStr($url_params['uid'], 'int');
		$follow_type = zbj_lib_BaseUtils::getStr($url_params['ftype'], 'int');
		
		//用户资料
		$m_person = new zbj_model_mb_customerperson();
		$user_info = $m_person->selectOne(array('user_id' => $user_id));
		
		if (! count($_POST)) {
			$this->tplvar['user_info'] = $user_info;
			$this->tplvar['level_config'] = $this->_get_level_config($follow_type);
			//从事行业
			$s_option = new service_cpoption(16); 
			$this->tplvar['option_16'] = $s_option->getItems();
			//经济条件
			$s_option = new service_cpoption(17); 
			$this->tplvar['option_17'] = $s_option->getItems();
			//企业规模
			$s_option = new service_cpoption(18); 
			$this->tplvar['option_18'] = $s_option->getItems();
			//省
			$mRegion = new zbj_model_mb_region();
			$this->tplvar['provinces'] = $mRegion->select(array("parent_id" => 1))->items;
			
			$this->tplvar['natures'] = service_customer::getNatures();
			$this->tplvar['directions'] = service_customer::getDirections();
			
			$this->tplvar['follow_type'] = $follow_type;
			
			return $this->render('user/ajax/sellFollow.dialog.html', $this->tplvar);
		}
		
		$follow_data = array('user_id' => $user_id);
		$is_giveup = 0;
		if (1 == $follow_type) {
			$follow_level = zbj_lib_BaseUtils::getStr($_POST['follow_level'], 'int');
			if (! $follow_level) {
				return $this->printmsg("请选择跟进状态", 0, 'follow_level');
			}
			$follow_data['follow_level'] = $follow_level;
			
			if (101 == $follow_level) {
				$is_giveup = 1;
				$giveup_reason = zbj_lib_BaseUtils::getStr($_POST['giveup_reason'], 'int');
				if (! $giveup_reason) {
					return $this->printmsg("请选择放弃跟进原因", 0, 'giveup_reason');
				}
				
				$follow_data['is_sea'] = 2;
				$follow_data['enter_sea_reason'] = 1;
				$follow_data['is_giveup'] = 1;
				$follow_data['giveup_reason'] = $giveup_reason;
			}
		} else {
			$visit_type = zbj_lib_BaseUtils::getStr($_POST['visit_type'], 'int');
			if (! $visit_type) {
				return $this->printmsg("请选择回访类型", 0, 'visit_type');
			}
			
			$follow_purpose = zbj_lib_BaseUtils::getStr($_POST['follow_purpose'], 'int');
			if (! $follow_purpose) {
				return $this->printmsg("请选择回访目的", 0, 'follow_purpose');
			}
			
			if (17 == $follow_purpose) {
				$visit_level = zbj_lib_BaseUtils::getStr($_POST['visit_level'], 'int');
				if (! $visit_level) {
					return $this->printmsg("请选择续费可能性", 0, 'visit_level');
				}
				$follow_data['visit_level'] = $visit_level;
			}
			
			$follow_mode = zbj_lib_BaseUtils::getStr($_POST['follow_mode'], 'int');
			if (! $follow_mode) {
				return $this->printmsg("请选择联系方式", 0, 'follow_mode');
			}
			
			$follow_data['visit_type'] = $visit_type;
			$follow_data['follow_purpose'] = $follow_purpose;
			$follow_data['follow_mode'] = $follow_mode;
		}
		
		$remark = zbj_lib_BaseUtils::getStr($_POST['remark'], 'string');
		if (! $remark) {
			return $this->printmsg("请填写跟进记录", 0, 'remark');
		}
		
		if (! $is_giveup) {
			if (! $_POST['expire_time']) {
				return $this->printmsg("请选择下次跟进时间", 0, 'expire_time');
			}
			
			$expire_time = strtotime($_POST['expire_time'].' '.$_POST['time'], time());
			if ($expire_time < $this->_time) {
				return $this->printmsg("下次跟进时间不能小于当前时间", 0, 'expire_time');
			}
		}
		
		$follow_data['follow_type'] = $follow_type;
		$follow_data['remark'] = $remark;
		$follow_data['expire_time'] = $expire_time;
		$follow_data['follow_user_id'] = $this->_userid;
		$follow_data['follow_user_name'] = $this->_truename;
		$follow_data['is_send'] = zbj_lib_BaseUtils::getStr($_POST['issend'], 'int');
		
		//update user info
		$userinfo = array(
			'lastname' => zbj_lib_BaseUtils::getStr($_POST['lastname']), //姓名
			'salutationtype' => zbj_lib_BaseUtils::getStr($_POST['salutationtype']), //性别
			'mobile' => zbj_lib_BaseUtils::getStr($_POST['mobile']), //手机
			'phone' => zbj_lib_BaseUtils::getStr($_POST['phone']), //座机
			'pay_ability' => zbj_lib_BaseUtils::getStr($_POST['pay_ability']), //经济条件
			'industry' => zbj_lib_BaseUtils::getStr($_POST['industry']), //行业
			'company' => zbj_lib_BaseUtils::getStr($_POST['company']), //企业名称
			'com_scale' => zbj_lib_BaseUtils::getStr($_POST['com_scale']), //企业规模
			'province' => zbj_lib_BaseUtils::getStr($_POST['province']), //省
			'city' => zbj_lib_BaseUtils::getStr($_POST['city']), //市
			'nature' => zbj_lib_BaseUtils::getStr($_POST['nature']), //性质
			'posts' => zbj_lib_BaseUtils::getStr($_POST['posts']), //职位
			'email' => zbj_lib_BaseUtils::getStr($_POST['email']), //邮箱
			'qq' => zbj_lib_BaseUtils::getStr($_POST['qq']), //qq
			'homepage' => zbj_lib_BaseUtils::getStr($_POST['homepage']), //官网
			'capital' => zbj_lib_BaseUtils::getStr($_POST['capital']), //注册资金
			'direction' => zbj_lib_BaseUtils::getStr($_POST['direction']), //市场方向
			'about' => zbj_lib_BaseUtils::getStr($_POST['about']), //备注
		);
		$userinfo_config = array(
			'lastname' => '姓名',
			'salutationtype' => '性别',
			'mobile' => '手机',
			'phone' => '座机',
			'pay_ability' => '经济条件',
			'industry' => '行业',
			'company' => '企业名称',
			'com_scale' => '企业规模',
			'province' => '省',
			'city' => '市',
			'nature' => '性质',
			'posts' => '职位',
			'email' => '邮箱',
			'qq' => 'qq',
			'homepage' => '官网',
			'capital' => '注册资金',
			'direction' => '市场方向',
			'about' => '备注',
		);
		
		if ($m_person->update(array('user_id' => $user_id), $userinfo)) {
			$log = '';
			foreach ($userinfo as $k => $v) {
				if ($user_info[$k] != $v) {
					$log .= $userinfo_config[$k] . "由" . $user_info[$k] . "变为" . $v . "; ";
				}
			}
			
			$this->addLog($user_id, $this->_nickname . '修改了用户资料' . $log, 'user');
		}
		
		
		lib_BaseUtils::apiInit(10, array('membership_sdk'));
		$follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
		lib_BaseUtils::apigetclient($follow_service);
		
		if ($is_giveup) {
			//unlock seller
			$user_service = new com\zhubajie\membership\interfaces\UserServiceClient(null);
			lib_BaseUtils::apigetclient($user_service);
			$user_service->updateFollowSeller($user_id, 0);
			
			$response = $follow_service->follow($follow_data);
		} else {
			$response = $follow_service->follow($follow_data);
		}
		
		if ($response->success) {
			//release threshold
			$s_allot6=new zbj_service_allot(6);
			$s_allot6->processed($user_id);
			$s_allot99=new zbj_service_allot(99);
			$s_allot99->processed($user_id);
			
			
			
			$log = '';
			if ($is_giveup) {
				$log .= $this->_truename . '放弃了会员销售跟进';
				$log .= chr(10);
				$log .= '备注：' . $remark;
			} else {
				$level_config = $this->_get_level_config($follow_type);
				if (1 == $follow_type) {
					$log .= '跟进状态：' . $level_config[$follow_level]['desc'];
					$log .= chr(10);
					$log .= '跟进记录：' . $remark;
				} else {
					$follow_mode_config = $this->_get_follow_mode_config();
					$follow_purpose_config = $this->_get_follow_purpose_config();
					
					$log .= '回访目的：' . $follow_purpose_config[$follow_purpose]['desc'];
					$log .= chr(10);
					$log .= '联系方式：' . $follow_mode_config[$follow_mode]['desc'];
					$log .= chr(10);
					$log .= '备注：' . $remark;
				}
			}
			
			$s_log = new zbj_service_cplog();
			$s_log->addRemark($this->_userid, $user_id, $log, '', 'user');
			
			return $this->printmsg("跟进成功。", 2, null, $_SERVER['HTTP_REFERER']);
		} else {
			return $this->printmsg('操作失败:' . $response->message, 0);
		}
	}
	
	/**
	 * @abstract 订单跟进配置
	 */
	public function pageFollowconfig ($inPath) {
		switch ($_REQUEST['part']){
			case 'option':
				if(!in_array($_REQUEST['follow_type'], array(1,2,3))){
					$this->tplvar['alert']='请选择跟进类型';
				}else{
					$condition=array();
					$condition['follow_type']=$_REQUEST['follow_type'];
					$m_followconfig=new model_mb_sellFollowProblemConfig();
					$this->tplvar['list']=$m_followconfig->select($condition)->items;
				}
				// 					var_dump($this->tplvar);
				breaK;
			case 'levelconfig':
				if(!in_array($_REQUEST['follow_type'], array(1,2,3))){
					$this->tplvar['alert']='请选择跟进类型';
				}else{
					$m_configlevel=new model_mk_followLevelConfig();
					$condition=array();

					$list=array();
					// 				define('DEBUG', $value);
					$levellist=$m_configlevel->select($condition)->items;
					foreach ($levellist as $level){
						foreach (unserialize($level['level_desc']) as $sublevel){
							array_push($list, $sublevel);
						}
					}
					$this->tplvar['list']=$list;
				}
				break;
			case 'levelset':
				header('content-type:text/html;charset=utf-8');
				if(!in_array($_REQUEST['follow_type'], array(1,2,3,4))){
					$this->tplvar['alert']='请选择跟进类型';
				}else{
					$condition=array();
					if($_REQUEST['type']==1){
						$condition['is_work_first']=1;
						$condition['mode']=10;
					}elseif($_REQUEST['type']==2){
						$condition['is_work_first']=0;
						$condition['mode']=10;
					}elseif($_REQUEST['type']==3){
						$condition['is_work_first']=0;
						$condition['mode']=12;
					}elseif($_REQUEST['type']==4){
						// 							$condition['is_work_first']=0;
						$condition['mode']=13;
					}
					$condition['is_ratings']=1;
					$m_followconfig=new model_mk_followProblemConfig();
					$m_configlevel=new model_mk_followLevelConfig();
					$this->tplvar['fields']=$m_followconfig->select($condition,'*',null,'order by id asc')->items;
					unset($condition['is_ratings']);
					$level=$m_configlevel->selectOne($condition);
					$hashval=unserialize($level['level']);
					$list=array();
					$offset=array();
					$maxcols=0;
					foreach ($this->tplvar['fields'] as $key=>$val){
						$offset[$key]=count(unserialize($val['options']))-1;
						//$offset[$key]['row']=0;
						$maxcols=max(count(unserialize($val['options'])),$maxcols);
					}
					// 					print_r($offset);
					// 				$offset=array();
					// 				$offset[]=2;
					// 				$offset[]=1;
					// 				$offset[]=3;
					$rowkey=0;
					$backupoffset=$offset;
					// 					print_r($backupoffset);
					// 					print_r(unserialize($this->tplvar['fields'][0]['options']));
					do{
						for(;$offset[count($offset)-1]>=0;$offset[count($offset)-1]-=1){
							$tmp=array();
							// 						echo $offset[count($offset)-1];
							foreach ($offset as $key=>$val){
								$options=unserialize($this->tplvar['fields'][$key]['options']);
								$options[$val]['hash']=implode('-', $offset);
								$options[$val]['hashval']=$hashval[$options[$val]['hash']];
								array_push($tmp, $options[$val]);
							}
							// 						print_r($offset);
							// 						print_r($tmp);
							array_push($list, $tmp);
						}
						$key=count($offset)-1;
						while ($key>1){
							$key-=1;
							if($offset[$key]>0){
								$offset[$key]-=1;
								$offset[count($offset)-1]=$backupoffset[count($offset)-1];
								break;
							}else{
								if($offset[$key-1]>0){
									$offset[$key-1]-=1;
									$ckey=$key;
									for(;$ckey<count($offset);$ckey++){
										$offset[$ckey]=$backupoffset[$ckey];
									}
									break;
								}else{
									//break 2;
								}
							}
						};
					}while(max($offset)>0);
					$this->tplvar['list']=$list;
					$levellists=array();
					$m_configlevel=new model_mk_followLevelConfig();
					unset($condition['is_ratings']);
					$levellist=$m_configlevel->select($condition)->items;
					foreach ($levellist as $level){
						foreach (unserialize($level['level_desc']) as $sublevel){
							array_push($levellists, $sublevel);
						}
					}
					$this->tplvar['levellists']=$levellists;
				}
				break;
			default:
				return '非法操作';
				break;
		}
		return $this->render('user/follow/config.html', $this->tplvar);
	}
	public function pagefollowconfigedit($inPath){
		if(!count($_POST)){
			switch ($_REQUEST['part']){
				case 'option':
					if($_REQUEST['id']){
						$m_followconfig=new model_mb_sellFollowProblemConfig();
						$config=$m_followconfig->selectOne(array('id'=>intval($_REQUEST['id'])));
						$config['options']=unserialize($config['options']);
					}else{
						$config=array();
					}
					$this->tplvar['config']=$config;
					// 					var_dump($this->tplvar);
					breaK;
				case 'levelconfig':
					if($_REQUEST['id']){
						$m_followconfig=new model_mk_followProblemConfig();
						$config=$m_followconfig->selectOne(array('id'=>intval($_REQUEST['id'])));
						$config['options']=unserialize($config['options']);
					}else{
						$config=array();
					}
					$this->tplvar['config']=$config;
					breaK;
				default:
					return '非法操作';
					break;
			}
			return $this->render('user/follow/configedit_'.zbj_lib_BaseUtils::getStr($_REQUEST['part'],'string').'.html', $this->tplvar);
		}
		switch ($_REQUEST ['part']) {
			case 'option' :
				$s_follow=new service_sellFollow();
				$data=array();
				$data['id']=zbj_lib_BaseUtils::getStr($_REQUEST['id'],'int');
				$data['follow_type']=zbj_lib_BaseUtils::getStr($_REQUEST['follow_type'],'int');
				$data['problem_desc']=zbj_lib_BaseUtils::getStr($_REQUEST['problem_desc'],'string');
				$data['sort']=zbj_lib_BaseUtils::getStr($_REQUEST['sort'],'int');
				$data['type']=zbj_lib_BaseUtils::getStr($_REQUEST['type'],'int');
				$data['is_ratings']=zbj_lib_BaseUtils::getStr($_REQUEST['is_ratings'],'int');
				if($s_follow->editconfig($data,$_POST['option'],$_POST['enable'],$_POST['suboption'],$_POST['subpid'],$_POST['subtext'])==true){
					return $this->printmsg("保存成功",1,null,$_SERVER['HTTP_REFERER']);
				}else{
					return $this->printmsg("保存失败，原因".$s_follow->getError(),0);
				}
				breaK;
			case 'levelconfig':
				$s_follow=new service_follow();
				$data=array();
				$data['aqtype']=zbj_lib_BaseUtils::getStr($_REQUEST['aqtype'],'int');
				$data['is_hosted']=zbj_lib_BaseUtils::getStr($_REQUEST['is_hosted'],'int');
				$leveloption=array();
				$leveloption['level']=zbj_lib_BaseUtils::getStr($_POST['level'],'string');
				$leveloption['deadline']=zbj_lib_BaseUtils::getStr($_POST['deadline'],'int');
				$leveloption['mapping']=zbj_lib_BaseUtils::getStr($_POST['mapping'],'string');
				$leveloption['remind_con']=zbj_lib_BaseUtils::getStr($_POST['remind_con'],'string');
				if($s_follow->editlevel($data, $leveloption, array())==true){
					return $this->printmsg("保存成功",1,null,$_SERVER['HTTP_REFERER']);
				}else{
					return $this->printmsg("保存失败，原因".$s_follow->getError(),0);
				}
				break;
			case 'levelset':
				$s_follow=new service_follow();
				$data=array();
				$data['aqtype']=zbj_lib_BaseUtils::getStr($_REQUEST['type'],'int');
				$data['is_hosted']=zbj_lib_BaseUtils::getStr($_REQUEST['hosted'],'int')-1;
				$level_hash=array();
				foreach ($_REQUEST['hash'] as $k=>$v){
					$level_hash[$v]=$_REQUEST['level'][$k];
				}
				if($s_follow->editlevel($data, array(), $level_hash)==true){
					return $this->printmsg("保存成功",1);
				}else{
					return $this->printmsg("保存失败，原因".$s_follow->getError(),0);
				}
				break;
			default :
				return '非法操作';
		}
	}
	public function pagesellerlimit ($inPath) {
	    $url = $this->getUrlParams($inPath);
	    $user_id = zbj_lib_BaseUtils::getStr($url['uid'], 'int');
	    if (! $user_id) {
	        return $this->printmsg('会员不存在,或者没填写查询条件!');
	    }
	
	    $filter_type = zbj_lib_BaseUtils::getStr($_GET['filter_type'], 'int')? zbj_lib_BaseUtils::getStr($_GET['filter_type'], 'int'): 1;
	    $page = zbj_lib_BaseUtils::getStr($url['page'], 'int')? zbj_lib_BaseUtils::getStr($url['page'], 'int'): 1;
	    	
	    $this->tplvar = $this->getCommonUserInfo($user_id);
	    $m_pricelevel = new zbj_model_mb_sellerlimitspricelevel();
	
	    $pricelevel = $m_pricelevel->selectOne(array('user_id'=>$user_id), 'baseprice');
// 	    $pricelevelPrice = 0;
// 	    $pricelevelName = "无";
// 	    if ($pricelevel) {
// 	        $pricelevelPrice = $pricelevel['baseprice'];
// 	    }else{
// 	        $m_member = new zbj_model_mb_member();
// 	        $member = $m_member->selectOne(array('user_id'=>$user_id), 'last_90_day_income/3 as income');
// 	        //获取近三个月的收入平均值，根据该值计算出基准
// 	        if ($member && $member['income']) {
// 	            if ($member['income'] >= 5001 && $member['income'] <= 10000) {
// 	                $pricelevelPrice = 588;
// 	            }
// 	            if ($member['income'] >= 10001 && $member['income'] <= 50000) {
// 	                $pricelevelPrice = 988;
// 	            }
// 	            if ($member['income'] >= 50001) {
// 	                $pricelevelPrice = 2688;
// 	            }
// 	        }
// 	    }
	
// 	    switch ($pricelevelPrice) {
// 	        case 288:
// 	            $pricelevelName = "银牌服务商";
// 	            break;
// 	        case 588:
// 	            $pricelevelName = "金牌服务商";
// 	            break;
// 	        case 988:
// 	            $pricelevelName = "钻石服务商";
// 	            break;
// 	        case 2688:
// 	            $pricelevelName = "皇冠服务商";
// 	            break;
// 	    }
// 	    $this->tplvar['pricelevel'] = $pricelevelPrice;
// 	    $this->tplvar['pricelevelName'] = $pricelevelName;
	    define('PAGESIZE', 10);
	    switch ($filter_type) {
	        case 1://机会
                lib_BaseUtils::apiInit(5,array('membership_sdk'));
                $s_change=new com\zhubajie\membership\interfaces\ChanceServiceClient(null);
                lib_BaseUtils::apigetclient($s_change);
                $inputChanceList=new com\zhubajie\membership\dataobject\Chance\inputChanceList();
                $inputChanceList->user_id=$user_id;
                $inputChanceList->page=$page;
                $inputChanceList->limit=PAGESIZE;
                $inputChanceList->sort=array('!chance_id');
                $result=$s_change->ChanceList($inputChanceList);
                if(!$result->ActionResultDo->success){
                    return $this->printmsg("获取机会失败".$result->ActionResultDo->message);
                }else{
                    $this->tplvar['data']=$result->chances;
                }
	            $this->tplvar['pagebar']=$this->PageBar($result->total, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
	            break;
	        case 2://跟进
	            lib_BaseUtils::apiInit(5, array('membership_sdk'));
	            $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
	            lib_BaseUtils::apigetclient($follow_service);
	            
	            $query_params = new com\zhubajie\membership\dataobject\follow\QueryParamsDO();
	            $query_params->page = $page;
	            $query_params->limit = PAGESIZE;
	            $query_params->user_id = $user_id; //服务商id
	            $query_params->follow_type = 1; //跟进类型：1销售跑进；3服务回访；
	            $response = $follow_service->queryLog($query_params);
	            if(!$response or !$response->success){
	                return $this->printmsg("跟进失败");
	            }
	            //释放阈值
	            $s_user = new zbj_service_user($user_id);
	            $ip = $s_user->get('regip');
	            $config_id = service_user::userip2allot($ip);
	            $s_allot=new zbj_service_allot($config_id);
	            $s_allot->processed($user_id);
	            $s_allot=new zbj_service_allot(99);
	            $s_allot->processed($user_id);
	            
	            $this->tplvar['pagebar']=$this->PageBar($response->total, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
	            $this->tplvar['data']=$response->data;
	            break;
	        case 3:
	            $m_stype=new zbj_model_fn_servicetype();
	            $stypes=array();
	            array_push($stypes, 501,502,503,504);
	            if(count($stypes)){
	                $m_order=new zbj_model_fn_order();
	                $m_order->setLimit(PAGESIZE);
	                $m_order->setPage($page);
	                $m_order->setCount(true);
	                $condtion=array();
	                $condtion['user_id']=$user_id;
	                $condtion[]="stype in (".implode(',', $stypes).")";
	                $data=$m_order->select($condtion,'title,product_pkid,price,createtime,ispay,`option`',null,'order by order_id desc');
	                if(is_array($data->items)){
	                    foreach ($data->items as $key=>$val){
	                        $data->items[$key]['option']=unserialize($val['option']);
	                    }
	                }
	                // 					print_r($data->items);
	                $this->tplvar['data']=$data->items;
	                $this->tplvar['pagebar']=$this->PageBar($data->totalSize, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
	            }
	            break;
	        case 4:
	            $limit = 20;
	            $m_score = new zbj_model_mb_sellscore();
	            $m_score->setCount(true);
	            $m_score->setLimit(PAGESIZE);
	            $m_score->setPage($page);
	            $leftjoin = array(
	                'mb_sellerlimits_pac_log' => 'mb_sellerlimits_pac_log.log_id = mb_sell_score.log_id'
	            );
	            $items = "mb_sell_score.user_id,mb_sell_score.nickname,mb_sell_score.level,mb_sell_score.type,mb_sell_score.saler_name,mb_sell_score.price as score,
				mb_sellerlimits_pac_log.dateline,mb_sellerlimits_pac_log.price,mb_sellerlimits_pac_log.origin_real_price,mb_sellerlimits_pac_log.num
				";
	            $data = $m_score->select(array('mb_sell_score.user_id'=>$user_id), $items, null,'order by id desc', $leftjoin, array('dbinfo' => 'co_member'));
	            $this->tplvar['data']=$data->items;
	            $this->tplvar['pagebar']=$this->PageBar($data->totalSize, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
                break;
            case 5: // 跟进
                lib_BaseUtils::apiInit(5, array(
                    'membership_sdk'
                ));
                $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
                lib_BaseUtils::apigetclient($follow_service);
                
                $query_params = new com\zhubajie\membership\dataobject\follow\QueryParamsDO();
                $query_params->page = $page;
                $query_params->limit = PAGESIZE;
                $query_params->user_id = $user_id; // 服务商id
                $query_params->follow_type = 3; // 跟进类型：1销售跑进；3服务回访；
                $query_params->visit_type = intval($_REQUEST['visit_type']); // 回访类型：1主动回访；2被动回访；
                
                $response = $follow_service->queryLog($query_params);
                if (! $response or ! $response->success) {
                    return $this->printmsg("跟进失败");
                }
                
                $this->tplvar['pagebar'] = $this->PageBar($response->total, PAGESIZE, $page, $inPath, 'style4', '?' . $_SERVER['QUERY_STRING']);
                $this->tplvar['data'] = $response->data;
                break;
            default:
	            break;
	    }
	    return $this->render('user/index/sellerlimit.html', $this->tplvar);
	}
	/**
	 * 顾留中2015-06-04 重构
	 * 
	 * 
	 * @deprecated
	 * @param unknown $inPath
	 */
	public function pagesellerlimit_bak ($inPath) {
		$url = $this->getUrlParams($inPath);
		$user_id = zbj_lib_BaseUtils::getStr($url['uid'], 'int');
		if (! $user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
	
		$filter_type = zbj_lib_BaseUtils::getStr($_GET['filter_type'], 'int')? zbj_lib_BaseUtils::getStr($_GET['filter_type'], 'int'): 1;
		$page = zbj_lib_BaseUtils::getStr($url['page'], 'int')? zbj_lib_BaseUtils::getStr($url['page'], 'int'): 1;
			
		$this->tplvar = $this->getCommonUserInfo($user_id);
		$m_pricelevel = new zbj_model_mb_sellerlimitspricelevel();
		
		$pricelevel = $m_pricelevel->selectOne(array('user_id'=>$user_id), 'baseprice');
		$pricelevelPrice = 0;
		$pricelevelName = "无";
		if ($pricelevel) {
			$pricelevelPrice = $pricelevel['baseprice'];
		}else{
			$m_member = new zbj_model_mb_member();
			$member = $m_member->selectOne(array('user_id'=>$user_id), 'last_90_day_income/3 as income');
			//获取近三个月的收入平均值，根据该值计算出基准
			if ($member && $member['income']) {
				if ($member['income'] >= 5001 && $member['income'] <= 10000) {
					$pricelevelPrice = 588;
				}
				if ($member['income'] >= 10001 && $member['income'] <= 50000) {
					$pricelevelPrice = 988;
				}
				if ($member['income'] >= 50001) {
					$pricelevelPrice = 2688;
				}
			}
		}
		
		switch ($pricelevelPrice) {
			case 288:
				$pricelevelName = "银牌服务商";
			break;
			case 588:
				$pricelevelName = "金牌服务商";
			break;
			case 988:
				$pricelevelName = "钻石服务商";
			break;
			case 2688:
				$pricelevelName = "皇冠服务商";
			break;
		}
		$this->tplvar['pricelevel'] = $pricelevelPrice;
		$this->tplvar['pricelevelName'] = $pricelevelName;
		define('PAGESIZE', 10);
		switch ($filter_type) {
			case 1:
// 				define('DEBUG', $value);
				$m_chance=new zbj_model_mb_chance();
				$condtion=array();
				$condtion['user_id']=$user_id;
				$condtion['status']=2;
				$m_chance->setLimit(PAGESIZE);
				$m_chance->setPage($page);
				$m_chance->setCount(true);
				$data=$m_chance->select($condtion,'content,source,tel,status,create_date');
				$this->tplvar['data']=$data->items;
				$this->tplvar['pagebar']=$this->PageBar($data->totalSize, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
				break;
			case 2:
				$m_remark=new zbj_model_cp_remark();
				$condtion=array();
				$condtion['pk_id']=$user_id;
				$condtion[]="remark_catalog in(4,5,6,7,8,9)";
				$m_remark->setLimit(PAGESIZE);
				$m_remark->setPage($page);
				$m_remark->setCount(true);
// 				define('DEBUG', $value);
				$data=$m_remark->select($condtion,'content,remark_catalog,name,status,create_time',null,'order by remark_id desc');
				$this->tplvar['pagebar']=$this->PageBar($data->totalSize, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
				$this->tplvar['data']=$data->items;
				$s_remark=new zbj_service_cplog();
				$this->tplvar['remark_cat']=$s_remark->getRemarkCatalog();
				break;
			case 3:
				$m_stype=new zbj_model_fn_servicetype();
				$stypes=array();
				array_push($stypes, 501,502,503,504);
				if(count($stypes)){
					$m_order=new zbj_model_fn_order();
					$m_order->setLimit(PAGESIZE);
					$m_order->setPage($page);
					$m_order->setCount(true);
					$condtion=array();
					$condtion['user_id']=$user_id;
					$condtion[]="stype in (".implode(',', $stypes).")";
					$data=$m_order->select($condtion,'title,product_pkid,price,createtime,ispay,`option`',null,'order by order_id desc');
					if(is_array($data->items)){
						foreach ($data->items as $key=>$val){
							$data->items[$key]['option']=unserialize($val['option']);
						}
					}
// 					print_r($data->items);
					$this->tplvar['data']=$data->items;
					$this->tplvar['pagebar']=$this->PageBar($data->totalSize, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
				}
				break;
			case 4:	
				$limit = 20;
				$m_score = new zbj_model_mb_sellscore();
				$m_score->setCount(true);
				$m_score->setLimit(PAGESIZE);
				$m_score->setPage($page);
				$leftjoin = array(
						'mb_sellerlimits_pac_log' => 'mb_sellerlimits_pac_log.log_id = mb_sell_score.log_id'
				);
				$items = "mb_sell_score.user_id,mb_sell_score.nickname,mb_sell_score.level,mb_sell_score.type,mb_sell_score.saler_name,mb_sell_score.price as score,
				mb_sellerlimits_pac_log.dateline,mb_sellerlimits_pac_log.price,mb_sellerlimits_pac_log.origin_real_price,mb_sellerlimits_pac_log.num
				";
				$data = $m_score->select(array('mb_sell_score.user_id'=>$user_id), $items, null,'order by id desc', $leftjoin, array('dbinfo' => 'co_member'));
				$this->tplvar['data']=$data->items;
				$this->tplvar['pagebar']=$this->PageBar($data->totalSize, PAGESIZE, $page, $inPath,'style4','?'.$_SERVER['QUERY_STRING']);
				break;
			default:
				break;
		}
		return $this->render('user/index/sellerlimit.html', $this->tplvar);
	}
	
	/**
	 * 急需派单
	 */
	public function pageNeedRecommend($inPath) {
		$is_urgent = $_REQUEST['is_urgent'];
		if (isset($is_urgent)) {
			$url = $this->getUrlParams($inPath);
			$user_id = zbj_lib_BaseUtils::getStr($url['uid'], 'int');
			if (!$user_id) {
				return $this->printmsg('会员不存在,或者没填写查询条件!');
			}
			$mOpis = new model_mb_useropis($user_id);
			if ($mOpis->add(array('is_urgent' => $is_urgent)) === false) {
				if($_POST){
					return $this->printmsg("设置失败", 0);
				}else{
					return '设置失败';
				}
			}
			if ($is_urgent == 0) {
				$this->addLog($user_id, "{$this->_nickname}取消急需派单标识", 'user');
				return $this->printmsg("你已成功取消该服务商急需派单标识！", 2, null, $_SERVER['HTTP_REFERER']);
			} else {
				$this->addLog($user_id, "{$this->_nickname}设置了急需派单标识", 'user');
				return $this->printmsg("设置成功", 2, null, $_SERVER['HTTP_REFERER']);
			}
		}
		$params['reasons'] = array(1 => '近5天无交易', '近5天交易低于1000');
		return $this->render('user/index/needrecommend.html', $params);
	}
	/**
	 * 满意度调查
	 */
	public function pagepleased($inPath){
		if(zbj_lib_BaseUtils::isAjax()){
			$urlparams=$this->getUrlParams($inPath);
			if(!count($_POST)){
				//行业
				$s_option = new service_cpoption(16);
				$this->tplvar ['option_16'] = $s_option->getItems();
				//企业规模
				$s_option = new service_cpoption(18);
				$this->tplvar ['option_18'] = $s_option->getItems();
				//用户类型
				$s_option = new service_cpoption(28);
				$this->tplvar ['option_28'] = $s_option->getItems();
				//选择原因
				$s_option = new service_cpoption(29);
				$this->tplvar ['option_29'] = $s_option->getItems();
				//了解渠道
				$s_option = new service_cpoption(30);
				$this->tplvar ['option_30'] = $s_option->getItems();
				//省
				$mRegion = new zbj_model_mb_region();
				$this->tplvar ['provinces'] = $mRegion->select(array("parent_id" => 1))->items;
				//资料
				$mPerson = new zbj_model_mb_customerperson();
				$this->tplvar ['userinfo'] = $mPerson->selectOne(array('user_id' => $urlparams['uid']));
				return $this->render('user/pleased.html',$this->tplvar);
			}
			
			//修改个资料
			$userinfo['customer.lastname'] = lib_BaseUtils::getStr(trim($_POST['lastname']));
			if (strlen($_POST['salutationtype']) > 0) {
				$userinfo['customer.salutationtype'] = lib_BaseUtils::getStr(trim($_POST['salutationtype']));
			}
			$userinfo['customer.mobile'] = lib_BaseUtils::getStr(trim($_POST['mobile']));
			$userinfo['customer.phone'] = lib_BaseUtils::getStr(trim($_POST['phone']));
			$userinfo['customer.industry'] = lib_BaseUtils::getStr(trim($_POST['industry']));
			$userinfo['customer.com_scale'] = lib_BaseUtils::getStr(trim($_POST['com_scale']));
			$userinfo['customer.company'] = lib_BaseUtils::getStr(trim($_POST['company']));
			$userinfo['customer.selected_reason'] = lib_BaseUtils::getStr(trim($_POST['selected_reason']));
			$userinfo['customer.channel'] = lib_BaseUtils::getStr(trim($_POST['channel']));
			$userinfo['customer.user_type'] = lib_BaseUtils::getStr(trim($_POST['user_type']));
			$userinfo['customer.industry2'] = lib_BaseUtils::getStr(trim($_POST['industry2']));
			
			if (strlen($_POST['province']) > 0) {
				$userinfo['customer.province'] = lib_BaseUtils::getStr(trim($_POST['province']));
			}
			if (strlen($_POST['city']) > 0) {
				$userinfo['customer.city'] = lib_BaseUtils::getStr(trim($_POST['city']));
			}
			$userinfo['customer.about'] = lib_BaseUtils::getStr(trim($_POST['about']));
			
			$sPerson = new service_customer($urlparams['uid']);
			$arrPerson = $sPerson->get("customer.*");
			$log = '';
			if ($arrPerson['lastname'] != $userinfo['customer.lastname']) {
				$log .= ",姓名[{$arrPerson['lastname']}]改为[{$userinfo['customer.lastname']}]";
			}
			if ($arrPerson['salutationtype'] != $userinfo['customer.salutationtype']) {
				$log .= ",性别[{$arrPerson['salutationtype']}]改为[{$userinfo['customer.salutationtype']}]";
			}
			if ($arrPerson['mobile'] != $userinfo['customer.mobile']) {
				$log .= ",手机[{$arrPerson['mobile']}]改为[{$userinfo['customer.mobile']}]";
			}
			if ($arrPerson['phone'] != $userinfo['customer.phone']) {
				$log .= ",座机[{$arrPerson['phone']}]改为[{$userinfo['customer.phone']}]";
			}
			if ($arrPerson['company'] != $userinfo['customer.company']) {
				$log .= ",企业名称[{$arrPerson['company']}]改为[{$userinfo['customer.company']}]";
			}
			if ($arrPerson['industry'] != $userinfo['customer.industry']) {
				$log .= ",行业[{$arrPerson['industry']}]改为[{$userinfo['customer.industry']}]";
			}
			if ($arrPerson['industry2'] != $userinfo['customer.industry2']) {
				$log .= ",行业2[{$arrPerson['industry2']}]改为[{$userinfo['customer.industry2']}]";
			}
			if ($arrPerson['com_scale'] != $userinfo['customer.com_scale']) {
				$log .= ",企业规模[{$arrPerson['com_scale']}]改为[{$userinfo['customer.com_scale']}]";
			}
			if ($arrPerson['province'] != $userinfo['customer.province']) {
				$log .= ",省[{$arrPerson['province']}]改为[{$userinfo['customer.province']}]";
			}
			if ($arrPerson['city'] != $userinfo['customer.city']) {
				$log .= ",市[{$arrPerson['city']}]改为[{$userinfo['customer.city']}]";
			}
			if ($arrPerson['user_type'] != $userinfo['customer.user_type']) {
				$log .= ",用户类型[{$arrPerson['about']}]改为[{$userinfo['customer.about']}]";
			}
			if ($arrPerson['channel'] != $userinfo['customer.channel']) {
				$log .= ",了解渠道[{$arrPerson['about']}]改为[{$userinfo['customer.about']}]";
			}
			if ($arrPerson['selected_reason'] != $userinfo['customer.selected_reason']) {
				$log .= ",选择猪八戒原因[{$arrPerson['about']}]改为[{$userinfo['customer.about']}]";
			}
			if ($arrPerson['about'] != $userinfo['customer.about']) {
				$log .= ",备注[{$arrPerson['about']}]改为[{$userinfo['customer.about']}]";
			}
			
			if($log){
				$sPerson->set($userinfo);
				$sPerson->save();
				$this->addLog($urlparams['uid'], $this->_nickname.'修改了用户资料'.$log, 'user');
			}
			//修改用户资料结束
			
			
			
			
			
			$pleased_value=zbj_lib_BaseUtils::getStr($_REQUEST['pleased_value']);
			if(!$pleased_value){
				return $this->printmsg("请输入对猪八戒网满意度",0,'pleased_value');
			}
			$unpleased_type=zbj_lib_BaseUtils::getStr($_POST['unpleased_type']);
			if(!is_array($unpleased_type) or count($unpleased_type)==0){
				return $this->printmsg("请选择那一些方面不满意。",0,'unpleased_type[]');
			}
			$otherstring=zbj_lib_BaseUtils::getStr($_POST['otherstring']);
			$options=$_POST['options'];
			if(!is_array($options) or count($options)==0){
				return $this->printmsg("请选择那一些方面不满意。",0,'options');
			}
			foreach ($unpleased_type as $val){
				$option=$options[$val];
				if(count($option)==0){
					return $this->printmsg("请选择。",0,"options[$val][]");
				}
				if($val==1 && in_array(4, $option) && !$otherstring[$val]){
					return $this->printmsg("请输入其它内容。",0,"otherstring[$val]");
				}
				if($val==2 && in_array(4, $option) && !$otherstring[$val]){
					return $this->printmsg("请输入其它内容。",0,"otherstring[$val]");
				}
				if($val==3 && in_array(4, $option) && !$otherstring[$val]){
					return $this->printmsg("请输入其它内容。",0,"otherstring[$val]");
				}
			}
			$s_pleased=new service_pleased(0);
			$data=array();
			$data['user_id']=zbj_lib_BaseUtils::getStr($urlparams['uid'],'int');
			$data['pleased_value']=$pleased_value;
			$data['manager_id']=$this->_userid;
			$data['come_agin']=zbj_lib_BaseUtils::getStr($_POST['come_agin'],'int');
			$data['share_type']=zbj_lib_BaseUtils::getStr($_POST['share_type'],'int');
			$data['suggest']=zbj_lib_BaseUtils::getStr($_POST['suggest'],'string');
// 			var_dump($options);
			if($s_pleased->create($data, $unpleased_type,$options,$otherstring)){
				return $this->printmsg("回访成功。");
			}else{
				return $this->printmsg("回访失败，原因：".$s_pleased->getError(),0);
			}
		}
	}
	/**
	 * 刷单处理
	 */
	public function pageBrush($inPath){
		$tableMkBrush = new zbj_model_mk_brush();
		if ($_POST['ids']){
			$ids = zbj_lib_BaseUtils::getStr($_POST['ids']);
			$ids = str_replace("，",",",$ids);
			$tableMbEvaluation = new zbj_model_mb_evaluation();
			$tableSpService = new zbj_model_sp_service();
			$tableMbSeracheAsyn = new zbj_model_mb_serachasyn();
			$aEvar = $tableMbEvaluation->select("task_id  in ($ids) and type=2 and ptype in (24,25,19)","order_id,at_amount,dateline,dateymd,user_id,task_id,title,category_id,category2id,category1id,service_id,is_auto")->items;
			if ($aEvar){
				try {
					$tableMkBrush->beginTransaction();
					$tableSpService->beginTransaction();
					$tableMbSeracheAsyn->beginTransaction();
					foreach ($aEvar as $v){
						$tableMkBrush->set("task_id",$v['task_id']);
						$tableMkBrush->set("order_id",$v['order_id']);
						$tableMkBrush->set("title",$v['title']);
						if ($v['service_id']){
							$service=$tableSpService->selectOne(array('service_id'=>$v['service_id'],'sales>0'),'sales');
							if ($service['sales']){
								$upservice=$tableSpService->update(array('service_id'=>$v['service_id'],'sales>0'),array("sales"=>$service['sales']-1));
								if ($upservice==false){
									throw new Exception($upservice->getDbError());
								}
							}							
							$tableMkBrush->set("service_id",$v['service_id']);
							$serArry = array();
							if (!in_array($v['service_id'], $serArry)){
								$serArry[]=$v['service_id'];
							}						
						}					
						$tableMkBrush->set("is_auto",$v['is_auto']);
						$tableMkBrush->set("evaluatetime",$v['dateline']);
						$tableMkBrush->set("evaluateymd",$v['dateymd']);
						$tableMkBrush->set("at_amount",$v['at_amount']);
						$tableMkBrush->set("category_id",$v['category_id']);
						$tableMkBrush->set("category2id",$v['category2id']);
						$tableMkBrush->set("category1id",$v['category1id']);
						$tableMkBrush->set("user_id",$v['user_id']);
						$tableMkBrush->set("manager_id",$this->_userid);
						$tableMkBrush->set("manager_name",$this->_nickname);
						$tableMkBrush->set("dateymd",date("Y-m-d"));
						$tableMkBrush->set("dateline",$this->_time);
						$result=$tableMkBrush->save(false);
						if ($result==false){
							throw new Exception($tableMkBrush->getDbError());
						}						
						$userIds=array();
						if (!in_array($v['user_id'],$userIds)){
							$userIds[]=$v['user_id'];
						}
						if (!empty($userIds)){
							foreach ($userIds as $userid){
								$exist=$tableMbSeracheAsyn->select(array('pk_id'=>$userid,'type'=>1))->items;
								if (!$exist){
									$upSearch = $tableMbSeracheAsyn->insert(array('pk_id'=>$userid,'type'=>1));
									if ($upSearch==false){
										throw new Exception($tableMbSeracheAsyn->getDbError());
									}
								}	
							}
						}
						if (!empty($serArry)){
							foreach ($serArry as $serviceId){
								$isexist=$tableMbSeracheAsyn->select(array('pk_id'=>$serviceId,'type'=>2))->items;
								if (!$isexist){
									$upSearch = $tableMbSeracheAsyn->insert(array('pk_id'=>$serviceId,'type'=>2));
									if ($upSearch==false){
										throw new Exception($tableMbSeracheAsyn->getDbError());
									}
								}
							}
						}
					}
						
					$tableMkBrush->commit();
					$tableSpService->commit();
					$tableMbSeracheAsyn->commit();
					return $this->printmsg("提交成功");
				}catch(Exception $e){
					$tableMkBrush->rollBack();
					$tableSpService->rollBack();
					$tableMbSeracheAsyn->rollBack();
					return $this->printmsg("提交失败".$e->getMessage());
				}
			}else{
				return $this->printmsg("该需求雇主未评价");
			}
		}
		$urlParams = $this->getUrlParams($inPath);
		$page=$urlParams['page']?(int)$urlParams['page']:1;
		$limit=20;
		$tableMkBrush->setCount(true);
		$tableMkBrush->setPage($page);
		$tableMkBrush->setLimit($limit);
		$list=$tableMkBrush->select('','','','order by dateline desc');
		$data['list']=$list->items;
		$data['pagebar']=$this->PageBar($list->totalSize, $limit, $page, $inPath);
		return $this->render("user/brush.html",$data);
	}

	/**
	 * 用户机会
	 * @access public
	 */
	public function pageChance ($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;

        if (!$user_id)
            return $this->printmsg('会员不存在,或者没填写查询条件!');

        $this->tplvar = $this->getCommonUserInfo($user_id);

        $limit = 20;
        $page = isset($urlparam['page']) ? (int) $urlparam['page'] : 1;

        try {
            $data['user_id'] = $user_id;
            $data['is_desc'] = 1;
            $data['query_time_type'] = 1;
            lib_BaseUtils::apiInit(10,array('zbj_biaoju_client'));
            $chanceClient = new com\zhubajie\biaoju\sdk\interfaces\ChanceServiceClient(NULL);
            lib_BaseUtils::apigetclient($chanceClient);
            $options = new com\zhubajie\biaoju\sdk\dataobject\chance\ChanceFollowQueryOptions($data);

            $chanceListResult = $chanceClient->queryFollowChanceResultByOptions($options, 1, $limit, ($page-1)*$limit);
            if ( $chanceListResult->isSuccess === false ) throw new Exception($chanceListResult->errorMsg);

            $chanceListCache = 'boss.zhubajie.com.user.chance.list.userid.'.$user_id;
            $ocache  = new zbj_lib_cache('memcache');
            $cacheArray = $ocache->get($chanceListCache);

            $s_chance = new service_mkchance();

            if ( $chanceListResult->items ) {
                foreach ( $chanceListResult->items as $k => $v ) {
                    if (isset($cacheArray[$v->chance_id]) && $cacheArray[$v->chance_id] ){
                        $list[$k]['service_id'] = $cacheArray[$v->chance_id]['service_id'];
                        $list[$k]['copyright_id'] = $cacheArray[$v->chance_id]['copyright_id'];
                        $detail_url = $s_chance->getUrlMapping($v->chance_type) . $cacheArray[$v->chance_id]['copyright_id'];
                    }else{
                        $tmp_copyright = array();
                        $m_copyright = new zbj_model_mk_copyright();
                        $tmp_copyright = $m_copyright->selectOne(array('chance_id'=>$v->chance_id),'copyright_id,service_id');
                        $list[$k]['copyright_id'] = $tmp_copyright['copyright_id'];
                        $list[$k]['service_id'] = $tmp_copyright['service_id'];
                        $detail_url = $s_chance->getUrlMapping($v->chance_type) . $tmp_copyright['copyright_id'];
                        $cacheArray[$v->chance_id] = array('copyright_id'=>$tmp_copyright['copyright_id'],'service_id'=>$tmp_copyright['service_id']);
                        $ocache->set($chanceListCache, $cacheArray,3600*24);
                    }
                    $list[$k]['chance_type'] = service_mkchance::getChanceTypeName($v->chance_type);
                    $list[$k]['amount'] = $v->amount;
                    $list[$k]['discount_amount'] = $v->paid_amount - $v->refund_amount;
                    $list[$k]['manager_id'] = $v->manager_id;
                    $list[$k]['lastest_paid_time'] = $v->latest_paid_time;
                    $list[$k]['is_giveup'] = $v->is_giveup;
                    $list[$k]['is_sys'] = $v->is_sys;
                    $list[$k]['is_sea'] = $v->is_sea;
                    $list[$k]['expire_time'] = $v->expire_time;
                    $list[$k]['follow_time'] = $v->follow_time;
                    $list[$k]['create_time'] = date("Y-m-d H:i:s", $v->create_time);
                    $list[$k]['detail_url'] = $detail_url;
                    $list[$k]['chance_id'] = $v->chance_id;
                }
            }
        } catch ( Exception $e ) {
            return $this->printmsg('获取数据失败，'.$e->getMessage());
        }

        $this->tplvar['chance_list'] = $list;
        $this->tplvar['total'] = $chanceListResult->total;
        $this->tplvar['pagebar'] = $this->PageBar($this->tplvar['total'], $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
        return $this->render('user/index/chance.html', $this->tplvar);
    }

	/**
	 * 用户机会
	 * @access public
	 */
	public function pagebschance ($inPath) {
	    $urlparam = $this->getUrlParams($inPath);
	    $user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
	    $page = isset($urlparam['page']) ? (int) $urlparam['page'] : 1;
	    $limit = 10;
	    if (!$user_id) {
	        return $this->printmsg('会员不存在,或者没填写查询条件!');
	    }
	
	    $this->tplvar = $this->getCommonUserInfo($user_id);
	    lib_BaseUtils::apiInit(5,array('zbj_sdk'));
	    $s_crmClient = new com\zhubajie\boss\interfaces\bschanceServiceClient(null);
	    lib_BaseUtils::apigetclient($s_crmClient);
	    $filter = new \com\zhubajie\boss\dataobject\bschance\BusinessFilter();
	    $filter->page =$page;
	    $filter->limit = $limit;
	    $filter->uid = (int) $user_id;
	    $listsResult = $s_crmClient->GetBussinessContactor($filter);
	    $this->tplvar['chance_list'] = $listsResult->data_obj->items;
	    $this->tplvar['total'] = $listsResult->data_obj->totalSize;
	    $this->tplvar['pagebar'] = $this->PageBar($listsResult->data_obj->totalSize, $limit, $page, $inPath, 'style6', $_SERVER['QUERY_STRING']);
	    return $this->render('user/index/bschance.html', $this->tplvar);
	}
	/**
	 * 法律服务
	 * @author tanqing
	 * @date 2015-4-13
	 * @param unknown $inPath
	 * @return Ambigous <boolean, string>|Ambigous <string, void, boolean, unknown, mixed, string>
	 */
	public function pagelaw($inPath){
		$urlparam = $this->getUrlParams($inPath);
		$user_id = (int) $urlparam['uid'] ? (int) $urlparam['uid'] : 0;
		
		if (!$user_id) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$limit = 20;
		$page = isset($urlparam['page']) ? (int) $urlparam['page'] : 1;
		$this->tplvar = $this->getCommonUserInfo($user_id);
		
		lib_BaseUtils::apiInit(10,array('zbj_biaoju_client'));
		$chanceClient = new com\zhubajie\biaoju\sdk\interfaces\ChanceServiceClient(null);
		lib_BaseUtils::apigetclient($chanceClient);
		$lawChanceQueryDTO = new com\zhubajie\biaoju\sdk\dataobject\law\LawChanceQueryDTO();
		$lawChanceQueryDTO->user_id = $user_id;
		$lawChanceOrderByDTO = new com\zhubajie\biaoju\sdk\dataobject\law\LawChanceOrderByDTO();
		$lawChanceOrderByDTO->field = com\zhubajie\biaoju\sdk\dataobject\law\LawChanceOrderByField::CREATE_TIME;
		$lawChanceOrderByDTO->is_desc = true;
		
		$chanceListResult = $chanceClient->queryLawChance($lawChanceQueryDTO, $lawChanceOrderByDTO, $limit, $limit*($page-1));
		$this->tplvar['chance_list'] = $chanceListResult->items;
		$this->tplvar['pagebar'] = $this->PageBar($chanceListResult->total, $limit, $page, $inPath);
		return $this->render('user/index/law.html', $this->tplvar);
	}
	/**
	 * 用户代注册
	 */
	public function pageHelpRegister($inPath) {
		$this->tplvar['info'] = '注册成功后，系统将自动给用户发送一条账号密码的短信。';
		if ($_POST) {
			$phone = zbj_lib_BaseUtils::getStr ( $_POST ['phone']);
            if (!lib_BaseUtils::IsMobile($phone)){
                $res['msg'] = '号码有误，请正确输入11位手机号码';
                $this->printmsg($res);
            }

            $ip = lib_BaseUtils::getIp();

            zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET, 10, array('ub-client'));
            $registerParam = array(
                'account' => $phone,
                'accountType' => 1,
                'ip' => $ip,
                'nickname' => 'm_'.substr($phone, -4).lib_BaseUtils::random(6,0),
                'password' => lib_BaseUtils::random(6,1)
            );
            $payapi = new com\zhubajie\ub\interfaces\UserRegisterServiceClient(NULL);
            lib_BaseUtils::apigetclient($payapi);
            $optionParam = array();
            $optionParam[RegisterOptions::APP_ID] = 'quick-jccp-fqv2w0du7twsybkz';
            $param = new com\zhubajie\ub\dataobject\UserRegister\RegisterParamDTO($registerParam);
            $param->options = $optionParam;
			
			try{
                $back = $payapi->directRegister($param);
				if ($back->success) {
					//往代注册表中插入记录，目的标识是后台用户代注册的
					$m_register_help = new zbj_model_mb_registerhelp();
					$m_register_help->insert(array('user_id'=>$back->userId, 'manager_id'=>$this->_userid));
					//发送短信
					$data = array(
							"tplkey"	 => 'com.zhubajie.boss.register.help',
							't_userid'=>$back->userId,
							't_nickname'=>$back->nickname,
							'password'=>$param->password,
							'mobile' => $phone
					);
					$s_user = new zbj_service_user($back->userId);
					$ret = zbj_service_taskmsg::sendmsgnew($s_user, 'buyer', "com.zhubajie.boss.register.help", "", $data);
                    if(!$ret) {
                        $cache = new zbj_lib_cache('memcache');
                        $key   = 'boss.helpregister.phone.'.$phone;
                        $cache->set($key,$data,60*60*2);//缓存2个小时
                        $msg = '短信发送失败：'.zbj_service_taskmsg::getErr();
                        $msg .= ' <a href="/user/resendmsg?phone='.$phone.'">[重新发送]</a>';
                    }else {
                        $msg = '账号密码已发送至用户手机。';
                    }
                    $this->tplvar['info'] = "你已成功代用户注册账号：<a href='/user/view-uid-{$back->userId}' target='_blank'>{$back->nickname}</a>，".$msg ;
					
					//加入授权
					$accredit_data = array(
							'user_id'=>$back->userId,
							'user_name'=>$back->nickname,
							'accredit_type'	=>1
							);
					$s_accredit = new service_npsaccredit();
                    $accredit_type = 1;
					$s_accredit->add($accredit_type,$this->_userid,$this->_nickname,1,$accredit_data);
					
					$this->addLog($back->userId,$this->_nickname.'代用户注册了帐号('.$msg.')，帐号名：'.$back->nickname,'user');
				}else{
					$this->tplvar['info'] = "<span style='color: red;'>{$back->message}，请尝试用其它手机号进行注册！</span>";
				}
			}catch(Exception $e){
// 				echo 'err:'.$e->getMessage();
				$this->tplvar['info'] = "<span style='color: red;'> {$e->getMessage()}，请尝试用其它手机号进行注册！</span>";
			}
		}
		return $this->render('user/cert/helpregister.html',$this->tplvar);
	}
    /**
     * 代用戶註冊信息發送失敗重發
     */
    public function pageReSendMsg($inPath) {
        $this->tplvar['info'] = '注册成功后，系统将自动给用户发送一条账号密码的短信。';
        $phone = zbj_lib_BaseUtils::getStr ( $_GET['phone']);
        if (! $phone) {
            return $this->printmsg ('手机号码不能为空!');
        }
        $_POST['phone'] = $phone;
        $cache = new zbj_lib_cache('memcache');
        $key   = 'boss.helpregister.phone.'.$phone;
        $data  = $cache->get($key);
        if(empty($data)) {
            return $this->printmsg('没有该用户的缓存信息!');
        }
        $user_id = $data['t_userid'];
        $s_user = new zbj_service_user($user_id);
        $ret = zbj_service_taskmsg::sendmsgnew($s_user, 'buyer', "com.zhubajie.boss.register.help", "", $data);
        if(!$ret) {
            $msg = '短信发送失败：'.zbj_service_taskmsg::getErr();
            $msg .= ' <a href="/user/resendmsg?phone='.$phone.'">[重新发送]</a>';
        }else {
            $msg = '账号密码已发送至用户手机。';
        }
        $this->tplvar['info'] = "你已成功代用户注册账号：<a href='/user/view-uid-{$user_id}' target='_blank'>{$phone}</a>，".$msg ;
        return $this->render('user/cert/helpregister.html',$this->tplvar);
    }

	/*
	 * @申请解锁IP列表
	* 
	* */
	public function pageiplist($inPath) {
		//var_dump($this);
		$model=new zbj_model_mb_registerlimit();
		$limit=10;
		$path = $this->getUrlParams($inPath);
		$iPage = isset($path['page']) ? intval($path['page']) : 1;
		$tub=$model->select(array('state'=>0));
		$tub0=$tub->pageSize;
		$tub=$model->select(array('state'=>1));
		$tub1=$tub->pageSize;
		$tub=$model->select(array('state'=>2));
		$tub2=$tub->pageSize;
		$model->setPage($iPage);
		$model->setCount(true);
		$model->setLimit($limit);
		$orderby="order by id desc";
		$list=$model->select("","","",$orderby);//id排序
		$total=$list->totalSize;
		$pagebar = $this->pageBar($list->totalSize, $limit, $iPage, $inPath, 'style4', $_SERVER['QUERY_STRING']);//分页
		$this->tplvar['list']= $list->items;
		$this->tplvar['total']=$total;
		$this->tplvar['tub0']=$tub0;
		$this->tplvar['tub1']=$tub1;
		$this->tplvar['tub2']=$tub2;
		$this->tplvar['pagebar'] = $pagebar;
		$this->tplvar['iPage'] = $iPage;
		return $this->render('user/ipunlock/index.html',$this->tplvar);
	}
	/*
	 *
	* @查看单独IP申请详情
	* 
	*
	* */
	public function pageipDetail($inPath) {
		$path = $this->getUrlParams($inPath);
		$id  = zbj_lib_BaseUtils::getStr($path['id'], 'int');
		if (!$id) {
			return $this->printmsg("ID不存在！",0);
		}
		$model1=new zbj_model_mb_registerlimit($id);
		$app = $model1->get();
		if (empty($app)) {
			return $this->printmsg("该申诉不存在");
		}
		$model=new zbj_model_mb_registerlimit();        //查询申请信息
		$condition=array();
		$condition['id']=$id;
		$current=$model->selectOne($condition);
		$locale_array=explode(" ", $current['surf_locale'],4);
		$model_region=new zbj_model_mb_region();
		$locale = array_pop($locale_array);  //最后一个单元弹出（出栈）
		$tmp ='';
		foreach($locale_array as $locale_code){
			$arr = $model_region->selectOne(array('region_id' => $locale_code));
			$tmp .= $arr['region_name'];
		}
		$locale = $tmp.$locale;                //地点名称
		$account_model=new zbj_model_mb_account();//查询已经注册帐号信息
		$unserinfo=$account_model->select("regtimeymd>='".date('Y-m-d',time()-86400)."' AND regip='".$current['apply_ip']."'",'username')->items;
		//$unserinfo=$account_model->select("regip='".$current['apply_ip']."'",'username')->items;
		$sum=count($unserinfo);             //注册账号数量
		$this->tplvar['locale']=$locale;
		$this->tplvar['userinfo']=$unserinfo;
		$this->tplvar['sum']=$sum;
		$this->tplvar['current']=$current;
		return $this->render('user/ipunlock/detail.html',$this->tplvar);
	}
	/*
	 *
	* @
	* @通过审核事件，以及将IP加入白名单
	*
	* */
	public function pageipPass($inPath) {
		$path = $this->getUrlParams($inPath);
		$id  = zbj_lib_BaseUtils::getStr($path['id'], 'int');
		$model=new zbj_model_mb_registerlimit();
		$condition=array();
		$condition['id']=$id;
		$ip=$model->selectOne($condition,"apply_ip");//插入白名单的ip
		if($ip){
			$cache=new zbj_lib_cache("memcache");
			$cache->set("reg_register_limit_ip_".$ip['apply_ip'], -1,2592000);
			$result=$model->update(array('id' => $id),array("state"=>"1","manager_id"=>$this->_userid,"manager_name"=>$this->_nickname));
			return $this->printmsg("移入白名单成功！",2,null,$_SERVER['HTTP_REFERER']);
		}
		else{
			return $this->printmsg("移出白名单失败！",2,null,$_SERVER['HTTP_REFERER']);
		}
	}
	/*
	 *
	* @拒绝审核事件
	*
	* */
	public function pageipRefuse($inPath){
		$path = $this->getUrlParams($inPath);
		$id  = zbj_lib_BaseUtils::getStr($path['id'], 'int');
		$model=new zbj_model_mb_registerlimit();
		$condition=array();
		$condition['id']=$id;
		$ip=$model->selectOne($condition,"apply_ip");
		$model->update(array('id' => $id),array("state"=>"2","manager_id"=>$this->_userid,"manager_name"=>$this->_nickname));
		return $this->printmsg("拒绝移入白名单",1,null,$_SERVER['HTTP_REFERER']);
	}
	/*
	 *
	* @IP移除白名单
	*
	* */
	public function pageipDelallowip($inPath){
		$path = $this->getUrlParams($inPath);
		$id  = zbj_lib_BaseUtils::getStr($path['id'], 'int');
		$model=new zbj_model_mb_registerlimit();
		$condition=array();
		$condition['id']=$id;
		$ip=$model->selectOne($condition,"apply_ip");
		if($ip){
			$cache=new zbj_lib_cache("memcache");
			$cache->del("reg_register_limit_ip_".$ip['apply_ip']);
			$model->update(array('id' => $id),array("state"=>"2","manager_id"=>$this->_userid,"manager_name"=>$this->_nickname));
			return $this->printmsg("移除成功！",2,null,$_SERVER['HTTP_REFERER']);
		}
		else{
			return $this->printmsg("移除失败",2,null,$_SERVER['HTTP_REFERER']);
		}
	}
	/**
	 * 获取用户进行中的交易
	 */
	public function pageProcessTrade($inPath) {
		$path = $this->getUrlParams($inPath);
		$uid = zbj_lib_BaseUtils::getStr($path['uid'], 'int',0);
		$uid = $uid ? $uid : zbj_lib_BaseUtils::getStr($_GET['uid'], 'int', 0);
		if (!$uid) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$page = zbj_lib_BaseUtils::getStr($path['page'], 'int', 0);
		$limit = 10;
		$m_order = new zbj_model_fn_order();
		$m_task = new zbj_model_mk_task();
		$condition = array();
		$start = zbj_lib_BaseUtils::getStr($_GET['begin']);
		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		if ($start) $condition[] = "createymd >= '{$start}'"; 
		if ($end) $condition[] = "createymd <= '{$end}'"; 
		$condition['sl_user_id'] = $uid;
		$condition['stype'] = 16;
		$condition[] = 'ptype in (23,24,25,28)';
		$condition['state'] = 0;
		$condition['ispay'] = 1;
		$m_order->setCount(true);
		$m_order->setLimit($limit);
		$m_order->setPage($page);
		$items = 'title,product_pkid,ptype,createtime';
		$order_obj = $m_order->select($condition, $items, null, 'order by order_id desc');
		$param = array();
		$param['uid'] = $uid;
		$param = $this->getCommonUserInfo($uid);
		$param['order'] = $order_obj->items;
		if ($param['order']) {
			foreach ($param['order'] as $k=> $v) {
				$task = $m_task->selectOne(array('task_id'=>$v['product_pkid']), 'amount,hosted_amount');
				$param['order'][$k]['amount'] = $task['amount']?$task['amount']:0;
				$param['order'][$k]['hosted_amount'] = $task['hosted_amount']? $task['hosted_amount'] : 0;
			}
		}
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($order_obj->totalSize, $limit, $page, $inPath, 'style4', $h_endurl);
		$param ['totalSize']=$orderObj->totalSize;
		return $this->render('user/index/processtrade.html', $param);
	}
	/**
	 * 用户授权
	 */
	public function pageAccredit($inPath) {
		$path = $this->getUrlParams($inPath);
		$uid = zbj_lib_BaseUtils::getStr($path['uid'], 'int',0);
		$uid = $uid ? $uid : zbj_lib_BaseUtils::getStr($_GET['uid'], 'int', 0);
		$accredit_state = zbj_lib_BaseUtils::getStr($_GET['accredit_state'], 'int');
		if (!$uid) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		$page = zbj_lib_BaseUtils::getStr($path['page'], 'int', 0);
		$limit = 20;
		$leftjoin = array(
				'mk_task'=>'mk_task.task_id = mk_nps_accredit.task_id'
				);
		$m_accredit = new model_mk_npsaccredit();
		$condition = array();
		$condition[] = "mk_nps_accredit.user_id = {$uid}";
		if ($accredit_state) {
			$condition['accredit_state'] = $accredit_state;
		}
		
		$m_accredit->setCount(true);
		$m_accredit->setLimit($limit);
		$m_accredit->setPage($page);
		$items = 'title,mk_nps_accredit.task_id,mk_task.amount,mk_nps_accredit.createtime';
		$accredit_obj = $m_accredit->select($condition, $items, null, 'order by accredit_id desc', $leftjoin);
		$param = array();
		$param['uid'] = $uid;
		$param = $this->getCommonUserInfo($uid);
		$param['accredit'] = $accredit_obj->items;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($accredit_obj->totalSize, $limit, $page, $inPath, 'style4', $h_endurl);
		$param ['totalSize']=$accreditObj->totalSize;
		return $this->render('user/index/accredit.html', $param);
	}
	/**
	 * 悬赏管理
	 */
	public function pageRewardManager($inPath) {
		$path = $this->getUrlParams($inPath);
		$uid = zbj_lib_BaseUtils::getStr($path['uid'], 'int',0);
		$uid = $uid ? $uid : zbj_lib_BaseUtils::getStr($_GET['uid'], 'int', 0);
		if (!$uid) {
			return $this->printmsg('会员不存在,或者没填写查询条件!');
		}
		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,10,array('zbj_reward_sdk'));
	    $s_user_level = new com\zhubajie\reward\interfaces\UserLevelServiceClient(null);
	    zbj_lib_ApiClient::build($s_user_level);
	    $listSearchDo = new com\zhubajie\reward\dataobject\UserLevel\ListSearchDo();
	    $listSearchDo->user_id = $uid;
// 	    $listSearchDo->is_allowed = com\zhubajie\reward\dataobject\UserLevel\IsAllowed::ABLE;
// 	    $listSearchDo->is_exam_pass = com\zhubajie\reward\dataobject\UserLevel\IsExamPass::PASS;
	    $result = $s_user_level->getList($listSearchDo);
	    if ($result->success == false) {
	        return $this->printmsg($result->messages);
	    }
	    $user_level_array = array();
	    if ($result->userlevel_list) {
	        foreach ($result->userlevel_list as $user_obj) {
	            $temp = array();
	            $temp['user_level_id'] = $user_obj->user_level_id;
	            $temp['user_id'] = $user_obj->user_id;
	            $temp['hall_id'] = $user_obj->hall_id;
	            $temp['level'] = $user_obj->level;
	            $temp['is_allowed'] = $user_obj->is_allowed;
	            $temp['is_exam_pass'] = $user_obj->is_exam_pass;
	            $temp['create_ymd'] = $user_obj->create_ymd;
	            $levelBidSearchDo = new com\zhubajie\reward\dataobject\UserLevel\LevelBidSearchDo();
	            $levelBidSearchDo->user_id = $uid;
	            $levelBidSearchDo->hall_id = $user_obj->hall_id;
	            $level_bid_obj = $s_user_level->getLevelBid($levelBidSearchDo);
	            $temp['cur_win_bid_num'] = 0;
	            if ($level_bid_obj->success) {
	                $temp['cur_win_bid_num'] = $level_bid_obj->data['cur_win_bid_num'];
	            }
	            $user_level_array[] = $temp;
	        }
	    }
	    
	    //获取专场数据
	    $s_hall = new com\zhubajie\reward\interfaces\HallServiceClient(null);
	    zbj_lib_ApiClient::build($s_hall);
	    $hall_result = $s_hall->getList();
	    $hall_array = array();
	    if ($hall_result->success) {
	        if ($hall_result->hall_list) {
	            foreach ($hall_result->hall_list as $obj) {
	                $hall_array[$obj->hall_id] = $obj->hall_name;
	            }
	        }
	    } 
	    
	    $s_hall_level = new \com\zhubajie\reward\interfaces\HallLevelServiceClient(null);
	    zbj_lib_ApiClient::build($s_hall_level);
	    $levelListSearchDo = new \com\zhubajie\reward\dataobject\HallLevel\ListSearchDo();
	    $hall_level_result = $s_hall_level->getList($levelListSearchDo);
	    $hall_level_array = array();
	    if ($hall_level_result->level_list) {
	        foreach ($hall_level_result->level_list as $level) {
	            $hall_level_array[$level->hall_id][$level->level] = $level->level_name;
	        }
	    }
		$param = array();
		$param = $this->getCommonUserInfo($uid);
	    $param['user_level_array'] = $user_level_array;
	    $param['hall_array'] = $hall_array;
	    $param['hall_level_array'] = $hall_level_array;
		$param['uid'] = $uid;
		return $this->render('user/index/rewardmanager.html', $param);
	}


    private function del_upcloud_resource($uid){
        $obj_yp=new zbj_lib_Upyun(zbj_lib_Constant::UPYUN_AVATAR_NAME,zbj_lib_Constant::UPYUN_AVATAR_USER,zbj_lib_Constant::UPYUN_AVATAR_PASS);
        $path=zbj_lib_BaseUtils::getUserAvatarPath($uid);
        $obj_yp->delete($path);
    }
	
    /**
     * 用户认证列表（新）
     */
    public function pageAuthList($inPath) {
    	zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
    	$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
    	zbj_lib_ApiClient::build($auth_service);
    	
    	$this->urlinfo = $this->getUrlParams($inPath);
    	$page = isset($this->urlinfo['page']) ? (int) $this->urlinfo['page'] : 1;
    	$limit = 10;
    	$real_type = zbj_lib_BaseUtils::getStr($_GET['real_type']);
    	$status = intval($_GET['status']);
    	$search_type = zbj_lib_BaseUtils::getStr($_GET['search_type']);
    	$key = trim(zbj_lib_BaseUtils::getStr($_GET['key']));
    	$apply_start = zbj_lib_BaseUtils::getStr($_GET['apply_start']);
    	$apply_end = zbj_lib_BaseUtils::getStr($_GET['apply_end']);
    	$handle_start = zbj_lib_BaseUtils::getStr($_GET['handle_start']);
    	$handle_end = zbj_lib_BaseUtils::getStr($_GET['handle_end']);
    	$allot_manager_id = zbj_lib_BaseUtils::getStr($_GET['allot_manager_id']);
    	$auth_type = zbj_lib_BaseUtils::getStr($_GET['auth_type']);
    	try {
    		$query_params = new com\zhubajie\user\dataobject\auth\QueryParamsDO();
    	  
    		$query_params->page = $page;
    		$query_params->limit = $limit;
    		if ($real_type) $query_params->realtype = $real_type;
    		$query_params->status = $status;
    		if ($auth_type) $query_params->auth_type = $auth_type;
    		if ($apply_start) $query_params->s_apply_time = $apply_start;
    		if ($apply_end) $query_params->e_apply_time = $apply_end;
    		if ($handle_start) $query_params->s_handle_time = $handle_start;
    		if ($handle_end) $query_params->e_handle_time = $handle_end;
    		if ($allot_manager_id) $query_params->manager_id = $allot_manager_id;
    		if ($key) {
    			switch ($search_type) {
    				case 1:
    					$query_params->brandname = $key;
    					break;
    				case 2:
    					$query_params->user_id = $key;
    					break;
    				case 3:
    					$query_params->truename = $key;
    					break;
    				case 4:
    					$query_params->nickname = $key;
    					break;
    				case 5:
    					$query_params->check_id = $key;
    					break;
    				default:
    					break;
    			}
    		}
    		
    		$list = $auth_service->query($query_params);
    		if(is_array($list->data)){
    		    foreach ($list->data as $k=>$v){
    		        if(isset($v['db_person_card_id'])){
    		            if( substr($v['db_person_card_id'],-2,1)%2 == 1 ){
    		                $list->data[$k]['db_person_sex'] = '男';
    		            }else{
    		                $list->data[$k]['db_person_sex'] = '女';
    		            }
    		        }
    		    }
    		}
    		
    		
    		$this->tplvar['list'] = $list;
    		$this->tplvar['real_type'] = $auth_service->getRealType();
    		$this->tplvar['auth_type'] = $auth_service->getAuthType();
    		$this->tplvar['status_type'] = $auth_service->getStatusType();
    		$this->tplvar['card_type'] = $auth_service->getCardType();
    		$this->tplvar['pagebar'] = $this->PageBar($list->total_size, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
    	     $this->tplvar['verify_reason'] = $reason = array(
    		'上传的证件图片很模糊，无法识别其内容，请重新上传清晰的数码证件照',
    		'证件有效期非长期，请填写正确的到期日期',
    		'填写的证件到期日期与上传的证件资料不符',
    		'填写的姓名与上传的证件资料不符',
    		'上传的证件图片不成功，请重新上传',
    		'图片上传不正确,请提交与其资料相符的证件图片',
    		'复印件或非彩色扫描件无效，请提交彩色证件图片',
    		'第二代证件请上传正反两面进行认证',
    		'非公民二代身份证，认证无效',
    		'身份证件已过有效期',
    		'证件图片的姓名、照片、身份证号码、地址、有效期不能遮挡，请重新上传',
    		'上传的证件图片无法辨别真实性，请上传清晰、完整的数码证件照',
    		'上传的证件图片名字、地址、号码、照片等不能涂改，请重新上传',
    		'上传的证件图片有备注其它特殊用途，认证无效',
    	     '性别不一致',
    	     '年龄不足18岁',
    		);
    		$s_allot = new zbj_service_allot(9);
    		$this->tplvar['managers'] = $s_allot->getusers();
    	} catch (Exception $e) {
    		return $this->printmsg( "系统出错：" . $e->getMessage(), 1);
    	}
    
    	return $this->render('user/cert/authList.html', $this->tplvar);
    }
    
    /**
     * 认证审核
     */
    public function pageAuthVerify() {
    	$card_id = zbj_lib_BaseUtils::getStr($_REQUEST['cid']);
    	$check_id = zbj_lib_BaseUtils::getStr($_REQUEST['check_id']);
    	$is_check = zbj_lib_BaseUtils::getStr($_REQUEST['check'], 'int', 0);
    	$is_verify = zbj_lib_BaseUtils::getStr($_REQUEST['verify'], 'int', 0);
    	if(isset($_REQUEST['uid'])){
    		$user_id = zbj_lib_BaseUtils::getStr($_REQUEST['uid'],'int');
    		if($user_id <= 0) return $this->alert(array('state'=>0,'msg'=>'uid有误'),1);
    	}
    	if (! $check_id) {
    		return $this->alert(array('state' => 0, 'msg' => '参数错误'), 1);
    	}
    	zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
    	$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
    	zbj_lib_ApiClient::build($auth_service);
    
    	if (! count($_POST)) {
    		$query_params = new com\zhubajie\user\dataobject\auth\QueryParamsDO();
    		$query_params->check_id = $check_id;
    		$list = $auth_service->query($query_params);
    		
    		$auth_info = $list->data[$check_id];
    		$this->tplvar['auth_info'] = $auth_info;
    		$certified_info = $auth_service->getCertifiedUser($card_id);//这里个需要做调整。card_id
    		$this->tplvar['certified_info'] = $certified_info;
    		
    		$response = $auth_service->getRealInfo($auth_info['card_id'], $auth_info['real_name']);
    		$real_info = $response->success? json_decode($response->message, true): json_decode($response->message, true);
    		if ($real_info) {
    			$auth_service->updateAuditPic($check_id, $real_info['auditpic']);
    		}
			if($real_info['success']){
				$real_error_num = 0;
			}else{
				$real_error_num = -1;
			}
			switch($response->code){
				case -1:
					$real_error_num = -1;//请求失败
					break;
				case -2:
					$real_error_num = -2;//没查到记录
					
					break;
				case 0:
					$real_error_num = 0;//有记录
					break;
			}
				
    	
    		echo'<div style="display:none;">||' . json_encode($real_info) . '||</div>';
    		
    		$this->tplvar['real_info'] = $real_info;
    		$this->tplvar['real_error_num'] = $real_error_num;
    		
    		$this->tplvar['is_check'] = $is_check;
    		$this->tplvar['is_verify'] = $is_verify;	
    		return $this->render('user/cert/verify.html', $this->tplvar);
    	}
    	$status = zbj_lib_BaseUtils::getStr($_REQUEST['status']);
    	$reason = zbj_lib_BaseUtils::getStr($_REQUEST['reason']);
    	$other = zbj_lib_BaseUtils::getStr($_REQUEST['other']);
        if (!empty($other)) {
         	if (!empty($reason)) {
        		$reason = $reason.','.$other;
         	}else{
        		$reason = $other;
        		}
        }
        if (! $status) {
    		return $this->alert(array('state' => 0, 'msg' => '请选择审核状态'), 1);
    	}
    	$status_t = explode(",", $status);
    	if (empty($status_t[1])) {
    		return $this->alert(array('state' => 0, 'msg' => '请选择审核状态'), 1);
    	}
        $status = $status_t[1];
    	if ((1 == $status || $item[1]==5) && (! $reason)) {
    		return $this->alert(array('state' => 0, 'msg' => '请选择原因'), 1);
    	}
    	
   
    
    	$BossCPUserDO = new BossCPUserDO();
    	$BossCPUserDO->user_id = intval($this->_userid);
    	$BossCPUserDO->true_name = $this->_name;
    
    	
    	$verify_info = new VerifyInfoDO();
    	$verify_info->check_id = $check_id;
    	$verify_info->status = $status;
    	$verify_info->message = $reason;
    	$verify_info->cp_user_do = $BossCPUserDO;
    		 
    	$result = $auth_service->verify($verify_info);
    	if ($result->success) {
    		$s_allot=new zbj_service_allot(9);
			$s_allot->processed($check_id);
			$this->addLog($check_id, "{$status}&&&{$reason}", 'realauth');
			 $cache=new zbj_lib_cache('memcache');
			 $cacheName='com.zhubajie.userAuth.apply.'.$user_id;
			 $cache->del($cacheName);
    		//TODO 发送短信、站内信提醒
    		return $this->alert(array('state' => 1, 'msg' => '提交成功'), 1);
    	} else {
    		return $this->alert(array('state' => 0, 'msg' => "提交失败 原因：" . $result->message), 1);
    	}
    }
    
    
	/*
     * 批量认证审核
     */
    public function pageAuthVerifyAll() {

        $_POST = zbj_lib_BaseUtils::saddslashes($_POST);
        $accrej = array();
		if(is_array($_POST)){
			foreach ($_POST as $key=>$v) {
				if (strpos($key, 'accrej')!==false) {
					$accrej[$key]=$v;
				}
			}
		}
        if (empty($accrej)) {
            return $this->alert(array('state' =>0, 'msg' => '请至少选择一个进行操作'), 1);
        }
        if(is_array($accrej)){
        	zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
    		$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
    		zbj_lib_ApiClient::build($auth_service);
            $iCount = count($accrej);
        	$iSucNum=0;
        	$iFailNum=0;
        	$msg='';
        	foreach ($accrej as $k=>$v) {
        		$item = explode(",", $v);
        		$reason = '';
        		if ($item[1]==1 || $item[1]==5) {
        			if (!empty($_POST ['reduse'.$item[0]])) {
        				$reason = implode(',', $_POST ['reduse'.$item[0]]);
        			}
        			if (!empty($_POST ['allcomment'.$item[0]])) {
        				if (!empty($reason)) {
        					$reason = $reason.','.$_POST ['allcomment'.$item[0]];
        				}else{
        					$reason = $_POST ['allcomment'.$item[0]];
        				}
        			}
        			if (empty($reason)) {
        				$iFailNum++;
        				$msg.=" 流水号{$item[0]}失败，未选择拒绝原因";
        				continue;
        			}
        		}
        		
        		$BossCPUserDO = new BossCPUserDO();
	    		$BossCPUserDO->user_id = intval($this->_userid);
	    		$BossCPUserDO->true_name = $this->_name;
	    		
        	    $verify_info = new VerifyInfoDO();
    			$verify_info->check_id = $item[0];
    			$verify_info->status = $item[1];
    			$verify_info->message = $reason;
    			$verify_info->cp_user_do = $BossCPUserDO;
    		 
    			$result = $auth_service->verify($verify_info);
    			if ($result->success) {
			 		$user_id = $this->getRealUserId($item[0]);
    				$cache=new zbj_lib_cache('memcache');
			 		$cacheName='com.zhubajie.userAuth.apply.'.$user_id;
			 		$cache->del($cacheName);
			 		
    				$s_allot=new zbj_service_allot(9);
					$s_allot->processed($item[0]);
					$iSucNum++;
					$this->addLog($item[0], "{$item[1]}&&&$reason", 'realauth');	
    			} else {
    				$iFailNum++;
    				$msg = $msg." 流水号{$item[0]}失败，".$result->message;
    			}
        	}
            return $this->alert(array('state' =>1, 'msg' =>'共操作' . $iCount . '个，成功' . $iSucNum . '个，失败' . $iFailNum . '个'.$msg), 1);
        } else {
            return $this->alert(array('state' =>0, 'msg' => '数据错误'), 1);
        }
    }
    
    /**
     * 获取mb_real 表中用户id
     * @param unknown_type $check_id
     */
    private function getRealUserId($check_id){
    	$condition = array();
    	$condition['check_id'] = intval($check_id);
    	$mb_real = new zbj_model_mb_real();
		$res=$mb_real->selectOne($condition,'user_id');
		if($res&&$res['user_id']){
    		return $res['user_id'];
		}
    } 
    
    /**
     * 开启用户前台身份认证入口 
     */
	public function pageOpenAuthEntrance($inPath) {
		$url_params = $this->getUrlParams($inPath);
		$user_id = zbj_lib_BaseUtils::getStr($url_params['uid']);
		if (! $user_id) {
			return $this->printmsg("参数不对", 1);
		}
		
		$s_user = new zbj_service_user($user_id);
		$api = new zbj_service_payapi_yijifu_openapi();
		$api->service = 'zbjUserQuery';
		$api->setParam('userId', $s_user->get('yijifu.yuser_id'));
		$api->orderNo = zbj_lib_BaseUtils::getYJFRequestNo();
		$res = $api->syn();
		if ($res) {
			if (('B' == $res['userType']) && ('A' == $res['certifyStatus'])) {
				return $this->printmsg("该用户已是企业认证用户，不需要重新认证。。。", 1);
			}
		}
		
		zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
		$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
		zbj_lib_ApiClient::build($auth_service);
		
		$query_params = new com\zhubajie\user\dataobject\auth\QueryParamsDO();
		$query_params->user_id = $user_id;
		$query_params->status = AuthStatus::PENDING;
		
		$response = $auth_service->query($query_params);
		if ($response->success) {
			if ($response->data) {
				return $this->printmsg("该用户提交的申请正在审核当中。。。", 1);
			}
		} else {
			return $this->printmsg("系统忙，请稍后再试。。。", 1);
		}
		
		$response = $auth_service->openAuthEntrance($user_id);
		if ($response->success) {
			return $this->printmsg("操作失败", 1);
		}
		
		$s_managercustom = new zbj_service_manager($this->_userid);
		$this->addLog($this->_userid, $s_managercustom->get("name") . '开启了企业认证入口', 'user');
		return $this->printmsg("操作成功", 1);
	}
    
    /**
     * 香港馆服务商(已入住)
     */
    public function pageHkEmployee($inPath) {
        $url = $this->getUrlParams($inPath);

        $mdl = new model_mb_hkserviceinfo();
        $limit = 20;
        $page = max(intval($url['page']), 1);
        $mdl->setPage($page);
        $mdl->setLimit($limit);
        $mdl->setCount(true);
        $order_by = 'ORDER BY hs_id DESC';
        $list = $mdl->select($condition, '*', '', $order_by);
        $this->tplvar['service_users_info'] = $list;
        $this->tplvar['page_bar'] = $this->PageBar($list->totalSize, $limit,$page, $inPath);
        return $this->render('user/hongkong/hk_employee.html', $this->tplvar);
    }

    /**
     * 香港馆服务商(待审核)
     */
    public function pageHkExaming() {
        return $this->render('user/hongkong/hk_examing.html', $this->tplvar);
    }
    
    /**
     * 香港馆服务商(未通过)
     */
    public function pageHkDonotpass() {
        return $this->render('user/hongkong/hk_donotpass.html', $this->tplvar);
    }
    
    /**
     * 添加香港馆服务商
     */
    public function pageAddHKService() {
        if (! lib_BaseUtils::isPostRequest()) {
            return $this->render('user/hongkong/add_hk_service.html', $this->tplvar);
        } else {
            $post = zbj_lib_BaseUtils::getStr($_POST);
            $user_id = intval($post['user_id']);
            if ($user_id <= 0) {
                return $this->ShowMsg('无法获取用户id');
            }
            $zone = $post['zone'];
            if (!$zone) {
                return $this->ShowMsg('必须选择所属地区');
            }
            $srvUser = new service_user($user_id);
            $data_service = array(
                'zone' => $zone,
                'team' => $post['team'],
                'status' => $post['islogin']
            );
            $data_bank = $this->getHKServiceDataBank();
            if ($srvUser->addHKServiceUser($data_service, $data_bank, $this->_truename) === false) {
                return $this->ShowMsg('操作失败 失败原因 ' . $srvUser->getError());
            } else {
                return $this->ShowMsg('添加成功', '/user/hkEmployee');
            }
        }
    }

    private function getHKServiceDataBank() {
        $rtn = array(
            'pay_currency' => $_POST['pay_currency'],
            'withdraw_currency' => $_POST['withdraw_currency'],
            'payee_name' => $_POST['payee_name'],
            'payee_address' => $_POST['payee_address'],
            'payee_bank_name' => $_POST['payee_bank_name'],
            'payee_bank_address' => $_POST['payee_bank_address'],
            'payee_bank_swiftcode' => $_POST['payee_bank_swiftcode'],
            'payee_bank_no' => $_POST['payee_bank_no'],
            'payee_proxybank_name' => $_POST['payee_proxybank_name'],
            'payee_proxybank_address' =>  $_POST['payee_proxybank_address'],
        );
        $optional = array(
            'payee_proxybank_name',
            'payee_proxybank_address',
        );
        foreach ($rtn as $k => &$v) {
            $v = trim($v);
            if (!$v && !in_array($k, $optional) ) {
                return $this->ShowMsg("{$k}不能为空 为必填项");
            }
        }
        return $rtn;
    }

    /**
     * 添加香港馆雇主
     */
    public function pageaddHKEmployer() {
        if (zbj_lib_BaseUtils::isPostRequest()) {
            $post = zbj_lib_BaseUtils::getStr($_POST);
            $data = array();
            $data['user_id'] = intval($post['user_id']);
            $data['buyer_realname'] = $post['buyer_realname'];
            $data['buyer_ID_number'] = $post['buyer_ID_number'];
            $data['tel'] = $post['tel'];
            $data['is_verify'] = intval((bool) $post['is_verify']);
            $service_user = new service_user();
            if ($service_user->addHKEmployerInfo($data) === false) {
                return $this->ShowMsg('添加出错 ' . $service_user->getError());
            } else {
                $this->redirect('/user/hkEmployer');
            }
        } else {
            $this->tplvar['tabs'] = $this->_getListTabs(true);
            $this->tplvar['cur_tab'] = 6;
            return $this->render('user/hongkong/add_hk_employer.html', $this->tplvar);
        }
    }
    
    
    
    public function pageLogoutServiceUser($inPath) {
        $url_params = $this->getUrlParams($inPath);
        $user_id = zbj_lib_BaseUtils::getStr($url_params['userid'],'int');
        $is_in = zbj_lib_BaseUtils::getStr($url_params['isin'],'int');
        if($user_id > 0) {
            $service_user = new service_user();
            $service_user->logoutServiceUser($user_id,$is_in);
            $zbj_service_user = new zbj_service_user($user_id);
            $zbj_service_user->addSearchQueue(1,'U');
            $this->redirect('/user/hkEmployee');
        }
    }
    
    /**
     * 香港馆雇主
     */
    public function pageHkEmployer($inPath) {
        
        $url_params = $this->getUrlParams($inPath);
        $page = isset($url_params['page'])?zbj_lib_BaseUtils::getStr($url_params['page']):1;
        
        $this->tplvar = array();
        $condition = array();
        $filter_uid = intval($_GET['uid']);
        $count = true;
        if ($filter_uid > 0) {
            $page = 1;
            $count = false;
            $condition['user_id'] = $filter_uid;
        }
        $page = $filter_uid > 0 ? 1 : $page;


        $limit = 20;
        $mdl = new model_mb_hkemployer();
        $mdl->setLimit($limit);
        $mdl->setCount($count);
        $mdl->setPage($page);
        $group_by = '';
        $order_by = 'ORDER BY ' . $mdl->primarykey() . ' DESC';
        $list = $mdl->select($condition, '*', $group_by, $order_by);
        $this->tplvar['list'] = $list->items;
        $this->tplvar['uid'] = $filter_uid ? : '';
        $this->tplvar['tabs'] = $this->_getListTabs(true);
        $this->tplvar['cur_tab'] = 7;
        $this->tplvar['page_bar'] = $this->PageBar($list->totalSize, $limit, $page, $inPath);
        return $this->render('user/hongkong/hk_employer.html', $this->tplvar);
    }
    
    public function pageEditHKEmployer($inPath) {
        if (lib_BaseUtils::isPostRequest()) {
            $hei_id = intval($_POST['hei_id']);
            if ($hei_id <= 0) {
                return $this->ShowMsg('无法获取要更新的记录id');
            }
            $data['buyer_realname'] =  zbj_lib_BaseUtils::getStr($_POST['buyer_realname']);
            if (!$data['buyer_realname']) {
                return $this->ShowMsg('必須填写真实姓名');
            }
            $data['buyer_ID_number'] = $_POST['buyer_ID_number'];
            if (!ctype_alnum((string) $data['buyer_ID_number'])) {
                return $this->ShowMsg('身份证信息格式有误');
            }
            if ($_POST['tel']) {
                if (!ctype_digit(str_replace('-', '', $_POST['tel']))) {
                    return $this->ShowMsg('电话号码有误');
                }
                $data['tel'] = $_POST['tel'];
            } else {
                $data['tel'] = '';
            }
            $data['is_verify'] = intval((bool) intval($_POST['is_verify']));
            $service_user = new service_user();
            if ($service_user->updateEmployerInfo($data, $hei_id) === false) {
                return $this->ShowMsg('更新雇主信息失败' . $service_user->getError());
            }
            $this->redirect('/user/hkEmployer');
        }
        $url_params = $this->getUrlParams($inPath);
        $hei_id = zbj_lib_BaseUtils::getStr($url_params['heiid']);
        if($hei_id > 0) {
            $hk_service = new service_user();
            $this->tplvar['tabs'] = $this->_getListTabs(true);
            $this->tplvar['hk_employer_info'] = $hk_service->getHKEmployerInfo($hei_id);
            return $this->render('user/hongkong/edit_hk_employer.html', $this->tplvar);
        } else {
            $this->redirect('/user/hkEmployer');
        }
    }
    
    public function pageCheckID($inPath) {
        $url_params = $this->getUrlParams($inPath);
		$card_id = zbj_lib_BaseUtils::getStr($url_params['cardid']);
        $name = zbj_lib_BaseUtils::getStr($url_params['name']);
        
        zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
    	$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
    	zbj_lib_ApiClient::build($auth_service);

        $real_info = $auth_service->getRealInfo($card_id, $name);
        $is_success = json_decode($real_info->message, true);
        exit((bool) $is_success['success']);
    }
    
    public function pageEditHKService($inPath) {
        if (!zbj_lib_BaseUtils::isPostRequest()) {
            $url = $this->getUrlParams($inPath);
            $user_id = intval($url['uid']);
            if ($user_id <= 0) {
                $this->redirect('/user/hkEmployee');
            }
            $hk_service = new service_user($user_id);
            $this->tplvar['hk_service_info'] = $hk_service->getHKServiceInfo();
            $this->tplvar['hk_service_money_info'] = $hk_service->getHKServiceMoneyInfo();
            return $this->render('user/hongkong/edit_hk_employee.html', $this->tplvar);
        } else {
            $search_info = zbj_lib_BaseUtils::getStr($_POST);
            $user_id = intval($_POST['user_id']);
            if ($user_id <= 0) {
                return $this->ShowMsg('无法获取用户id');
            }
            $srvUser = new service_user($user_id);
            $data_info['zone'] = $zone = zbj_lib_BaseUtils::getStr(trim($_POST['zone']));
            if (!$zone) {
                return $this->ShowMsg('必须选择地区');
            }
            $data_info['team'] = zbj_lib_BaseUtils::getStr(trim($_POST['team']));
            if ($srvUser->updateHKServiceInfo($data_info) === false) {
                return $this->ShowMsg('更新服务商主信息失败 ' . $srvUser->getError());
            }
            $data_bank = $this->getHKServiceDataBank();
            if ($srvUser->updatePbBankInfo($data_bank) === false) {
                return $this->ShowMsg('更新服务商银行卡信息失败 ' . $srvUser->getError());
            }
            return $this->ShowMsg('更新成功', '/user/hkEmployee');
        }
    }

    /**
     * ajax验证用户是否能加入香港馆服务商
     * @param $inPath
     * @return string
     */
    public function pageAllowHKServiceUser($inPath) {
        $url = $this->getUrlParams($inPath);
        $uid = intval($url['uid']);
        if ($uid <= 0) {
            $error = array(
                'state' => 0,
                'msg' => '无法获取用户id',
                'code' => 100,
            );
            return $this->json($error);
        }
        $srvUser = new service_user();
        $rtn = $srvUser->isHKServiceUser($uid);
        return $this->HKUserAllowAddReturn($srvUser, $rtn);
    }

    private function HKUserAllowAddReturn($srvUser, $rtn) {
        if ($rtn === false) {
            $code = $srvUser->getError('code');
            if ($code == service_user::ERROR_CODE_NOT_CHECKIN) {
                return $this->json(array('state'=> 1, 'msg' => 'OK'));
            } else {
                return $this->json(array('state' => 0, 'msg' => $srvUser->getError(), 'code' => $srvUser->getError('code')));
            }
        } else {
            return $this->json(array('state' => 0, 'msg' => '已经加过了', 'code' => 0));
        }
    }

    /**
     * ajax验证用户是否能加入香港馆雇主
     * @param $inPath
     * @return string
     */
    public function pageAllowHKEmployerUser($inPath) {
        $url = $this->getUrlParams($inPath);
        $uid = intval($url['uid']);
        if ($uid <= 0) {
            $error = array(
                'state' => 0,
                'msg' => '无法获取用户id',
                'code' => 100,
            );
            return $this->json($error);
        }
        $srvUser = new service_user();
        $rtn = $srvUser->isHKEmployerUser($uid);
        return $this->HKUserAllowAddReturn($srvUser, $rtn);
    }

    /**
     * 香港馆申请入驻列表
     *
     * @param $inPath
     * @return string
     */
    public function pageEnterHk( $inPath ) {
        $url_params = $this->getUrlParams( $inPath );
        $page = isset( $url_params['page' ] ) ? zbj_lib_BaseUtils::getStr( $url_params['page'] ) : 1;
        $type = $this->getEnteredTypeId( 'hk' );

        $hk_applied_serv = new service_application();
        $limit = 20;
        $state = isset( $url_params['state'] ) ? $url_params['state'] : '';
        $result = $hk_applied_serv->getAppliedList( $page, $limit, $state, $type );
        $this->tplvar['hk_items'] = $result['items'];
        $this->tplvar['page_bar'] = $this->PageBar( $result['total'], $limit, $page, array( '', '/user/enterHk/' ) );
        $this->tplvar['hk_state'] = $state;
        $this->tplvar['type'] = $type;

        return $this->render( 'user/hk/hk_applied_list.html', $this->tplvar );
    }

    /**
     * 香港馆申请入驻状态变化日志
     *
     * @param $inPath
     * @return string
     */
    public function pageAppliedLog( $inPath ) {
        $url_params = $this->getUrlParams( $inPath );
        $page = isset( $url_params['page' ] ) ? zbj_lib_BaseUtils::getStr( $url_params['page'] ) : 1;
        $type = isset( $url_params['type'] ) ? zbj_lib_BaseUtils::getStr( $url_params['type'], 'int' ) : 0;
        $tpl = 'user/hk/hk_applied_logs.html';

        if ( $type === $this->getEnteredTypeId('album')) {
            $tpl = 'user/album/album_applied_logs.html';
        }

        $applied_serv = new service_application();
        $limit = 20;
        $result = $applied_serv->getAppliedLog( $page, $type, $limit );
        $this->tplvar['hk_items'] = $result->items;
        $this->tplvar['page_bar'] = $this->PageBar( $result->totalSize, $limit, $page, array( '', '/user/appliedLog/' )  );

        return $this->render( $tpl, $this->tplvar );
    }

    /**
     * 设置申请人的相关状态
     *
     * @param $inPath
     * @return mixed
     */
    public function pageSetState( $inPath ) {
        $url_params = $this->getUrlParams( $inPath );
        $uid = isset( $url_params['uid'] ) ? intval( $url_params['uid'] ) : 0;
        $typeid = isset( $url_params['type'] ) ? intval( $url_params['type'] ) : 0;
        $tpl_params = $this->setState( $typeid, $uid );

        return $this->render( $tpl_params['tpl'], $tpl_params );
    }

    /**
     * 画册频道申请入驻列表
     *
     * @param $inPath
     * @return string
     */
    public function pageEnterAlbum( $inPath ) {
        $url_params = $this->getUrlParams( $inPath );
        $page = isset( $url_params['page' ] ) ? zbj_lib_BaseUtils::getStr( $url_params['page'] ) : 1;
        $type = $this->getEnteredTypeId();
		
        $applied_serv = new service_application();
        $limit = 20;
        $state = isset( $url_params['state'] ) ? $url_params['state'] : '';
        $result = $applied_serv->getAppliedList( $page, $limit, $state, $type );
        $this->tplvar['album_items'] = $result['items'];
        $this->tplvar['page_bar'] = $this->PageBar( $result['total'], $limit, $page, array( '', '/user/enterHk/' )  );
        $this->tplvar['album_state'] = $state;
        $this->tplvar['type'] = $type;

        return $this->render( 'user/album/album_applied_list.html', $this->tplvar );
    }

    /**
     * 设置香港馆，画册入驻的相关状态
     *
     * @param integer $typeid
     * @param integer $uid
     * @return array
     */
    protected function setState( $typeid, $uid ) {
        $cid = zbj_lib_BaseUtils::getStr( $_REQUEST['cw_id'], 'int' );
        $applied_serv = new service_application();
        $type = zbj_lib_BaseUtils::getStr( $_REQUEST['type'], 'int' );
        $type = $typeid ? $typeid : $type;
        $redirect_url = '/user/enterHk';
        $tpl_params = array(
            'tpl' => 'user/hk/hk_applied_info.html',
            'typeid' => $type
        );

        switch ( $type ) {
            case $this->getEnteredTypeId('album'):
                $tpl_params['tpl'] = 'user/album/album_applied_info.html';
                $redirect_url = '/user/enterAlbum';
                break;
        }

        // Modify the state of the specific application
        if ( $cid > 0 ) {
            $state = zbj_lib_BaseUtils::getStr( $_POST['state'], 'int' );
            $punished_days = zbj_lib_BaseUtils::getStr( $_POST['punishment'], 'int' );

            if ( $cid <= 0 ) {
                $tpl_params['applied_info']['err'] = '保存失败,请重试';
            }
            else {
                if ( false !== $applied_serv->updateAppliedState( $cid, $state, $punished_days, $this->_userid, $type )) {
                    $this->redirect( $redirect_url );
                    exit;
                }
                else {
                    $tpl_params['applied_info']['err'] = '保存失败';
                    $tpl_params['applied_info'] = $applied_serv->getApplications( $uid );
                }
            }
        }
        else {
            $tpl_params['applied_info'] = $applied_serv->getApplications( $uid );
        }

        return $tpl_params;
    }

    /**
     * 获取相关类型ID
     *
     * @return array
     */
    protected function getEnteredTypeId( $key = 'album' ) {
        $types = array(
            'album' => 173,
            'hk' => ( zbj_lib_Constant::DOMAIN == 'zhubajie.com' ? 251 : 231 )
        );

        return isset( $types[$key] ) ? $types[$key] : 0;
    }

	/**
	 * 认证信息同步异极付
	 */
	public function pageConfidenceCertify($inPath) {
		try {
			$urlvalue = $this->getUrlParams($inPath);
			$uid = intval($urlvalue['uid']);
			if(!$uid){
				return $this->ShowMsg('参数错误');
			}	
			zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
			$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
			zbj_lib_ApiClient::build($auth_service);
						
			$query_params = new com\zhubajie\user\dataobject\auth\QueryParamsDO();
			$query_params->user_id = $uid;
			$query_params->status = 2;
			$auth_info = $auth_service->query($query_params);
			$msg = "此用户没有审核通过的认证信息，不能推送到易极付";
			if ($auth_info->success) {
				if (!empty($auth_info->data)) {
					foreach ($auth_info->data as $v) {
						if ($v['enable']==1) {
							switch ($v['auth_type']) {
								case 1:
									$result = $auth_service->confidenceCertifyPersonal($v['check_id']);
									break;
								case 2:
									$result = $auth_service->confidenceAbroadPersonal($v['check_id']);
									break;
								case 4:
									$result = $auth_service->confidenceCertifyCorporate($v['check_id']);
									break;
								case 5:
									$result = $auth_service->confidenceAbroadCorporate($v['check_id']);
									break;
								default:
									break;
							}
							if ($result->success) {
								$msg = '操作成功';
								break;
							}
						}

					}
				}
			}else{
				$msg = $auth_info->message;
			}
				
			if (! $result->success && !empty($result->message)) {
				$msg = $result->message;
			}
			return $this->ShowMsg($msg);
		} catch (Exception $e) {
			return $this->ShowMsg( "系统出错：" . $e->getMessage());
		}
	}
    
	/**
	 * 认证操作记录
	 */
	public function pageAuthVerifyLog() {
		return false;
		$check_id = zbj_lib_BaseUtils::getStr($_REQUEST['check_id']);
		try {
			if(!$check_id){
				return '参数错误';
			}
			zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
			$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
			zbj_lib_ApiClient::build($auth_service);

			$sLog = new service_log ();
			$list = $sLog->getRemarkLog($check_id,'realauth');
			$status_type = $auth_service->getStatusType();
			if (!empty($list->items)) {
				foreach ($list->items as $k=>$v) {
					if (!empty($v['content'])) {
						$content = explode("&&&", $v['content']);
						$status_name = $status_type[$content[0]];
						if (!empty($content[1])) {
							$reason = "，原因：".$content[1];
						}
						$list->items[$k]['msg'] = $status_name.$reason;
					}else{
						$list->items[$k]['msg'] = '';
					}		
				}
			}
				
		} catch (Exception $e) {
			return "系统出错：" . $e->getMessage();
		}
		$this->tplvar['list'] = $list; 
		return $this->render('user/cert/verifylog.html', $this->tplvar);
	}

	public function pageCertAuthTemp(){
		$cid = zbj_lib_BaseUtils::getstr($_GET['cid']);
		$real_name = zbj_lib_BaseUtils::getStr($_GET['realName']);
		try {
			zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
			$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
			zbj_lib_ApiClient::build($auth_service);
			 $res=$auth_service->getRealInfo($cid, $real_name);
			 echo'<pre>';
			 print_r($res);
			 echo'</pre>';
		} catch (Exception $e) {
			return $e->getMessage();
		}
		return json_encode($res);
	}
	
	/**
	 * 用户是否进行了二次鉴证
	 * 
	 * @return boolean
	 */
	public function secondAuthCheck() {
		$second_auth_token = $_COOKIE['second_auth'];
		
		$cache = new zbj_lib_cache('memcache');
		$cache_name = 'second_auth_' . $this->_userid;
		if ($second_auth_token && ($second_auth_token == $cache->get($cache_name))) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * 用户信息二次鉴证
	 */
	public function pageSecondAuth() {
		$user_id = zbj_lib_BaseUtils::getStr($_GET['uid']);
		
		if ($_POST) {
			$auth_user = zbj_lib_BaseUtils::getStr($_POST['auth_user']);
			$auth_passwd = zbj_lib_BaseUtils::getStr($_POST['auth_passwd']);
			if (! $auth_user) {
				return $this->printmsg('请输入鉴权用户', 0, 'auth_user');
			}
			if (! $auth_passwd) {
				return $this->printmsg('请输入用户密码', 0, 'auth_passwd');
			}
			
			$m_cpuser = new zbj_model_cp_user();
			$user_info = $m_cpuser->selectOne(array('email' => $auth_user . '@zhubajie.com', 'group_id != 22 and isleave != 1'));
			if ($user_info) {
				$s_user = new service_cpuser($user_info['user_id']);
				if (md5($auth_passwd) == $s_user->get('info.password')) {
					$second_auth_token = $user_info['user_id'] . $this->_userid . uniqid();
					setcookie('second_auth', base64_encode($second_auth_token), 0, '/');
					setcookie('second_auth_user', base64_encode($auth_user), time() + 86400, '/');

					$cache = new zbj_lib_cache('memcache');
					$cache_name = 'second_auth_' . $this->_userid;
					$cache->set($cache_name, base64_encode($second_auth_token), 86400);
				} else {
					return $this->printmsg("鉴权失败：用户不存在或密码错误", 0);
				}
			} else {
				return $this->printmsg("鉴权失败：用户不存在或密码错误", 0);
			}
			
			$this->addLog($user_id, $this->_nickname . '使用账号' . $auth_user . '进行了二次鉴权', 'user');
			return $this->printmsg("鉴权成功", 2, null, $_SERVER['HTTP_REFERER']);
		} else {
			$auth_user = zbj_lib_BaseUtils::getStr(base64_decode($_COOKIE['second_auth_user']));
			
			return $this->render('user/ajax/secondAuth.dialog.html', array('user_id' => $user_id, 'auth_user' => $auth_user));
		}
	}


    /**
     *签约服务商管理
     *
     */
    public function pageUserTrain($inPath) {

        $state = intval($_GET['state']);
        $opstate = intval($_GET['opstate']);
        $user_id = intval($_GET['user_id']);

        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET);

        if( $user_id && $opstate && in_array($opstate,array(1,2,3)))
        {

            try
            {
                $instance = new com\zhubajie\user\interfaces\UserTrainServiceClient(NULL);
                zbj_lib_ApiClient::build($instance);
                $param = new com\zhubajie\user\dataobject\usertrain\UpdateUserTrainStateDO;
                $param->user_id = $user_id;
                $param->train_type = 1;
                $param->state = $opstate;
                $result = $instance->updateUserTrainState($param);

                if($result && $result->is_success ===true)
                {
                    return $this->printmsg('操作成功',2,null, $this->getRecommendUserRefUrl('/user/UserTrain'));
                }else{
                    throw new Exception("操作失败！".$result->message);
                }

            }catch (Exception $e)
            {
                return $this->printmsg( $e->getMessage(),2,null, $this->getRecommendUserRefUrl('/user/UserTrain'));
            }

        }


        $urlparam = $this->getUrlParams($inPath);
        $page = (int)$urlparam['page'] ? (int)$urlparam['page'] : 1;
        $limit = 20;
        $realTypes = array("无","个人","企业","政府","学校");
        $teamSizes = array("3人以下","3-5人","5-10人","10-20人","20-50人","50-100人","100人以上");
        $states     = array("-1"=>"全部","0"=>"待受理","1"=>"已安排培训","2"=>"培训不通过","3"=>"培训通过",);
        $this->tplvar['states']=$states;
        $condition = array();
        $condition[] = 'train_type=1  ';

        $instance = new com\zhubajie\user\interfaces\UserTrainServiceClient(NULL);
        zbj_lib_ApiClient::build($instance);
        $param = new com\zhubajie\user\dataobject\usertrain\GetUserTrainListParaDO;
        $param->train_type = 1 ;
        $param->page = $page ;
        $param->page_size = $limit ;

        if ( !empty($_GET)) {

            //搜索
            $user_id =  zbj_lib_BaseUtils::getStr($_GET['user_id']);;
            $state   =  intval( $_GET['state']);
            $sd      =  zbj_lib_BaseUtils::getStr($_GET['sd']);
            $ed      =  zbj_lib_BaseUtils::getStr($_GET['ed']);

            $state!= -1 && $param->state = $state ;
            $param->date_start = $sd;
            $param->date_end = $ed;
            $param->brandname = $user_id;
            $param->sd = $sd;

            $this->tplvar ['search'] = $_GET;
        }

        $result = $instance->getUserTrainList($param);
        $total = 0 ;
        $list = array();
        if($result && $result->success === true)
        {
            $total = $result->total;
            $fileds = array("user_id","qq","mobile","contacts","team_size","train_type","state","dateymd","dateline","realtype");

            if ($result->data) {
                foreach ($result->data as $k => $val) {
                    $data = array();
                    foreach($fileds as $filed)
                    {
                        $data[$filed] = $val->$filed;
                    }

                    $data['realtype'] = $realTypes[$val->realtype];
                    $data['team_size'] = $teamSizes[$val->team_size];
                    $data['state_name'] =  $states[$val->state];
                    array_push($list , $data);
                }
            }
        }

        $this->tplvar['list'] = $list;
        $this->tplvar['pagebar'] = $this->PageBar($total, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
        $this->tplvar['total'] = $total;
        return $this->render('user/train/list.html', $this->tplvar);
    }
	
    /**
     * get sell follow info
     * 
     * @author yuanzhuang
     * @copyright 2015-06-05 
     */
  	private function _get_sell_follow_info($user_id) {
  		lib_BaseUtils::apiInit(10, array('membership_sdk'));
  		$follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
  		lib_BaseUtils::apigetclient($follow_service);
  		
  		$query_params = new com\zhubajie\membership\dataobject\Follow\QueryParamsDO();
  		$query_params->user_id = $user_id;
  		
  		$response = $follow_service->query($query_params);
  		if ($response->success && is_array($response->data)) {
  			return $response->data[0];
  		} else {
  			return array();
  		}
  	}

    /**
     * 服务商 上班白名单
     * @param $inPath
     * @return mixed
     */
    public function pageOndutyWhiteList($inPath) {

        $url_params = $this->getUrlParams( $inPath );
        $page = intval($url_params['page'])?:1;
        $user_id = zbj_lib_BaseUtils::getStr($_POST['user_id']);
        $date = zbj_lib_BaseUtils::getStr($_POST['date']);
        $id = zbj_lib_BaseUtils::getStr($_GET['id']);

        try{

            zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,10,array("mobile_api_sdk"));
            $service = new com\zhubajie\mapi\interfaces\DutyServiceClient(null);
            zbj_lib_ApiClient::build($service);

            //新增
            if (zbj_lib_BaseUtils::isAjax()) {

                $op = zbj_lib_BaseUtils::getStr($_GET['op'])?:"add";

                if($op =="add"){
                    if(!$user_id || !$date){
                        throw new Exception("请输入正确服务商id和日期！");
                    }

                    $userSrv = new zbj_service_user(intval($user_id));

                    $whiteParamDo = new com\zhubajie\mapi\dataobject\duty\WhiteParamDo(null);
                    $whiteParamDo->userId = (int)$user_id;
                    $whiteParamDo->providerBrandname=$userSrv->get("info.brandname");
                    $whiteParamDo->date =$date;
                    $response = $service->addDutyWhiteList($whiteParamDo);
                    if(!$response->success){
                        throw new Exception($response->message);
                    }

                    return $this->printmsg("添加成功！");
                    exit;
                }elseif($op=="delete"){
                    if(!$id){
                        throw new Exception("请选择要删除记录！");
                    }
                    $response = $service->delDutyWhiteList($id);
                    if(!$response->success){
                        throw new Exception($response->message);
                    }

                    return $this->printmsg("删除成功！");
                    exit;
                }

            }

            //每页显示数
            $limit = 30;

            $QueryWhiteListDO = new com\zhubajie\mapi\dataobject\duty\QueryWhiteListDO(null);
            $QueryWhiteListDO->page =$page;
            $QueryWhiteListDO->pageSize=$limit;

            if(zbj_lib_BaseUtils::isNumberNew($user_id)){
                $userSrv = new zbj_service_user(intval($user_id));
                $QueryWhiteListDO->userId=$user_id;
                $QueryWhiteListDO->providerBrandname=$userSrv->get("info.brandname");
            }else{
                $QueryWhiteListDO->providerBrandname=$user_id;
            }
            $QueryWhiteListDO->date=$date;

            $response = $service->queryDutyWhiteList($QueryWhiteListDO);
            if(!$response->success){
                throw new Exception($response->message);
            }

            $list = array();
            foreach((array)$response->whiteList as $val){
                $list[] = (array)$val;
            }
            $this->tplvar['list'] = $list;
            $total = $response->total;
            $page = $page;
            $this->tplvar['pagebar'] = $this->PageBar($total, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
            $this->tplvar['total'] = $total;
            $this->tplvar['search']=$_POST;
            return $this->render('user/onduty/list.html', $this->tplvar);

        }catch (Exception $e){
            return $this->printmsg($e->getMessage(),0);
        }

    }


  	/**
  	 * get level config
  	 *
  	 * @author yuanzhuang
  	 * @copyright 2015-06-05
  	 */
  	private function _get_level_config($follow_type = 1) {
  		$cache = new zbj_lib_cache('memcache');
  		$cache_name = 'sell_' . $follow_type . '_level_config_20150605';
  		$config = json_decode($cache->get($cache_name), true);
  		if (! $config) {
  			lib_BaseUtils::apiInit(10, array('membership_sdk'));
  			$follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
  			lib_BaseUtils::apigetclient($follow_service);
  			
  			if (1 == $follow_type) {
  				$config = $follow_service->getFollowLevelConfig();
  			} else {
  				$config = $follow_service->getVisitLevelConfig();
  			}
  			
  			$cache->set($cache_name, json_encode($config));
  		}
  		
  		return $config;
  	}
  	
  	/**
  	 * get follow purpose config
  	 *
  	 * @author yuanzhuang
  	 * @copyright 2015-06-05
  	 */
  	private function _get_follow_purpose_config() {
  		$cache = new zbj_lib_cache('memcache');
  		$cache_name = 'follow_purpose_config_20150606';
  		$config = json_decode($cache->get($cache_name), true);
  		if (! $config) {
  			lib_BaseUtils::apiInit(10, array('membership_sdk'));
  			$follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
  			lib_BaseUtils::apigetclient($follow_service);
  				
  			$config = $follow_service->getFollowPurposeConfig();	
  			
  			$cache->set($cache_name, json_encode($config));
  		}
  	
  		return $config;
  	}
  	
  	/**
  	 * get follow mode config
  	 *
  	 * @author yuanzhuang
  	 * @copyright 2015-06-05
  	 */
  	private function _get_follow_mode_config() {
  		$cache = new zbj_lib_cache('memcache');
  		$cache_name = 'follow_mode_config_20150606';
  		$config = json_decode($cache->get($cache_name), true);
  		if (! $config) {
  			lib_BaseUtils::apiInit(10, array('membership_sdk'));
  			$follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
  			lib_BaseUtils::apigetclient($follow_service);
  	
  			$config = $follow_service->getFollowModeConfig();
  				
  			$cache->set($cache_name, json_encode($config));
  		}
  		 
  		return $config;
  	}
  	
  	/**
  	 * 暂停和恢复虚拟纳税人资格
  	 * @param array $inPath
  	 * @return mixed
  	 */
  	public function pagePauseTaxPayer($inPath) {
  		$url_params = $this->getUrlParams($inPath);
  		$user_id = zbj_lib_BaseUtils::getStr($url_params['uid']);
  		if (! $user_id) {
  			return $this->printmsg("参数不对", 1);
  		}
  		
  		$taxpayerModel = new zbj_model_mb_billtaxpayer();
  		$taxpayer = $taxpayerModel->selectOne(array('user_id'=>$user_id),'tp_id,state');
  		$update_data = array();
  		$operate_name = '';
  		if($taxpayer){
  			if($taxpayer['state'] == 0){ //正常
  				$update_data['state'] = 1;
  				$operate_name = '暂停';
  			}else if($taxpayer['state'] == 1){ //已暂停
  				$update_data['state'] = 0;
  				$operate_name = '恢复';
  			}else{
  				return $this->printmsg("未能操作暂停之外的功能", 1);
  			}
  			//其他状态暂不操作
  			
  			if($taxpayerModel->update(array('user_id'=>$user_id),$update_data) === false){
  				return $this->printmsg("状态更新失败", 1);
  			}else{
  				//写日志
  				$s_managercustom = new zbj_service_manager($this->_userid);
  				$log_rs = $this->addLog($user_id, $s_managercustom->get("name") . $operate_name .'了'.$user_id.'虚拟纳税人资格', 'user');
  				return $this->printmsg ("操作成功。", 2, null, $_SERVER ['HTTP_REFERER'] );
  			}
  			
  		}else{
  			return $this->printmsg ( "该用户不是虚拟纳税人。", 1);
  		}
  	}
}

