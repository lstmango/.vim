<?php
use com\zhubajie\pay\dataobject\trade\PublicParamsDO;
use com\zhubajie\pay\interfaces\TradeServiceClient;
use com\zhubajie\pay\dataobject\trade\OrderDataDO;
use com\zhubajie\pay\dataobject\trade\OrdersDO;
use com\zhubajie\pay\dataobject\trade\PayeeDO;
use com\zhubajie\pay\dataobject\trade\ServiceType;
use com\zhubajie\pay\dataobject\trade\TradeType;
use com\zhubajie\pay\dataobject\trade\ResultDO;
use com\zhubajie\pay\interfaces\TradefixServiceClient;
use com\zhubajie\user\dataobject\bid\BID_UP_TYPE;
use com\zhubajie\pay\interfaces\PayServiceClient;
use com\zhubajie\pay\dataobject\pay\QueryResultDO;
use com\zhubajie\pay\dataobject\pay\PSNDataDO;

use com\zhubajie\pay\dataobject\pay\PayUserParamsDO;
use com\zhubajie\pay\dataobject\pay\ChargeOrderParamsDO;
use com\zhubajie\pay\dataobject\pay\ChargeMode;
use com\zhubajie\pay\dataobject\pay\ChargeOption;

use com\zhubajie\task\dataobject\worktaskstep\WorkTaskStepDTO;
use com\zhubajie\task\interfaces\WorkQuoteServiceClient;
use com\zhubajie\task\interfaces\WorkTaskStepServiceClient;

use com\zhubajie\task\interfaces\EventSystemServiceClient;
use com\zhubajie\task\dataobject\eventsystem\EventDTO;

/**
 * 工具类
 * @author 
 * @version 
 * @copyright zhubajie.com
 */
class controller_tools extends components_basepage{
	
	public function __construct() {
		parent::__construct();
		
		if($this->_userid ==18 || $_GET['key'] == "asdfaksdfhkjasdf"){}
		else{exit('bad request!');}
	}
	
	/**
	 * 处理掉单，可直接对订单上帐，不可随意使用
	 * */
	function pagePayOrder(){
		$plid = intval($_GET['plid']);
		if($plid<=0){
			echo 'bad paylog id:'.$plid.'<br>'; return false;
		}
		$payapi =  new zbj_service_payapi();
		$deal_api = $payapi->getDealObject($plid);
		$paylog = $deal_api->get('*');
		
		//检查是否允许支付
		if($paylog['state'] != 0 || !$deal_api->checkPay()){
			echo 'order id:'.$paylog['order_id'].' '.$deal_api->getError().'<br>';  return false;
		}else if(empty($paylog['psn'])){
			echo 'order id:'.$paylog['order_id'].' psn is null<br>';  return false;
		}else if(!in_array($paylog['type'],array(1,2))){
			echo 'order id:'.$paylog['order_id'].' type not in(1,2)<br>';; return false;
		}
		
		// 检查psn是否已消费
    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
		$zbjapi = new PayServiceClient(NULL);
		zbj_lib_ApiClient::build($zbjapi);
		
		try{
			$result = $zbjapi->query($paylog['psn']);
		}catch(Exception $e){
			echo $e->getMessage(); return false;
		}
		var_dump($result);
		$result = (array)$result;
		if(intval($result['success'])!=1){
			echo $result['message']; return false;
		}
		
		zbj_model_api::destroy();
		unset($payapi);
		$payapi =  new zbj_service_payapi();
		$paysuc = '<font color="green">pay ok</font>,order id:'.$paylog['order_id'].'<br>';		
		$psndata = (array)$result['psn_data'];
		if($psndata['charge_amount']>0 && $psndata['refund_amount']==0 && 
			$psndata['consume_amount']==0 && $psndata['transit_refund_amount']==0){ // 未消费过
			if(($backurl = $payapi->payback($plid)) === false){ // 自动消费并做交易上帐
				echo '<font color="red">pay fail</font>,order id:'.$paylog['order_id'].' msg:'.$payapi->getError().'<br>'; return false;
			}else{
				// 记录自动上帐的日志
				$this->savePayApiLog('p',$paylog);
				echo $paysuc;	return true;
			}
		}else if($psndata['charge_amount']>0 && round($psndata['consume_amount'],2)==round($psndata['charge_amount'],2)){ // 消费过
			if(($backurl = $payapi->dispose_order($plid)) === false){ // 自动做交易上帐
				echo '<font color="red">pay fail</font>,order id:'.$paylog['order_id'].' msg:'.$payapi->getError().'<br>'; return false;
			}else{
				// 记录自动上帐的日志
				$this->savePayApiLog('p',$paylog);
				echo $paysuc;	return true;
			}
		}
		
		unset($payapi);
		echo 'error';
		return false;
		
	}
	
	/**
	 * 存储接口日志
	 * */
	private function savePayApiLog($msg,$paylog){
		if(is_array($paylog) && !empty($paylog)){
			$option = array('paylog_id'=>$paylog['paylog_id'],'key'=>$paylog['key'],'psn'=>$paylog['psn']);
		}
		
		$datalog = array(
			'request_no'=> $paylog['key'],
			'service'	=> 'auto_task',
			'amount'	=> round((float)$paylog['amount'],2),
			'datetime'	=> time(),
			'dateymd'	=> date('Y-m-d H:i:s',time()),
			'msg'		=> $msg,
			'option'	=> !empty($option)?json_encode($option):'',
		);
		
		$apilog = zbj_model_api::get('zbj_model_lg_apilog');
		return $apilog->insert($datalog)?true:false;
	}

	//临时用于查看im权限
	function pagegetImCacheInfoByTaskID(){
		$tid = intval($_GET['tid']);
		$task = new zbj_service_task($tid);
		$task = $task->init();
		$fid = $task->get('user_id');
		$sign = new zbj_model_mk_tasksign();
		$rs = (array) $sign->select(array('task_id'=>$tid),'user_id')->items;
		$cache = new zbj_lib_cache('memcache');
		foreach($rs as $v){
			$cacheName = "webim_fid_{$fid}_tid_{$v['user_id']}";
			echo "{$v['user_id']}<br>";
			var_dump($cache->get($cacheName));
			var_dump($cache->get('s_'.$cacheName));
		}
	}
	
	/**
	 * 同意开始工作【雇佣】
	 * */
	function pagePost($inparam){
		$params = $this->getUrlParams($inparam);
		$params = array_merge($params,$_GET);
		
		$url = $params['url'];
		$url = empty($url)?'http://task.zhubajie.com/api/sop-tid-4163689-t-3':$url;
		$inputs = array();
		if(!empty($params)){
			foreach($params as $k=>$v){
				$inputs[] = "<input type=\"text\" name=\"{$k}\" value=\"{$v}\">";
			}
		}
		$inputs = implode('<br>', $inputs);
		
		$html = "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /></head><body><form action=\"{$url}\" method=\"POST\">{$inputs}<br><br><input type=\"submit\" value=\"Submit\"/></form></body></html>";
		echo $html;
	}


    /**
     * 更改工作台节点状态
     * @param $inparam
     * @return bool
     */
    function pageUpdateWorkBench($inparam){
        $params = $this->getUrlParams($inparam);
        $params = array_merge($params,$_GET);
        $wid = intval($params['wid']);
        $status = intval($params['status']);

        if($wid<=0 || !in_array($status, array(1,2,3))){ exit('数据异常'); }
        $workbench = new zbj_service_workbench();
        $workbench->setId($wid);
        $work = $workbench->get('*');
        if(empty($work)){
            exit('工作台id异常');
        }

        $workbench->set('node_state', $status);
        return $workbench->save()?true:false;
    }

	/**
	 * 重置中标服务商工作台
	 * @param $inparam
	 * @return bool
	 */
	function pageDeleteWorkBenchByWorkId(){

		$work_id = intval($_GET['work_id']);

		if(!$work_id){
			echo "bad";exit;
		}

		$srvWF = new zbj_model_mk_workbench();
		$workflow = $srvWF->delete(array("work_id"=>$work_id));
		var_dump($workflow);

	}
	
	/**
	 * 协议步骤【交易协议】
	 * */
	function pageAgreeStep($inparam){
		$params = $this->getUrlParams($inparam);
		$params = array_merge($params,$_GET);
		
		$wid = intval($params['wid']);
		$step = intval($params['step']);
		if($wid<=0){ exit('bad wid'); }
		
		$srvWork = new zbj_service_works($wid);
		
		$set = $srvWork->upAgreementStep($step);
		
		var_dump($set);
	}
	
	/**
	 * 开启协议
	 * */
	function pageOpenAgreement($inparam){
		$params = $this->getUrlParams($inparam);
		$params = array_merge($params,$_GET);
		
		$tid = intval($params['tid']);
		if($tid<=0){ exit('bad tid'); }
		
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();
		if($srvTask->get('task_id') == 0){
			exit('task not exists!');
		}
		
		$opened = $srvTask->get('task_extends.agree_openstate');
		if($opened == 1){
			exit('already opened!');
		}
		$back = $srvTask->updateTaskExtends(array('agree_openstate'=>1));
		var_dump($back);
	}

	
	/**
	 * 同步并初始化网建类交易顾问
	 */
	function pageSynWebManager($inPath) {		
		$url = $this->getUrlParams($inPath);
		$url = array_merge($url,$_GET);
		
		// 取出所有参与新撮合运营的交易顾问
		$tmpstr = trim($_GET['mid']);
		$tmparray = explode(',',$tmpstr);
		$tmparray = (array)$tmparray;
		$getCounselor = array();
		foreach($tmparray as $id){
			$id = intval($id);
			if($id>0) $getCounselor[] = $id;
		}
		
		if(empty($getCounselor)){
			$srvAlloter1 = new zbj_service_taskalloter();
			$getCounselor = $srvAlloter1->getAllotDimensionManagers(0,false,false);
		}
		$getCounselor = (array)$getCounselor;
		
		if(empty($getCounselor)) exit('have no data!');
		$getCounselor = array_unique($getCounselor);
		
		$allotroleModel = new zbj_model_mk_taskallotrole();
		$allotconfModel = new zbj_model_mk_taskallotconfig();
		
		if($_GET['rmall'] == 1){
			echo '<br>----------删除交易顾问数据-----------<br>';
			$rmrs = $allotroleModel->delete('manager_id>=1');
			var_dump($rmrs);echo '<br>';
			$rmrs = $allotconfModel->delete('config_id>=1');
			var_dump($rmrs);echo '<br>';
		}		
		
		echo '<br>----------同步交易顾问数据-----------<br>';
		define('DEBUG',1);
		print_r($getCounselor);
		
		$sqlarray = array();
		$time = time();
		$ymd = date('Y-m-d');
		
		$dbdata = $allotroleModel->select('manager_id in('.implode(',',$getCounselor).')','manager_id')->items;
		$dbdata = (array)$dbdata;
		$dbCounselor = array();
		foreach($dbdata as $manage){
			$manage['manager_id']>0 && $dbCounselor[] = $manage['manager_id'];
		}
		if(!empty($dbCounselor)){
			$allCounselor = array_diff($getCounselor,$dbCounselor);
		}else{
			$allCounselor = $getCounselor;
		}
		
		echo '<br>not in:';print_r($allCounselor);echo '<br>';
		
		foreach($allCounselor as $k=>$counselor){
			$srvManager = new zbj_service_manager($counselor);
			$manager = $srvManager->get('*');
			$mname = !empty($manager['truename'])?$manager['truename']:$manager['name'];
			$sqlarray[] = "({$counselor},'{$mname}',1,'{$ymd}',{$time})";
		}
		if(empty($sqlarray)){ echo 'have no counselor<br>'; }
		else{
			$fields = '`manager_id`,`manager_name`,`state`,`lastallot_ymd`,`lastallot_time`';
			$sql = "INSERT INTO mk_task_allot_role({$fields}) VALUES".implode(',',$sqlarray);
			
			$back = $allotroleModel->query($sql);
			var_dump($back);echo '<br>';
		}
		
		echo '<br>----------插入基础数据-----------<br>';
		
		// 插入基础数据
				
		$sqlarray = array();
		foreach($allCounselor as $k=>$counselor){
			$sqlarray[] = "({$counselor},1,0,500,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},2,501,1000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},3,1001,2000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},4,2001,3000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},5,3001,5000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},6,5001,10000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},7,10001,20000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},8,20001,50000,0,0,0,0,0,0)";
			$sqlarray[] = "({$counselor},9,50001,100000,0,0,0,0,0,0)";
		}
		if(empty($sqlarray)){ echo '[all has]<br>'; }
		else{
			$fields = '`manager_id`,`level`,`minamount`,`maxamount`,`lastallottime`,`totalnum`,`allotednum`,`allotedamount`,`year`,`month`';
			$sql = "INSERT INTO mk_task_allot_config({$fields}) VALUES".implode(',',$sqlarray);
			
			$back = $allotconfModel->query($sql);
			var_dump($back);echo '<br>';
		}
		
		$errored = array();
		foreach($allCounselor as $counselor){
			zbj_model_api::destroy(); // 防止长时间运行导致数据库连接超时
			$srvAlloter = new zbj_service_taskalloter($counselor);
			$reset = $srvAlloter->resetManagerAllotData();
			if($reset !== true){
				$errored[$counselor] = array('msg'=>'[1]'.$srvAlloter->getError());
				unset($srvAlloter);
				continue;
			}
			$reset = $srvAlloter->resetManagerAllotConfig();
			if($reset !== true){
				$errored[$counselor] = array('msg'=>'[2]'.$srvAlloter->getError());
			}
		}
		echo '<br>syn:done!<br>';
		print_r($errored);
	}
	

	/**
	 * 对某个任务进行自动评价
	 */
	function pageAutoEvaluate($inPath) {
		$url = $this->getUrlParams($inPath);
		$url = array_merge($url,$_GET);
		$task_id = zbj_lib_BaseUtils::getStr($url['tid'], 'int');
		$sTask = new zbj_service_task($task_id);
		$sTask = $sTask->init();
		$data = $sTask->get('task_id');
		if(!$data) {
			exit('任务不存在');
		}
		$condition = array(
			"state"=> 1,
			"stype"=> 16,
			"isevaluation"=> 1,
			"isevaluation_buy"=> 0,//雇主未评
		);
		$condition[] = "price!=refund_amount"; // 全额退款的，不评价
		$condition['product_pkid'] = $task_id;
		$model_order = zbj_model_api::get('zbj_model_fn_order');

		$evaluate = $model_order->selectOne($condition);
		if($evaluate){
			//雇主评价
			$data = array(
				'comment'=>'好评!',
				'score'=>2,
			);
			$e = new zbj_service_evaluation();
			$user = new zbj_service_user($evaluate['user_id']);
			$execrs = $e->create($evaluate['order_id'], $user, $data, NULL, true);
			if(!$execrs){
				echo '雇主评价失败，原因:'.$e->getError();
			}

			//服务商评价
			$data = array(
				'comment'=>'好评!',
				'score'=>2,
			);
			$e = new zbj_service_evaluation();
			$user = new zbj_service_user($evaluate['sl_user_id']);
			$execrs = $e->create($evaluate['order_id'], $user, $data, NULL, true);
			if(!$execrs){
				echo '服务商评价失败，原因:'.$e->getError();
			}
			echo '成功！';
			exit();
		}
		exit('该任务不需要评价');
	}
	/**
	* 临时修复没有增值服务订单的退款
	*/
	function pagetempbugfixppplll(){
		zbj_lib_ApiClient::init('32476743f8ee81c5', '049fbb740441de9f4a067f8e7550dd18');
		$instance = new TradeServiceClient($input);
		zbj_lib_ApiClient::build($instance);
		$params = unserialize($_POST['params']);
		$orders = unserialize($_POST['orders']);
		$res = $instance->tradeRefund($params, $orders);
		print_r($res);
	}
	/**
	* 修复推广员问题
	*/
	function pageunionPaybugfixppplll(){
		zbj_lib_ApiClient::init('32476743f8ee81c5', '049fbb740441de9f4a067f8e7550dd18');
		$instance = new TradefixServiceClient($input);
		var_dump($instance);
		zbj_lib_ApiClient::build($instance);
		$amount = round($_GET['amount'], 2);
		$c_order_id = zbj_lib_BaseUtils::getStr($_GET['c_order_id']);
		$type = intval($_GET['type']) ? intval($_GET['type']) : 1;
		$res = $instance->unionPayFix($c_order_id, $amount, $type);
		var_dump($res);
	}
	
	/**
	* 临时转账接口（支持1->u 37->u）
	*/
	function pagetemptransferfixppplll(){
		zbj_lib_ApiClient::init('32476743f8ee81c5', '049fbb740441de9f4a067f8e7550dd18');
		$instance = new TradefixServiceClient($input);
		zbj_lib_ApiClient::build($instance);
		$params = unserialize($_POST['params']);
		$orders = unserialize($_POST['orders']);
		$res = $instance->transferFix($params, $orders);
		print_r($res);
	}
	/**
	* 对于掉单交易进行下账处理
	*/
	function pagetemptradeoffppplll(){
		zbj_lib_ApiClient::init('32476743f8ee81c5', '049fbb740441de9f4a067f8e7550dd18');
		$instance = new TradeServiceClient($input);
		zbj_lib_ApiClient::build($instance);
		$params = unserialize($_POST['params']);
		$psn = unserialize($_POST['psn']);
		$res = $instance->tradeOff($psn, $params);
		print_r($res);
	}

	//修复任务的中标fn_order丢失
	public function pageFixfnorderMiss()
	{
		$tid = intval($_GET['tid']);
		if(!$tid){
			exit('tid is missing');
		}
		$m_order = new zbj_model_fn_order();
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();
		$data = $srvTask->get('*');
		if(empty($data) || $data['state'] < 3){
			exit('任务不存在，或者不能更改');
		}
		$success_works = $srvTask->getSuccessWorkObject();
		if(!is_object($success_works)){
			exit('无中标信息');
		}
		$e = $m_order->selectOne(array('product_pkid'=>$tid, 'stype'=>16));
		if($e){
			exit('存在中标数据，不用修复');
		}
		try{
			$m_order->beginTransaction('mk');

			$title = $srvTask->get('title'). '#'. $success_works->getId(). '稿件中标';
			$ptype = $srvTask->getTaskToOrderMode();
			$task_id = $srvTask->getId();
			$mtype = 1;//交易类型
			$isevaluation = 1;//是否需要评价
			$iscfpay = 0;//是否确认付款
			$isexchange_file = (int)$srvTask->isNeedUpFile();//是否 交互源文件
			$pubOrder = $srvTask->getPubOrder();
			$paynoid = $success_works->getWorksPayNoId($ptype, $success_works->getId());

			//实例化一个交易
			$sale=new zbj_service_deal();
			$sale->setType($ptype);
			$order=$sale->Order();
			$order_info = array(
				'ptype'=>$ptype,
				'stype'=>16,
				'mtype'=>$mtype,
				'title'=>$title,
				'product_pkid'=>$task_id,
				'user_id'=>$srvTask->get('user_id'),
				'nickname'=>$srvTask->get('nickname'),
				'sl_user_id'=>$success_works->get('user_id'),
				'sl_nickname'=>$success_works->get('nickname'),
				'isexchange_file'=>$isexchange_file,
				'iscfpay'=>$iscfpay,
				'isevaluation'=>$isevaluation,
				'paynoid'=>$paynoid,
				'price'=>$srvTask->get('hosted_amount'),
				'at_price'=>$srvTask->get('hosted_amount'),
			);

			$order_data = array(
				array(
					'title'=>$title,
					'ptype'=>$ptype,
					'stype'=>16,
					'mtype'=>$mtype,	//设置交易类型 交易类型：0及时到账,1担保交易,2综合类型 
					'product_pkid'=>$success_works->getId(),
					'user_id'=>$srvTask->get('user_id'),
					'nickname'=>$srvTask->get('nickname'),
					'sl_user_id'=>$success_works->get('user_id'),
					'sl_nickname'=>$success_works->get('nickname'),
					'price'=>$srvTask->get('hosted_amount'),
					'at_price'=>$srvTask->get('hosted_amount'),
					'num'=>1,
				)
			);

			$order_id = $order->createOrder($order_info, $order_data);
			if ($order_id === false){
				throw new exception("创建订单失败 ". $order->getError());
			}
			$m_order->commit('mk,fn,mb');
			echo 'ok';
		}catch(Exception $e){
			$m_order->rollBack('mk,fn,mb');
			echo '异常：';
			echo $e->getMessage();
		}
	}
	//对交易按充值ID重新上帐
	//先按充值记录生成PSN，再把PSN消费到交易上。
	public function pageFixOrderPay()
	{
		$charge_id = (int)$_GET['charge_id'];
		$task_id = (int)$_GET['task_id'];
		if(empty($charge_id) || empty($task_id)) exit('参数不正常');

		$m1 = new zbj_model_fn_charge($charge_id);
		$data = $m1->get();

		$srvTask=new zbj_service_task($task_id);
		$srvTask=$srvTask->init();
		$task = $srvTask->get('*');

		$fnorder = new zbj_model_fn_order();
		$val = $fnorder->selectOne(array('product_pkid'=>$task_id,'stype'=>'30'));
		if(!$val){
			exit('无法读取托管记录');
		}else{
			$data_id = unserialize($val['option']);
			$data_id = $data_id['orderdata'][0]['data_id'];
			$fnorderdata = new zbj_model_fn_orderdata($data_id);
			$val = $fnorderdata->get();
			if(!$val){
				exit('无法读取order_data记录');
			}
		}
		if (!$data) {
			exit('无法读取领款记录。');
		}
		if ($data['is_discarded']=='1') {
			exit("已经废弃的记录不能再进行充值。" );
		}
		if ($data['rechargestatus']!='0') {
			exit("这一条记录已经使用，不能再次进行充值。" );
		}
		if(!$task){
			exit('任务不存在');
		}
		if($data['amount'] != $task['amount']){
			exit("领款金额与订单金额不匹配" );
		}

		zbj_lib_ApiClient::init('32476743f8ee81c5', '049fbb740441de9f4a067f8e7550dd18');

		$pay=new PayServiceClient(null);
		zbj_lib_ApiClient::build($pay);
		$request_no=time();
		$PayUserParamsDO=new PayUserParamsDO();
		$PayUserParamsDO->user_id=$task['user_id'];
		$PayUserParamsDO->ip=zbj_lib_BaseUtils::getIp();
		$ChargeOrderParamsDO=new ChargeOrderParamsDO();
		$ChargeOrderParamsDO->charge_mode=ChargeMode::OFFLINE_PAY;
		$ChargeOrderParamsDO->title=$task['title'];
		$ChargeOrderParamsDO->total_amount=$data['amount'];
		$ChargeOrderParamsDO->charge_chn_id=$data['fee_parent_id'];
		if($data['fee_id']){
			$m_fee=new zbj_model_fn_payfee($data['fee_id']);
			$ChargeOrderParamsDO->charge_bank_code=$m_fee->getData('fee_name');//银行名称
		}elseif($data['fee_parent_id']){
			$m_fee=new zbj_model_fn_payfee($data['fee_parent_id']);
			$ChargeOrderParamsDO->charge_bank_code=$m_fee->getData('fee_name');//银行名称
		}
		$charge_option=array();
		$charge_option[ChargeOption::BOSS_CHARGE_CODE]=$data['certificate'];
		$charge_option[ChargeOption::BOSS_USER_ID]=$data['input_uid'];
		$ChargeOrderParamsDO->charge_option=$charge_option;
		$ChargeOrderParamsDO->net_pay_charge_amount=$data['amount'];
		$ChargeOrderParamsDO->balance_pay_charge_amount=0;
		$ChargeOrderParamsDO->out_biz_no=$data['certificate'];

		$payinfo=$pay->createChargeOrder($request_no, $PayUserParamsDO, $ChargeOrderParamsDO);
		print_r($payinfo);

		if($payinfo->success==false){
			echo 'PSN获取失败';
			exit();
		}
		if (!$payinfo->psn_valid) {
			exit( "无效的PSN");
		}

		$instance = new TradeServiceClient(NULL);
		zbj_lib_ApiClient::build($instance);

		$params = new PublicParamsDO();
		$params->time = time();
		$params->token = md5($params->time);
		$params->request_no = zbj_lib_BaseUtils::getPayNoid();
		$params->amount = $val['at_price'];
		$params->payer = $val['user_id'];
		$params->services = 'tradeCreate';

		$order = new OrderDataDO();
		$order->subject = $val['title'];
		$order->amount = $val['at_price'];
		$order->c_order_id = $val['data_id'];
		$order->c_task_id = $val['product_pkid'];
		$order->trade_type = TradeType::HOSTED_TRADE;
		$order->stype_id = ServiceType::HOSTED_AMOUNT;
		
	 	try{
			$pms = new zbj_model_fn_mapping();
			$stype = $val['stype'];
			$ptype = $val['ptype'];
			$pmsd = $pms->ptypeMapping($ptype, $stype);
			if( isset($pmsd['new_ptype_id']) ) {
				$order->product_id = $pmsd['new_ptype_id'];
			}else{
				throw new Exception('product_id not found.stype:'.$stype.',ptype:'.$ptype);
			}
			$res = $instance->tradeCreate($payinfo->psn, $params, array($order));
			if(!is_object($res) || !isset($res->success)) {
				throw new Exception(var_export($res,true));
			}
			if($res->success != 1) {
				throw new Exception($res->message);
			}
			echo '[成功]';
	 	}catch(Exception $e){
	 		$log = $e->getMessage();
	 		echo '[失败].'.$log;
	 	}
	 	print_r($res);
	}
	//修复在打款过程中fn库数据丢失的问题
	public function pageFixFnDataFail()
	{
		$amount = floatval($_GET['amount']);
		$amount = round($amount,2);
		$amount || exit('amount is empty');

		$task_id = intval($_GET['task_id']);
		$task_id || exit('task_id empty');

		$is_last_order = intval($_GET['is_last_order']);

		$srvTask = new zbj_service_task($task_id);
		$srvTask = $srvTask->init();
		$taskData = $srvTask->get('*');
		$taskData || exit('task does not exists');

		$taskData['state'] == 4 || exit('当前任务状态不允许此操作');

		$mOrder = new zbj_model_fn_order();
		$winOrder = $srvTask->getOneWinOrder();
		$winOrder || exit('没有找到中标订单');
		$winOrder['state'] != 1 || exit('当前订单状态不允许此操作');

		$winOrder['option'] = @unserialize($winOrder['option']);

		$order_info = array();
		$order_info['state'] = 1;
		$order_info['over_time'] = $this->_time;
		$order_info['over_ymd'] = $this->_ymd;

		$sale=new zbj_service_deal();
		$type = $srvTask->getTaskToOrderMode();
		$sale->setType($type);
		$order=$sale->Order($winOrder['order_id']);
		$order->setTradeNo();

		$payment = new zbj_service_payment();
		$imDB = new zbj_model_mk_installment();

		try{
			$imDB->_db->beginTransaction('fn');

			$api_data_order = array();
			$api_data_amount = 0;
			$is_tax = true;//是否需要扣除税金
			$is_last_order = false;

			$is_last_order && $is_last_order = true;

			//获取发布任务订单
			$pub_order_id = $srvTask->getPubOrderId();
			if(empty($pub_order_id)) {
				throw new Exception("发布订单获取失败");
			}
			//获取发布订单的order_data_id
			$pub_order_data_id = $order->getTaskOrderDataId($pub_order_id);
			if(empty($pub_order_data_id)) {
				throw new Exception("获取发布订单托管产品失败");
			}

			//获得任务托管比例
			$accept = $srvTask->getPayType();
			if($accept === false){
				throw new Exception("无法获取任务分配模式");
			}
			$realamount = round($amount * $accept['option_accept'],2);
			$charge = round($amount * (1-$accept['option_accept']),2);//本次打款的平台服务费

			$user_sell= new zbj_service_user($order->get('sl_user_id'));
			$pay_user_id = $user_sell->getPayUserId();
			if(empty($pay_user_id)) {
				throw new Exception('用户ID '.$user_sell->getId().' 无法匹配支付ID');
			}

			// $price = $order->getOrderDataAmount($winOrder['option']['orderdata'][0]['data_id'], 'at_price');

			// $sum = $imDB->getOrderPaySum($order->get('order_id'));//已支付的总额
			// if($sum + $amount > $price){
			// 	throw new Exception("你不能支付这么多,已付".$sum.'，订单总额:'.$price);
			// }else if($sum + $amount == $price){
			// 	$is_last_order = true;
			// }else{
			// 	$is_last_order = false;
			// }

			$api_order = array(
				'c_order_id'=>$pub_order_data_id,
				'amount'=>0,
				'hold_status'=>true,
				'business_class'	=> 16,
				'business_subclass'	=> $type,
				'c_task_id'=>$srvTask->getId(),
				'detail_url'=>zbj_lib_Constant::TASK_URL. '/'. $srvTask->getId(),
			);

			$api_order['amount'] += $amount;
			$api_data_amount += $amount;
			$api_order['payee'][0] = array(
				'subject'=>$order->get('title'),
				'id'=>$pay_user_id,
				'amount'=>$amount,
				'zbjc'=>$charge
			);

			$imRow = array(
				'order_id'=>$order->get('order_id'),
				'paynoid'=>$order->get('paynoid'),
				'amount'=>$amount,
				'needInvoice'=>($srvTask->get('bill_state')==1?1:0),
				'user_id'=>$order->get('user_id'),
				'nickname'=>$order->get('nickname'),
				'sl_user_id'=>$order->get('sl_user_id'),
				'sl_nickname'=>$order->get('sl_nickname'),
				'time'=>$this->_time,
				'task_id'=>$order->get('product_pkid')
			);
			//写支付记录
			if($imDB->insertIM($imRow) === false) {
				throw new Exception("写入分期支付流水记录失败");
			}
			$real_data= array();
			$real_data['trade_no'] = $order->getTradeNo();
			$real_data['order_id']=$order->get('order_id');
			$real_data['title']=$order->get('title');
			$real_data['user_id']=$order->get('sl_user_id');
			$real_data['nickname']=$order->get('sl_nickname');
			$real_data['ptype']=$order->get('ptype');
			$real_data['mtype']=$order->get('mtype');
			$real_data['stype']=$order->get('stype');
			$real_data['fee_id']=0;
			$real_data['fromtype']=1;
			$real_data['amount']=$realamount;//存储的金额是扣除服务费的金额
			$real_data['issys']=1;
			$real_data['isin']=true;
			$real_data['isout']=false;
			$real_data['isbt']=false;
			$real_data['task_id']=$order->get('product_pkid');

			if($payment->addUserBalance($real_data)!==true){
				throw new Exception("充值失败 $realamount".$this->payment->getError());
			}

			$s_price = round($realamount * $srvTask->getTaxPoint(),2);
			if($is_tax && 0 < $s_price) {
				//扣除发票费用
				$data=array();
				$data['trade_no'] = $order->getTradeNo();
				$data['order_id']=$order->get('order_id');
				$data['title']='代开发票税金冻结#'.$order->get('title');
				$data['user_id']=$order->get('sl_user_id');
				$data['nickname']=$order->get('sl_nickname');
				$data['ptype']=$order->get('ptype');
				$data['mtype']=0;
				$data['stype']=13;
				$data['fee_id']=0;
				$data['fromtype']=1;
				$data['amount']=$s_price;
				$data['issys']=1;
				$data['isout']=false;
				$data['isin']=false;
				$data['isbt']=false;
				$data['task_id']=$order->get('product_pkid');
				if($payment->cutUserBalance($data)!==true){
					throw new Exception("发票扣款失败");
				}
				$api_order['payee'][0]['tax'] = $s_price;
				//更新税金记录
				if($srvTask->freezeBill($user_sell, $s_price, $realamount, $is_last_order) !== true) {
					throw new Exception("发票税金更新失败 ". $task->getError());
				}
			}

			$api_data_order[] = $api_order;

			$order->set($order_info);
			if(!$order->save()){
				throw new Exception($order->getError());
			}

			//添加到队列
			if(!empty($api_data_amount)) {
				$api = new zbj_service_payapi_yijifu_api();
				$api->amount = $api_data_amount;
				$api->service = 'bounty_secured_transfer';
				$api->orders = $api_data_order;
				$api->return_url = '';
				$api->notify_url = '';
				$api->request_no = $order->getTradeNo();
				//异步队列
				$asyn = new zbj_service_payapi_asyn();
				$asyn->setTransaction(false);
				if($asyn->add($api) !== true) {
					throw new Exception('队列建立失败 '.$asyn->getError());
				}
			}
			$imDB->_db->commit('fn');
			echo 'success';
		}catch(Exception $e){
			$imDB->_db->rollBack('fn');
			echo 'fail';
			echo $e->getMessage();
		}
	}

	public function pageGetUserYJFInfo()
	{
		$uid = intval($_GET['uid']);
		$srvUser = new zbj_service_user($uid);

		$api = new zbj_service_payapi_yijifu_openapi();
        $api->service = 'zbjUserQuery';
        $api->setParam('userId',$srvUser->get('yijifu.yuser_id'));
        $api->orderNo = zbj_lib_BaseUtils::getYJFRequestNo();
        $res = $api->syn();

        print_r($res);
	}


	//直接退税金
	public function pageTaxRefund()
	{
		if(!in_array($this->_userid, array(4309908,12705371,13081738))){
			exit('access deined');
		}
        $fund_id = intval($_GET['fund_id']);

        if($fund_id){
        	$bill_service =  new zbj_service_bill();
        	//解冻税金
        	if(false == $bill_service->taxRefund($fund_id)){
        		echo '税金退失败.'.$bill_service->getError();
        	}else{
        		echo '税金退成功';
        	}
        }

        $task_id = intval($_GET['task_id']);
        if($task_id){
        	$fund_model = zbj_model_api::get('zbj_model_mb_billfund');
        	$condition = array(
        		'task_id' =>$task_id,
        		'state'	  =>array(0,1),
        	);
        	$rs = $fund_model->select($condition,'fund_id,task_id,user_id,nickname');
        	if($rs && $rs->items){
        		foreach ($rs->items as $row){
        			echo ' fund_id:'.$row['fund_id'];
        			echo ' task_id:'.$row['task_id'];
        			echo ' user_id:'.$row['user_id'];
        			echo ' nickname:'.$row['nickname'];
        			echo '<br/>';
        		}
        	}else{
        		echo '无记录';
        	}
        }
        
	}
	
	/**
	 * 修改发票为服务商自开并支持解冻税金
	 */
    function pageModifyOldInvoviceInfo(){
        $task_id = intval($_GET['task_id']);
        $refund = intval($_GET['refund']);

        if(empty($task_id)){
            echo('获取任务号失败');
            exit();
        }
        $task = new zbj_service_task($task_id);
        $task = $task->init();
        $works = $task->getSuccessWorkObject();
        if(!$works){
            echo "获取中标稿件失败";
            exit();
        }
        if(!$task->invoiceService($works, 'add')){
            echo('生成发票信息失败'.$task->getError());
            exit();
        }
        $price = (float)$task->getTaskPayWinFee();

        $tax = $price * $task->getTaxPoint();
        if(!$task->invoiceService($works, 'set',$price, $tax)){
            echo('获取发票信息失败');
            exit();
        }
        $amount_user = $price;

        $bill = $task->getBillInfo();
        $bill_id = $bill['bill_id'];
        $seller_amount = zbj_model_api::get('zbj_model_mb_bill')->query("SELECT sum(amount) as count FROM `mb_bill_seller_detail` WHERE service_id='{$task_id}' and status != 2");
        if($seller_amount && $seller_amount[0]['count']){
            $res = round($amount_user - $seller_amount[0]['count'],2);
            $amount_user = $res>0?$res:0;
        }
        $tax = $amount_user * $task->getTaxPoint();
        $bill_data = array();
        $bill_data['amount_user'] = $amount_user;
        $bill_data['tax'] = $tax;
        $bill_service =  new zbj_service_bill($bill_id);
        if($bill_service->edit($bill_data) === false) {
            echo('新增发票信息失败 '. $bill_service->getError());
            exit();
        }
        echo 'success';

        if(!$refund){
            return;
        }
        $model = new zbj_model_mb_billfund();
        $fund_id = $model->selectOne(array('task_id'=>$task_id, 'state'=>0));
        if(!$fund_id){
        	echo '未找到冻结税金记录';
        	exit();
        }
        echo '找到冻结税金记录.';
        print_R($fund_id);
        $fund_id = intval($fund_id['fund_id']);

        //解冻税金
        if(false == $bill_service->taxRefund($fund_id)){
            echo '税金退失败.'.$bill_service->getError();
        }else{
            echo '税金退成功';
        }
    }

    public function pageThrowEvent()
    {
    	$exchange = zbj_lib_BaseUtils::getStr($_GET['exchange'],'str');
    	$router = zbj_lib_BaseUtils::getStr($_GET['router'],'str');
    	$data = $_GET['data'];
    	if(!$exchange || !$router || !$data){
    		exit('param error');
    	}
    	$data = json_decode($data, true);

    	$mq = new zbj_lib_MQ($exchange, $router);
    	$e = $mq->throwEvent($data);
    	var_dump($e);
    	print_r($mq->getError());
    }

    /**
     * 重新更新发票的金额
     * @return [type] [description]
     */
    public function pageBillUp()
    {
    	$task_id = intval($_GET['task_id']);
    	if(empty($task_id)){
    		die('task_id needed');
    	}
    	$srvTask = new zbj_service_task($task_id);
    	$srvTask = $srvTask->init();
    	if(!$srvTask->get('task_id')){
    		die('task does not exists');
    	}

    	//强制主库
		$srvTask->setDbEntry();

		//检查是否已经申请开票
		if(!$srvTask->isInvoice()) {
			die('未申请开票');
		}

		//如果有开票数据，检查状态，如果未审核可以修改
		$billing_data = $srvTask->getBillInfo();

		if(empty($billing_data)) {
			die('获取发票信息失败');
		}

		$bill_id = $billing_data['bill_id'];

		//交易结束计算税金
		if($srvTask->get('state') != 4) {
			die('交易状态有误');
		}

		//代开金额
		$amount_user = (float)$srvTask->getTaskPayWinFee();

		//平台费用 
		$amount_plat = (float)$srvTask->getTaskServFee();

		//增值服务金额 
		$amount_added = (float)$srvTask->getTaskWasFee();

		//开票金额
		$amount = $amount_user + $amount_plat + $amount_added;

		//代开金额应该减去服务商自开金额[临时使用，服务化以后弃用，改由服务端计算此部分]
		$seller_amount = zbj_model_api::get('zbj_model_mb_bill')->query("SELECT sum(amount) as count FROM `mb_bill_seller_detail` WHERE bill_id='{$bill_id}' and status != 2".($billing_data['is_net']?" and invoice_type='1'":" and invoice_type='0'"));
		if($seller_amount && $seller_amount[0]['count']){
			$amount_user = round($amount_user - $seller_amount[0]['count'],2);
		}

		$tax = $amount_user * $srvTask->getTaxPoint();

		$bill_data['amount'] = $amount;
		$bill_data['amount_user'] = $amount_user;
		$bill_data['amount_plat'] = $amount_plat;
		$bill_data['amount_added'] = $amount_added;
		$bill_data['tax'] = $tax;

		$bill =  new zbj_service_bill($bill_id);
		$bill->set($bill_data);

		if($bill->save() === false) {
			die('新增发票信息失败 '. $bill->getError());
		}

		echo 'success';
    }

    /**
     * 取稿件的工作流
     * @return [type] [description]
     */
    public function pageWorkFlow(){
    	$workid = intval($_GET['wid']);
    	$taskid = intval($_GET['tid']);
    	
    	if($workid<=0){
    		exit('bad workid');
    	}
	if($taskid<=0){
		exit('bad taskid');
	}
    	
    	$srvWF = new zbj_service_workbench();
    	$workflow = $srvWF->getWorkFlow($taskid,$workid);
    	print_r($workflow);
    }

    /**
     * 删除工作台的某个步骤，用于重置数据。
     */
    public function pageDeleteWorkFlow(){
    	$idstr = explode(',',$_REQUEST['id']);
    	$idstr = (array)$idstr;
	
	$idarray = array();
	foreach($idstr as $id){
		$id = intval($id);
		$id>0 && $idarray[] = $id;
	}

    	if(!$idarray){
    		exit('bad id');
    	}
    	$srvWF = new zbj_model_mk_workbench();
    	$workflow = $srvWF->delete('wid in('.implode(',',$idarray).')');
    	var_dump($workflow);
    }
    
    /**
     * 用户额度 恢复
     */
    public function pageCancelBidLog(){

        $user_id = intval($_GET['user_id']);
        $tid = intval($_GET['tid']);
        $type= intval($_GET['type']);

        if(!$user_id || !$tid || !$type){
            echo "输入参数 user_id tid type ";exit;
        }
        $model = new zbj_model_mb_bidlog();
        $condition = array();
        $condition['user_id'] = $user_id;
        $condition['task_id'] = $tid;
        $condition['type'] = $type;

        $result = $model->update($condition,array("resume_time"=>time()+600));

        var_dump($result);


    }

    /**
     * 生成稿件的中标订单
     */
    function pageCreateWorkSucOrder(){
    	$wid = intval($_GET['wid']);
    	if($wid <= 0) exit('bad wid');
    	
    	$srvWork = new zbj_service_works($wid);
    	$work = $srvWork->get();
    	if(empty($work['task_id'])){
    		exit('works not found');
    	}
    	if($work['open_state'] != 0) {
			exit('work closed');
		}
		if($work['issuccess'] != 1) {
			exit('work was not success');
		}
		
    	$srvTask = new zbj_service_task($work['task_id']);
    	$srvTask = $srvTask->init();
    	$task = $srvTask->get();
    	if(!in_array($task['mode'],array(10,13))){
    		exit('not support mode');
    	}
    	if($srvTask->get('allot') != 1){
    		exit('not support allot mode');
    	}
    	$ptype = $task['mode']==10?23:28;
    	
    	$sucOrder = $srvWork->getSuccessOrder();
    	if($sucOrder){
    		exit('order has exsists');
    	}
    	
    	// 生成中标订单
		$orderopt = array();
		$srvOrder=new zbj_service_deal();
		$srvOrder = $srvOrder->order(0,$ptype); // 招标
		
		$order = array(
			'title'		=> $task['title'].'#'.$wid.'稿件中标',
			'state'		=> 0,
			'ptype'		=> $ptype,
			'stype'		=> 16,
			'mtype'		=> 1,
			'paynoid'	=> zbj_lib_BaseUtils::getPayNoid(),
			'product_pkid'	=> $work['task_id'],
			'price'			=> round((float)$task['hosted_amount'],2),
			'at_price'		=> round((float)$task['hosted_amount'],2),
			'user_id'		=> $task['user_id'],
			'nickname'		=> $task['nickname'],
			'sl_user_id'	=> $work['user_id'],
			'sl_nickname'	=> $work['nickname'],
		);
		
		$orderdata = $order;
		unset($orderdata['state'],$orderdata['paynoid']);
		$orderdata['product_pkid'] = $wid;
		$orderdata['num'] = 1;
		$orderdata = array($orderdata);
        
       	$orderid = $srvOrder->createOrder($order,$orderdata);
       	if($orderid === false){
       		exit($srvOrder->getError());
       	}
        echo 'create order success:'.$orderid.'<br>';
        
        $order = $srvTask->getPubOrder();
		$orderModel = zbj_model_api::get('zbj_model_fn_order');
		$back = $orderModel->update("order_id='{$order['order_id']}'",'state=1');
		echo 'update publish order '.($back?'success':'failed');
		exit;
    }

    /**
     * 更新 用户额度
     */
    function pageUpdateBidNumDetail(){

        $user_id = intval($_GET['user_id']);
        $type = intval($_GET['type']);

        if(!$user_id || !$type){
            echo "user_id type";exit;
		}

        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,10,array("zbj_sdk"));
        $taskRecommendService = new com\zhubajie\user\interfaces\BidServiceClient(NULL);
        zbj_lib_ApiClient::build($taskRecommendService);

        $resultDO = $taskRecommendService->notifyCheckBidType($user_id,$type);
        var_dump($resultDO);exit;
    }


    public function pageDelOrder(){
    	$orderid = intval($_GET['orderid']); 
    	if($orderid<=0){
    		echo 'bad orderid';
    		exit();
}
    	
    	$orderModel = new zbj_model_fn_order();
    	$orderdataModel = new zbj_model_fn_orderdata();
    	
    	$condition = "order_id='{$orderid}'";
    	$back = $orderModel->delete($condition);
    	var_dump($back);
    	
    	$orderdataModel->delete($condition);
    	var_dump($back);
    }


    /**
     * 逻辑删除 系统派单历史记录
     */
    public function pageDeleteRecommendLog(){
        set_time_limit(0);
//        define("DEBUG",true);

        $user_id = intval($_GET['user_id']);
        $task_id = intval($_GET['task_id']);
        if(!$user_id || !$task_id){
            echo "bad request!";exit;
        }

        $model = new zbj_model_mk_recommend();
        $model_info = new zbj_model_mk_recommendinfo();
        $task_model = new zbj_model_mk_task($task_id);

        $delete_condition =array(
            'user_id'=>$user_id,
            'task_id'=>$task_id,
            'action_type'=>8,
            'is_sys > 0 ',
        );

        $recmd = $model->selectOne($delete_condition);

        $category1id = $task_model->getData("category1id");

        if(empty($recmd)){
            echo 'data lose';exit;
        }

        //更新为 非系统派单记录
        $model->setPkid($recmd['id']);
        $model->set("is_sys",0);
        if($model->save() === false){
            echo '更改失败，派单记录表';exit;
        }

        //更新历史派单统计

        $condition =array(
            'user_id'=>$user_id,
            'category1id'=>$category1id,
            'date'=>$recmd['senddate'],
        );
        $recmd_info = $model_info->selectOne($condition);

        $data =array();
        $data['recommend_num'] = $recmd_info['recommend_num']-1;
        $data['undeal_num'] = $recmd_info['undeal_num']-1;
        $data['recommend_price'] = $recmd_info['recommend_price']-$recmd['amount'];
        if($model_info->update($condition,$data) ===false){
            echo "失败le";exit;
        }

        echo 'ok';

    }

	public function pageUpMqDelay(){
		$begin = intval($_GET['begin']);
		$end = intval($_GET['end']);
		if($begin<$end || $end==0){
			exit('bad id');
		}
		$state = intval($_GET['state']);
		if(!in_array($state,array(0,1,2))){
			exit('bad state');
		}
		$condition = array(
			"state=2",
			"mq_id>='{$begin}'",
			"mq_id<='{$end}'",
		);
		$mqModel = zbj_model_api::get('zbj_model_mk_mqdelay');
		$back = $mqModel->update($condition,"state={$state}");
		var_dump($back);
	}

    public function pageStopRecommend(){

            $task_id = intval($_GET['task_id']);
            if(!$task_id){
                echo "bad request!";exit;
            }

            $srvTask = new zbj_service_task($task_id);
            $srvTask = $srvTask->init();
            $model = new zbj_model_mk_recommend();

            $model->upTaskSearch($task_id);
            $srvTask->set("task_opis.recmd_status",2);
            $srvTask->set("cpo_ishide",0);

            if($srvTask->save() === false){
                echo 'failed';
            }

            echo 'ok';
    }

	/**
	 * 根据需求id 修复购买服务bug
	 */
	public function pageTaskBuyService(){

		if($_GET['debug']){
			define("DEBUG",true);
		}
		set_time_limit(0);
		$page = intval($_GET['page'])?intval($_GET['page']):1;
		$date = $_GET['date'];
		if(strtotime($date) < strtotime("2015-01-01")){
			echo "更新时间错误"; exit;
		}

		// 执行 10天数据 半小时一个区间
		//半小时 区间
		$s_d = strtotime($date)+$page*1800;
		$e_d = $s_d + 1800;
		// =====start===
		$model = new zbj_model_mk_service();
		$sql ='select b.task_id,b.service_id,b.user_id from mk_service as b inner join mk_works as a on  a.task_id = b.task_id and a.type =2 and a.createtime > '.$s_d.'  and a.createtime <'.$e_d;
		$items = $model->query($sql);

		$taskSrv = new zbj_service_task_buy();
		$ev_model = new zbj_model_mb_evaluation();
		$order_model = new zbj_model_fn_order();
		$service_model = new zbj_model_sp_service();

		if($items){
			foreach($items as $val ){
				//
				$_task_id = $val['task_id'];
				$_sid = $val['service_id'];
				print_r("需求id".$_task_id." ".$_sid);
				if($_GET['debug']){
					exit;
				}
				$taskSrv->setId($_task_id);
				$task_option = $taskSrv->get("task_info.option");
				$task_option = @unserialize($task_option);
				if(!empty($task_option) && !$task_option['service']){
					//task_info option service
					$task_option['service'] = $val;
					$taskSrv->set("task_info.option",serialize($task_option));
					$taskSrv->save();
				}

				$order_condition = array(
					'ptype'=>24,
					'stype'=>16,
					'product_pkid'=>$_task_id,
				);
				$order_info = $order_model->selectOne($order_condition);

				$order_info_option = $order_info['option'];
				$order_info_option = @unserialize($order_info_option);
				if(!empty($order_info_option) && !$order_info_option['service_id']){
					$order_model->setPkid($order_info['order_id']);
					$order_info_option['service_id']=$_sid;
					$order_model->set("option",serialize($order_info_option));
					$order_model->save();
					if($taskSrv->get("state") == 4){
						$service_model->setPkid($_sid);
						$service_model->set("sales",$service_model->getData("sales")+1);
						$service_model->save();
					}
					$ev_model->update(array("task_id"=>$_task_id),array("service_id"=>$_sid));
				}
			}

		}

		$page++;
		if($page > 480){
			echo "执行完毕 page:".$page;
			exit;
		}
		echo '<meta http-equiv="Refresh" content="1; url=/tools/taskBuyService?key=asdfaksdfhkjasdf&date='.$date.'&page='.$page.'"/>';

	}


    public function pageContactedBuyer(){
	$workid = intval($_GET['wid']);
	if($workid<=0){
		exit('bad workid');
	}
	try{
		
		// 标识为已联系
		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
		$api = new com\zhubajie\task\interfaces\WorkTaskStepServiceClient(NULL);
		zbj_lib_ApiClient::build($api);
		
		$workDTO = new com\zhubajie\task\dataobject\worktaskstep\WorkStateDTO();
		$workDTO->works_id = $workid;
		$workDTO->done = 1;
		$workDTO->roletype = 3;
		
		$result1 = $api->setContactBuyerState($workDTO);
		if($result1->success != true){
			throw new Exception($result1->message);
		}
	}catch(Exception $e){
		echo $e->getMessage();exit;
	}
	echo 'done';
    }


	/**
	 * 根据需求id 修复购买服务bug
	 */
	public function pageTaskBuyService1(){

		if($_GET['debug']){
			define("DEBUG",true);
		}

		$page = intval($_GET['page'])?intval($_GET['page']):1;
		$s_d = $_GET['s_d'];
		$e_d = $_GET['e_d'];

		if(strtotime($s_d) < strtotime("2015-01-01") || strtotime($s_d) > strtotime($e_d)){
			echo "更新时间错误"; exit;
		}
		// =====start===

		$model = new zbj_model_mk_works();
		$model->setLimit(10);
		$model->setPage($page);

		$left_join = array(
			'mk_service'=> " mk_works.task_id = mk_service.task_id"
		);
		$condition = array();
		$condition[] = " mk_works.createymd <= '$e_d' AND mk_works.createymd >= '$s_d'";
		$condition['mk_works.type'] = 2;
		$items = $model->select( $condition ,"mk_service.task_id,mk_service.service_id,mk_service.user_id  ",""," order by mk_works.createymd asc",$left_join)->items;

		$taskSrv = new zbj_service_task_buy();
		$ev_model = new zbj_model_mb_evaluation();
		$order_model = new zbj_model_fn_order();
		$service_model = new zbj_model_sp_service();

		if(empty($items)){
			echo " ok ";exit;
		}

		if($items){
			foreach($items as $val ){
				//
				$_task_id = $val['task_id'];
				$_sid = $val['service_id'];
				if(!$_task_id){
					continue;
				}


				print_r("需求id".$_task_id." 服务id".$_sid);

				$taskSrv->setId($_task_id);
				$task_option = $taskSrv->get("task_info.option");
				$task_option = @unserialize($task_option);
				if(!empty($task_option) && !$task_option['service']){
					//task_info option service
					$task_option['service'] = $val;
					$taskSrv->set("task_info.option",serialize($task_option));
					$taskSrv->save();
				}

				$order_condition = array(
					'ptype'=>24,
					'stype'=>16,
					'product_pkid'=>$_task_id,
				);
				$order_info = $order_model->selectOne($order_condition);

				$order_info_option = $order_info['option'];
				$order_info_option = @unserialize($order_info_option);
				if(!empty($order_info_option) && !$order_info_option['service_id']){
					$order_model->setPkid($order_info['order_id']);
					$order_info_option['service_id']=$_sid;
					$order_model->set("option",serialize($order_info_option));
					$order_model->save();
					if($taskSrv->get("state") == 4){
						$service_model->setPkid($_sid);
						$service_model->set("sales",$service_model->getData("sales")+1);
						$service_model->save();
					}
					$ev_model->update(array("task_id"=>$_task_id),array("service_id"=>$_sid));
				}
			}

		}

		if($_GET['debug']){
			exit;
		}
		$page++;

		echo '<meta http-equiv="Refresh" content="1; url=/tools/taskBuyService1?key=asdfaksdfhkjasdf&s_d='.$s_d.'&e_d='.$e_d.'&page='.$page.'"/>';

	}



	public function pageTestBill(){
		if(!in_array($this->_userid, array(12705371))){
			exit('access deined');
		}
		//测试企业为什么被扣税
		$bid_id = intval($_GET['bid_id']);
		if($bid_id){
			$deal = new zbj_service_deal_newbid($bid_id);	
			$task = new zbj_service_task($deal->get('product_pkid'));
			$task = $task->init();
			$task->setTransaction(false);
			$task->setLock(true, array());
				
			foreach($deal->getOrderData() as $row) {
				echo '<br> row';
				var_dump($row);
				echo '<br> product_pkid';
				var_dump($row['product_pkid']);
				echo '<br> works';
				$works = new zbj_service_works($row['product_pkid']);
				//$works->setLock(true, array());
				var_dump($works);
				echo '<br> invoice_res';
				$invoice_res = $task->invoiceService($works, 'query');
				var_dump($invoice_res);
			}
		}
		
		$buy_id = intval($_GET['buy_id']);
		if($buy_id){
			$deal = new zbj_service_deal_buy($buy_id);
			$task = new zbj_service_task($deal->get('product_pkid'));
			$task = $task->init();
			$works = $task->getSuccessWorkObject();
			var_dump($works);
			echo '<br> invoice_res';
			$invoice_res = $task->invoiceService($works, 'query');
			var_dump($invoice_res);
		}
		
		$free_id = intval($_GET['free_id']);
		if($free_id){
			$deal = new zbj_service_deal_free($free_id);
			$task= new zbj_service_task($deal->get('product_pkid'),'free');
			$task = $task->init();
			foreach($deal->getOrderData() as $row) {
				echo '<br> row';
				var_dump($row);
				echo '<br> product_pkid';
				var_dump($row['product_pkid']);
				echo '<br> works';
				$works = new zbj_service_works($row['product_pkid']);
				//$works->setLock(true, array());
				var_dump($works);
				echo '<br> invoice_res';
				$invoice_res = $task->invoiceService($works, 'query');
				var_dump($invoice_res);
			}
		}
		
		//查询某人是否能自开票
		$user_id = intval($_GET['u_id']);
		if($user_id){
			echo $user_id;
			$userSrv = new zbj_service_user($user_id);
			$v = $userSrv->checkInvoiceUser();
			var_dump($v);
		}
		
	}
	
	public function pageFixTaxBill(){
		 
		$task_id = intval($_GET['task_id']);
		$refund = intval($_GET['refund']);
		 
		if(empty($task_id)){
			echo('获取任务号失败<br/>');
			exit();
		}
		$task = new zbj_service_task($task_id);
		$task = $task->init();
		 
		//只支持单个中标的，多人中标不支持
		$mdl = zbj_model_api::get('zbj_model_mk_works');
		$mdl->setDbEntry();
		$data = $mdl->selectOne(array('task_id'=>$task_id, 'issuccess'=>'1'),"count(*) c");
		if($data && $data['c'] == 1){
			//ok
		}else{
			echo "中标个数为" . $data['c'] . "个，此工具不支持<br/>";
			return;
		}
		 
		$works = $task->getSuccessWorkObject();
	
		if(!$works){
			echo "获取中标稿件失败<br/>";
			return;
		}
		 
		//根据稿件尝试生成自开记录（个人的话不会开）
		if(!$task->invoiceService($works, 'add')){
			echo('重新生成发票信息失败'.$task->getError().",可能已经生成自开记录<br/>");
		}
		 
		$price = (float)$task->getTaskPayWinFee();
		 
		$tax = $price * $task->getTaxPoint();
		$tax = round($tax, 2);
		if($tax <= 0){
			echo('税金为0<br/>');
			return;
		}
		 
		//更新自开记录金额
		if(!$task->invoiceService($works, 'set', $price, $tax)){
			echo('获取发票信息失败,可能是非企业用户<br/>');
		}
		 
		//看用户是否被扣税了，修复被误扣的记录
		zbj_lib_ApiClient::init('32476743f8ee81c5', '049fbb740441de9f4a067f8e7550dd18');
		$instance = new com\zhubajie\pay\interfaces\BillServiceClient(null);
		zbj_lib_ApiClient::build($instance);
		 
		$inputSearchplatformDo = new \com\zhubajie\pay\dataobject\bill\inputSearchplatformDo();
		 
		$inputSearchplatformDo->c_task_id = $task_id;
		$inputSearchplatformDo->stype_id = 8;
		$inputSearchplatformDo->out_amount = $tax;
	
		$searchResult =  new \com\zhubajie\pay\interfaces\BillService_search_result();
		$searchResult = $instance->search($inputSearchplatformDo);
	
		if($searchResult->data){
			echo '支付系统显示，被扣税' . $tax . "<br/>";
	
			//看看扣税记录是否生成了的
			$model = new zbj_model_mb_billfund();
			$fund_id = $model->selectOne(array('task_id'=>$task_id));
			if(!$fund_id){
				echo '【重新】生成扣税记录<br/>';
				 
				$user_sell= new zbj_service_user($works->get("user_id"));
				if($task->freezeBill($user_sell, $tax, $price, true) !== true) {
					throw new Exception("发票税金更新失败 ". $task->getError());
				}
				 
			}else{
				echo '已经有扣税记录,可以直接退税了<br/>';
			}
	
		}else{
			echo '没有找到被扣税的记录<br/>';
			return;
		}
		 
		$amount_user = $price;
		 
		$bill = $task->getBillInfo();
		 
		//更新发票信息
		if(bill && $bill['bill_id']){
			$bill_id = $bill['bill_id'];
			$seller_amount = zbj_model_api::get('zbj_model_mb_bill')->query("SELECT sum(amount) as count FROM `mb_bill_seller_detail` WHERE service_id='{$task_id}' and status != 2");
			if($seller_amount && $seller_amount[0]['count']){
				$res = round($amount_user - $seller_amount[0]['count'],2);
				$amount_user = $res>0?$res:0;
			}
			$tax = $amount_user * $task->getTaxPoint();
			$bill_data = array();
			$bill_data['amount_user'] = $amount_user;
			$bill_data['tax'] = $tax;
			$bill_service =  new zbj_service_bill($bill_id);
			if($bill_service->edit($bill_data) === false) {
				echo('【修改】发票信息失败 '. $bill_service->getError() . "<br/>");
				return;
			}else{
				echo "修改发票成功<br/>";
			}
		}else{
			echo '用户还没有申请发票<br/>';
		}
		 
		if(!$refund){
			return;
		}
		 
		//为企业用户退税金
		$userSrv = new zbj_service_user($works->get("user_id"));
		$authInfo = $userSrv->getAuthInfo(true);
		if(!isset($authInfo['business']) || empty($authInfo['business'])) {
			echo '服务商为个人用户，不支持退税<br/>';
			return;
		}
		if($authInfo['business']['auth_type'] == com\zhubajie\user\dataobject\auth\AuthType::ENTERPRISES_DL) {
			echo '服务商为企业用户<br/>';
		}
		if($authInfo['business']['auth_type'] == com\zhubajie\user\dataobject\auth\AuthType::ENTERPRISES_GAT && $authInfo['business']['db_organization_code'] != '79352615-9') {
			echo '服务商为企业用户<br/>';
		}
	
		$model = new zbj_model_mb_billfund();
		$fund_data = $model->selectOne(array('task_id'=>$task_id, 'state'=>0));
		if(!$fund_data){
			echo '未找到冻结税金记录';
			return;
		}else{
			echo '找到冻结税金记录.fund_id' . $fund_data['fund_id'];
			$fund_id = intval($fund_data['fund_id']);
	
			//解冻税金
			$bill_service =  new zbj_service_bill();
			if(false == $bill_service->taxRefund($fund_id)){
				echo '税金退失败.'.$bill_service->getError();
			}else{
				echo '税金退成功';
			}
		}
	}

	public function pageFixBillSellDetail(){
		if(!in_array($this->_userid, array(4309908,12705371,13081738))){
			exit('access deined');
		}
		$task_id = intval($_GET['task_id']);
		$reset = intval($_GET['reset']);
		if($task_id <= 0){
			echo('任务编号不合法<br/>');
			return;
		}
		$sell_detail = new zbj_model_mb_billsellerdetail();
		$condition = array(
			'service_id' => $task_id,
		);
		$rs = $sell_detail->select($condition,'*');
		if($rs && $rs->items){
			print_r($rs->items);
			
			if($reset){
				$rs = $sell_detail->delete($condition);
				if($rs === false){
					echo('任务发票自开重置失败<br/>');
				}else
					echo('任务发票自开重置成功<br/>');
			}
		}else{
			echo('无企业自开记录<br/>');
		}
	}

	public function pageAddWorkBeanchQuote(){
		$workid = intval($_GET['workid']);
		$dotype = intval($_GET['dotype']);
		!in_array($dotype,array(10,20,21)) && $dotype=20;
		if($workid<=0) exit('bad workid');
		
		$srvWork = new zbj_service_works($workid);
		$work = $srvWork->get();
		if(empty($work)){
			exit('work null');
		}

		try{

			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,10);
			$api = new WorkTaskStepServiceClient(NULL);
			zbj_lib_ApiClient::build($api);

			$workstepDTO = new WorkTaskStepDTO();
			$workstepDTO->task_id = $work['task_id'];
			$workstepDTO->works_id = $workid;
			$workstepDTO->user_id = $work['user_id'];
			$workstepDTO->dotype = $dotype;
			$workstepDTO->done = 0;
			$workstepDTO->roletype = 0;
			$workstepDTO->createtime = time();
			$workstepDTO->expiretime = $dotype==10?(time()+1200):(time()+12*3600);
			$workstepDTO->updatetime = time();

			$r = $api->create($workstepDTO);
			if($r->success === false){
				throw new Exception($r->message);
			}

		}catch (Exception $e){
			echo $e->getMessage();exit;
		}
		print_r($r);
		
		$workbenchModel = new zbj_model_mk_workbench();
		$back = $workbenchModel->delete("task_id='{$work['task_id']}' and work_id='{$workid}'");
		var_dump($back);

		echo 'ok';
	}
	public function pageGetWorkFilePaths($url){
		$taskId = zbj_lib_BaseUtils::getStr($_GET['taskId'], 'int', '');
		if(empty($taskId))	return false;
		$worksM = new zbj_model_mk_works();
		$condition = array('task_id' => $taskId);
		$workFiles = $worksM->select($condition, 'files, works_id')->items;
		$data = array();
		foreach ($workFiles as $workFile) {
			$tmp = array();
			$tmp['files'] = unserialize($workFile['files']);
			if(!$tmp['files'])	$tmp['files'] = array();
			$tmp['works_id'] = $workFile['works_id'];
			$data[] = $tmp;
		}
		echo json_encode($data);
		exit;
	}
	
    public function pageUpDealAsyn($url){
        $asynid = intval($_GET['asynid']);
        $amount = round((float)$_GET['amount'],2);
        $zbjc = round((float)$_GET['zbjc'],2);
        
        if(empty($asynid)){
                exit('bad asyn id');
        }
        if($amount<=0){
                exit('bad amount');
        }
    
        $asynModel = zbj_model_api::get('zbj_model_fn_dealasyn',$asynid);
        $asyn = $asynModel->getData();
        
        if($asyn['state'] != 2){
                exit('already successed!');
        }
    
        $data = json_decode($asyn['data'],true);
        if(empty($data) || !is_array($data)){
            exit('decode data failed');
        }
        
        $data['amount'] = $amount;
        $data['orders'][0]['amount'] = $amount;
        $data['orders'][0]['payee'][0]['amount'] = $amount;
        
        if($zbjc>0){
                $data['orders'][0]['payee'][0]['zbjc'] = $zbjc;
        }
        $asynModel->set('data',json_encode($data));
        $back = $asynModel->save();
        var_dump($back);
    }

	/*
	 *修复一次二次跟进异常订单
	 *lstmango
	 */
	public function pageFixFirstHoldFollow(){
		if(!$_GET['step'] || !$_GET['uid'] || !$_GET['tid']){
			echo '山上的美女请等我';
		}
		$mdl = zbj_model_api::get('zbj_model_mk_workstaskstep');
		if($_GET['step']==1){
			$condition[] = 'task_id='.intval($_GET['tid']);
			$condition[] = 'user_id='.intval($_GET['uid']);
			$condition[] = 'dotype=10';
			$step1 = $mdl->selectOne($condition, '*');
			if(!$step1){
				echo '异常1';
				return;
			}
			$condi2['task_id']=$step1['task_id'];
			$condi2['user_id']=$step1['user_id'];
			$updateData2['iseliminate']=0;
			$mdl2 = zbj_model_api::get('zbj_model_mk_works');
			$saveResult2 = $mdl2->update($condi2,$updateData2);
			var_dump($saveResult2);
			$cond1['step_id']=$step1['step_id'];
			$updateData['done']=1;
			$updateData['roletype']=1;
			$updateData['updatetime']=time();
			$saveResult = $mdl->update($cond1,$updateData);
			var_dump($saveResult);
			$condition2[] = 'task_id='.intval($_GET['tid']);
			$condition2[] = 'user_id='.intval($_GET['uid']);
			$condition2[] = 'dotype=20';
			$step2 = $mdl->selectOne($condition2, '*');
			if($saveResult && !$step2){
				$newtask = array(
					'task_id'	=> $step1['task_id'],
					'works_id'	=> $step1['works_id'],
					'user_id'	=> $step1['user_id'],
					'dotype'	=> 20,
					'done'		=> 0,
					'roletype'	=> 0,
					'createtime'	=> time(),
					'expiretime'	=> time()+43200, // 12小时
				);
				$param = array(
					'task_id'	=> $newtask['task_id'],
					'works_id'	=> $newtask['works_id'],
					'user_id'	=> $newtask['user_id'],
				);
				zbj_lib_ApiClient::init(APPID, SECRET);
				$evtApi = new EventSystemServiceClient(NULL);
				zbj_lib_ApiClient::build($evtApi);
				$event = new EventDTO();
				$event->event = 'worktask.20.created';
				$event->bodys = $param;
				$event->delaytime = (int)$newtask['expiretime'];
		
				$back = $evtApi->throwEvent($event);
				if($back->success != true){
					echo '事件异常：'.$back->message;
				}
				$insertResult=$mdl->insert($newtask);

				if($insertResult === false){
					echo '创建计划任务失败';
				}
			}
			$mdl3 = zbj_model_api::get('zbj_model_mk_workbench');
			$condi3[]='task_id='.$step1['task_id'];
			$condi3[]='work_id='.$step1['works_id'];
			$condi3[]='node_id>1';
			$workbenchArray= $mdl3->select($condi3, 'wid')->items;
			if($workbenchArray){
				foreach($workbenchArray as $wbValue){
					$widArray[]=$wbValue['wid'];
				}
				$condi4[]='wid in('.implode($widArray,',').')';
				$delResult=$mdl3->delete($condi4);
				var_dump($delResult);
			}
			echo 'win';
			return;
		}
		elseif($_GET['step']==2){
			$condition[] = 'task_id='.intval($_GET['tid']);
			$condition[] = 'user_id='.intval($_GET['uid']);
			$condition[] = 'dotype=20';
			$step2 = $mdl->selectOne($condition, '*');
			if(!$step2){
				echo '异常2';
				return;
			}
			$condi2['task_id']=$step2['task_id'];
			$condi2['user_id']=$step2['user_id'];
			$updateData2['iseliminate']=0;
			$mdl2 = zbj_model_api::get('zbj_model_mk_works');
			$saveResult2 = $mdl2->update($condi2,$updateData2);
			var_dump($saveResult2);
			$cond1['step_id']=$step2['step_id'];
			$updateData['done']=1;
			$updateData['roletype']=1;
			$updateData['updatetime']=time();
			$saveResult = $mdl->update($cond1,$updateData);
			var_dump($saveResult);
			$mdl3 = zbj_model_api::get('zbj_model_mk_workbench');
			$condi3[]='task_id='.$step2['task_id'];
			$condi3[]='work_id='.$step2['works_id'];
			$condi3[]='node_id>1';
			$workbenchArray= $mdl3->select($condi3, 'wid')->items;
			if($workbenchArray){
				foreach($workbenchArray as $wbValue){
					$widArray[]=$wbValue['wid'];
				}
				$condi4[]='wid in('.implode($widArray,',').')';
				$delResult=$mdl3->delete($condi4);
				var_dump($delResult);
			}
			echo 'win';
			return;
		}
		echo '<br />';
		echo 'failed';
	}

	public function pageMcOption(){


		$uid = $_GET['uid'];
		$mc_key= md5('com.zhubajie.task.userrate.user_id.'.$uid);
		$cache = new zbj_lib_cache('memcache');
		$r = $cache->del($mc_key);
		var_dump($r);


	}
	/*
	 *订单分配bug排查及修复专用，[禁止访问]
	 *lstmango
	 *20151102
	 */
	public function pageFixOrderAllot(){
		if(md5($_GET['xdebug'])!='330d7a9a4e85ffef5b71f4470739367f'){
			if(zbj_lib_Constant::DOMAIN=='zhubajie.com'){
				var_dump('山上的美女请等我');
				return;
			}
		}
		#$data['xdebug']=$_GET['xdebug'];
		try{
			switch($_GET['ac']){
				case 'check':
					$taskid = intval($_GET['tid']);
					if($taskid<=0) exit('bad taskid');
					
					$srvTask = new zbj_service_task($taskid);
					$srvTask = $srvTask->init();
					$task=$srvTask->get();
					$data['task_id']=$taskid;
					if($_GET['d']=1){
						var_dump($task);
					}
					$srvAlloter = new zbj_service_allot_taskcheck();
					$back = $srvAlloter->checkNeedPushPool($data);
					var_dump($back);
					break;
				case 'cleanManager':
					$taskIds=$_GET['taskIds'];
					if(!$taskIds){
						return 'taskIds is null';
					}
					$condi='task_id in ('.$taskIds.')';
					$updateData[]='manager_id=0';
					$updateData[]='manager_name=0';
					$updateData[]='manager_teamid=0';
					$updateData[]='m_is_at=0';
					$taskModule = zbj_model_api::get('zbj_model_mk_task');
					$updateResult=$taskModule->update($condi,$updateData);
					var_dump($updateResult);
					break;
			}	
		}catch(Exception $e){
			echo $e->getMessage();
		}
	}

	/*
	 *商机盲抢池任务堆积分配工具
	 *lstmango
	 *20151111
	 */
	public function pageAllotBschanceGrabpool(){
		if(md5($_GET['xdebug'])!='cd767aacb17635b477f5e3d93b3b421f' && md5($_GET['xdebug'])!='330d7a9a4e85ffef5b71f4470739367f'){
			if(zbj_lib_Constant::DOMAIN=='zhubajie.com'){
				var_dump('山上的美女请等我');
				return;
			}
		}
		if($_GET['act']=='push'){
			$taskIdArray=explode(',',$_GET['ids']);
			if(!$taskIdArray){
				return 'push参数错误';
			}
			foreach($taskIdArray as $id){
				var_dump($id);
				$data['task_id']=$id;
				$zbjAllotBsCheck=new zbj_service_allot_bscheck();
				$result=$zbjAllotBsCheck->fixBschance($data);
				var_dump($result);
			}
			return true;
		}
		else if($_GET['act']=='allot'){
			if(intval($_GET['totalNum'])!=0){
				$initData['totalNum']=intval($_GET['totalNum']);
			}
			$bsGrab = new zbj_service_randgrabbschance();
			$bsallotResult = $bsGrab->allotGrabpoolBschance($initData);
			var_dump($bsallotResult);
		}
		else if($_GET['act']=='sMemcache'){
			$cache = new zbj_lib_cache('memcache');
			if(!$_GET['cachekey']){
				return 'key is null';
			}
			$cacheKey = $_GET['cachekey'];
			$cacheData = $cache->get($cacheKey);
			var_dump($cacheData);
			return true;
		}
		else{
			var_dump('act is null');
			return;
		}
	}
}
