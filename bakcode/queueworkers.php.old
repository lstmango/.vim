<?php
//定义框架自带插件目录
include dirname(__FILE__). '/config.php'; 
SlightPHP::setDebug(false);

SlightPHP::setAppDir("app");
SlightPHP::setDefaultZone("controller");
SlightPHP::setDefaultPage("main");
SlightPHP::setDefaultEntry("index");

SlightPHP::setUrlFormat("-");
SlightPHP::setUrlSuffix("html");

SDb::setConfigFile(SlightPHP::$appDir . "/components/db.ini.php");

// if(isset($argv[1])){ //命令行兼容模式
// 	$job = $argv[1];
// }else{
// 	$job = isset($_GET['job'])?$_GET['job']:'';
// }
$job = isset($_GET['job'])?$_GET['job']:'';
if(!empty($job)) {
	_start($job);
}
function _start($jobname)
{
	$workers = new zbj_queue_workers();
	$jobname = "job{$jobname}";
	if(!method_exists($workers, $jobname)) {
		exit('job:'.$jobname.' does not exists');
	}
	call_user_method($jobname, $workers);
}
function SendPay6DayMsg()
{
	_start('SendPay6DayMsg');
	return true;
}
function UpdateUserEvaluate()
{
	_start('UpdateUserEvaluate');
	return true;
}
function AutoEvaluate()
{
	_start('AutoEvaluate');
	return true;
}
function UpdateUserFreeCount()
{
	_start('UpdateUserFreeCount');
	return true;
}
function ResetUserEvaluate()
{
	_start('ResetUserEvaluate');
	return true;
}
class zbj_queue_workers{

	private $queue_name;
	private $queue;

	public function __destruct()
	{
		if(is_object($this->queue)){
			$this->queue->disconnect();
		}
	}

	/**
	 * 初始化数据
	 * @return NULL
	 */
	private function init()
	{
		$this->queue = new SQueue($this->queue_name);
	}

	private function error($msg)
	{
		echo $msg;
		$this->addLogFile($msg,'fail');
	}

	private function addLogFile($msg,$type)
	
		if($type=='success'){
			$log_file = dirname(__FILE__).'/'.SlightPHP::$appDir.'/log/'.$this->queue_name. date('Ymd').'.log';
		}else{
			$log_file = dirname(__FILE__).'/'.SlightPHP::$appDir.'/log/'.$this->queue_name. date('Ymd').'_fail.log';
		}
		$fp = fopen($log_file, "a+");
		if($fp && $msg) {
			fwrite($fp, date("Y-m-d H:i:s "). $msg. "\n");
		}
		fclose($fp);
	}

	/**
	 * 从队列中取一条数据
	 * @return array
	 */
	private function getOne()
	{	
		$data = $this->queue->get();
		if(empty($data) || is_bool($data)) {
			return false;
		}
		if(!is_array($data)){
			$data = json_decode($data, true);
		}
		if(!is_array($data)) {
			$this->error('队列数据不是合法的json');
			return false;
		}
		return $data;
	}

	/**
	 * 服务商提醒雇主付款第六天自动通知雇主
	 * 
	 */
	public function jobSendPay6DayMsg()
	{
		$this->queue_name = 'task_sendPay6DayMsg';
		$this->init();
		$data = $this->getOne();
		if(!$data) return false;
		$usr = new zbj_service_user($data['user_id']);
		$result = zbj_service_taskmsg::sendmsg($usr, 'buyer', "服务商提醒付款，您还未处理", array(16,14,11,11,0,11,11), $data['config']);
		$err = zbj_service_taskmsg::getErr();

		if (!empty($err)){
			$this->queue->push(json_encode($data)); //出错后重新加入队列
			$this->error("user_id:{$data['user_id']},resion:".$err);
			return false;
		}
		$this->addLogFile("user_id:{$data['user_id']}",'success');
		return true;
	}

	/**
	 * 更新用户评论
	 * 
	 */
	public function jobUpdateUserEvaluate()
	{
		$this->queue_name = 'task_upUserEvaluate';
		$this->init();
		$data = $this->getOne();
		if(!$data) return false;

		$evaluate = new zbj_service_evaluation();
		$user = new zbj_service_user($data['user_id']);
		$result = $evaluate->upUserEvaluation($user, $data['type']);
		if (!$result){
			$this->queue->push(json_encode($data)); //出错后重新加入队列
			$this->error("userid:{$data['user_id']},type:{$data['type']},msg:".$evaluate->getError());
			return false;
		}
		$this->addLogFile("成功！userid:{$data['user_id']},type:{$data['type']}",'success');
		return true;
	}

	/**
	 * 系统自动评分
	 * 
	 */
	public function jobAutoEvaluate()
	{
		$this->queue_name = 'task_autoEvaluate';
		$this->init();
		
		$data = $this->getOne();
		if(!$data) return false;

		$evaluate = new zbj_service_evaluation();
		$user = new zbj_service_user($data['user_id']);
		$execrs = $evaluate->create($data['order_id'], $user, $data['data'], NULL, true);
		if(!$execrs){
			$errorArray = array(
				'请传入指定的数据','没有必要的数据','该订单不允许评价','订单状态不允许评价','雇主已经评价','卖家已经评价','无法获取订单金额'
			);
			$error = $evaluate->getError();
			if(!in_array($error,$errorArray)){
				$this->queue->push(json_encode($data)); //出错后重新加入队列
			}
			$this->error("userid:{$data['user_id']},order_id:{$data['order_id']},msg:".$error);
			return false;
		}
		$this->addLogFile("成功！userid:{$data['user_id']},order_id:{$data['order_id']}",'success');
		return true;
	}

	/**
	 * 更新用户在计件模式下的稿件数量
	 * 
	 */
	public function jobUpdateUserFreeCount()
	{
		$this->queue_name = 'task_updateUserFreeCount';
		$this->init();

		$data = $this->getOne();
		if(!$data) return false;
		if($data['task_id']) { //对指定的任务进行更新
			$task = new zbj_service_task($data['task_id']);
			$task = $task->init();

			if($task->get('mode') != '10' || $task->get('allot') != '3' || $task->get('state') < 4){
				return true;
			}
			$task->updateSellerFreeCount();
		}

		return true;
	}


	/**
	 * 统计所有用户的评价数量【跑数据用】
	 */
	public function jobResetUserEvaluate(){
		$uid = intval($_GET['uid']);
		if(empty($uid)){
			echo 'stop:finished'; return true;
		}
				
		if(empty($uid)){
			$this->queue_name = 'user_ResetUserEvaluation';
			$this->init();
			$userList = $this->getOne();
			if(empty($userList)){
				$this->resetWillEvaluateUser(); return true;
			}
		}else{
			$userList = array($uid);
		}
		
		if(empty($userList[0])) return true;
		
		$evaluateModel = zbj_model_api::get('zbj_model_mb_evaluation');

		$updateList = array();
		foreach($userList as $id){
			// 收到评价
			$list = $evaluateModel->select("user_id='{$id}' and puser_id>0 and type<3",'evaluation_id','','','',array('type'=>'query','dbinfo'=>'co_member'));
			$get_evaluate_num = empty($list->items)?0:count($list->items);
			unset($list);
				
			// 做出的评价
			$list = $evaluateModel->select("user_id>0 and puser_id='{$id}' and type<3",'evaluation_id','','','',array('type'=>'query','dbinfo'=>'co_member'));
			$post_evaluate_num = empty($list->items)?0:count($list->items);
			unset($list);
			
			if($post_evaluate_num>0 || $get_evaluate_num>0){
				$update = array(
					'post_evaluate_num'	=> $post_evaluate_num,
					'get_evaluate_num'	=> $get_evaluate_num,
				);
				$updateList[$id] = $update;
			}
			
			if(!empty($uid)){
				echo "OK:{$uid}   post_evaluate_num ->($post_evaluate_num)  ,  get_evaluate_num -> ($get_evaluate_num)<br><br>";
			}
		}
		
		if(empty($updateList)) return true;
		
		// 统计提交，效率高些
		$countModel = zbj_model_api::get('zbj_model_mb_count');
		$countModel->beginTransaction();
		foreach($updateList as $id=>$update){
			$countModel->update(array('user_id'=>$id),$update);
		}
		$countModel->commit();
		
		return true;
	}
	
	/**
	 * 重置待评价用户【跑数据用】
	 */
	private function resetWillEvaluateUser(){
		$cache = new zbj_lib_cache('memcache');
		$worksavgkey = 'user.reset.evaluatenum.max.userid';
		$doingkey = 'user.reset.evaluatenum.max.userids.doing';
		
		if($cache->get($doingkey) == 1) return false;
		$cache->set($doingkey,1,600);
		
		$maxuid = (int)$cache->get($worksavgkey);
		
		$countModel = zbj_model_api::get('zbj_model_mb_count');
		$countModel->setCount(false);
		$countModel->setPage(true);
		$countModel->setLimit(1800);
		$userList = $countModel->select("user_id>'{$maxuid}'",'user_id','','order by user_id asc');
		$userList = $userList->items;
		
		if(empty($userList[0]['user_id'])) return false;
		
		$lastone = end($userList);
		$cache->set($worksavgkey,(int)($lastone['user_id']),259200);
		
		$uidarray = array();		
		foreach($userList as $user){
			if(is_numeric($user['user_id'])){ $uidarray[] = $user['user_id']; }
		}
		
		$tmparray = array_chunk($uidarray,30);
		foreach($tmparray as $udata){
			if(!is_array($udata) || empty($udata)) continue;
			$this->queue->push(json_encode($udata)); //加入队列
		}
		$cache->del($doingkey);
		
		return true;
	}

	/**
	 * 对赏金贷的订单进行打款监控，单个订单监控频率受$interval影响。
	 */
	public function jobYjfCreditMoniterOld()
	{
		$interval = 180;
		$model    = zbj_model_api::get('zbj_model_mb_yjfcredit');
		$mconsume = zbj_model_api::get('zbj_model_fn_consume');
		$morder   = zbj_model_api::get('zbj_model_fn_order');

		$condi   = array();
		$condi[] = "order_state = '0'";
		$condi[] = 'lastchecktime < '.(time()-$interval);
		$model->setLimit(50);
		$data = $model->select($condi,'*','','order by id asc')->items;

		if (!function_exists('create_yjf_soap_sign')){
			function create_yjf_soap_sign($params){
				$params['password'] = '@$%*^FKsa3^%%';
				$params = array_values($params);
				array_shift($params); //key生成排除arg0
				return (string)md5(join('+',$params));
			}
		}
		if(!$data){
			echo 'no data found';
			return true;
		}
		try{
			$soapGateway = zbj_lib_Constant::DOMAIN == 'zhubajie.com' ? 
				'https://iloan.yiji.com' : 
				'http://rewardloan.yijifu.net'
			;
			$client = new Snusoap($soapGateway.'/services/orderCompleteNotify?wsdl',true);
			$client->soap_defencoding = 'UTF-8';
			$client->decode_utf8 = true;
			$client->setGlobalDebugLevel(0);
			$client->useHTTPPersistentConnection();
			foreach($data as $order){
				$g = array();
				$c = array(
					'order_id'=>$order['order_id'],
					'user_id'=>$order['user_id'],
					'account_mtype'=>1,
				);
				$order['lastmsg'] = @unserialize($order['lastmsg']);
				$order['lastmsg'] || $order['lastmsg'] = array();
				$order['lastchecktime'] || $order['lastchecktime'] = 0;

				$srvTask = new zbj_service_task($order['product_pkid']);
				$srvTask = $srvTask->init();

				$e = $mconsume->select($c)->items;
				if(!$e){
					$g['lastchecktime'] = time();
					$model->update(array("id"=>$order['id']), $g);
					print_r($g);
					continue;
				}
				$morder->setPkid($order['order_id']);
				$orderData = $morder->get();
				foreach($e as $f){
					if($order['lastmsg']['notice_consume_time'][$f['consume_id']] > 2){
						$g['lastchecktime'] = time();
						$model->update(array("id"=>$order['id']), $g);
						
						echo '订单'.$order['order_id'].'超过通知次数<br />';
						continue; //同一个订单只通知3次
					}
					$tax = 0;
					if($srvTask->getTaxPoint()){
						$tax = round($f['price'] * $srvTask->getTaxPoint(), 2);
					}
					$params = array();
					$params['arg0'] = 'YJFCRT'.$f['consume_id'];
					$params['arg1'] = (string)$order['order_id'];
					$params['arg2'] = (string)$orderData['state'];
					$params['arg3'] = floatval($f['price'] - $tax);
					$params['arg4'] = date('Y-m-d H:i:s',$f['dateline']);
					$params['arg5'] = 'zhubajie';
					$params['arg6'] = create_yjf_soap_sign($params);

					$result = $client->call('notify', $params);
					if($result || !$client->getError()){
						if($orderData['state'] == '0'){
							$g['order_state'] = 0;
						}else{
							$g['order_state'] = 1;
						}
						$order['lastmsg']['notice_success_time'] += 1;
						$order['lastmsg']['notice_consume_time'][$f['consume_id']] += 1;
						$g['lastmsg'] = serialize($order['lastmsg']);
						$g['lastchecktime'] = time();
						$model->update(array("id"=>$order['id']), $g);
					}else{
						$order['lastmsg']['notice_fail_time'] += 1;
						$order['lastmsg']['notice_consume_time'][$f['consume_id']] += 1;
						$order['lastmsg']['last_fail_msg'] = $client->getError();
						$g['lastmsg'] = serialize($order['lastmsg']);
						$g['lastchecktime'] = time();
						$model->update(array("id"=>$order['id']), $g);
					}
					print_r($g);
				}
			}
		}catch(Exception $e){
			echo 'error:';
			print_R($e->getMessage());
		}
		return true;
	}


	//-------LuYang添加--------
	/**
     * 首页
     */
    function request_post($url = '', $post_data = array()) //post Curl
    {
        if (empty($url) || empty($post_data))
        {
            return false;
        }
        $o = "";
        foreach ($post_data as $k => $v)
        {
            $o.= "$k=" . urlencode($v) . "&";
        }
        $post_data = substr($o, 0, -1);
        $postUrl = $url;
        $curlPost = $post_data;
        $ch = curl_init(); //初始化curl
        curl_setopt($ch, CURLOPT_URL, $postUrl); //抓取指定网页
        curl_setopt($ch, CURLOPT_HEADER, 0); //设置header
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //要求结果为字符串且输出到屏幕上
        curl_setopt($ch, CURLOPT_POST, 1); //post提交方式
        curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);
        $data = curl_exec($ch); //运行curl
        curl_close($ch);
        return $data;
    }
    
    public function jobYjfCreditTest(){
    	$interval = 180;
    	$model    = zbj_model_api::get('zbj_model_mb_yjfcredit');
    	$mconsume = zbj_model_api::get('zbj_model_fn_consume');
    	$morder   = zbj_model_api::get('zbj_model_fn_order');
    	
    	$condi   = array();
    	$condi[] = "order_state = '0'";
    	$condi[] = 'lastchecktime < '.(time()-$interval);
    	$model->setLimit(50);
    	$data = $model->select($condi,'*','','order by id asc')->items;
    	if(!$data){
    		echo 'no data found';
    		return true;
    	}
    	try{
    		$service = 'rewardloanOrderCompleteNotify';
    		$partnerId = '';
    		$key = '';
    		$soapGateway = '';
    		if(zbj_lib_Constant::DOMAIN == 'zhubajie.com'){
    			$partnerId =zbj_lib_Constant::YIJIFU_GATEWAY_ID;
    			$key = zbj_lib_Constant::YIJIFU_GATEWAY_KEY;
    			$soapGateway = 'http://openapi.yiji.com/gateway.html';
    		}else{
    			$partnerId ='20140411020055684571';
    			$key = 'c9cef22553af973d4b04a012f9cb8ea8';
    			$soapGateway = 'http://openapi.yijifu.net/gateway.html';
    		}
    		$times = 1000;
    		foreach($data as $order){
    			//$srvUser = new zbj_service_user($order['user_id']);
	    		$m_user = new zbj_model_mb_account($order['user_id']);
	    		$username=$m_user->getData('username');
	    			
	    		$params = array();
	    		date_default_timezone_set ("Asia/Chongqing");
	    		$orderNo=date("YmdGis").(time()+$times);
	    		$params['money'] = 1000;//floatval($f['price'] - $tax);
	    		$params['orderNo']=$orderNo;
	    		$params['outOrderNo'] = '1234567';
	    		$params['partnerId']=$partnerId;
	    		$params['serialNumber'] = 'YJFCRT22681520';
	    		$params['service'] = $service;
	    		$params['signType']='MD5';
	    		$times+=500;
	    		
	    		$state = '1';
	    		if($state == '0'){
	    			$params['status']='NEW_ORDER';
	    		}else if($state == '1'){
	    			$params['status']='SUCCESS_ORDER';
	    		}else if($state == '2'){
	    			$params['status']='CLOSE_ORDER';
	    		}
	    		
	    		$time = date('Y-m-d H:i:s',time());
	    		$params['time'] = $time;
	    		$params['username'] = $username;
	    		
	    		//签名排序
	    		$sign_str='';
	    		foreach ($params as $_key=>$value){
	    			$sign_str = $sign_str.$_key.'='.$value.'&';
	    		}
	    		$sign_str = substr($sign_str,0,strlen($sign_str)-1).$key;
	    		//$str = 'money=1000&orderNo='.$orderNo.'&outOrderNo='.$outOrderNo.'&partnerId='.$partnerId.'&serialNumber='.$serialNumber.'&service='.$service.'&signType=MD5&status=SUCCESS_ORDER&time='.$time.'&username='.$username.$key;
	    		
	    		$params['sign'] = md5($sign_str);
	    		$result = $this->request_post($soapGateway, $params);
	    		$result = json_decode($result,true);
	    		header("Content-Type:text/html;   charset=utf-8");
	    		var_dump($result);die();
	    		print_r($g);
    		}
    	}catch(Exception $e){
    		echo 'error:';
    		print_R($e->getMessage());
    	}
    	return true;
    }
	
	/**
	 * 对赏金贷的订单进行打款监控，单个订单监控频率受$interval影响。
	 */
	public function jobYjfCreditMoniter()
	{
		$interval = 180;
		$model    = zbj_model_api::get('zbj_model_mb_yjfcredit');
		$mconsume = zbj_model_api::get('zbj_model_fn_consume');
		$morder   = zbj_model_api::get('zbj_model_fn_order');

		$condi   = array();
		$condi[] = "order_state = '0'";
		$condi[] = 'lastchecktime < '.(time()-$interval);
		$model->setLimit(10);
		$data = $model->select($condi,'*','','order by id asc')->items;
		if(!$data){
			echo 'no data found';
			return true;
		}
		try{
			$service = 'rewardloanOrderCompleteNotify';
			$partnerId = '';
			$key = '';
			$soapGateway = '';
			if(zbj_lib_Constant::DOMAIN == 'zhubajie.com'){
				$partnerId =zbj_lib_Constant::YIJIFU_GATEWAY_ID;
				$key = zbj_lib_Constant::YIJIFU_GATEWAY_KEY;
				$soapGateway = 'http://openapi.yiji.com/gateway.html';
			}else{
				$partnerId ='20140411020055684571';
				$key = 'c9cef22553af973d4b04a012f9cb8ea8';
				$soapGateway = 'http://openapi.yijifu.net/gateway.html';
			}
			foreach($data as $order){
				$g = array();
				$c = array(
					'order_id'=>$order['order_id'],
					'user_id'=>$order['user_id'],
					'account_mtype'=>1,
				);
				$order['lastmsg'] = @unserialize($order['lastmsg']);
				$order['lastmsg'] || $order['lastmsg'] = array();
				$order['lastchecktime'] || $order['lastchecktime'] = 0;
				$srvTask = new zbj_service_task($order['product_pkid']);
				$srvTask = $srvTask->init();

				$e = $mconsume->select($c)->items;
				if(!$e){
					$g['lastchecktime'] = time();
					$model->update(array("id"=>$order['id']), $g);
					print_r($g);
					continue;
				}
				//$srvUser = new zbj_service_user($order['user_id']);
				$m_user = new zbj_model_mb_account($order['user_id']);
				$username=$m_user->getData('username');
				$morder->setPkid($order['order_id']);
				$orderData = $morder->get();
				$times = 500;
				foreach($e as $f){
					if($order['lastmsg']['notice_consume_time'][$f['consume_id']] > 2){
						$g['lastchecktime'] = time();
						$model->update(array("id"=>$order['id']), $g);
						
						echo '订单'.$order['order_id'].'超过通知次数<br />';
						continue; //同一个订单只通知3次
					}
					$tax = 0;
					if($srvTask->getTaxPoint()){
						$tax = round($f['price'] * $srvTask->getTaxPoint(), 2);
					}
					
					$params = array();
					date_default_timezone_set ("Asia/Chongqing");
					$orderNo = date("YmdGis").(time()+$times);
					$params['money'] = floatval($f['price'] - $tax);
					$params['orderNo'] = $orderNo;
					$params['outOrderNo'] = (string)$order['order_id'];
					$params['partnerId'] = $partnerId;
					$params['serialNumber'] = 'YJFCRT'.$f['consume_id'];
					$params['service'] = $service;
					$params['signType'] = 'MD5';
					$times += 500;
					 
					$state = (string)$orderData['state'];
					if($state == '0'){
						$params['status']='NEW_ORDER';
					}else if($state == '1'){
						$params['status']='SUCCESS_ORDER';
					}else if($state == '2'){
						$params['status']='CLOSE_ORDER';
					}
					
					$params['time'] = date('Y-m-d H:i:s',$f['dateline']);
					$params['username'] = $username;
					 
					//签名排序
		    		$sign_str='';
		    		foreach ($params as $_key=>$value){
		    			$sign_str = $sign_str.$_key.'='.$value.'&';
		    		}
		    		$sign_str = substr($sign_str,0,strlen($sign_str)-1).$key;
					
					$params['sign'] = md5($sign_str);
					$result = $this->request_post($soapGateway, $params);
					$result = json_decode($result,true);
					//var_dump($result);die();
					if($result['success']){
						if($orderData['state'] == '0'){
							$g['order_state'] = 0;
						}else{
							$g['order_state'] = 1;
						}
						$order['lastmsg']['notice_success_time'] += 1;
						$order['lastmsg']['notice_consume_time'][$f['consume_id']] += 1;
						$g['lastmsg'] = serialize($order['lastmsg']);
						$g['lastchecktime'] = time();
						$model->update(array("id"=>$order['id']), $g);
					}else{
						$order['lastmsg']['notice_fail_time'] += 1;
						$order['lastmsg']['notice_consume_time'][$f['consume_id']] += 1;
						$order['lastmsg']['last_fail_msg'] = $result['resultMessage'];//$client->getError();
						$g['lastmsg'] = serialize($order['lastmsg']);
						$g['lastchecktime'] = time();
						$model->update(array("id"=>$order['id']), $g);
					}
					print_r($g);
				}
			}
		}catch(Exception $e){
			echo 'error:';
			print_R($e->getMessage());
		}
		return true;
	}
}
