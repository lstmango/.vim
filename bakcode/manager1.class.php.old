<?php

/**
 * 交易系统-订单分配系统
 * @author lidacheng
 */
class consumer_service_allot_manager1 extends components_baseservice{
	
	//当前业务主数据表
	protected $marter_table = 'zbj_model_mk_task';
	
	public function __construct($id=0){
		parent::__construct();
		$this->setId($id);
	}
	
	/**
	 * 检查是否需要分配交易顾问，并将需求放入分配池子
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function checker($data){
		$data['task_id'] = intval($data['task_id']);
		if($data['task_id'] < 4800000) return true;
		
		// 香港馆需求跳过
		$srvZone = new zbj_service_zone_hongkong();
		if($srvZone->isHongKongTask($data['task_id'])){
			return true;
		}
		// 有数据同步过慢的问题，短期内读取主库，长期应采用延迟执行
		$srvTask = new zbj_service_task($data['task_id']);
		$srvTask->setDbEntry();
		$srvTask = $srvTask->init();
		$task = $srvTask->get();
		$taskinfo = $srvTask->get('task_info.task_source');
		//过滤掉商机转化为订单调用服务化接口加入池子,防止重复操作
		if($taskinfo['task_source']==99) return true;
		
		if(empty($task['task_id'])){
			throw new Exception("需求[{$data['task_id']}]不存在");
		}
		
		$predate = strtotime(date('Y-m-d'))-14400; // 昨晚8点过后
		$needAllot = $task['open_state']==0 && $task['manager_id']==0 && $task['audit_state']!=1 && $task['isaudit']>=0 && 
			(	
				(
					(
						(in_array($task['mode'],array(10,13)) && $task['state']<=2) || 
						(in_array($task['mode'],array(11,12)) && $task['state']<=3)
					) && $task['createtime']>$predate
				) || 
				(in_array($task['mode'],array(11,12)) && $task['state']==4)
			);
                
                $isbus = $srvTask->isBusiness() && $task['open_state']==0 && $task['manager_id']==0 && $task['audit_state']!=1 && $task['isaudit']>=0 && $task['state']<4;
		if(!$needAllot && !$isbus){
			return true;
		}
		
		$srvTaskPool = new zbj_service_taskallotpool();
		if($srvTaskPool->pushToAllotPool($srvTask) !== true){
			throw new Exception($srvTaskPool->getError());
		}
		return true;
	}
		
	/**
	 * 分配交易顾问入口【manager_id】
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function manager($data){
		$data['task_id'] = intval($data['task_id']);
		if($data['task_id'] < 4800000) return true;
		
		// 短期内读取主库，长期应采用延迟执行
		$srvTask = new zbj_service_task($data['task_id']);
		$srvTask = $srvTask->init();
		$task = $srvTask->get();
		
		if(empty($task['task_id'])){
			throw new Exception("需求[{$data['task_id']}]不存在");
		}

		$predate = strtotime(date('Y-m-d'))-14400; // 昨晚8点过后
		$chkresult = $task['open_state']==0 && $task['manager_id']==0 && $task['audit_state']!=1 && 
			(	
				(
					(
						(in_array($task['mode'],array(10,13)) && $task['state']<=2) || 
						(in_array($task['mode'],array(11,12)) && $task['state']<=3)
					) && $task['createtime']>$predate
				) || 
				(in_array($task['mode'],array(11,12)) && $task['state']==4)
			);
		$isbus = $srvTask->isBusiness() && $task['open_state']==0 && $task['manager_id']==0 && $task['audit_state']!=1 && $task['state']<4;
                
		$srvAlloter = new zbj_service_taskalloter();
		if((!$chkresult && !$isbus) || $srvAlloter->checkTaskNeedAllot($srvTask) !== true){ // 不需分配
			$srvTaskPool = new zbj_service_taskallotpool();
			if($srvTaskPool->releaseFromAllotPool($srvTask,'「不满足分配规则」') === false){// 重置池子标识
				throw new Exception($srvTaskPool->getError());
			}
			return true;
		}
		
		// 执行分配
		if($srvAlloter->getNextManagerAndDoAllot($srvTask) === false){
			throw new Exception($srvAlloter->getError());
		}
		
		return true;
	}
	
	
	/**
	 * 检查是否需要分配交易顾问，并将需求放入分配池子
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function managerDelay($data){
		return true;
	}
	
	/**
	 * 
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function cutManagerTodayAllotNum($data){
		return true;
	}	
	
	/**
	 * 重置交易顾问【manager_id】
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function resetManager($data){
		$data['task_id'] = intval($data['task_id']);
		if($data['task_id'] < 4800000) return true;
		
		$srvTask = new zbj_service_task($data['task_id']);
		$srvTask = $srvTask->init();
		$task = $srvTask->get();
		if(empty($task['task_id'])){
			throw new Exception("需求[{$data['task_id']}]不存在");
		}
		
		$taskinfo = $srvTask->get('task_info.*');
		if($taskinfo['pub_type']>0 || $task['manager_id']==0){
			throw new Exception("需求跟进标识异常或者交易顾问已被重置");
		}
		
		$srvAllotLog = new zbj_service_taskallotlog();
		
		try{
			$this->_beginTransaction('mk');
			
			$uptask = array(
				'manager_id'	=> 0,
				'manager_name'	=> '',
				'manager_teamid'=> 0,
				'm_is_at'		=> 0,
			);
			if($srvTask->set($uptask) === false){
				throw new Exception('设置需求交易顾问失败');
			}
			if($srvTask->save() === false){
				throw new Exception('重置需求交易顾问失败');
			}
			
			$srvAlloter = new zbj_service_taskalloter();
			$srvAlloter->setTransaction(false);
			if($srvAlloter->upManagerAllotConf(0,$task['manager_id'],$task) !== true){
				throw new Exception($srvAlloter->getError());
			}
						
			$throw = zbj_lib_Api::taskResetedManager($data['task_id'],$task['manager_id'],1);
			if($throw !==  true){
				throw new Exception(zbj_lib_Api::getError());
			}
			
			$this->_commit('mk');
		}catch(Exception $e){
			$this->_rollBack('mk');
			$srvAllotLog->addTaskAllotLog($data['task_id'],array($e->getMessage()));
			throw new Exception($e->getMessage());
		}
		
		unset($srvTask,$task,$uptask);
		
		return true;
	}

	/**
	 * 重置交易顾问配额[manager_id]
	 * @param	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function resetManagerConf($data){
		$data['task_id'] 	= intval($data['task_id']);
		$data['manager_id'] = intval($data['manager_id']);
		
		if($data['task_id'] <= 0 && $data['manager_id']<=0){
			throw new Exception('传递的需求数据异常');
		}
		
		if($data['manager_id'] <= 0){
			$srvTask = new zbj_service_task($data['task_id']);
			$srvTask = $srvTask->init();
			$task = $srvTask->get();
			
			if(empty($task['task_id'])){
				throw new Exception("需求[{$data['task_id']}]不存在");
			}
			if($task['createymd']<'2015-03-01' || $task['manager_id']<=0){
				return true;
			}
			$data['manager_id'] = $task['manager_id'];
		}
		
		$srvAlloter = new zbj_service_taskalloter($data['manager_id']);
		if(($restrs = $srvAlloter->resetManagerAllotRate())!==false){
			$restrs = $srvAlloter->resetManagerAllotConfig();
		}	
		
		$srvAllotLog = new zbj_service_taskallotlog();
		$srvAllotLog->addTaskAllotLog($data['task_id'],array('重置交易顾问分配阀值'.($restrs?'成功':'失败')));
		
		unset($srvAlloter,$srvAllotLog,$data);
		
		return true;
	}
	
		
	/**
	 * 减少交易顾问分配配额[manager_id]
	 * @param	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function cutManagerTodayAllotConf($data){
		$data['task_id'] 	= intval($data['task_id']);
		$data['manager_id'] = intval($data['manager_id']);
		
		if($data['task_id'] <= 0 && $data['manager_id']<=0){
			throw new Exception('传递的需求数据异常');
		}
		
		if($data['task_id'] > 0){
			$srvTask = new zbj_service_task($data['task_id']);
			$srvTask = $srvTask->init();
			$task = $srvTask->get();
			
			if(empty($task['task_id'])){
				throw new Exception("需求[{$data['task_id']}]不存在");
			}
			if($task['createymd']>='2015-03-01'){
				$data['manager_id']>0 && $task['manager_id'] = $data['manager_id'];
			}else{
				$task = array();
			}
		}
		
		empty($task) && $task = $data;
		
		// 减少交易顾问分配配额
		$srvAlloter = new zbj_service_taskalloter();
		$back = $srvAlloter->upManagerAllotConf(0,$task['manager_id'],$task);
		
		if($back !== true){
			throw new Exception($srvAlloter->getError());
		}
		return true;
	}
		
	/**
	 * 减少交易顾问需要跟进的订单数量[manager_id]
	 * @param	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function cutManagerNeedFollowNum($data){
		#2015-10-31新需求，暂不需要待跟进数量限制
		return true;
		$data['task_id'] 	= intval($data['task_id']);
		$data['manager_id'] = intval($data['manager_id']);
		
		if($data['task_id'] <= 0 && $data['manager_id']<=0){
			throw new Exception('传递的需求数据异常');
		}
		
		if($data['manager_id'] <= 0){
			$srvTask = new zbj_service_task($data['task_id']);
			$srvTask = $srvTask->init();
			$task = $srvTask->get();
			
			if(empty($task['task_id'])){
				throw new Exception("需求[{$data['task_id']}]不存在");
			}
			if($task['createymd']<'2015-03-01' || $task['manager_id']<=0){
				return true;
			}
			$data['manager_id'] = $task['manager_id'];
		}
		
		$srvAlloter = new zbj_service_taskalloter($data['manager_id']);
		$back = $srvAlloter->cutManagerNeedFollowNum(1);
		
		$type = strtolower($data['type']);
		switch($type){
			case 'giveup':
				$msg = '已放弃'; break;
			case 'followed':
				$msg = '已跟进'; break;
			case 'closed':
				$msg = '已关闭'; break;
			default:
				$msg = '已发布'; break;
		}
		
		$srvAllotLog = new zbj_service_taskallotlog();
		$srvAllotLog->addTaskAllotLog($data['task_id'],array($msg.',减少顾问待跟进订单数量'.($back?'成功':'失败')));
		
		if($back === false){
			throw new Exception($srvAlloter->getError());
		}
		unset($srvTask,$srvAlloter,$srvAllotLog,$data);
		
		return true;
	}
	
}
