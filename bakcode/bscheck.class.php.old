<?php
/**
 * 订单分配系统-商机分配
 */
class zbj_service_allot_bscheck extends zbj_components_baseservice{
	
	protected $marter_table = 'zbj_model_mk_bstoct';
	
	/**
	 * 构造函数
	 */
	public function __construct($id=0){
		parent::__construct();
		$this->setId($id);
	}
		
	/**
	 * 检查是否需要分配顾问，并将需求放入分配池子
	 * 待扩展
	 * */
	public function checkNeedPushPool($data){
		return true;
	}

	/**
	 * 分配商机入口
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function bsallot($data){
		$resaonData['reason']='bsallot ';
		$resaonData['source']=$data['source']?$data['source']:1;
		$data['task_id'] = intval($data['task_id']);
		$resaonData['task_id']=$data['task_id'];
		/*
         *$t1 = microtime(true);
         *if(date('H:i:s') > '22:00:00' || date('H:i:s') < '09:00:00'){
		 *    $this->setError(0,'不在分配时间内');
         *}
		 */
		$bsModule = zbj_model_api::get('zbj_model_mk_bstoct');
		$bsArray=$bsModule->selectOne('bs_to_ct_id='.$data['task_id']);
		if(empty($bsArray['bs_to_ct_id'])){
			$resaonData['reason'].="需求[{$data['task_id']}]不存在";
			$markResult=$this->noNeedAllotResaonMark($resaonData);
			return $markResult;
		}
		$chkresult = $bsArray['status']==0 && $bsArray['ordertime']==0 && $bsArray['allottime']==0 && $bsArray['follow_uid']==0;
		if(!$chkresult){
			$resaonData['reason'].='任务状态异常';
			$markResult=$this->noNeedAllotResaonMark($resaonData);

			$srvAllotBsPool = new zbj_service_allot_bspool();
			if($srvAllotBsPool->releaseFromAllotPool($bsArray,'「不满足分配规则」') === false){// 重置池子标识
				throw new Exception($srvAllotBsPool->getError());
			}
			return true;
		}
		// 执行分配
		$srvAllotBs = new zbj_service_allot_bsallot ();
		if($srvAllotBs->getNextManagerAndDoAllot($bsArray) === false){
			throw new Exception($srvAllotBs->getError());
		}
		return true;
	}
	
	/**
	 * 重置交易顾问【manager_id】
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function resetManager($data){
		$data['task_id'] = intval($data['task_id']);
		$bsModule = zbj_model_api::get('zbj_model_mk_bstoct');
		$bsArray=$bsModule->selectOne('bs_to_ct_id='.$data['task_id']);
		if(empty($bsArray['bs_to_ct_id'])){
			throw new Exception("需求[{$data['task_id']}]不存在");
		}
		
		if($bsArray['follow_uid']==0){
			throw new Exception("商机顾问已被重置");
		}
		
		try{
			$this->_beginTransaction('mk');

			$bsAllotPool = new zbj_service_allot_bspool();
			$uptask['follow_uid'] = 0;
			$uptask['allottime'] = 0;
			$uptask['status'] = 0;
			$uptask['ordertime'] = 0;
			if($bsModule->update('bs_to_ct_id='.$data['task_id'],$uptask) === false){
				throw new Exception('重置需求商机顾问失败');
			}
			$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'重置交易顾问成功！',30,2);
			
			$srvAlloter = new zbj_service_allot_bsallot();
			$srvAlloter->setTransaction(false);
			if($srvAlloter->updateManagerConf(0,$bsArray['follow_uid'],$bsArray) !== true){
				throw new Exception($srvAlloter->getError());
			}
			$grabPoolModule = zbj_model_api::get('zbj_model_mk_allotgrabpool');
			$grabCondi['task_id']=$bsArray['bs_to_ct_id'];
			$grabCondi['type']=2;
			$isPushGrabPool=$grabPoolModule->selectOne($grabCondi);
			if($isPushGrabPool){
				$delResult=$grabPoolModule->delete($grabCondi);
				if(!$delResult){
					throw new Exception('清除盲抢标记失败！');
				}
				$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'清除盲抢标记成功！',30,2);
			}
			$grabCondi['task_id']=$bsArray['bs_to_ct_id'];
			$grabCondi['type']=2;
			$taskGrabPoolModule = zbj_model_api::get('zbj_model_mk_taskallotgrab');
			$grabWinPool=$taskGrabPoolModule->selectOne($grabCondi);
			if($grabWinPool){
				if($grabWinPool['status']==1){
					$deleteResult=$taskGrabPoolModule->delete($grabCondi);
					if(!$deleteResult){
						throw new Exception('清除盲抢标记失败！');
					}
					$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'清除盲抢成功标记成功！',30,2);
				}
				else if($grabWinPool['status']==0 && ($grabWinPool['createtime']+60)<time()){
					$deleteResult=$taskGrabPoolModule->delete($grabCondi);
					if(!$deleteResult){
						throw new Exception('清除盲抢成功标记失败！');
					}
					$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'清除盲抢成功标记成功！',30,2);
				}
				else{
					throw new Exception('该任务正被抢，清除盲抢成功标记失败！');
				}
			}
			$allotPoolModule = zbj_model_api::get('zbj_model_mk_allotpool');
			$allotCondi['task_id']=$bsArray['bs_to_ct_id'];
			$allotCondi['type']=2;
			$updatePool[]='needallot=1';
			$updatePool[]='allotstate=0';
			$updatePool[]='next_chktime='.(time()+5);
			$updatePool[]='begin_chktime='.(time()+5);
			$updateResult=$allotPoolModule->update($allotCondi,$updatePool);
			if(!$updateResult){
				throw new Exception('更新分配池失败！');
			}
			$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'已重新放入池子！',30,2);
			
			$this->_commit('mk');
		}catch(Exception $e){
			$this->_rollBack('mk');
			$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],$e->getMessage(),30,2);
			throw new Exception($e->getMessage());
		}
		return true;
	}

	/**
	 * 修复商机重新放进盲抢池【禁止调用】
	 * @parma	array	$data
	 * @return bool
	 * @throw Exception
	 * */
	public function fixBschance($data){
		$data['task_id'] = intval($data['task_id']);
		$bsModule = zbj_model_api::get('zbj_model_mk_bstoct');
		$bsArray=$bsModule->selectOne('bs_to_ct_id='.$data['task_id']);
		if(empty($bsArray['bs_to_ct_id'])){
			var_dump("需求[{$data['task_id']}]不存在");
		}
		
		try{
			$this->_beginTransaction('mk');

			$bsAllotPool = new zbj_service_allot_bspool();
			$uptask['follow_uid'] = 0;
			$uptask['allottime'] = 0;
			$uptask['status'] = 0;
			$uptask['ordertime'] = 0;
			if($bsModule->update('bs_to_ct_id='.$data['task_id'],$uptask) === false){
				throw new Exception('重置需求商机顾问失败');
			}
			$grabPoolModule = zbj_model_api::get('zbj_model_mk_allotgrabpool');
			$grabCondi['task_id']=$bsArray['bs_to_ct_id'];
			$grabCondi['type']=2;
			$isPushGrabPool=$grabPoolModule->selectOne($grabCondi);
			if($isPushGrabPool){
				$delResult=$grabPoolModule->delete($grabCondi);
				if(!$delResult){
					throw new Exception('清除盲抢标记失败！');
				}
				$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'清除盲抢标记成功！',30,2);
			}
			$grabCondi['task_id']=$bsArray['bs_to_ct_id'];
			$grabCondi['type']=2;
			$taskGrabPoolModule = zbj_model_api::get('zbj_model_mk_taskallotgrab');
			$grabWinPool=$taskGrabPoolModule->selectOne($grabCondi);
			if($grabWinPool){
				if($grabWinPool['status']==1){
					$deleteResult=$taskGrabPoolModule->delete($grabCondi);
					if(!$deleteResult){
						throw new Exception('清除盲抢标记失败！');
					}
					$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'清除盲抢成功标记成功！',30,2);
				}
				else if($grabWinPool['status']==0 && ($grabWinPool['createtime']+60)<time()){
					$deleteResult=$taskGrabPoolModule->delete($grabCondi);
					if(!$deleteResult){
						throw new Exception('清除盲抢成功标记失败！');
					}
					$bsAllotPool->addLog2($bsArray['bs_to_ct_id'],'清除盲抢成功标记成功！',30,2);
				}
				else{
					throw new Exception('该任务正被抢，清除盲抢成功标记失败！');
				}
			}
			$allotPoolModule = zbj_model_api::get('zbj_model_mk_allotpool');
			$allotCondi['task_id']=$bsArray['bs_to_ct_id'];
			$allotCondi['type']=2;
			$updatePool[]='needallot=1';
			$updatePool[]='allotstate=0';
			$updatePool[]='next_chktime='.(time()+5);
			$updatePool[]='begin_chktime='.(time()+5);
			$updateResult=$allotPoolModule->update($allotCondi,$updatePool);
			if(!$updateResult){
				throw new Exception('更新分配池失败！');
			}
			
			$this->_commit('mk');
		}catch(Exception $e){
			$this->_rollBack('mk');
			var_dump($e->getMessage());
		}
		return true;
	}

	/*
	 *商机盲抢池任务堆积分配
	 */
	public function bsRandPoolAllot($data){
		$resaonData['reason']='bsallot ';
		$resaonData['source']=$data['source']?$data['source']:1;
		$data['task_id'] = intval($data['task_id']);
		$resaonData['task_id']=$data['task_id'];
		$bsModule = zbj_model_api::get('zbj_model_mk_bstoct');
		$bsArray=$bsModule->selectOne('bs_to_ct_id='.$data['task_id']);
		if(empty($bsArray['bs_to_ct_id'])){
			$resaonData['reason'].="需求[{$data['task_id']}]不存在";
			$markResult=$this->noNeedAllotResaonMark($resaonData);
			var_dump("需求[{$data['task_id']}]不存在");
			return false;
		}
		$chkresult = $bsArray['status']==0 && $bsArray['ordertime']==0 && $bsArray['allottime']==0 && $bsArray['follow_uid']==0;
		if(!$chkresult){
			$resaonData['reason'].='任务状态异常';
			$markResult=$this->noNeedAllotResaonMark($resaonData);
			var_dump('任务状态异常');
			return false;
		}
		// 执行分配
		$srvAllotBs = new zbj_service_allot_bsallot ();
		if($srvAllotBs->getNextManagerAndDoAllotGrabpool($bsArray) === false){
			var_dump($srvAllotBs->getError());
			return false;
		}
		return true;
	}
	/*
	 *无需分配原因记录
	 */
	private function noNeedAllotResaonMark($data){
		$data['createtime'] = time();
		$data['type'] = 2;
		$data['status']=$data['reason']?2:1;
		$data['reason'].=date('Y-m-d H:i:s',time());
		$allotAnalyseModule=zbj_model_api::get('zbj_model_mk_allotanalyse');
		$back = $allotAnalyseModule->insert($data);
		if(!$back){
			$this->setError(0,'记录未分配原因失败');
		}
		return $back;
	}
	
}
