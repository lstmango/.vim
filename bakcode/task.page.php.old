<?php
/**
 * 任务发布
 * @date 2012.3
 */
use com\zhubajie\task\interfaces\WorkQuoteServiceClient;
use com\zhubajie\task\dataobject\workquote\QuoteItemDTO;
use com\zhubajie\task\dataobject\workquote\QuoteDTO;
use com\zhubajie\task\dataobject\workquote\EditQuoteDTO;
use com\zhubajie\task\dataobject\workquote\QuoteAuditDTO;
use com\zhubajie\task\dataobject\workquote\QuoteDetailResultDTO;
use com\zhubajie\task\dataobject\taskrecommend\ConditionDO;
use com\zhubajie\task\dataobject\workquote\GiveupDTO;


class controller_task extends components_basepage {
	
	const IS_REFUND_REMARK = 3;
	public $url;
	
	private function init($inPath){
		var_dump($_SESSION);
		$this->url = $this->getUrlParams($inPath);
	}

	//查看双方评价
	function pageevaluation($inPath){

			$this->init($inPath);
			$tid = (int)$this->url['id'];
			$evaluationmodel = new model_mb_evaluation();
			$evaluationlist = $evaluationmodel->select("task_id={$tid}")->items;
			$evaAddModel = new zbj_model_mb_evaluationadd();
			$evaExplain = new zbj_model_mb_evaluationexplain();
			
			foreach ($evaluationlist as $key => $value) {
				if($value['type'] == 2){
					$data['eva'] = $evaluationlist[$key];
					$data['eva_add'] = $evaAddModel->selectOne("evaluation_id={$value['evaluation_id']}");
					$data['eva_explain'] = $evaExplain->selectOne("evaluation_id={$value['evaluation_id']}");
				}else{
					$data['eva_other'] = $evaluationlist[$key];
				}
			}
		return $this->render('task/ajax/viewtaskevaluate.html', $data);

	}

	/**
	 * 任务显示
	 */
	function pagelastviewold($inPath){
		$this->init($inPath);
		$limit = 20;
        $page = isset($this->url['page'])? (int)$this->url['page']: 1;
        $phone_user_id = lib_BaseUtils::getStr($this->url['puid'], 'int');
		$params = array();
		$filter = array();
		$params['phone_user_id'] = $phone_user_id;//mb_survey_phone_user表主键
		$iTaskID = intval($this->url['id']);
		$iTab = isset($this->url['t'])?(int)$this->url['t']:0;
		$params['t'] = $iTab;
		if (!$iTaskID) {
			return $this->printmsg('参数错误');
		}
		$sTask = new zbj_service_task($iTaskID);
		$sTask = $sTask->init();
		//模式
		$mode = $sTask->get('mode');
		if (!in_array($mode, array(10,11,12,13))) {
			$sName = $_SERVER['SERVER_NAME'];
			if ($sName == 'cp.v5.zbj.com') {
				$sName = 'cp.v4.zbj.com';
			} elseif (stripos(lib_Constant::BOSS_URL, $sName)) {
				$sName = 'cq.cp.zhubajie.com:13520';
			} else {
				header('content-type:text/html;charset=utf-8');
				return '无法获取服务器';
			}
			$url = 'http://'.$sName.'/admintask/view-tid-'.$iTaskID.'.html';
			return $this->redirect($url);
		}
		//任务信息
		$aTask = $sTask->get();
		
		/*by liang 如果是众帮分享帮 start*/
       	$zbObj = new model_mk_taskallotattr;
       	$condition = array('task_id'=>$iTaskID);
       	$zbArr = $zbObj->selectOne($condition,'attr_id');
        if( $zbArr ){
        	$params['zb'] = 1;
        }
        /*by liang 如果是众帮分享帮 end*/

		//扩展属性
		$srvCategory=new zbj_service_category($aTask['category_id']);
		$ext_list = $srvCategory->getExt(1);
		if($ext_list) {
			$ext_val_list = $sTask->getExtVal();
			if($ext_val_list) {
				foreach($ext_list as $idx => $ext) {
					if(isset($ext_val_list[$ext['ext_id']])) {
						$ext_list[$idx]['selected'] = $ext_val_list[$ext['ext_id']];
					} else {
						$ext_list[$idx]['selected'] = false;
					}
				}
				$params['task_category_ext']=$ext_list;
			}
		}
		
		
		
		if (empty($aTask)) {
			return $this->printmsg("任务不存在");
		}
		if ($aTask['category_id']) {
			$s_module = new service_module();
			$module = $s_module->getModuleByCategoryId($aTask['category_id']);
			if ($module && $module['module_name']) {
				$aTask['module_name'] = $module['module_name'];
			}else{
				$aTask['module_name'] = '暂无行业运营';
			}
		}
		
		//info详情
		$aInfo = $sTask->get("task_info.*");
		$params['info'] = $aInfo;

		//判断是否为外包
		$mdlOutTask = new zbj_model_mk_taskoutsource();
		$outRes = $mdlOutTask->selectOne("task_id='$iTaskID'",'fws_id');
		$params['info']['waibao'] = $outRes? 1 : 0;
		
		$params['info_option'] = unserialize($aInfo['option']);
		$params['task_opis'] = $sTask->get("task_opis.*");
		$params['task_paytype'] = $sTask->get("task_paytype.*");
		$params['is_need_up_file'] = $sTask->isNeedUpFile();
// 		$params['nps_score'] = service_task::getNpsScore($iTaskID);
		$params['nps_score'] = $this->_getNpsScore($iTaskID);

		// 扩展表数据
	//	$params['extends'] = $sTask->get("task_extends.*");

        //鉴权控制
        //平面设计组-404 专业设计组-437 文案营销一组-408 文案营销二组-510
        if(in_array($this->_usergroupid,array(399,453,374,386,404,437,408,510))){//2015/09/06新增大客户取经团和建筑工程取经团-订单运营取经团
            $params['user_auth_status'] = 1;
        }else{
            $params['user_auth_status'] = 0;
        }
		
		//授权
		$params['accredit'] = service_npsaccredit::getAccreditByTaskId($iTaskID);
		
		//订单
		if (in_array($mode, array(11,12))) {
			$taskobj = new zbj_service_task_buy($iTaskID);
			$order = $taskobj->getOneWinOrder();
			if (!$order) {
				$order = $taskobj->getOneWinOrder(NULL, 2);
				
				
				if (!$order) {
					return $this->printmsg('订单获取失败');
				}
			}
			
			////////////////////验证该订单是否已付过款 By张启明///////////////////////////
			$installmentModel = new zbj_model_mk_installment();
			$installmentCondition = array('order_id' => $order['order_id']);
		    $selectedInstallment = $installmentModel->selectOne($installmentCondition, '*');
		    if(empty($selectedInstallment)){
		    	$params['hasInstallment'] = 0;
		    } else{
		    	$params['hasInstallment'] = 1;
		    }
		    ////////////////////////////////////////////////////////////////////
		    
			
			$params['taskorder_option'] = unserialize($order['option']);
			$params['taskorder'] = $order;
			$sl_user=new zbj_service_user($order['sl_user_id']);
			$params['sl_user'] = $sl_user->get();
			$params['sl_user']['info'] = $sl_user->get('info.*');
		}
		//用户信息
		$sUser = new zbj_service_user($aTask['user_id']);
		$params['taskuser'] = $sUser->get();
		$params['taskuser_info'] = $sUser->get('info.*');
		$aTask['brandname'] = $sUser->get('info.brandname');
		$params['task'] = $aTask;
		$leave = '';//交易顾问离职状态
		$m_cpuser = new zbj_model_cp_user();
		//交易完成
		$params['fn_order_status']=0;
		if ($aTask['state'] ==4 ) {
			$fn_order_where['stype']=16;
			$fn_order_where['refund_state']=2;
			$fn_order_where['product_pkid']=$iTaskID;
			$fn_order_where['refund_amount']=0;
			$m_fn_order=new zbj_model_fn_order();
			$fn_order=$m_fn_order->selectOne($fn_order_where);
			if ($fn_order) {
				$params['fn_order_status']=1;
			}
		}
//		if ($aTask['manager_id']) {
//			
//			$cpuser = $m_cpuser->selectOne(array('user_id'=>$aTask['manager_id']), 'isleave');
//			if ($cpuser['isleave']==1) {
//				$leave = '（离职）';
//			}else if($cpuser['isleave']==2){
//				$leave = '（调岗）';
//			}else if($cpuser['isleave']==3){
//				$leave = '（休假）';
//			}
//		}
//		$params['leave'] = $leave;
		//用户内部资料信息
		$m_customerperson = new zbj_model_mb_customerperson($aTask['user_id']);
        $customerperson = $m_customerperson->getdata();
        $params['customerperson'] = $customerperson;
        
        //取得所有下拉框选项相相关联的值
        $s_cpoption=new service_cpoption();
        $params['fulloptions']=$s_cpoption->getFullItems();
		//任务标签t6s版本不在使用
// 		$aTag = $sTask->getTaskTag();
// 		$params['tasktag'] = $aTag;
		//举报数
		$oReport = new zbj_service_report();
// 		$params['reportTotal'] = $oReport->getTaskReport($iTaskID);
		//任务拓展数据
		$params['opis'] = $params['task_opis'];
		if(!$params['opis']){
			//return $this->printmsg("任务拓展数据不存在");
		}
		
		//增值服务包信息
		$m_service_pack = new zbj_model_fn_servicepack();
		$params['service_pack'] = $m_service_pack->select(array('pack_id' => $aTask['was_pack']))->items;
		
		//
		switch ($iTab) {
			case 1:
				//日志
//                define(DEBUG, 1);
                $logcondition[] = 'task_id = '.$iTaskID;
                $js = trim ( zbj_lib_BaseUtils::getStr ( $_GET ['js'] ) );
                $filter['js'] = $js;
                switch ($js){
                    case 2 :
                        $logcondition[] = 'isbuyer = 1';
                        break;
                    case 3 :
                        $logcondition[] = 'isbuyer = 2 ';
                        break;
                    case 4:
                        $logcondition[] = 'isbuyer = 0';
                        break;
                    case 5:
                        $logcondition[] = 'isbuyer = 3';
                        break;
                }
                $st = trim ( zbj_lib_BaseUtils::getStr ( $_GET ['st'] ) );
                $filter['st'] = $st;                 
                switch ($st) {
                    case 1 :
                            $logcondition[] = "state = 1";
                            break;
                    case 2 :
                            $logcondition[] = "state = 2";
                            break;
                    case 3 :
                            $logcondition[] = "state = 3";
                            break;
                    case 4 :
                            $logcondition[] = "state = 4";
                            break;
                }
                $mdltasklog = zbj_model_api::get('zbj_model_mk_taskactionlog');
                $mdltasklog->setLimit($limit);
                $mdltasklog->setPage($page);
                $mdltasklog->setCount(true);
                $logcontent = $mdltasklog->select($logcondition, '*');
                //分页
                $querystring = $_SERVER['QUERY_STRING'];
                $pagebar = $this->PageBar($logcontent->totalSize, $limit, $page, $inPath, 'style4', $querystring);
                $params['tasklog'] = $logcontent->items;
                $params['logtotal']   = $logcontent->totalSize;
                $params['logpagebar'] = $pagebar; 
				break;
			case 2:
				//评论
//                define(DEBUG, 1);
               $commentcondition = array('task_id' => $iTaskID);
                $m = trim ( zbj_lib_BaseUtils::getStr ( $_GET ['m'] ) );
                $params['m'] = $m;   
                switch ($m) {
                    case 1 :
                            $commentcondition[] = "mode = 1";
                            break;
                    case 2 :
                            $commentcondition[] = "mode = 2";
                            break;
                    case 3 :
                            $commentcondition[] = "mode = 3";
                            break;
                    case 4 :
                            $commentcondition[] = "mode = 4";
                            break;
                    case 5 :
                            $commentcondition[] = "mode = 0";
                            break;
                }
                $mdltaskcomment = zbj_model_api::get('zbj_model_mk_taskcomment');
                $mdltaskcomment->setLimit($limit);
                $mdltaskcomment->setPage($page);
                $mdltaskcomment->setCount(true);
				$comment = $mdltaskcomment->select($commentcondition, '*');
				$params['m1'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 1', 'count(1) as num')->items[0]['num'];
				$params['m2'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 2', 'count(1) as num')->items[0]['num'];
				$params['m3'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 3', 'count(1) as num')->items[0]['num'];
				$params['m4'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 4', 'count(1) as num')->items[0]['num'];
				$params['m5'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 0', 'count(1) as num')->items[0]['num'];

                //分页
                $querystring = $_SERVER['QUERY_STRING'];
                $pagebar = $this->PageBar($comment->totalSize, $limit, $page, $inPath, 'style4', $querystring);
                $params['taskcomment'] = $comment->items;
                $params['total']   = $comment->totalSize;
                $params['pagebar'] = $pagebar; 
				break;
			case 4://备注
				$remarklist = $this->_getRemark($iTaskID);
				$params ["remarklist"] = $remarklist->items;
				$params['remark_total'] = $remarklist->totalSize;
				$params['remark_pagebar'] = $this->PageBar($remarklist->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
			case 5://订单
				$ordercondition=array();
				$ordercondition['product_pkid']=$iTaskID;
				if(isset($_GET['ordersel'])){
					switch (intval($_GET['ordersel'])){
						case '1':
							$ordercondition['ispay']=0;
							break;
						case '2':
							$ordercondition['ispay']=1;
							$ordercondition['state']=0;
							break;
						case '3':
							$ordercondition['ispay']=1;
							$ordercondition['state']=1;
							break;
						case '4':
							$ordercondition['state']=2;
							break;
						default:
							break;
					}
				}
                $m_order = new zbj_model_fn_order();
                $m_order->setLimit($limit);
                $m_order->setPage($page);
                $m_order->setCount(true);
                $orderlist = $m_order->select($ordercondition, 'order_id,title,state,price,createtime,ispay,sl_nickname,sl_user_id,user_id,nickname,stype,refund_state,refund_amount,isevaluation,isevaluation_sl,isevaluation_buy',null,'order by order_id desc');
                //获取履约保证金记录信息
                $successsrvWork = $sTask->getSuccessWorkObject();
                $agreementid = 0;
                if(!empty($successsrvWork)){
                	$agreementid = $successsrvWork->getAgreementById();
            	}
                $agreementstr = '';
                if($agreementid>0){                	
                	$srvAgreement = new zbj_service_agreementcond_pay($agreementid);
                	$agreementData = $srvAgreement->get();
                	$refund_money = 0.00;
                	if(!empty($agreementData)){
	                	$agreementordercondition['product_pkid']=$agreementid;
	                	$agreementordercondition['stype'] = 631;
	                	$agreementordercondition['ptype'] = 34;
	                	$agreementordercondition['ispay'] = 1;
	                	$agm_order = new zbj_model_fn_order();
	                	$agreememtorder = $agm_order->selectOne($agreementordercondition,'order_id,title,state,price,createtime,ispay,sl_nickname,sl_user_id,user_id,nickname,stype,refund_state,refund_amount,refund_type',"","order by order_id");
                		if(!empty($agreememtorder)){
                			$refund_money = round(zbj_lib_BaseUtils::getStr($agreememtorder['refund_amount'],'float'),2);
                			$agreement_money = round(zbj_lib_BaseUtils::getStr($agreementData['value'],'float'),2);
                			$agreementmoney = number_format($agreement_money,2,'.','');
                			$agreementstr="<br/>履约保证金：{$agreementmoney}元/";
                			$paymentmoney = number_format(($agreement_money-$refund_money),2,'.','');
                			if($refund_money>0 && $refund_money<$agreement_money){
                				$agreementstr.="<br/><div class='text-warning'>赔偿雇主{$paymentmoney}元，退还服务商{$refund_money}元，将在任务打款时到账</div>";
                			}else if($agreement_money>0 && $refund_money==$agreement_money){
                				$agreementstr.="<br/><div class='text-warning'>服务商缴纳的履约保证金{$agreementmoney}元，将在任务打款时返还给服务商</div>";
                			}                			
                		}
                	}   
                }
                if($agreementstr){
                	$orderlist->items[0]['agreementstr']=$agreementstr;
                }
                $params['orderlisttotal'] = $orderlist->totalSize;
                $params['orderlist'] = $orderlist->items;
                $params['pagebar'] = $this->PageBar($orderlist->totalSize, $limit, $page, $inPath, 'style4', '?'.$_SERVER['QUERY_STRING']);
                //悬赏-2015/10/15-新增协商支付批量操作
                $str_order_ids = "";
                foreach ($params['orderlist'] as $key => $order) {
                	if($aTask['state']==3 && $aTask['ispublicity']==1 
                		&& $aTask['publicity_outime'] < $this->_time && $order['state'] == '0' 
                		&& $aTask['allot'] != '3' && $order['stype']==16){
                		if ($str_order_ids=="") {
                			$str_order_ids = $order['order_id'];
                		}else{
                			$str_order_ids .= ",".$order['order_id'];
                		}
                	}
                }
                $params['str_order_ids'] = $str_order_ids;
				break;
			case 6:
				//report
				$otype = zbj_lib_BaseUtils::getStr($_GET['otype'], 'int');
				$stype = zbj_lib_BaseUtils::getStr($_GET['stype'], 'int');
				$rstate = zbj_lib_BaseUtils::getStr($_GET['rstate'], 'int');
				$isvest = zbj_lib_BaseUtils::getStr($_GET['isvest'], 'int');
				$scont = trim(zbj_lib_BaseUtils::getStr($_GET['scont']));
				$filter['otype'] = $otype;
				$filter['stype'] = $stype;
				$filter['scont'] = $scont;
				$filter['rstate'] = $rstate;
				$filter['isvest'] = $isvest;
				$evaluationmodel = new zbj_model_mb_evaluation();
				$evaluationlist = $evaluationmodel->select("task_id={$iTaskID}","evaluation_id")->items;
				$wherestr ='';
				if(!empty($evaluationlist)){
					$evaluationids = array();
					foreach($evaluationlist as $evaluation){
						$evaluationids[] =$evaluation['evaluation_id']; 
					}
					if(!empty($evaluationids)){
						$wherestr = " or (t1.o_type=6 and t1.o_id in(".implode(",",$evaluationids)."))";
					}
				}
				$reportCondition = "((t1.o_type=2 and t1.o_id={$iTaskID}) or (t1.o_type=1 and t1.o_bel_id={$iTaskID})".$wherestr.")";
				$report_leftjoin = array("mb_council_report as t2" => "t1.report_id=t2.report_id");
				$typeCondition = $reportCondition;
				if ($otype) {
					$reportCondition .= " and t1.type={$otype}";
				}
				if ($stype && $scont) {
					switch ($stype) {
						case 1:
							$scont = (int) $scont;
							$reportCondition .= " and t1.report_id={$scont}";
							break;
						case 2:case 3:
							$usercond='';
		                    if(is_numeric($scont)){
		                        $usercond="`user_id`=".(int)$scont;
		                    }else{
		                        $usercond="`nickname`='{$scont}' or `brandname`='{$scont}'";
		                    }
							$oUser = new zbj_model_mb_info();
							$user = $oUser->selectOne($usercond, "user_id");
							if ($user['user_id']) {
								$tempfield = $stype == 2 ? "f_user_id" : "t_user_id";
								$reportCondition .= " and t1.{$tempfield}={$user['user_id']}";
							}
							break;
						default:
							break;
					}
				}
				if ($rstate) {
					if ($rstate > 2) {
						$reportCondition .= " and t1.state>2";
					} else {
						$reportCondition .= " and t1.state={$rstate}";
					}
				}
				if ($isvest) {
					$reportCondition .= " and t2.status=3";
				}
				$reportList = $oReport->getReportList($reportCondition, 1, "t1.report_id,t1.type,t1.state,t1.f_nickname,t1.t_nickname,t1.addtime,t2.status as isvest,t1.expand", "ORDER BY t1.report_id DESC", $page, $limit, $report_leftjoin);
				$typeList = $oReport->getReportList($typeCondition, 1, "t1.type", "", 0, 0, $report_leftjoin);
				$querystring = $_SERVER['QUERY_STRING'];
				$reportpagebar = $this->PageBar($reportList['totalSize'], $limit, $page, $inPath, 'style4', $querystring);
				$reportType = $oReport->_type;
				if ($reportList['totalSize']>0) {
					foreach ($reportList['items'] as $k => $v) {
						$reportList['items'][$k]['token'] = md5($v['report_id'] . $iTaskID . 1 . zbj_lib_Constant::ZBJ_SYSUSERKEY . $this->_userid);
						$reportList['items'][$k]['expand'] = unserialize($v['expand']);
						if ($v['state'] > 2) {
							$result = $oReport->getReportList("report_id={$v['report_id']} and type>6", 2, "addtime", "ORDER BY id DESC LIMIT 0,1");
							if ($result)
								$reportList['items'][$k]["endtime"] = $result[0]["addtime"];
						}
					}
				}
				foreach ($reportType as $k => $v) {
					$typeString[$k] = $v[0];
				}
				if ($typeList) {
					foreach ($typeList as $v) {
						$reportSelect[$v['type']] = $reportType[$v['type']][0];
					}
					array_unique($reportSelect);
				}
				$params['_userid'] = $this->_userid;
				$params['otypes'] = $reportSelect;
				$params['typeString'] = $typeString;
				$params['reportlist'] = $reportList['items'];
				$params['reportnum'] = $reportList['totalSize'];
				$params['reportpagebar'] = $reportpagebar;
				break;
			case 7://增值服务
				if(in_array($sTask->get('mode'), array(11,12))){
					return $this->printmsg('此任务不支持增值服务。',0,null,'/task/lastview-id-'.$sTask->get('task_id'));
				}
				$nosearch_servs = $sTask->getServices(4);
				$params['nosearch_price'] = $nosearch_servs['amount'];
				$hide_servs = $sTask->getServices(5);
				$params['hide_price'] = $hide_servs['amount'];
				$params['top'] = $this->_getTops($aTask);
				$serv_item = $sTask->getServiceItem(array(1,2,3));
				$hide_package = $sTask->getServices(661);
				$params['hide_package_price'] = $hide_package['amount'];
				$order_data_model = new zbj_model_fn_orderdata();
				if($order_data_model->selectOne('product_pkid='.$iTaskID.' and stype=661 and refund_state = 0')){
					$params['hide_package'] = 1;
				}
				//TODO::增值服务退款
				
				if ($serv_item) {
					foreach ($serv_item as $k => $s) {
						if ($k == 1) {
							$params['pay_search'] = 1;
						} elseif ($k == 2) {
							$params['pay_hidden'] = 1;
						} else {
							$params['pay_show'] = $s;
							$params['has_pay_show'] = 1;
						}
					}
				}
				
				if ($params['pay_show']) {
					foreach ($params['pay_show'] as $key => $value) {
						$sTag = new zbj_service_tag($value['tag_id']);
						$srv_vir = new zbj_service_categoryvirtual($value['tag_id']);
						if ( in_array($value['tag_id'],array(24245,24246)) ) {
							$params['pay_show'][$key]['tag_name'] = $sTag->get('virtual_name');
						} else {
							$params['pay_show'][$key]['tag_name'] = $srv_vir->get('virtual_name');
						}
						
					}
				}
//				pf($params['pay_show'],1);
				
				//需求热点
				$mdl_vaspaidlisting = new zbj_model_mb_vaspaidlisting();
				$srv_vas = new zbj_service_vas();
				$location_ids = array(29);
				foreach ( $location_ids as $v ) {
					$location = $srv_vas->checkVasLocation($v);
					$vasPaidListing = $mdl_vaspaidlisting->select(array('task_id' => $aTask['task_id'], '(state = 1 OR refund_state = 1 AND (state = 0 AND start_time > 0))'))->items;
					$vas_info[$v] = $location;
					if ( $vasPaidListing ) {
						$vas_info[$v]['list'] = $vasPaidListing;
					}
				}
				$params['vas_info'] = $vas_info;
				
				//商标注册||版权保护
				$m_copyright = new zbj_model_zt_copyright();
				$params['trademarks'] = $m_copyright->select(array('task_id' => $iTaskID, 'ispay' => 1))->items;
				
				//包满意
				if($sTask->checkSpecialTask() !== false){
					$params['specialtask'] = 1;
				}
				
				//名片印刷
				$card_print_service = array(514, 515, 516,517);
				$order_data = $srv_vas->getPaidOrderData($iTaskID, $card_print_service);
				
				if ($order_data) {
					$kuaiyin = array();
					
					foreach ($order_data as $item) {
						$kuaiyin['title'] = $item['title'];
						$kuaiyin['price'] = $item['price'];
						if ($item['stype'] == 517) {
							$print_info = $sTask->kuaiYinGetPrintInfo($params['info_option']);
							$kuaiyin['title'] = "名片频道印刷#{$print_info['name']}"; 
							$ky_order_id = $sTask->kuaiYinGetKyTradeNo($params['info_option']); 
							if ($ky_order_id) {
								$ky_state = zbj_lib_KuaiYinApi::query($ky_order_id);
								$kuaiyin['state'] = (string) zbj_lib_KuaiYinApi::getPrintStateDesc($ky_state['state']);
								$params['kuaiyin'][] = $kuaiyin;
								$kuaiyin = array();
							}
						} else {
							$temp = json_decode(zbj_lib_KuaiYinApi::query($item['order_id']));
							if (200 == $temp['code']) {
								$kuaiyin['state'] =  zbj_lib_KuaiYinApi::getPrintStateDesc($temp['data']['state']);	
								$params['kuaiyin'][] = $kuaiyin;
							} else {
								continue;	
							}
						}										
					}
				}
				
				//延长选稿期
				$mdl_taskaddamount = new zbj_model_mk_taskaddamount();
				$condition['task_id'] = $aTask['task_id'];
				$condition['type'] = 2;
				$condition['state'] = 0;
				$extend = $mdl_taskaddamount->selectOne($condition);
				$params['extend'] = $extend;
				break;
			case 8://派单详情
				//各种状态数量统计
				$ricondition = array('task_id' => $iTaskID);
				if ($_GET['rit'] == 1) {
					$ricondition['is_sys'] = (int)$_GET['rit'] + 1;
				}elseif($_GET['rit'] == 2){
                    $ricondition['is_sys'] = (int)$_GET['rit'] - 1;
				}else{
					$ricondition[] = 'is_sys != 0';
				}
				$mRecommend = new zbj_model_mk_recommend();
				$params['board_sum_acc'] = 0; //收到派单
				$oRecommend = $mRecommend->select($ricondition, 'action_type,count(*) num', 'group by action_type')->items;
				$board_summary = lib_BaseUtils::array_changekey($oRecommend, 'action_type');
				$typelist = service_recommend::getType();
				foreach ($typelist as $key => $value) {
					$params['board_sum'][$key] = array(
						'name' => $value,
						'num' => (int) $board_summary[$key]['num'],
					);
					$params['board_sum_acc'] += $params['board_sum'][$key]['num'];
				}
				//响应率
				$params['board_sum_rsp'] = lib_BaseUtils::getPercent($params['board_sum'][2]['num'] + $params['board_sum'][3]['num'] + $params['board_sum'][6]['num'], $params['board_sum_acc']) . '%';
				//抢单率
				$params['board_sum_get'] = lib_BaseUtils::getPercent($params['board_sum'][2]['num'] + $params['board_sum'][3]['num'], $params['board_sum_acc']) . '%';
				//列表
				$mRecommend->setLimit(10);
				$mRecommend->setPage($page);
				$mRecommend->setCount(true);
//				define('DEBUG', 1);
				if ($_GET['sum']) {
					$ricondition['action_type'] = (int)$_GET['sum'];
				}
				$oRecommend = $mRecommend->select($ricondition,'*',null,'order by sendtime desc');
				$params['recommendlist'] = $oRecommend->items;

				// 定向派单服务商
				$user_ids = array();
				if ($params['recommendlist']) {
					foreach ($params['recommendlist'] as $key => $value) {
						$params['recommendlist'][$key]['state'] = $typelist[$value['action_type']];
					}
				}

				$params['recommendtotal'] = $oRecommend->totalSize;
				$params['pagebar'] = $this->PageBar($oRecommend->totalSize, 10, $page, $inPath, 'style4');
				break;
			case 9:
				//获取中标订单
				$successsrvWork = $sTask->getSuccessWorkObject();

				if(!empty($successsrvWork)){
					$sign = md5($iTaskID . 'boss.view.agreement');
					$url = zbj_lib_Constant::PAY_URL . '/api/agreement-do-100-tid-' . $iTaskID . '-wid-'.$successsrvWork->get('works_id').'-sign-' . $sign;
					$agreememt = lib_api::apiCall($url);
					$params['agreement'] = $agreememt;
				}

				break;
			case 10: // 分配日志
				$srvAllotLog = new zbj_model_mk_taskallotlog();
				$allotlog = $srvAllotLog->select("task_id='{$iTaskID}'",'*','','order by alog_id desc limit 0, 50')->items;
				$params['allotlog'] = (array)$allotlog;
				break;
			case 11: // 内容修改日志
				$editlogModel = zbj_model_api::get('zbj_model_mk_taskeditlog');
				$editlog = $editlogModel->select("task_id='{$iTaskID}'",'*','','order by log_id asc')->items;
				$params['editlog'] = (array)$editlog;
				
				$params['compare_css'] = SStringComparer::getCSS();
				break;
			default:
				if ($aInfo['promotion_state'] == 1) {
					$aInfo['prostart'] = $aTask['starttime'];
					$aInfo['proend'] = $aTask['starttime'] + $aInfo['promotion_time'];
				}
				
				//任务详情
				$params['cont'] = $sTask->get("task_cont.*");
				//任务补充需求
				$condition = array(
					'task_id'=>$iTaskID
				);
				$mdlAddition = zbj_model_api::get('zbj_model_mk_taskadditional');
				$addCont = $mdlAddition->select($condition, '*')->items;
				//附件
				$file = $sTask->getMany("task_file");
				$aFiles = array();
				$aPic = array();
				if (!empty($file)) {
					foreach ($file as $val) {
							if (in_array(strtolower($val['filext']),array('jpg', 'gif', 'jpeg', 'png', 'bmp'))) {
								$aPic[] = $val;
							} else {
								$aFiles[] = $val;
							}
					}
				}
				//补充需求附件
				if (!empty($addCont)) {
					foreach ($addCont as $key=>$val) {
						if (!empty($val['files']))
						$addCont[$key]['addfiles'] = unserialize($val['files']);
					}
				}
				$params['files'] = $aFiles;
				$params['pic'] = $aPic;
				$params['addcont'] = $addCont;
				//增值服务
//				define('DEBUG', 1);
				if ($aTask['was_nosearch'] == 1) {
					$params['zzfw'] .= '禁止搜索引擎,';
				}
				if ($aTask['was_showorks'] == 1) {
					$params['zzfw'] .= '隐藏交稿,';
				}
				if ($aTask['was_promotion'] == 1) {
					$params['zzfw'] .= '需求置顶';
					$gettop_model = new zbj_model_mk_taskpaidlisting();
					$get_top = $gettop_model->select('task_id=' . $iTaskID . ' and state=1', 'mk_category_guide.guide_id,mk_category_guide.guide_name,mk_category_guide.cndir', null, null, array('mk_category_guide' => 'mk_category_guide.guide_id=mk_task_paid_listing.tag_id'))->items;
					$srv_vir = new zbj_service_categoryvirtual();
					$guide_srv = new zbj_service_categoryguide();

					if ($get_top) {
						$get_tops = '';
						foreach ($get_top as $value) {
							if ( $value['guide_id'] == 1000459 ) {
								$get_tops .= '<a href="' . zbj_lib_Constant::TASK_URL . '/xuqiu/" target="_blank"> 需求大厅</a>,';
							} else {
								$guide_srv->setId($value['guide_id']);
								if ( $guide_srv->get('level') == 2 ) {
									$get_tops .= '<a href="' . zbj_lib_Constant::TASK_URL . '/t-'.$value['cndir'].'/" target="_blank">' . $value['guide_name'] . '</a>,';
								} else {
									$guide_srv->setId($guide_srv->get('parent_id'));
									$get_tops .= '<a href="' . zbj_lib_Constant::TASK_URL . '/t-'.$value['cndir'].'/'.$guide_srv->get('cndir').'" target="_blank">' . $value['guide_name'] . '</a>,';
								}
							}
						}
						trim($get_tops,',');
						$params['zzfw'] .= "($get_tops)";
					} 
				}
				
				//var_dump($params);
				//投标
				if(in_array($aTask['mode'],array(10,13))){
					$works = new zbj_model_mk_works();
					//中标数
					$num = $works->selectOne(array('task_id' => $iTaskID, 'issuccess' => 1), 'count(1) num');
					$params['success_num'] = $num['num'];
					//谢谢数
					$num = $works->selectOne(array('task_id' => $iTaskID, 'is_tks' => 1), 'count(1) as num');
					$params['thanks_num'] = $num['num'];
					//未审核数
					$num = $works->selectOne(array('task_id' => $iTaskID, 'issuccess' => 0, 'isalternative' => 0, 'iseliminate' => 0, 'open_state' => 0), 'count(1) as num');
					$params['noview_num'] = $num['num'];
					//全部投标
					$num = $works->selectOne(array('task_id' => $iTaskID), 'count(1) as num');
					$params['all_num'] = $num['num'];
					
					$worksTypeList = $works->select(array('task_id' => $iTaskID), 'type,count(*) num', 'group by type')->items;
					$params['works_types'] = array(
						10 => array('name' => '交稿', 'num' => 0),
						20 => array('name' => '回应', 'num' => 0),
						21 => array('name' => '报名', 'num' => 0),
						22 => array('name' => '求真相', 'num' => 0),
						23 => array('name' => '求加价', 'num' => 0),
						24 => array('name' => '求担保', 'num' => 0),
						25 => array('name' => '求保证选标', 'num' => 0),
					);
					if($worksTypeList){
						foreach ($worksTypeList as $key => $value) {
							if(array_key_exists($value['type'], $params['works_types'])){
								$params['works_types'][$value['type']]['num'] = $value['num'];
							}
						}
					}
					$workslist = $this->_getWorks($aTask, $limit, $page);
					$params['works_list'] = $workslist->items;	
					$params['works_total'] = $workslist->totalSize;
					$params['works_pagebar'] = $this->PageBar($workslist->totalSize, $limit, $page, $inPath, 'style5', $_SERVER['QUERY_STRING']);
					
                    //判断是否符合开启社会化选标的条件
                    $modelWork = zbj_model_api::get('zbj_model_mk_works');
                    if (1 == $aTask['allot']) {
                        $aWork = $modelWork->selectOne("task_id={$aTask['task_id']} AND is_sysselect=1", 'COUNT(0) AS c');
                        if ($aWork['c']) {
                            $params['show_sys'] = 1;
                        }
                    } else {
                        $params['show_sys'] = 1;
                    }

                    //判断是否作弊举报
                    $modelReport = new zbj_model_mb_report();
                    $aReport = $modelReport->selectOne("o_type=1 AND o_bel_id={$aTask['task_id']} AND type=8 AND state=3 AND old_report=0", 'COUNT(0) AS c');
                    if ($aReport['c']) {
                        $params['isCheat'] = 1;
                    }

                    //社会化选标相关
                    $servCouncil = new zbj_service_council();
                    $systaskinfo = $servCouncil->getTaskSysInfo($aTask['task_id']);
                    $params['systaskinfo'] = $systaskinfo;
                    //$aTask = $servCouncil->getTask($aTask['task_id']);
                    $modelCouncilTask = new zbj_model_mb_counciltask();
                    //$aTaskCouncil = $modelCouncilTask->selectOne("task_id={$aTask['task_id']} AND status<5");
                    //取消社会化选标
                    $aTaskCouncil = null;
                    $params['isCouncil'] = !empty($systaskinfo) ? 1 : 0;
                    $params['isVestPhase'] = ($aTaskCouncil['status'] >= 2) ? 1 : 0; //客服阶段外不能进行选稿
                    $aOptions = unserialize($aTaskCouncil['options']);
                    if ($aTaskCouncil['status']) {
                        //$aWorkList = $servCouncil->getCouncilList('*', "job_id={$aTask['task_id']} AND job_type=2", 'work', 'ORDER BY is_charge ASC')->items;
                        $modelCouncilWork = new zbj_model_mb_councilwork();
                        $aWorkList = $modelCouncilWork->select("job_id={$aTask['task_id']} AND job_type=2", '*', '', 'ORDER BY is_charge ASC')->items;
                        //分配的诚信委员会成员列表
                        if (!empty($aWorkList) && is_array($aWorkList)) {
                            foreach ($aWorkList as $work) {   
                                if (1 == $work['is_charge']) {
                                    $params['aChargeWorker'][] = $work;
                                } else if (2 == $work['is_charge']) {
                                    $params['aVestWorker'][] = $work;
                                } else {
                                    $params['aNormalWorker'][] = $work;
                                }
                            }

                            //诚信委员会选稿情况
                            if (!empty($params['works_list']) && is_array($params['works_list'])) {
                                $aWorkListCopy = $params['works_list'];
                                $aVestChoice = !empty($aOptions['vest_choice_works']) ? explode(',', $aOptions['vest_choice_works']) : array();
                                foreach ($aWorkListCopy as $key => $val) {
                                    $aWorkListCopy[$key]['token'] = md5($val['works_id']. lib_Constant::SYSUSERKEY);
                                    if (in_array($val['works_id'], $aVestChoice)) {
                                        $aWorkListCopy[$key]['vestChoice'] = 1;
                                    }
                                    foreach ($aWorkList as $work) {
                                        if ($work['choice'] == $val['works_id']) {
                                            $aWorkListCopy[$key]['choiceNum'] += 1;
                                        }
                                    }
                                }
                                $params['works_list'] = $aWorkListCopy;

                            }

                            $params['isAllot'] = 1;
                        } else {
                            $params['isAllot'] = 0;
                        }

                        //获取需要的奖项
                        $params['aWorksClass'] = array();
                        if (1 == $aTaskCouncil['require_num']) {
                            $params['aWorksClass'][] = 1;
                            $params['isSolo'] = 1;
                        } else {
                            for ($i = 1; $i <= 3; $i++) {
                                if (!empty($aOptions["rank_{$i}_num"])) {
                                    $params['aWorksClass'][] = $i;
                                }
                            }
                        }
                    }

                    //招标合同状态
                    if(in_array($aTask['mode'],array(13))){
                    	$m_works=new zbj_model_mk_works();
                    	$select_works=$m_works->selectOne(array('issuccess'=>1,'task_id'=>$aTask['task_id']),'select_time,works_id');
                    	if ($select_works) {
							$params ['select_time'] = $select_works ['select_time'];
						}
                    	if($sTask->isNeedAgreement()){                    		
                    		$m_srvWorks = new zbj_service_works($select_works['works_id']);
                    		$params['Agreement']['need']=true;
                    		$params['Agreement']['Actived']=$m_srvWorks->hasAgreementActived();
                    		if($params['Agreement']['Actived']){
	                    		$agreement = $m_srvWorks->loadAgreements();
	                    		$params['Agreement']['time']=$agreement['is_activetime'];
                    		}
                    	}else{
                    		$params['Agreement']['need']=false;
                    	}
                    }
                    //联系人个数
                    if (in_array($aTask['mode'],array(13))) {
                        $mdlSeller = new zbj_model_mk_taskseller();
                        $seller = $mdlSeller->selectOne("task_id={$iTaskID}",'count(1) num');
                        $params['contact_nums'] = $seller['num'];
                    }
				} elseif (in_array($aTask['mode'], array(11, 12))) {
					$taskobj = new zbj_service_task_buy($iTaskID);
					$order = $taskobj->getOneWinOrder();
					if (!$order) {
						$order = $taskobj->getOneWinOrder(null, 2);
						if (!$order || $order['close_type'] == 5) { //系统关闭不可见
							$params['close_log'] = '系统关闭';
						}else{
							$tlog_model = new zbj_model_mk_tasktradelog();
							$close_log = $tlog_model->selectOne('type=9 and order_id='.$order['order_id']);
							$close_log['options'] = unserialize($close_log['options']);
							$params['close_log'] = $close_log;
						}
					}
					if ($order['state'] == 2) { //订单已经关闭
						$params['close_order'] = $order;
						$params['order_is_close'] = 1;
					} else {
						//交易记录
						$curr_state = 1;
						$twork = new zbj_model_mk_works();
						$tworkinfo = $twork->selectOne('task_id='.$taskobj->get("task_id").' and issuccess=1','works_id');
						$params['task_works_id'] = $tworkinfo['works_id'];
						if ($aTask['hosted'] == 1) {
							$down_log = array(
								'5' => array(),
								'4' => array(),
								'3' => array(),
								'2' => array(),
								'1' => array()
							);
							//交易记录
							$tlog_model = new zbj_model_mk_tasktradelog();
							$tradelog = $tlog_model->select('task_id=' . $iTaskID, '*', null, 'order by tid desc')->items;
							foreach ($tradelog as $log) {
								$log['options'] = unserialize($log['options']);
								switch ($log['type']) {
									case 1: //购买状态
										$down_log[1][] = $log; //[购买服务]状态的数据
										break;
									case 3: //雇主支付
										$down_log[2][] = $log;
										break;
									case 4: //服务商开始工作状态	
										$down_log[3][] = $log;
										break;
									case 5: //付款
										$down_log[4][] = $log;
										break;
									case 8: //评价
										$down_log[5][] = $log;
										break;
								}
							}

							foreach ($down_log as $key => $log) {
								if ($log) {
									$curr_state = $key;
									break;
								}
							}
							if ($curr_state < 3 && $order['isaccept_sl'] == 1) {
								$curr_state = 3;
							}
							if ($aTask['state'] == 4 && $aTask['hosted'] == 1) {
								if ($order['isevaluation_buy'] + $order['isevaluation_sl'] > 0) {
									$curr_state = 5;
								} else {
									$curr_state = 4;
								}
							}

							if ($aTask['mode'] == 11) {
								$sUser = new zbj_service_user($order['user_id']);
								$params['role_buyer'] = $sUser->getBrandName();
								$sUser = new zbj_service_user($order['sl_user_id']);
								$params['role_seller'] = $sUser->getBrandName();
							} else {
								$sUser = new zbj_service_user($order['user_id']);
								$params['role_buyer'] = $sUser->getBrandName();
								$sUser = new zbj_service_user($order['sl_user_id']);
								$params['role_seller'] = $sUser->getBrandName();
							}
							$params['down_log'] = $down_log;
							$params['curr_state'] = $curr_state;
							$_SESSION['curr_state'] = $curr_state;
						}
					}
				}
				//订单     
                $ordercondition = array('product_pkid'=>$iTaskID);
                $m_order = new zbj_model_fn_order();
                $m_order->setLimit(5);
                $m_order->setPage($page);
                $m_order->setCount(true);
                $order = $m_order->select($ordercondition, 'order_id,title,state,price');
                $params['order'] = $order->items; 
				
				//开票
				$billinfo = $sTask->getBillInfo();
				if ( in_array((int)$aTask['bill_state'], array(2, 3))) {
					$bill_state_str = $aTask['bill_state'] == 2 ? '已放弃发票待任务结束自动退税金' : '已放弃发票已退税金';
					$params['bill_disallow'] = $billinfo ?  "<a href=\"/finance/billview-billid-{$billinfo['bill_id']}.html\" target=\"_blank\">{$bill_state_str}</a>" : $bill_state_str;
				} elseif ( $billinfo ) {
					$params['bill_id'] = $billinfo['bill_id'];
					$bill_info_options_arr = unserialize($billinfo['options']);
					if ( $billinfo['is_pay'] == 1 )  {
						$fn_state = $billinfo['fn_state'];
						$bill_state = $billinfo['bill_state'];
						$post_type = $billinfo['post_type'];
						$post_state = $billinfo['post_state'];
						if ($bill_state == -1) {
							$params['bill_state_str'] = '已申请-还没有进入开票流程';
						} elseif ( $bill_state == 1) {
							$params['bill_state_str'] = '已支付-用户取消';
						}elseif ( $bill_state == 2 && $post_state == 0 && $fn_state == 0 ) {
							$params['bill_state_str'] = '申请失败';
						} elseif ( $bill_state == 0 && $post_state == 2 && $fn_state == 1) {
							$params['bill_state_str'] = '已退回';
						} elseif ( $bill_state == 0 && $post_state == 1 && $fn_state == 1) {
							if($post_type == 1) {
								$type_str = '快递';
							} else {
								$type_str = '挂号信';
							}
							$params['bill_state_str'] = '已寄出-' . $type_str;
						} else {
							if ($billinfo['is_audited']==1) {
								$params['bill_state_str'] = '已审核-待寄出';
							}else{
								$params['bill_state_str'] = '未审核';
							}
						}
					} else {
						$params['bill_state_str'] = $billinfo['bill_state'] == 1 ? '用户取消-未付款' : '已申请-未付款';
					}
					if ($bill_info_options_arr['over_amount']) $params['bill_state_str'] = "<b><i>{$params['bill_state_str']}</i></b>";
				} else {
					if ( $sTask->isAllowBill() === false && $sTask->getError('code') != -2 ) {
						$params['bill_disallow'] = $sTask->getError();	
					} else {
						$params['bill_disallow'] = false;
					}
				}

				//案例库/优质任务
				$is_quality_task = $sTask->isQualityTask();
				$qt_has_link = true;
				if ($is_quality_task) {
					$quality_task_info = $sTask->getQualityTaskInfo();
					$qt_state = '已加入案例库';
					$qt_state .= empty($quality_task_info['is_show']) ? '(已禁用)' : ''; 
					$qt_op_type = '查看/修改';
				} else {
					$is_allow_quality_task = $sTask->isAllowQualitTask();
					if ($is_allow_quality_task === false ) {
						$qt_state = '不允许添加,' . $sTask->getError();
						$qt_has_link = false;
					} else {
						$qt_state = '还未加入案例库';
						$qt_op_type = '添加';
					}
				}
				$params['quality_task_state'] = $qt_state;
				$params['allow_quality_task_op'] = $qt_has_link;
				$params['quality_task_op_str'] = $qt_op_type;

				//发布来源 是否来自快印频道
				$is_from_kychannel = $sTask->isFromKuaiYinChannel();
				if ($is_from_kychannel) {
					$params['pub_source'] = 'kychannel';
					$opis_ht = intval($sTask->get('task_opis.ht'));
					switch($opis_ht) {
					case zbj_service_task_base::TASK_OPIS_HT_VCARD: 
						$params['kychannel_cname'] = $channel_cname = '名片';
						$params['kychannel_path'] = '/c-mpkpsj/mpsj/';
						break;
					case zbj_service_task_base::TASK_OPIS_HT_ALBUM:
						$params['kychannel_cname'] = $channel_cname = '画册';
						$params['kychannel_path'] = '/c-xcpsj/xccsj/';
						break;
					}
					$ky_order_type = $sTask->kuaiYinGetOrderType($params['info_option']);
					switch ($ky_order_type) {
					case zbj_hook_kychannel::KY_ORDER_TYPE_LIKE:
						$params['kychannel_pub_type'] = "{$channel_cname}频道仿制";
						break;
					case zbj_hook_kychannel::KY_ORDER_TYPE_ORIG:
						$params['kychannel_pub_type'] = $params['info_option']['is_diyprice'] ? "{$channel_cname}频道设计价格自定义" : "{$channel_cname}频道设计套餐#{$params['info_option']['pack_info']['name']}";
						break;
					case zbj_hook_kychannel::KY_ORDER_TYPE_PKG:
						$params['kychannel_pub_type'] = "{$channel_cname}频道设计印刷套餐#{$params['info_option']['pack_info']['name']}";
						break;
					}
				}

				//继安增加 专场需求展示
				$params['diy'] = $params['info_option']['expend'];
				$params['edittoken'] =  md5(zbj_lib_Constant::SYSUSERKEY.$iTaskID);
				if($sTask->checkSpecialTask() !== false){
					$params['specialtask'] = 1;
				}
				
				//查看该需求是否有不满意免单的增值服务
				$srv_vas = new zbj_service_vas();
				$freetaskorder_data = $srv_vas->getPaidOrderData($iTaskID, 520);
				if(!empty($freetaskorder_data)){
					$params['freetaskservice'] = 1;
				}
				//赏金分配
				if($aTask['allot']>1){
					$mdltaskinfo = zbj_model_api::get('zbj_model_mk_taskinfo');
					$taskinfo = $mdltaskinfo->select(array('task_id' => $iTaskID), '`option`');
					$option = $taskinfo->items[0]['option'];
					$option = unserialize($option);
					
					$allot = $sTask->getTaskAllotModel();
					if($this->task['type']<=1){
						$params['allot'] = $allot[0];
					}
					//短信祝福处理
					if($aTask['allot'] == 3 and $aTask['type'] == 3){
						$params['allot'] = $allot[0];
						$params['sendmsg'] = 1;
						$params['posts']['sendtime'] = $option['posts']['sendtime'];
						$params['posts']['sendphone'] = $option['posts']['sendphone'];
					}
					//微博任务
					if($aTask['allot'] == 3 and ($aTask['type'] == 2 or $aTask['is_weibo']>0)){
						$params['weibo'] = 1;
						$iNum = 0;$iHaveNum = 0;
						if (is_array($allot)) {
							foreach ($allot as $m) {
								$totalPay  += $m['amount'] * $m['have_num'];
								$iNum += $m['num'];
								$iHaveNum += $m['have_num'];
							}
						}
						$params['totalFans'] = intval($option['weibo']['fans']);
						$params['totalPay'] = round($totalPay,2);
						$params['leftPay'] = round($aTask['amount']-$totalPay,2);
						$params['iNum'] = $iNum;
						$aTmp = $allot;
						 for ($i = 0; $i < count($aTmp); $i++) {
							$aTmp[$i]['amount'] = number_format($aTmp[$i]['amount'],2);
						}
						$params['weiboprice'] = $aTmp;
					}
					//多人
					if($aTask['allot'] == 2){
						$allot2info = "";
						foreach ( $allot as $row ) {
							if($row['class'] == 1){
								$amount = sprintf('%01.2f',$row ['amount']*$aTask['amount']);
								if($row['have_num']>=1){
									$allot2info .=  "一等奖{$row['num']}名(已颁发)，赏金￥{$amount}元";
								}else{
									$allot2info .=  "一等奖{$row['num']}名(未颁发)，赏金￥{$amount}元";
								}
							}else{
								$row['num'] = $row['num'] <=0 ? 1 : $row['num'];
								$amount = sprintf('%01.2f',$row ['amount'] * $aTask['amount']/$row['num']);
								$allot2info .= "<br />".  $this->changeNum($row['class'])."等奖{$row['num']}名(已颁发{$row['have_num']}个)，赏金￥{$amount}元";
							}
							$iNum += $row['num'];
							$iHaveNum += $row['have_num'];
						}
						$params['allot2info'] = $allot2info;
						$params['iNum'] = intval($iNum);
						$params['iHaveNum'] = intval($iHaveNum);
					}
				}
				if($aTask['allot'] == 3){
					if(in_array($aTask['type'], array(0,3)) and $allot[0]['num']-$allot[0]['have_num']>0 and $aTask['state'] > 1){
						$params['neednum'] = $allot[0]['num']-$allot[0]['have_num'];
						$params['needbid'] = "，已选{$allot[0]['have_num']}个，还要".($allot[0]['num']-$allot[0]['have_num'])."个";
					}
				}
				break;
		}
		
		$params['filter'] = $filter;
		//备注
		$content = zbj_lib_BaseUtils::apicall('misc', 'getremark', array(
				'type_id' => '1',
				'pk_id' => $iTaskID,
				'limit' => 10,
			));
		if (!$content['data']['list']) {
			$params['remark'] = array();
		} else {
			$params['remark'] = $content['data']['list'];
			foreach ($content['data']['list'] as $key => $value) {
				if ($value['attachment']) {
					$params['remark'][$key]['files'] = json_decode($value['attachment'], TRUE);
				} else {
					$params['remark'][$key]['files'] = array();
				}
				unset($params['remark']['attachment']);
			}
			$sLog = new service_log();
			$params['remark_catalog'] = $sLog->getRemarkCatalog();
		}
		//工单
//		$worksorder=new zbj_model_cp_order();
//		$params['worksorder'] = $worksorder->select(array('type' => 1, 'rid' => $iTaskID))->items;
//		if ($params['worksorder']) {//工单类型
//			$optionitem = new model_cp_optionitem();
//			$worksorder_option = $optionitem->select(array('option_id' => 9), 'item_id,name')->items;
//			$params['worksorder_option'] = lib_BaseUtils::array_changekey($worksorder_option, 'item_id');
//		}
		//退款
		$m_fn_tk=new zbj_model_fn_tk();
		$params ['tkdata']=$tkdata = $m_fn_tk->selectOne ( array (
				'task_id' => $sTask->get ( 'task_id' ),
				'state' => 0
		) );
        $params['_time'] = time();
        
		//登陆用户
		$params['cpuid'] = $this->_userid;
		$params['cpuname'] = $this->_nickname;
		
		//是否有权关闭、冻结需求
		$params['allow_close'] = $this->_allowClose($sTask->get('manager_id'));

        //调用锁定客服填写的信息
        $s_customer=new service_customer($sTask->get('user_id'));
        $params['customer_locked']=$s_customer->checklock();//是否锁定有效
        if($params['customer_locked']){
			$params['customer']=$s_customer->get('customer.*');
			$params['customername'] = $params['customer']['manager'];
			if ($params['customer']['managerid']) {
				$customer = $m_cpuser->selectOne(array('user_id'=>$params['customer']['managerid']), 'isleave');
				 if ($customer['isleave'] == 1) {
				 	$params['customername'] .= "（离职）";
				 }else if ($customer['isleave'] == 2) {
				 	$params['customername'] .= "（调岗）";
				 }else if ($customer['isleave'] == 3) {
				 	$params['customername'] .= "（休假）";
				 }
			}
        }
		//调一对一任务的订单信息
		
		//跟进数据
		$s_follow=new service_follow();
		$params['followLevel']=$s_follow->getFollowLevel($iTaskID);
		$params['followLevelString']=$s_follow->getLevelArray();
		$params['followLevelTipString']=$levelTip=$s_follow->getLevelTip();
		$params['followstatus']=$levelTip=$s_follow->getstatus($iTaskID);
		$params['followlast']=$s_follow->getfollow($iTaskID);
		//搜索放弃原因
		if(!empty($params['followlast']['log']['giveup_option'])){
			$followlast = zbj_model_api::get('zbj_model_cp_optionitem');
			$abandonreason = $followlast->selectOne("item_id={$params['followlast']['log']['giveup_option']}");
			$params['followlast']['log']['giveup_reason'] = $abandonreason['name'];
	    }

        if(!empty($params['task_opis']['refused'])){
        	$followlast = zbj_model_api::get('zbj_model_cp_optionitem');
			$abandonreason = $followlast->selectOne("item_id={$params['task_opis']['refused']}");
			$params['task_opis']['refuseds'] = $abandonreason['name'];
        }
//		$follow_level = $s_follow->getFollowConfigLevel(10, 0, 1);
		$follow_level = $s_follow->getFollowConfigLevel($aTask['mode'], $aTask['hosted'], $aInfo['ispic']);
		$params['level_desc'] = $follow_level['level_desc'];
		//效果保障数据
		$m_effect_pro = new model_mk_effectprotection();
		$params['effect_pro_follow'] = $m_effect_pro->selectOne(array('task_id' => $iTaskID));
		//需求类目
		$s_category=new zbj_service_category();
		$params['categroy']=$s_category->getTree();
		//推荐服务商
		$params = array_merge($params, $this->_getRecommend($iTaskID));
		//订单分配类型
		$s_task = new service_task($iTaskID);
		$params['allot_type'] = $s_task->getAllotType();

		//是否能认领
		$allotPoolModel = zbj_model_api::get('zbj_model_mk_taskallotpool');
		$condition = array("task_id='{$params['task']['task_id']}'");
		$allotPool = $allotPoolModel->selectOne($condition,'allotstate','','');
		$params['canClaim']=1;
		if($params['task']['manager_id']!=0 || $params['task']['isaudit']!=1 || $allotPool['allotstate']!=2 ){
			$params['canClaim']=0;
		}

		//是否已发布合同
		$hasPubedAgreement = false;
		if($sTask->isNeedAgreement()){			
			if($sTask->get('state')>=3){
				$hasPubedAgreement = true;
			}
		}
		$params['has_pubed_agreement'] = $hasPubedAgreement;
		//显示是否有需要评价
		if($aTask['allot']!=3){
			$ordercondition = array('product_pkid'=>$iTaskID,'stype'=>16,'state!=2');
			$m_order = new zbj_model_fn_order();
			$params ['evaluation'] = array ();
			if($aTask['allot']==2){
				$order = $m_order->select($ordercondition, 'state,isevaluation,isevaluation_buy,isevaluation_sl')->items;
// 				var_dump($order);
				$params['evaluation']['status'] = 0;
				$params['evaluation']['buy'] = 1;
				$params['evaluation']['sl'] = 1;
				foreach ($order as $or){
					if($params['evaluation']['status']==0 && $or['isevaluation']){
						$params['evaluation']['status'] = 1;
					}
					if($params['evaluation']['status']==1){
						if($params['evaluation']['buy']==1){
							if(!$or['isevaluation_buy'] && $or['isevaluation']){
								$params['evaluation']['buy']=0;
							}
						}
						if($params['evaluation']['sl']==1){
							if(!$or['isevaluation_sl'] && $or['isevaluation']){
								$params['evaluation']['sl']=0;
							}
						}
					}
				}
			}else{
// 				define('DEBUG', 1);
				$order = $m_order->selectone($ordercondition, 'state,isevaluation,isevaluation_buy,isevaluation_sl');
// 				var_dump($order);
				$params['evaluation']['status'] = $order['isevaluation'];
				$params['evaluation']['buy'] = $order['isevaluation_buy'];
				$params['evaluation']['sl'] = $order['isevaluation_sl'];
			}
		}
		
		//检查是否被国际站收录及当前状态（是否关闭）
		$job_state = json_decode(lib_api::apiCall(lib_Constant::WITMART_URL . '/cnapi/GetJobState?key=abrfdDFGRd&taskid=' . $iTaskID), true);
		

        // 检查是否是香港馆的需求
        $hk_zone = new service_hk();
        $hk = $hk_zone->isHkTask( $iTaskID );
        $params['is_hk'] = isset( $hk['zone'] ) ? $hk['zone'] : 0;
        $params['is_hk_hide'] = isset( $hk['is_hide'] ) ? $hk['is_hide'] : 0;
        $params['zone_id'] = isset( $hk['zone_id'] ) ? $hk['zone_id'] : 0;

        $tstatus = $sTask->getTaskStatus();
        $params['taskstatus'] = $tstatus['status'];

        //获取前台用户发布的需求5条
        $task = zbj_lib_BaseUtils::apicall('user', 'gettask', array('uid' => $aTask['user_id'], 'limit' => 10));
        if ($task) {
        	foreach($task['data']['items'] as $k=>$v){
        		$task['data']['items'][$k]['createtimes'] = date('m-d',$v['createtime']);
        		$task['data']['items'][$k]['amount'] = ceil($v['amount']);
        	}
            $params['tasklist'] = $task['data']['items'];
        } 

        //检查是否联系上雇主
        $optionss = $sTask->get('task_info.option');
        $optionadd = unserialize($optionss);
        $params['abandonreason'] = $optionadd['abandonreason'];

        // 需求标签
        $srvTaskTags = new zbj_service_tasktags();
        $params['taglists'] = $srvTaskTags->getTaskTags($iTaskID);
		
		//获取跟进信息
        $follows = zbj_model_api::get('zbj_model_mk_follow');
        $followdate = $follows->selectOne("task_id=$iTaskID",'', '', 'ORDER BY follow_id DESC');
        $params['top_order_tag'] = $followdate['top_order_tag'];
        if(!empty($followdate) && date('Y-m-d',$followdate['expriestime']) > '1980-03-25'){
        	$params['followlasttime'] = '预约:'.date('Y-m-d H:i:s',$followdate['expriestime']).'再跟进';
        }else{
        	$params['followlasttime'] = '暂未预约下次跟进';
        }
		
        //雇主跟进显示
        $pages = isset($this->url['page']) ? (int) $this->url['page'] : 1;
		$content = zbj_lib_BaseUtils::apicall('misc', 'getremark', array(
				//'remark_catalog' => '10',
			    'type_id' => '1',
				'pk_id' => $iTaskID,
				'limit' => 3,
				'page' =>$pages,
			));
		if (!$content['data']['list']) {
			$params['remarks'] = array();
		} else {
			$params['remarks'] = $content['data']['list'];
		}
		$params['pagebars']=$this->PageBar($content['data']['num'], '3', $pages, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        //获取筛选服务商数据
        $params['lists'] = $this->ScreeningServices($inPath);
        //筛选数据
        $params['selectdata'] = $this->WitkeyService($inPath);

        //投标页面跟进数据
        foreach((array)$params['works_list'] as $k=>$v){
            $uidArr[$k] = $v['user_id'];
        }

        $srvTasks = new zbj_service_task($iTaskID);
		$srvTasks = $srvTasks->init();

        if(!empty($uidArr)){
        	$uidArr = array_unique($uidArr);
	        $uidStr = implode(',', $uidArr);
	        $mdlSeller = zbj_model_api::get('zbj_model_mk_taskseller');
	        $mdlContact = zbj_model_api::get('zbj_model_mk_tasksellercontactlog');
	        $leftjoin = array(
						'mk_task_seller_contactlog'=>'mk_task_seller.ts_id=mk_task_seller_contactlog.ts_id'
				);
	        $mseller = $mdlSeller->select("task_id={$iTaskID} and user_id in({$uidStr})",'','','',$leftjoin)->items;
	        unset($v);
	        unset($k);
	        //跟进数据
	        if ($mseller) {
	            $contact_data = array();
	            foreach($mseller as $v) {
	            	if(count($contact_data[$v['user_id']]) < 2){
	                    $contact_data[$v['user_id']][] = $v;
	                }
	            }
	        }
            //搜索用户数据
            $user_search = $this->SearchService($uidArr);
            if(!empty($user_search['list'])){
		        $searchresult = $this->user_search($user_search,$uidArr);
            }

            if(!empty($searchresult)){
	        	$params['user_search'] = $searchresult['user_searchs'];
	        	$params['Remark_data'] = $searchresult['Remark_data'];
            }

			if($params['works_list'] && ($srvTasks->checkSpecialMode(1) || $srvTasks->checkSpecialMode(3))){
				//需求状态接口调用
	            foreach($params['works_list'] as $k=>$v){
	            	//需求状态
					$v['work_flow'] = $srvTasks->getWorkFlowByID($v['works_id']);
					$params['works_list'][$k] = $v;
				}
			}
        }

        if(!empty($contact_data)){
        	$params['contact_data'] = $contact_data;
        } 

        //展示跟单小助手信息 20150919 by houxiaopeng
        $params['assistData'] = $sTask->getAssistData();

        //查看该任务是否是机会系统产生
        $tasklist = array($iTaskID);
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
        $api = new com\zhubajie\crm\interfaces\ChanceServiceClient(null);
        zbj_lib_ApiClient::build($api);
        $re = $api->CheckTask($tasklist);
        $check_result = array();
        if($re->data_obj->items !== null){
        	foreach ($re->data_obj->items as $k => $v){
        		$check_result[$v['task_id']] = $v;
        	}
        }
		if(array_key_exists($iTaskID, $check_result)){
        	$params["chance"]["is_produced_by_chance"] = 1;
        	$params["chance"]["boss_user_name"] = $check_result[$iTaskID]['name'];
        	$params["chance"]["boss_user_nickname"] = $check_result[$iTaskID]['nickname'];
        }else{
        	$params["chance"]["is_produced_by_chance"] = 0;
        }


        //define('DEBUG',1);
        //print_r($aTask); 
		//print_r($followdate);
		//获取备选信息
        $mk_task_sign = zbj_model_api::get('zbj_model_mk_tasksign');
        $mk_task_sign_data = $mk_task_sign->selectOne("task_id=$iTaskID",'', '', '');
        //获取争议信息
        $mk_task_opis = zbj_model_api::get('zbj_model_mk_taskopis');
        $mk_task_opis_data = $mk_task_opis->selectOne("task_id=$iTaskID",'', '', '');
        //获取任务放弃信息
        $mk_effectprotection = zbj_model_api::get('model_mk_effectprotection');
        $mk_effectprotection_data = $mk_effectprotection->selectOne("task_id=$iTaskID",'', '', '');
        //报价信息
        $works_quote = zbj_model_api::get('zbj_model_mk_worksquote');
        $mk_works_quote_data = $works_quote->select("task_id=$iTaskID",'', '', '')->items;

        $twork = new zbj_model_mk_works();
		$tworkinfo = $twork->selectOne('task_id='.$iTaskID.' and issuccess=1','works_id');
        
        //任务状态判断,交易处理工作台20150318 by houxiaopeng
        if($aTask['open_state'] == 0 && $mk_effectprotection_data['giveup_status'] != 1 && !in_array($aTask['mode'],array(11,12))){
        	$time = time() + 302400;
			$nowdate = date('Y-m-d');
	        //1、受理订单    1
	        if($aTask['audit_state'] == 4 && $followdate['issys'] == 1){
                $params['taskstate'][1] = 1;
            }
			//2、联系雇主梳理需求   2
            /*if(in_array($aTask['audit_state'],array(4,5)) && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0){
                $params['taskstate'] = 2;
            }*/
            //2未发布
            if($aTask['state'] < 3 && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] >= 4){
                $params['taskstate'][2] = 2;
            }
            //3已发布
			if($aTask['state'] == 2 && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] < 4){
                $params['taskstate'][3] = 3;
            }
            //if(暂未开发)
            //$params['taskstate'] = 3;
			//5、选标期过1/2未选标 7
            if($aTask['endymd'] < $nowdate && $aTask['state'] < 3 && $aTask['hosted'] >= 0 && $aTask['ext_selectime'] < $time && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] < 4){
                $params['taskstate'][5] = 5;
            }
			//6、雇主有备选  8
            if($mk_task_sign_data['alternative_num'] > 0 && $aTask['state'] < 3 && $aTask['hosted'] >= 0){
                $params['taskstate'][6] = 6;
            }
			//7、双方有争议发生 10
            if(!empty($mk_task_opis_data['report_type'])){
                $params['taskstate'][7] = 7;
            }
            //10、已选稿
            if($aTask['state'] == 3){
                $params['taskstate'][10] = 10;
            }
            //11、结束并打款
            if($aTask['state'] == 4){
                $params['taskstate'][11] = 11;
            }

            if(!empty($mk_works_quote_data)){
	            foreach($mk_works_quote_data as $k=>$v){
	            	//4、有新的报价方案待审核 4 报价方案稿件ID号与稿件表的中标ID不相等
					if($v['auditstate'] == 0 && $v['works_id'] != $tworkinfo['works_id']){
		                $params['taskstate'][4] = 4;
		                $v['nowtime'] = $this->expriestime($v['createtime']);
		                $params['works_quote_data'][$k] = $v;
		                $useridarray[] = $v['user_id'];
		            }
					//8、工期过1/2  11
					if($aTask['state'] == 3 && $mk_task_sign_data['success_num'] > 0 && $v['day'] * 43200 < time() - strtotime($v['beginymd']) && $v['state'] == 1){
		                $params['taskstate'][8] = 8;
		            }
					//9、工期截止前3天  12
					$dataymds = time() + 259200;
					if($aTask['state'] == 3 && $mk_task_sign_data['success_num'] > 0 && strtotime($v['endymd']) < $dataymds && strtotime($v['endymd']) > $dataymd && $v['state'] == 1){
		                $params['taskstate'][9] = 9;
		            }
	            }
	            //如果报价方案的服务商不为空，则搜索用户表nickname
	            if(!empty($useridarray)){
	            	$useridstr = implode(',',$useridarray);
	            	$m_mb_info = zbj_model_api::get('zbj_model_mb_info');
				    $wknickname = $m_mb_info->select("user_id in($useridstr)",'user_id,nickname,brandname')->items;
				    if($wknickname){
				    	foreach($wknickname as $k=>$v){
				    		$params['wknickname'][$v['user_id']] = $v['brandname'];
				    	}
				    }
	            }
            }

			//派单状态
			$recommend_model = zbj_model_api::get("zbj_model_mk_recommendoption",$iTaskID);
			$params['recmd_type'] = $sTask->get("task_extends.recmd_type");
			$params['recmd_status'] = $sTask->get("task_opis.recmd_status");
			$params['recommend'] = $recommend_model->getData();

        }
        //雇佣和购买服务
        if($aTask['open_state'] == 0 && $mk_effectprotection_data['giveup_status'] != 1 && $followdate['giveup_option'] == 0 && in_array($aTask['mode'],array(11,12))){
        	if(!empty($aInfo['option'])){
        		$option_gy = unserialize($aInfo['option']);
            	$abandonreason_gy = $option_gy['abandonreason'];
        	}
            //12雇佣和购买服务，已选标，未托管,首次受理
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 0 && $aTask['state'] == 3 && $followdate['issys'] == 1){
                $params['taskstate'][12] = 12;
            }
            //13雇佣和购买服务，交易取消（服务商取消）
            if(in_array($aInfo['end_type'],array(2,5)) && $followdate['issys'] == 1){
                $params['taskstate'][13] = 13;
            }
            //17雇佣和购买服务，交易取消（服务商取消）显示放弃和交易取消文案
            if(in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][17] = 17;
            }
            //14雇佣和购买服务，未联系上雇主
            if($abandonreason_gy == 2){
                $params['taskstate'][14] = 14;
            }
            //15已选标，已托管
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 1 && $aTask['state'] == 3 && $abandonreason_gy != 2 && !in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][15] = 15;
            }
            //16雇佣和购买服务，已选标，未托管,受理过后
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 0 && $aTask['state'] == 3 && $abandonreason_gy != 2 && !in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][16] = 16;
            }
        }
        $params['is_website_special_mode'] = ($srvTasks->checkSpecialMode(1) || $srvTasks->checkSpecialMode(3)) ? 1 : 0 ;
        //网站建设类目124
        //$params['is_website_special_modes'] = $aTask['category2id'] == 124 ? 1 : 0 ;
        //通过手机号搜索区域 20150512 by houxiaopeng
        $sMobile = new zbj_service_mobile();
        if($params['taskuser']['usermobile']) $params['taskuser_usermobile_address'] = $sMobile->getInfo($params['taskuser']['usermobile']);
        if($params['taskorder_option']['contact']['phone']) $params['taskorder_option_address'] = $sMobile->getInfo($params['taskorder_option']['contact']['phone']);
        if($params['taskuser_info']['mobile']) $params['taskuser_info_address'] = $sMobile->getInfo($params['taskuser_info']['mobile']);
        if($params['customer']['mobile']) $params['customer_address'] = $sMobile->getInfo($params['customer']['mobile']);

        //获取交易顾问分机号
        try{
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$userService = new com\zhubajie\boss\interfaces\userServiceClient(null);
			zbj_lib_ApiClient::build($userService);
			$userServiceresult = $userService->getUserBaseInfo($params['task']['manager_id']);
			$params['task']['telnum'] = empty($userServiceresult->tel) ? '':'(分机号：'.$userServiceresult->tel.')';
	    }catch(Exception $e){
			$params['task']['telnum'] = '';
		}

		//如果是悬赏任务，则获取相关的专场信息
		if ($aTask['mode'] == 10 && in_array($aTask['allot'], array(1,2))) {
		    $params['hall_data'] = $this->_getHallPackage($iTaskID);
            }
		
		//当没有分配交易顾问或者派单标记不为0和1抛出提示，当前状态不允许操作 20150606
		if($mk_task_opis_data['recmd_status'] == 1 && !in_array($aTask['audit_state'],array(4,5)) && $aTask['mode']==13){
			$params['is_website_special_modes'] = 1;
		}
		if(!in_array($aTask['audit_state'],array(4,5)) && $aTask['mode']!=13){
			$params['is_website_special_modes'] = 2;
		}
		$params['recmd_status'] = $mk_task_opis_data['recmd_status'];		
		$reportModel = zbj_model_api::get('zbj_model_mb_report');
		//$reportNum = $reportModel->selectOne("`type`>6 and `type`<35 and ((`o_type`=1 and `o_bel_id`={$iTaskID}) or (`o_type`=2 and `o_id`={$iTaskID}))","count(*) as num");
		$params['report_num'] = $this->getReportNum($iTaskID);

        //商机订单数据 20150730 by houxiaopeng        
        $bstoct_task_obj = zbj_model_api::get('zbj_model_mk_bstocttask');
        $bstoct_task_res = $bstoct_task_obj->selectOne("task_id = $iTaskID",'bs_to_ct_id');
        $bs_to_ct_id = $bstoct_task_res['bs_to_ct_id'];

        if($bs_to_ct_id){
            $bstoct_obj = zbj_model_api::get('zbj_model_mk_bstoct');
            $bstoct_res = $bstoct_obj->selectOne("bs_to_ct_id = $bs_to_ct_id",'bs_to_ct_id,isurgent,options');

            if($bstoct_res['options']){
            	$bstoct_option = json_decode($bstoct_res['options'],true);
            	$bstoct_num = count($bstoct_option['note_info']) - 4;

            	if($bstoct_option['note_info']){
                    foreach($bstoct_option['note_info'] as $k=>$v){
	            		if((int)$k > (int)$bstoct_num){
	            			$bstoct_array[$k] = $v;
	            		}
	            	}
            	}
            	
            }

            $params['bstotc']['note_info'] = $bstoct_array;
            $params['bstotc']['bs_to_ct_id'] = $bstoct_res['bs_to_ct_id'];
            $params['bstotc']['isurgent'] = $bstoct_res['isurgent'];
        }


		return $this->render('task/view.html', $params);
	}
    function pagelastview($inPath){
        $this->init($inPath);
        $limit = 20;
        $page = isset($this->url['page'])? (int)$this->url['page']: 1;
        $phone_user_id = lib_BaseUtils::getStr($this->url['puid'], 'int');
        $params = array();
        $filter = array();
        $params['phone_user_id'] = $phone_user_id;//mb_survey_phone_user表主键
        $iTaskID = intval($this->url['id']);
        $iTab = isset($this->url['t'])?(int)$this->url['t']:0;
        $params['t'] = $iTab;
        if (!$iTaskID) {
            return $this->printmsg('参数错误');
        }
        $sTask = new zbj_service_task($iTaskID);
        $sTask = $sTask->init();
        //模式
        $mode = $sTask->get('mode');
        if (!in_array($mode, array(10,11,12,13))) {
            $sName = $_SERVER['SERVER_NAME'];
            if ($sName == 'cp.v5.zbj.com') {
                $sName = 'cp.v4.zbj.com';
            } elseif (stripos(lib_Constant::BOSS_URL, $sName)) {
                $sName = 'cq.cp.zhubajie.com:13520';
            } else {
                header('content-type:text/html;charset=utf-8');
                return '无法获取服务器';
            }
            $url = 'http://'.$sName.'/admintask/view-tid-'.$iTaskID.'.html';
            return $this->redirect($url);
        }
        //任务信息
        $aTask = $sTask->get();

        /*by liang 如果是众帮分享帮 start*/
        $zbObj = new model_mk_taskallotattr;
        $condition = array('task_id'=>$iTaskID);
        $zbArr = $zbObj->selectOne($condition,'attr_id');
        if( $zbArr ){
            $params['zb'] = 1;
        }
        /*by liang 如果是众帮分享帮 end*/

        //扩展属性
        $srvCategory=new zbj_service_category($aTask['category_id']);
        $ext_list = $srvCategory->getExt(1);
        if($ext_list) {
            $ext_val_list = $sTask->getExtVal();
            if($ext_val_list) {
                foreach($ext_list as $idx => $ext) {
                    if(isset($ext_val_list[$ext['ext_id']])) {
                        $ext_list[$idx]['selected'] = $ext_val_list[$ext['ext_id']];
                    } else {
                        $ext_list[$idx]['selected'] = false;
                    }
                }
                $params['task_category_ext']=$ext_list;
            }
        }



        if (empty($aTask)) {
            return $this->printmsg("任务不存在");
        }
        if ($aTask['category_id']) {
            $s_module = new service_module();
            $module = $s_module->getModuleByCategoryId($aTask['category_id']);
            if ($module && $module['module_name']) {
                $aTask['module_name'] = $module['module_name'];
            }else{
                $aTask['module_name'] = '暂无行业运营';
            }
        }

        //info详情
        $aInfo = $sTask->get("task_info.*");
        $params['info'] = $aInfo;

        //判断是否为外包
        $mdlOutTask = new zbj_model_mk_taskoutsource();
        $outRes = $mdlOutTask->selectOne("task_id='$iTaskID'",'fws_id');
        $params['info']['waibao'] = $outRes? 1 : 0;

        $params['info_option'] = unserialize($aInfo['option']);
        $params['task_opis'] = $sTask->get("task_opis.*");
        $params['task_paytype'] = $sTask->get("task_paytype.*");
        $params['is_need_up_file'] = $sTask->isNeedUpFile();
// 		$params['nps_score'] = service_task::getNpsScore($iTaskID);
        $params['nps_score'] = $this->_getNpsScore($iTaskID);


        //鉴权控制
        //平面设计组-404 专业设计组-437 文案营销一组-408 文案营销二组-510
        if(in_array($this->_usergroupid,array(399,453,374,386,404,437,408,510))){//2015/09/06新增大客户取经团和建筑工程取经团-订单运营取经团
            $params['user_auth_status'] = 1;
        }else{
            $params['user_auth_status'] = 0;
        }

        //授权
        $params['accredit'] = service_npsaccredit::getAccreditByTaskId($iTaskID);

        //订单
        if (in_array($mode, array(11,12))) {
            $taskobj = new zbj_service_task_buy($iTaskID);
            $order = $taskobj->getOneWinOrder();
            if (!$order) {
                $order = $taskobj->getOneWinOrder(NULL, 2);


                if (!$order) {
                    return $this->printmsg('订单获取失败');
                }
            }

            ////////////////////验证该订单是否已付过款 By张启明///////////////////////////
            $installmentModel = new zbj_model_mk_installment();
            $installmentCondition = array('order_id' => $order['order_id']);
            $selectedInstallment = $installmentModel->selectOne($installmentCondition, '*');
            if(empty($selectedInstallment)){
                $params['hasInstallment'] = 0;
            } else{
                $params['hasInstallment'] = 1;
            }
            ////////////////////////////////////////////////////////////////////


            $params['taskorder_option'] = unserialize($order['option']);
            $params['taskorder'] = $order;
            $sl_user=new zbj_service_user($order['sl_user_id']);
            $params['sl_user'] = $sl_user->get();
            $params['sl_user']['info'] = $sl_user->get('info.*');
        }
        //用户信息
        $sUser = new zbj_service_user($aTask['user_id']);
        $params['taskuser'] = $sUser->get();
        $params['taskuser_info'] = $sUser->get('info.*');
        $aTask['brandname'] = $sUser->get('info.brandname');
        $params['task'] = $aTask;
        $leave = '';//交易顾问离职状态
        $m_cpuser = new zbj_model_cp_user();
        //交易完成
        $params['fn_order_status']=0;
        if ($aTask['state'] ==4 ) {
            $fn_order_where['stype']=16;
            $fn_order_where['refund_state']=2;
            $fn_order_where['product_pkid']=$iTaskID;
            $fn_order_where['refund_amount']=0;
            $m_fn_order=new zbj_model_fn_order();
            $fn_order=$m_fn_order->selectOne($fn_order_where);
            if ($fn_order) {
                $params['fn_order_status']=1;
            }
        }
//		if ($aTask['manager_id']) {
//
//			$cpuser = $m_cpuser->selectOne(array('user_id'=>$aTask['manager_id']), 'isleave');
//			if ($cpuser['isleave']==1) {
//				$leave = '（离职）';
//			}else if($cpuser['isleave']==2){
//				$leave = '（调岗）';
//			}else if($cpuser['isleave']==3){
//				$leave = '（休假）';
//			}
//		}
//		$params['leave'] = $leave;
        //用户内部资料信息
        $m_customerperson = new zbj_model_mb_customerperson($aTask['user_id']);
        $customerperson = $m_customerperson->getdata();
        $params['customerperson'] = $customerperson;

        //取得所有下拉框选项相相关联的值
        $s_cpoption=new service_cpoption();
        $params['fulloptions']=$s_cpoption->getFullItems();
        //任务标签t6s版本不在使用
// 		$aTag = $sTask->getTaskTag();
// 		$params['tasktag'] = $aTag;
        //举报数
        $oReport = new zbj_service_report();
// 		$params['reportTotal'] = $oReport->getTaskReport($iTaskID);
        //任务拓展数据
        $params['opis'] = $params['task_opis'];
        if(!$params['opis']){
            //return $this->printmsg("任务拓展数据不存在");
        }

        //增值服务包信息
        $m_service_pack = new zbj_model_fn_servicepack();
        $params['service_pack'] = $m_service_pack->select(array('pack_id' => $aTask['was_pack']))->items;

        //
        switch ($iTab) {
            case 1:
                //日志
//                define(DEBUG, 1);
                $logcondition[] = 'task_id = '.$iTaskID;
                $js = trim ( zbj_lib_BaseUtils::getStr ( $_GET ['js'] ) );
                $filter['js'] = $js;
                switch ($js){
                    case 2 :
                        $logcondition[] = 'isbuyer = 1';
                        break;
                    case 3 :
                        $logcondition[] = 'isbuyer = 2 ';
                        break;
                    case 4:
                        $logcondition[] = 'isbuyer = 0';
                        break;
                    case 5:
                        $logcondition[] = 'isbuyer = 3';
                        break;
                }
                $st = trim ( zbj_lib_BaseUtils::getStr ( $_GET ['st'] ) );
                $filter['st'] = $st;
                switch ($st) {
                    case 1 :
                        $logcondition[] = "state = 1";
                        break;
                    case 2 :
                        $logcondition[] = "state = 2";
                        break;
                    case 3 :
                        $logcondition[] = "state = 3";
                        break;
                    case 4 :
                        $logcondition[] = "state = 4";
                        break;
                }
                $mdltasklog = zbj_model_api::get('zbj_model_mk_taskactionlog');
                $mdltasklog->setLimit($limit);
                $mdltasklog->setPage($page);
                $mdltasklog->setCount(true);
                $logcontent = $mdltasklog->select($logcondition, '*');
                //分页
                $querystring = $_SERVER['QUERY_STRING'];
                $pagebar = $this->PageBar($logcontent->totalSize, $limit, $page, $inPath, 'style4', $querystring);
                $params['tasklog'] = $logcontent->items;
                $params['logtotal']   = $logcontent->totalSize;
                $params['logpagebar'] = $pagebar;
                break;
            case 2:
                //评论
//                define(DEBUG, 1);
                $commentcondition = array('task_id' => $iTaskID);
                $m = trim ( zbj_lib_BaseUtils::getStr ( $_GET ['m'] ) );
                $params['m'] = $m;
                switch ($m) {
                    case 1 :
                        $commentcondition[] = "mode = 1";
                        break;
                    case 2 :
                        $commentcondition[] = "mode = 2";
                        break;
                    case 3 :
                        $commentcondition[] = "mode = 3";
                        break;
                    case 4 :
                        $commentcondition[] = "mode = 4";
                        break;
                    case 5 :
                        $commentcondition[] = "mode = 0";
                        break;
                }
                $mdltaskcomment = zbj_model_api::get('zbj_model_mk_taskcomment');
                $mdltaskcomment->setLimit($limit);
                $mdltaskcomment->setPage($page);
                $mdltaskcomment->setCount(true);
                $comment = $mdltaskcomment->select($commentcondition, '*');
                $params['m1'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 1', 'count(1) as num')->items[0]['num'];
                $params['m2'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 2', 'count(1) as num')->items[0]['num'];
                $params['m3'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 3', 'count(1) as num')->items[0]['num'];
                $params['m4'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 4', 'count(1) as num')->items[0]['num'];
                $params['m5'] = $mdltaskcomment->select('task_id = '.$iTaskID.' and mode = 0', 'count(1) as num')->items[0]['num'];

                //分页
                $querystring = $_SERVER['QUERY_STRING'];
                $pagebar = $this->PageBar($comment->totalSize, $limit, $page, $inPath, 'style4', $querystring);
                $params['taskcomment'] = $comment->items;
                $params['total']   = $comment->totalSize;
                $params['pagebar'] = $pagebar;
                break;
            case 4://备注
                $remarklist = $this->_getRemark($iTaskID);
                $params ["remarklist"] = $remarklist->items;
                $params['remark_total'] = $remarklist->totalSize;
                $params['remark_pagebar'] = $this->PageBar($remarklist->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
            case 5://订单
                $ordercondition=array();
                $ordercondition['product_pkid']=$iTaskID;
                if(isset($_GET['ordersel'])){
                    switch (intval($_GET['ordersel'])){
                        case '1':
                            $ordercondition['ispay']=0;
                            break;
                        case '2':
                            $ordercondition['ispay']=1;
                            $ordercondition['state']=0;
                            break;
                        case '3':
                            $ordercondition['ispay']=1;
                            $ordercondition['state']=1;
                            break;
                        case '4':
                            $ordercondition['state']=2;
                            break;
                        default:
                            break;
                    }
                }
                $m_order = new zbj_model_fn_order();
                $m_order->setLimit($limit);
                $m_order->setPage($page);
                $m_order->setCount(true);
                $orderlist = $m_order->select($ordercondition, 'order_id,title,state,price,createtime,ispay,sl_nickname,sl_user_id,user_id,nickname,stype,refund_state,refund_amount,isevaluation,isevaluation_sl,isevaluation_buy',null,'order by order_id desc');
               //获取履约保证金记录信息
                $successsrvWork = $sTask->getSuccessWorkObject();
                $agreementid = 0;
                if(!empty($successsrvWork)){
                	$agreementid = $successsrvWork->getAgreementById();
            	}
                $agreementstr = '';
                if($agreementid>0){
                    $srvAgreement = new zbj_service_agreementcond_pay($agreementid);
                    $agreementData = $srvAgreement->get();
                    $refund_money = 0.00;
                    if(!empty($agreementData)){
                        $agreementordercondition['product_pkid']=$agreementid;
                        $agreementordercondition['stype'] = 631;
                        $agreementordercondition['ptype'] = 34;
                        $agreementordercondition['ispay'] = 1;
                        $agm_order = new zbj_model_fn_order();
                        $agreememtorder = $agm_order->selectOne($agreementordercondition,'order_id,title,state,price,createtime,ispay,sl_nickname,sl_user_id,user_id,nickname,stype,refund_state,refund_amount,refund_type',"","order by order_id");
                        if(!empty($agreememtorder)){
                            $refund_money = round(zbj_lib_BaseUtils::getStr($agreememtorder['refund_amount'],'float'),2);
                            $agreement_money = round(zbj_lib_BaseUtils::getStr($agreementData['value'],'float'),2);
                            $agreementmoney = number_format($agreement_money,2,'.','');
                            $agreementstr="<br/>履约保证金：{$agreementmoney}元/";
                            $paymentmoney = number_format(($agreement_money-$refund_money),2,'.','');
                            if($refund_money>0 && $refund_money<$agreement_money){
                                $agreementstr.="<br/><div class='text-warning'>赔偿雇主{$paymentmoney}元，退还服务商{$refund_money}元，将在任务打款时到账</div>";
                            }else if($agreement_money>0 && $refund_money==$agreement_money){
                                $agreementstr.="<br/><div class='text-warning'>服务商缴纳的履约保证金{$agreementmoney}元，将在任务打款时返还给服务商</div>";
                            }
                        }
                    }
                }
                if($agreementstr){
                    $orderlist->items[0]['agreementstr']=$agreementstr;
                }
                $params['orderlisttotal'] = $orderlist->totalSize;
                $params['orderlist'] = $orderlist->items;
                $params['pagebar'] = $this->PageBar($orderlist->totalSize, $limit, $page, $inPath, 'style4', '?'.$_SERVER['QUERY_STRING']);
                break;
            case 6:
                //report
                $otype = zbj_lib_BaseUtils::getStr($_GET['otype'], 'int');
                $stype = zbj_lib_BaseUtils::getStr($_GET['stype'], 'int');
                $rstate = zbj_lib_BaseUtils::getStr($_GET['rstate'], 'int');
                $isvest = zbj_lib_BaseUtils::getStr($_GET['isvest'], 'int');
                $scont = trim(zbj_lib_BaseUtils::getStr($_GET['scont']));
                $filter['otype'] = $otype;
                $filter['stype'] = $stype;
                $filter['scont'] = $scont;
                $filter['rstate'] = $rstate;
                $filter['isvest'] = $isvest;
                $evaluationmodel = new zbj_model_mb_evaluation();
                $evaluationlist = $evaluationmodel->select("task_id={$iTaskID}","evaluation_id")->items;
                $wherestr ='';
                if(!empty($evaluationlist)){
                    $evaluationids = array();
                    foreach($evaluationlist as $evaluation){
                        $evaluationids[] =$evaluation['evaluation_id'];
                    }
                    if(!empty($evaluationids)){
                        $wherestr = " or (t1.o_type=6 and t1.o_id in(".implode(",",$evaluationids)."))";
                    }
                }
                $reportCondition = "((t1.o_type=2 and t1.o_id={$iTaskID}) or (t1.o_type=1 and t1.o_bel_id={$iTaskID})".$wherestr.")";
                $report_leftjoin = array("mb_council_report as t2" => "t1.report_id=t2.report_id");
                $typeCondition = $reportCondition;
                if ($otype) {
                    $reportCondition .= " and t1.type={$otype}";
                }
                if ($stype && $scont) {
                    switch ($stype) {
                        case 1:
                            $scont = (int) $scont;
                            $reportCondition .= " and t1.report_id={$scont}";
                            break;
                        case 2:case 3:
                        $usercond='';
                        if(is_numeric($scont)){
                            $usercond="`user_id`=".(int)$scont;
                        }else{
                            $usercond="`nickname`='{$scont}' or `brandname`='{$scont}'";
                        }
                        $oUser = new zbj_model_mb_info();
                        $user = $oUser->selectOne($usercond, "user_id");
                        if ($user['user_id']) {
                            $tempfield = $stype == 2 ? "f_user_id" : "t_user_id";
                            $reportCondition .= " and t1.{$tempfield}={$user['user_id']}";
                        }
                        break;
                        default:
                            break;
                    }
                }
                if ($rstate) {
                    if ($rstate > 2) {
                        $reportCondition .= " and t1.state>2";
                    } else {
                        $reportCondition .= " and t1.state={$rstate}";
                    }
                }
                if ($isvest) {
                    $reportCondition .= " and t2.status=3";
                }
                $reportList = $oReport->getReportList($reportCondition, 1, "t1.report_id,t1.type,t1.state,t1.f_nickname,t1.t_nickname,t1.addtime,t2.status as isvest,t1.expand", "ORDER BY t1.report_id DESC", $page, $limit, $report_leftjoin);
                $typeList = $oReport->getReportList($typeCondition, 1, "t1.type", "", 0, 0, $report_leftjoin);
                $querystring = $_SERVER['QUERY_STRING'];
                $reportpagebar = $this->PageBar($reportList['totalSize'], $limit, $page, $inPath, 'style4', $querystring);
                $reportType = $oReport->_type;
                if ($reportList['totalSize']>0) {
                    foreach ($reportList['items'] as $k => $v) {
                        $reportList['items'][$k]['token'] = md5($v['report_id'] . $iTaskID . 1 . zbj_lib_Constant::ZBJ_SYSUSERKEY . $this->_userid);
                        $reportList['items'][$k]['expand'] = unserialize($v['expand']);
                        if ($v['state'] > 2) {
                            $result = $oReport->getReportList("report_id={$v['report_id']} and type>6", 2, "addtime", "ORDER BY id DESC LIMIT 0,1");
                            if ($result)
                                $reportList['items'][$k]["endtime"] = $result[0]["addtime"];
                        }
                    }
                }
                foreach ($reportType as $k => $v) {
                    $typeString[$k] = $v[0];
                }
                if ($typeList) {
                    foreach ($typeList as $v) {
                        $reportSelect[$v['type']] = $reportType[$v['type']][0];
                    }
                    array_unique($reportSelect);
                }
                $params['_userid'] = $this->_userid;
                $params['otypes'] = $reportSelect;
                $params['typeString'] = $typeString;
                $params['reportlist'] = $reportList['items'];
                $params['reportnum'] = $reportList['totalSize'];
                $params['reportpagebar'] = $reportpagebar;
                break;
            case 7://增值服务
                if(in_array($sTask->get('mode'), array(11,12))){
                    return $this->printmsg('此任务不支持增值服务。',0,null,'/task/lastview-id-'.$sTask->get('task_id'));
                }
                $nosearch_servs = $sTask->getServices(4);
                $params['nosearch_price'] = $nosearch_servs['amount'];
                $hide_servs = $sTask->getServices(5);
                $params['hide_price'] = $hide_servs['amount'];
                $params['top'] = $this->_getTops($aTask);
                $serv_item = $sTask->getServiceItem(array(1,2,3));
                $hide_package = $sTask->getServices(661);
                $params['hide_package_price'] = $hide_package['amount'];
                $order_data_model = new zbj_model_fn_orderdata();
                if($order_data_model->selectOne('product_pkid='.$iTaskID.' and stype=661 and refund_state = 0')){
                    $params['hide_package'] = 1;
                }
                //TODO::增值服务退款

                if ($serv_item) {
                    foreach ($serv_item as $k => $s) {
                        if ($k == 1) {
                            $params['pay_search'] = 1;
                        } elseif ($k == 2) {
                            $params['pay_hidden'] = 1;
                        } else {
                            $params['pay_show'] = $s;
                            $params['has_pay_show'] = 1;
                        }
                    }
                }

                if ($params['pay_show']) {
                    foreach ($params['pay_show'] as $key => $value) {
                        $sTag = new zbj_service_tag($value['tag_id']);
                        $srv_vir = new zbj_service_categoryvirtual($value['tag_id']);
                        if ( in_array($value['tag_id'],array(24245,24246)) ) {
                            $params['pay_show'][$key]['tag_name'] = $sTag->get('virtual_name');
                        } else {
                            $params['pay_show'][$key]['tag_name'] = $srv_vir->get('virtual_name');
                        }

                    }
                }
//				pf($params['pay_show'],1);

                //需求热点
                $mdl_vaspaidlisting = new zbj_model_mb_vaspaidlisting();
                $srv_vas = new zbj_service_vas();
                $location_ids = array(29);
                foreach ( $location_ids as $v ) {
                    $location = $srv_vas->checkVasLocation($v);
                    $vasPaidListing = $mdl_vaspaidlisting->select(array('task_id' => $aTask['task_id'], '(state = 1 OR refund_state = 1 AND (state = 0 AND start_time > 0))'))->items;
                    $vas_info[$v] = $location;
                    if ( $vasPaidListing ) {
                        $vas_info[$v]['list'] = $vasPaidListing;
                    }
                }
                $params['vas_info'] = $vas_info;

                //商标注册||版权保护
                $m_copyright = new zbj_model_zt_copyright();
                $params['trademarks'] = $m_copyright->select(array('task_id' => $iTaskID, 'ispay' => 1))->items;

                //包满意
                if($sTask->checkSpecialTask() !== false){
                    $params['specialtask'] = 1;
                }

                //名片印刷
                $card_print_service = array(514, 515, 516,517);
                $order_data = $srv_vas->getPaidOrderData($iTaskID, $card_print_service);

                if ($order_data) {
                    $kuaiyin = array();

                    foreach ($order_data as $item) {
                        $kuaiyin['title'] = $item['title'];
                        $kuaiyin['price'] = $item['price'];
                        if ($item['stype'] == 517) {
                            $print_info = $sTask->kuaiYinGetPrintInfo($params['info_option']);
                            $kuaiyin['title'] = "名片频道印刷#{$print_info['name']}";
                            $ky_order_id = $sTask->kuaiYinGetKyTradeNo($params['info_option']);
                            if ($ky_order_id) {
                                $ky_state = zbj_lib_KuaiYinApi::query($ky_order_id);
                                $kuaiyin['state'] = (string) zbj_lib_KuaiYinApi::getPrintStateDesc($ky_state['state']);
                                $params['kuaiyin'][] = $kuaiyin;
                                $kuaiyin = array();
                            }
                        } else {
                            $temp = json_decode(zbj_lib_KuaiYinApi::query($item['order_id']));
                            if (200 == $temp['code']) {
                                $kuaiyin['state'] =  zbj_lib_KuaiYinApi::getPrintStateDesc($temp['data']['state']);
                                $params['kuaiyin'][] = $kuaiyin;
                            } else {
                                continue;
                            }
                        }
                    }
                }

                //延长选稿期
                $mdl_taskaddamount = new zbj_model_mk_taskaddamount();
                $condition['task_id'] = $aTask['task_id'];
                $condition['type'] = 2;
                $condition['state'] = 0;
                $extend = $mdl_taskaddamount->selectOne($condition);
                $params['extend'] = $extend;
                break;
            case 8://派单详情
                //各种状态数量统计
                $ricondition = array('task_id' => $iTaskID);
                if ($_GET['rit'] == 1) {
                    $ricondition['is_sys'] = (int)$_GET['rit'] + 1;
                }elseif($_GET['rit'] == 2){
                    $ricondition['is_sys'] = (int)$_GET['rit'] - 1;
                }else{
                    $ricondition[] = 'is_sys != 0';
                }
                $mRecommend = new zbj_model_mk_recommend();
                $params['board_sum_acc'] = 0; //收到派单
                $oRecommend = $mRecommend->select($ricondition, 'action_type,count(*) num', 'group by action_type')->items;
                $board_summary = lib_BaseUtils::array_changekey($oRecommend, 'action_type');
                $typelist = service_recommend::getType();
                foreach ($typelist as $key => $value) {
                    $params['board_sum'][$key] = array(
                        'name' => $value,
                        'num' => (int) $board_summary[$key]['num'],
                    );
                    $params['board_sum_acc'] += $params['board_sum'][$key]['num'];
                }
                //响应率
                $params['board_sum_rsp'] = lib_BaseUtils::getPercent($params['board_sum'][2]['num'] + $params['board_sum'][3]['num'] + $params['board_sum'][6]['num'], $params['board_sum_acc']) . '%';
                //抢单率
                $params['board_sum_get'] = lib_BaseUtils::getPercent($params['board_sum'][2]['num'] + $params['board_sum'][3]['num'], $params['board_sum_acc']) . '%';
                //列表
                $mRecommend->setLimit(10);
                $mRecommend->setPage($page);
                $mRecommend->setCount(true);
//				define('DEBUG', 1);
                if ($_GET['sum']) {
                    $ricondition['action_type'] = (int)$_GET['sum'];
                }
                $oRecommend = $mRecommend->select($ricondition,'*',null,'order by sendtime desc');
                $params['recommendlist'] = $oRecommend->items;

                // 定向派单服务商
                $user_ids = array();
                if ($params['recommendlist']) {
                    foreach ($params['recommendlist'] as $key => $value) {
                        $params['recommendlist'][$key]['state'] = $typelist[$value['action_type']];
                    }
                }

                $params['recommendtotal'] = $oRecommend->totalSize;
                $params['pagebar'] = $this->PageBar($oRecommend->totalSize, 10, $page, $inPath, 'style4');
                break;
            case 9:
                $sign = md5($iTaskID . 'boss.view.agreement');
                $url = zbj_lib_Constant::PAY_URL . '/api/agreement-do-100-tid-' . $iTaskID . '-sign-' . $sign;
                $agreememt = lib_api::apiCall($url);
                $params['agreement'] = $agreememt;
                break;
            case 10: // 分配日志
                $srvAllotLog = new zbj_model_mk_taskallotlog();
                $allotlog = $srvAllotLog->select("task_id='{$iTaskID}'",'*','','order by alog_id desc limit 0, 50')->items;
                $params['allotlog'] = (array)$allotlog;
                break;
            case 11: // 内容修改日志
                $editlogModel = zbj_model_api::get('zbj_model_mk_taskeditlog');
                $editlog = $editlogModel->select("task_id='{$iTaskID}'",'*','','order by log_id asc')->items;
                $params['editlog'] = (array)$editlog;

                $params['compare_css'] = SStringComparer::getCSS();
                break;
            default:
                if ($aInfo['promotion_state'] == 1) {
                    $aInfo['prostart'] = $aTask['starttime'];
                    $aInfo['proend'] = $aTask['starttime'] + $aInfo['promotion_time'];
                }

                //任务详情
                $params['cont'] = $sTask->get("task_cont.*");
                //任务补充需求
                $condition = array(
                    'task_id'=>$iTaskID
                );
                $mdlAddition = zbj_model_api::get('zbj_model_mk_taskadditional');
                $addCont = $mdlAddition->select($condition, '*')->items;
                //附件
                $file = $sTask->getMany("task_file");
                $aFiles = array();
                $aPic = array();
                if (!empty($file)) {
                    foreach ($file as $val) {
                        if (in_array(strtolower($val['filext']),array('jpg', 'gif', 'jpeg', 'png', 'bmp'))) {
                            $aPic[] = $val;
                        } else {
                            $aFiles[] = $val;
                        }
                    }
                }
                //补充需求附件
                if (!empty($addCont)) {
                    foreach ($addCont as $key=>$val) {
                        if (!empty($val['files']))
                            $addCont[$key]['addfiles'] = unserialize($val['files']);
                    }
                }
                $params['files'] = $aFiles;
                $params['pic'] = $aPic;
                $params['addcont'] = $addCont;
                //增值服务
//				define('DEBUG', 1);
                if ($aTask['was_nosearch'] == 1) {
                    $params['zzfw'] .= '禁止搜索引擎,';
                }
                if ($aTask['was_showorks'] == 1) {
                    $params['zzfw'] .= '隐藏交稿,';
                }
                if ($aTask['was_promotion'] == 1) {
                    $params['zzfw'] .= '需求置顶';
                    $gettop_model = new zbj_model_mk_taskpaidlisting();
                    $get_top = $gettop_model->select('task_id=' . $iTaskID . ' and state=1', 'mk_category_guide.guide_id,mk_category_guide.guide_name,mk_category_guide.cndir', null, null, array('mk_category_guide' => 'mk_category_guide.guide_id=mk_task_paid_listing.tag_id'))->items;
                    $srv_vir = new zbj_service_categoryvirtual();
                    $guide_srv = new zbj_service_categoryguide();

                    if ($get_top) {
                        $get_tops = '';
                        foreach ($get_top as $value) {
                            if ( $value['guide_id'] == 1000459 ) {
                                $get_tops .= '<a href="' . zbj_lib_Constant::TASK_URL . '/xuqiu/" target="_blank"> 需求大厅</a>,';
                            } else {
                                $guide_srv->setId($value['guide_id']);
                                if ( $guide_srv->get('level') == 2 ) {
                                    $get_tops .= '<a href="' . zbj_lib_Constant::TASK_URL . '/t-'.$value['cndir'].'/" target="_blank">' . $value['guide_name'] . '</a>,';
                                } else {
                                    $guide_srv->setId($guide_srv->get('parent_id'));
                                    $get_tops .= '<a href="' . zbj_lib_Constant::TASK_URL . '/t-'.$value['cndir'].'/'.$guide_srv->get('cndir').'" target="_blank">' . $value['guide_name'] . '</a>,';
                                }
                            }
                        }
                        trim($get_tops,',');
                        $params['zzfw'] .= "($get_tops)";
                    }
                }

                //var_dump($params);
                //投标
                if(in_array($aTask['mode'],array(10,13))){
                    $works = new zbj_model_mk_works();
                    //中标数
                    $num = $works->selectOne(array('task_id' => $iTaskID, 'issuccess' => 1), 'count(1) num');
                    $params['success_num'] = $num['num'];
                    //谢谢数
                    $num = $works->selectOne(array('task_id' => $iTaskID, 'is_tks' => 1), 'count(1) as num');
                    $params['thanks_num'] = $num['num'];
                    //未审核数
                    $num = $works->selectOne(array('task_id' => $iTaskID, 'issuccess' => 0, 'isalternative' => 0, 'iseliminate' => 0, 'open_state' => 0), 'count(1) as num');
                    $params['noview_num'] = $num['num'];
                    //全部投标
                    $num = $works->selectOne(array('task_id' => $iTaskID), 'count(1) as num');
                    $params['all_num'] = $num['num'];

                    $worksTypeList = $works->select(array('task_id' => $iTaskID), 'type,count(*) num', 'group by type')->items;
                    $params['works_types'] = array(
                        10 => array('name' => '交稿', 'num' => 0),
                        20 => array('name' => '回应', 'num' => 0),
                        21 => array('name' => '报名', 'num' => 0),
                        22 => array('name' => '求真相', 'num' => 0),
                        23 => array('name' => '求加价', 'num' => 0),
                        24 => array('name' => '求担保', 'num' => 0),
                        25 => array('name' => '求保证选标', 'num' => 0),
                    );
                    if($worksTypeList){
                        foreach ($worksTypeList as $key => $value) {
                            if(array_key_exists($value['type'], $params['works_types'])){
                                $params['works_types'][$value['type']]['num'] = $value['num'];
                            }
                        }
                    }
                    $workslist = $this->_getWorks($aTask, $limit, $page);
                    $params['works_list'] = $workslist->items;
                    $params['works_total'] = $workslist->totalSize;
                    $params['works_pagebar'] = $this->PageBar($workslist->totalSize, $limit, $page, $inPath, 'style5', $_SERVER['QUERY_STRING']);

                    //判断是否符合开启社会化选标的条件
                    $modelWork = zbj_model_api::get('zbj_model_mk_works');
                    if (1 == $aTask['allot']) {
                        $aWork = $modelWork->selectOne("task_id={$aTask['task_id']} AND is_sysselect=1", 'COUNT(0) AS c');
                        if ($aWork['c']) {
                            $params['show_sys'] = 1;
                        }
                    } else {
                        $params['show_sys'] = 1;
                    }

                    //判断是否作弊举报
                    $modelReport = new zbj_model_mb_report();
                    $aReport = $modelReport->selectOne("o_type=1 AND o_bel_id={$aTask['task_id']} AND type=8 AND state=3 AND old_report=0", 'COUNT(0) AS c');
                    if ($aReport['c']) {
                        $params['isCheat'] = 1;
                    }

                    //社会化选标相关
                    $servCouncil = new zbj_service_council();
                    $systaskinfo = $servCouncil->getTaskSysInfo($aTask['task_id']);
                    $params['systaskinfo'] = $systaskinfo;
                    //$aTask = $servCouncil->getTask($aTask['task_id']);
                    $modelCouncilTask = new zbj_model_mb_counciltask();
                    //$aTaskCouncil = $modelCouncilTask->selectOne("task_id={$aTask['task_id']} AND status<5");
                    //取消社会化选标
                    $aTaskCouncil = null;
                    $params['isCouncil'] = !empty($systaskinfo) ? 1 : 0;
                    $params['isVestPhase'] = ($aTaskCouncil['status'] >= 2) ? 1 : 0; //客服阶段外不能进行选稿
                    $aOptions = unserialize($aTaskCouncil['options']);
                    if ($aTaskCouncil['status']) {
                        //$aWorkList = $servCouncil->getCouncilList('*', "job_id={$aTask['task_id']} AND job_type=2", 'work', 'ORDER BY is_charge ASC')->items;
                        $modelCouncilWork = new zbj_model_mb_councilwork();
                        $aWorkList = $modelCouncilWork->select("job_id={$aTask['task_id']} AND job_type=2", '*', '', 'ORDER BY is_charge ASC')->items;
                        //分配的诚信委员会成员列表
                        if (!empty($aWorkList) && is_array($aWorkList)) {
                            foreach ($aWorkList as $work) {
                                if (1 == $work['is_charge']) {
                                    $params['aChargeWorker'][] = $work;
                                } else if (2 == $work['is_charge']) {
                                    $params['aVestWorker'][] = $work;
                                } else {
                                    $params['aNormalWorker'][] = $work;
                                }
                            }

                            //诚信委员会选稿情况
                            if (!empty($params['works_list']) && is_array($params['works_list'])) {
                                $aWorkListCopy = $params['works_list'];
                                $aVestChoice = !empty($aOptions['vest_choice_works']) ? explode(',', $aOptions['vest_choice_works']) : array();
                                foreach ($aWorkListCopy as $key => $val) {
                                    $aWorkListCopy[$key]['token'] = md5($val['works_id']. lib_Constant::SYSUSERKEY);
                                    if (in_array($val['works_id'], $aVestChoice)) {
                                        $aWorkListCopy[$key]['vestChoice'] = 1;
                                    }
                                    foreach ($aWorkList as $work) {
                                        if ($work['choice'] == $val['works_id']) {
                                            $aWorkListCopy[$key]['choiceNum'] += 1;
                                        }
                                    }
                                }
                                $params['works_list'] = $aWorkListCopy;

                            }

                            $params['isAllot'] = 1;
                        } else {
                            $params['isAllot'] = 0;
                        }

                        //获取需要的奖项
                        $params['aWorksClass'] = array();
                        if (1 == $aTaskCouncil['require_num']) {
                            $params['aWorksClass'][] = 1;
                            $params['isSolo'] = 1;
                        } else {
                            for ($i = 1; $i <= 3; $i++) {
                                if (!empty($aOptions["rank_{$i}_num"])) {
                                    $params['aWorksClass'][] = $i;
                                }
                            }
                        }
                    }

                    //招标协议状态
                    if(in_array($aTask['mode'],array(13))){
                        $m_works=new zbj_model_mk_works();
                    	$select_works=$m_works->selectOne(array('issuccess'=>1,'task_id'=>$aTask['task_id']),'select_time,works_id');
                    	if ($select_works) {
							$params ['select_time'] = $select_works ['select_time'];
						}
                    	if($sTask->isNeedAgreement()){                    		
                    		$m_srvWorks = new zbj_service_works($select_works['works_id']);
                    		$params['Agreement']['need']=true;
                    		$params['Agreement']['Actived']=$m_srvWorks->hasAgreementActived();
                    		if($params['Agreement']['Actived']){
	                    		$agreement = $m_srvWorks->loadAgreements();
	                    		$params['Agreement']['time']=$agreement['is_activetime'];
                    		}
                    	}else{
                    		$params['Agreement']['need']=false;
                    	}
                    }
                    //联系人个数
                    if (in_array($aTask['mode'],array(13))) {
                        $mdlSeller = new zbj_model_mk_taskseller();
                        $seller = $mdlSeller->selectOne("task_id={$iTaskID}",'count(1) num');
                        $params['contact_nums'] = $seller['num'];
                    }
                } elseif (in_array($aTask['mode'], array(11, 12))) {
                    $taskobj = new zbj_service_task_buy($iTaskID);
                    $order = $taskobj->getOneWinOrder();
                    if (!$order) {
                        $order = $taskobj->getOneWinOrder(null, 2);
                        if (!$order || $order['close_type'] == 5) { //系统关闭不可见
                            $params['close_log'] = '系统关闭';
                        }else{
                            $tlog_model = new zbj_model_mk_tasktradelog();
                            $close_log = $tlog_model->selectOne('type=9 and order_id='.$order['order_id']);
                            $close_log['options'] = unserialize($close_log['options']);
                            $params['close_log'] = $close_log;
                        }
                    }
                    if ($order['state'] == 2) { //订单已经关闭
                        $params['close_order'] = $order;
                        $params['order_is_close'] = 1;
                    } else {
                        //交易记录
                        $curr_state = 1;
                        $twork = new zbj_model_mk_works();
                        $tworkinfo = $twork->selectOne('task_id='.$taskobj->get("task_id").' and issuccess=1','works_id');
                        $params['task_works_id'] = $tworkinfo['works_id'];
                        if ($aTask['hosted'] == 1) {
                            $down_log = array(
                                '5' => array(),
                                '4' => array(),
                                '3' => array(),
                                '2' => array(),
                                '1' => array()
                            );
                            //交易记录
                            $tlog_model = new zbj_model_mk_tasktradelog();
                            $tradelog = $tlog_model->select('task_id=' . $iTaskID, '*', null, 'order by tid desc')->items;
                            foreach ($tradelog as $log) {
                                $log['options'] = unserialize($log['options']);
                                switch ($log['type']) {
                                    case 1: //购买状态
                                        $down_log[1][] = $log; //[购买服务]状态的数据
                                        break;
                                    case 3: //雇主支付
                                        $down_log[2][] = $log;
                                        break;
                                    case 4: //服务商开始工作状态
                                        $down_log[3][] = $log;
                                        break;
                                    case 5: //付款
                                        $down_log[4][] = $log;
                                        break;
                                    case 8: //评价
                                        $down_log[5][] = $log;
                                        break;
                                }
                            }

                            foreach ($down_log as $key => $log) {
                                if ($log) {
                                    $curr_state = $key;
                                    break;
                                }
                            }
                            if ($curr_state < 3 && $order['isaccept_sl'] == 1) {
                                $curr_state = 3;
                            }
                            if ($aTask['state'] == 4 && $aTask['hosted'] == 1) {
                                if ($order['isevaluation_buy'] + $order['isevaluation_sl'] > 0) {
                                    $curr_state = 5;
                                } else {
                                    $curr_state = 4;
                                }
                            }

                            if ($aTask['mode'] == 11) {
                                $sUser = new zbj_service_user($order['user_id']);
                                $params['role_buyer'] = $sUser->getBrandName();
                                $sUser = new zbj_service_user($order['sl_user_id']);
                                $params['role_seller'] = $sUser->getBrandName();
                            } else {
                                $sUser = new zbj_service_user($order['user_id']);
                                $params['role_buyer'] = $sUser->getBrandName();
                                $sUser = new zbj_service_user($order['sl_user_id']);
                                $params['role_seller'] = $sUser->getBrandName();
                            }
                            $params['down_log'] = $down_log;
                            $params['curr_state'] = $curr_state;
                            $_SESSION['curr_state'] = $curr_state;
                        }
                    }
                }
                //订单
                $ordercondition = array('product_pkid'=>$iTaskID);
                $m_order = new zbj_model_fn_order();
                $m_order->setLimit(5);
                $m_order->setPage($page);
                $m_order->setCount(true);
                $order = $m_order->select($ordercondition, 'order_id,title,state,price');
                $params['order'] = $order->items;

                //开票
                $billinfo = $sTask->getBillInfo();
                if ( in_array((int)$aTask['bill_state'], array(2, 3))) {
                    $bill_state_str = $aTask['bill_state'] == 2 ? '已放弃发票待任务结束自动退税金' : '已放弃发票已退税金';
                    $params['bill_disallow'] = $billinfo ?  "<a href=\"/finance/billview-billid-{$billinfo['bill_id']}.html\" target=\"_blank\">{$bill_state_str}</a>" : $bill_state_str;
                } elseif ( $billinfo ) {
                    $params['bill_id'] = $billinfo['bill_id'];
                    $bill_info_options_arr = unserialize($billinfo['options']);
                    if ( $billinfo['is_pay'] == 1 )  {
                        $fn_state = $billinfo['fn_state'];
                        $bill_state = $billinfo['bill_state'];
                        $post_type = $billinfo['post_type'];
                        $post_state = $billinfo['post_state'];
                        if ($bill_state == -1) {
                            $params['bill_state_str'] = '已申请-还没有进入开票流程';
                        } elseif ( $bill_state == 1) {
                            $params['bill_state_str'] = '已支付-用户取消';
                        }elseif ( $bill_state == 2 && $post_state == 0 && $fn_state == 0 ) {
                            $params['bill_state_str'] = '申请失败';
                        } elseif ( $bill_state == 0 && $post_state == 2 && $fn_state == 1) {
                            $params['bill_state_str'] = '已退回';
                        } elseif ( $bill_state == 0 && $post_state == 1 && $fn_state == 1) {
                            if($post_type == 1) {
                                $type_str = '快递';
                            } else {
                                $type_str = '挂号信';
                            }
                            $params['bill_state_str'] = '已寄出-' . $type_str;
                        } else {
                            if ($billinfo['is_audited']==1) {
                                $params['bill_state_str'] = '已审核-待寄出';
                            }else{
                                $params['bill_state_str'] = '未审核';
                            }
                        }
                    } else {
                        $params['bill_state_str'] = $billinfo['bill_state'] == 1 ? '用户取消-未付款' : '已申请-未付款';
                    }
                    if ($bill_info_options_arr['over_amount']) $params['bill_state_str'] = "<b><i>{$params['bill_state_str']}</i></b>";
                } else {
                    if ( $sTask->isAllowBill() === false && $sTask->getError('code') != -2 ) {
                        $params['bill_disallow'] = $sTask->getError();
                    } else {
                        $params['bill_disallow'] = false;
                    }
                }

                //案例库/优质任务
                $is_quality_task = $sTask->isQualityTask();
                $qt_has_link = true;
                if ($is_quality_task) {
                    $quality_task_info = $sTask->getQualityTaskInfo();
                    $qt_state = '已加入案例库';
                    $qt_state .= empty($quality_task_info['is_show']) ? '(已禁用)' : '';
                    $qt_op_type = '查看/修改';
                } else {
                    $is_allow_quality_task = $sTask->isAllowQualitTask();
                    if ($is_allow_quality_task === false ) {
                        $qt_state = '不允许添加,' . $sTask->getError();
                        $qt_has_link = false;
                    } else {
                        $qt_state = '还未加入案例库';
                        $qt_op_type = '添加';
                    }
                }
                $params['quality_task_state'] = $qt_state;
                $params['allow_quality_task_op'] = $qt_has_link;
                $params['quality_task_op_str'] = $qt_op_type;

                //发布来源 是否来自快印频道
                $is_from_kychannel = $sTask->isFromKuaiYinChannel();
                if ($is_from_kychannel) {
                    $params['pub_source'] = 'kychannel';
                    $opis_ht = intval($sTask->get('task_opis.ht'));
                    switch($opis_ht) {
                        case zbj_service_task_base::TASK_OPIS_HT_VCARD:
                            $params['kychannel_cname'] = $channel_cname = '名片';
                            $params['kychannel_path'] = '/c-mpkpsj/mpsj/';
                            break;
                        case zbj_service_task_base::TASK_OPIS_HT_ALBUM:
                            $params['kychannel_cname'] = $channel_cname = '画册';
                            $params['kychannel_path'] = '/c-xcpsj/xccsj/';
                            break;
                    }
                    $ky_order_type = $sTask->kuaiYinGetOrderType($params['info_option']);
                    switch ($ky_order_type) {
                        case zbj_hook_kychannel::KY_ORDER_TYPE_LIKE:
                            $params['kychannel_pub_type'] = "{$channel_cname}频道仿制";
                            break;
                        case zbj_hook_kychannel::KY_ORDER_TYPE_ORIG:
                            $params['kychannel_pub_type'] = $params['info_option']['is_diyprice'] ? "{$channel_cname}频道设计价格自定义" : "{$channel_cname}频道设计套餐#{$params['info_option']['pack_info']['name']}";
                            break;
                        case zbj_hook_kychannel::KY_ORDER_TYPE_PKG:
                            $params['kychannel_pub_type'] = "{$channel_cname}频道设计印刷套餐#{$params['info_option']['pack_info']['name']}";
                            break;
                    }
                }

                //继安增加 专场需求展示
                $params['diy'] = $params['info_option']['expend'];
                $params['edittoken'] =  md5(zbj_lib_Constant::SYSUSERKEY.$iTaskID);
                if($sTask->checkSpecialTask() !== false){
                    $params['specialtask'] = 1;
                }

                //查看该需求是否有不满意免单的增值服务
                $srv_vas = new zbj_service_vas();
                $freetaskorder_data = $srv_vas->getPaidOrderData($iTaskID, 520);
                if(!empty($freetaskorder_data)){
                    $params['freetaskservice'] = 1;
                }
                //赏金分配
                if($aTask['allot']>1){
                    $mdltaskinfo = zbj_model_api::get('zbj_model_mk_taskinfo');
                    $taskinfo = $mdltaskinfo->select(array('task_id' => $iTaskID), '`option`');
                    $option = $taskinfo->items[0]['option'];
                    $option = unserialize($option);

                    $allot = $sTask->getTaskAllotModel();
                    if($this->task['type']<=1){
                        $params['allot'] = $allot[0];
                    }
                    //短信祝福处理
                    if($aTask['allot'] == 3 and $aTask['type'] == 3){
                        $params['allot'] = $allot[0];
                        $params['sendmsg'] = 1;
                        $params['posts']['sendtime'] = $option['posts']['sendtime'];
                        $params['posts']['sendphone'] = $option['posts']['sendphone'];
                    }
                    //微博任务
                    if($aTask['allot'] == 3 and ($aTask['type'] == 2 or $aTask['is_weibo']>0)){
                        $params['weibo'] = 1;
                        $iNum = 0;$iHaveNum = 0;
                        if (is_array($allot)) {
                            foreach ($allot as $m) {
                                $totalPay  += $m['amount'] * $m['have_num'];
                                $iNum += $m['num'];
                                $iHaveNum += $m['have_num'];
                            }
                        }
                        $params['totalFans'] = intval($option['weibo']['fans']);
                        $params['totalPay'] = round($totalPay,2);
                        $params['leftPay'] = round($aTask['amount']-$totalPay,2);
                        $params['iNum'] = $iNum;
                        $aTmp = $allot;
                        for ($i = 0; $i < count($aTmp); $i++) {
                            $aTmp[$i]['amount'] = number_format($aTmp[$i]['amount'],2);
                        }
                        $params['weiboprice'] = $aTmp;
                    }
                    //多人
                    if($aTask['allot'] == 2){
                        $allot2info = "";
                        foreach ( $allot as $row ) {
                            if($row['class'] == 1){
                                $amount = sprintf('%01.2f',$row ['amount']*$aTask['amount']);
                                if($row['have_num']>=1){
                                    $allot2info .=  "一等奖{$row['num']}名(已颁发)，赏金￥{$amount}元";
                                }else{
                                    $allot2info .=  "一等奖{$row['num']}名(未颁发)，赏金￥{$amount}元";
                                }
                            }else{
                                $row['num'] = $row['num'] <=0 ? 1 : $row['num'];
                                $amount = sprintf('%01.2f',$row ['amount'] * $aTask['amount']/$row['num']);
                                $allot2info .= "<br />".  $this->changeNum($row['class'])."等奖{$row['num']}名(已颁发{$row['have_num']}个)，赏金￥{$amount}元";
                            }
                            $iNum += $row['num'];
                            $iHaveNum += $row['have_num'];
                        }
                        $params['allot2info'] = $allot2info;
                        $params['iNum'] = intval($iNum);
                        $params['iHaveNum'] = intval($iHaveNum);
                    }
                }
                if($aTask['allot'] == 3){
                    if(in_array($aTask['type'], array(0,3)) and $allot[0]['num']-$allot[0]['have_num']>0 and $aTask['state'] > 1){
                        $params['neednum'] = $allot[0]['num']-$allot[0]['have_num'];
                        $params['needbid'] = "，已选{$allot[0]['have_num']}个，还要".($allot[0]['num']-$allot[0]['have_num'])."个";
                    }
                }
                break;
        }

        $params['filter'] = $filter;
        //备注
        $content = zbj_lib_BaseUtils::apicall('misc', 'getremark', array(
            'type_id' => '1',
            'pk_id' => $iTaskID,
            'limit' => 10,
        ));
        if (!$content['data']['list']) {
            $params['remark'] = array();
        } else {
            $params['remark'] = $content['data']['list'];
            foreach ($content['data']['list'] as $key => $value) {
                if ($value['attachment']) {
                    $params['remark'][$key]['files'] = json_decode($value['attachment'], TRUE);
                } else {
                    $params['remark'][$key]['files'] = array();
                }
                unset($params['remark']['attachment']);
            }
            $sLog = new service_log();
            $params['remark_catalog'] = $sLog->getRemarkCatalog();
        }
        //工单
//		$worksorder=new zbj_model_cp_order();
//		$params['worksorder'] = $worksorder->select(array('type' => 1, 'rid' => $iTaskID))->items;
//		if ($params['worksorder']) {//工单类型
//			$optionitem = new model_cp_optionitem();
//			$worksorder_option = $optionitem->select(array('option_id' => 9), 'item_id,name')->items;
//			$params['worksorder_option'] = lib_BaseUtils::array_changekey($worksorder_option, 'item_id');
//		}
        //退款
        $m_fn_tk=new zbj_model_fn_tk();
        $params ['tkdata']=$tkdata = $m_fn_tk->selectOne ( array (
            'task_id' => $sTask->get ( 'task_id' ),
            'state' => 0
        ) );
        $params['_time'] = time();

        //登陆用户
        $params['cpuid'] = $this->_userid;
        $params['cpuname'] = $this->_nickname;

        //是否有权关闭、冻结需求
        $params['allow_close'] = $this->_allowClose($sTask->get('manager_id'));

        //调用锁定客服填写的信息
        $s_customer=new service_customer($sTask->get('user_id'));
        $params['customer_locked']=$s_customer->checklock();//是否锁定有效
        if($params['customer_locked']){
            $params['customer']=$s_customer->get('customer.*');
            $params['customername'] = $params['customer']['manager'];
            if ($params['customer']['managerid']) {
                $customer = $m_cpuser->selectOne(array('user_id'=>$params['customer']['managerid']), 'isleave');
                if ($customer['isleave'] == 1) {
                    $params['customername'] .= "（离职）";
                }else if ($customer['isleave'] == 2) {
                    $params['customername'] .= "（调岗）";
                }else if ($customer['isleave'] == 3) {
                    $params['customername'] .= "（休假）";
                }
            }
        }
        //调一对一任务的订单信息

        //跟进数据
        $s_follow=new service_follow();
        $params['followLevel']=$s_follow->getFollowLevel($iTaskID);
        $params['followLevelString']=$s_follow->getLevelArray();
        $params['followLevelTipString']=$levelTip=$s_follow->getLevelTip();
        $params['followstatus']=$levelTip=$s_follow->getstatus($iTaskID);
        $params['followlast']=$s_follow->getfollow($iTaskID);
        //搜索放弃原因
        if(!empty($params['followlast']['log']['giveup_option'])){
            $followlast = zbj_model_api::get('zbj_model_cp_optionitem');
            $abandonreason = $followlast->selectOne("item_id={$params['followlast']['log']['giveup_option']}");
            $params['followlast']['log']['giveup_reason'] = $abandonreason['name'];
        }

        if(!empty($params['task_opis']['refused'])){
            $followlast = zbj_model_api::get('zbj_model_cp_optionitem');
            $abandonreason = $followlast->selectOne("item_id={$params['task_opis']['refused']}");
            $params['task_opis']['refuseds'] = $abandonreason['name'];
        }
//		$follow_level = $s_follow->getFollowConfigLevel(10, 0, 1);
        $follow_level = $s_follow->getFollowConfigLevel($aTask['mode'], $aTask['hosted'], $aInfo['ispic']);
        $params['level_desc'] = $follow_level['level_desc'];
        //效果保障数据
        $m_effect_pro = new model_mk_effectprotection();
        $params['effect_pro_follow'] = $m_effect_pro->selectOne(array('task_id' => $iTaskID));
        //需求类目
        $s_category=new zbj_service_category();
        $params['categroy']=$s_category->getTree();
        //推荐服务商
        $params = array_merge($params, $this->_getRecommend($iTaskID));
        //订单分配类型
        $s_task = new service_task($iTaskID);
        $params['allot_type'] = $s_task->getAllotType();

        //是否能认领
        $allotPoolModel = zbj_model_api::get('zbj_model_mk_taskallotpool');
        $condition = array("task_id='{$params['task']['task_id']}'");
        $allotPool = $allotPoolModel->selectOne($condition,'allotstate','','');
        $params['canClaim']=1;
        if($params['task']['manager_id']!=0 || $params['task']['isaudit']!=1 || $allotPool['allotstate']!=2 ){
            $params['canClaim']=0;
        }
        
        //是否已发布合同
		$hasPubedAgreement = false;
		if($sTask->isNeedAgreement()){			
			if($sTask->get('state')>=3){
				$hasPubedAgreement = true;
			}
		}
		$params['has_pubed_agreement'] = $hasPubedAgreement;
        //显示是否有需要评价
        if($aTask['allot']!=3){
            $ordercondition = array('product_pkid'=>$iTaskID,'stype'=>16,'state!=2');
            $m_order = new zbj_model_fn_order();
            $params ['evaluation'] = array ();
            if($aTask['allot']==2){
                $order = $m_order->select($ordercondition, 'state,isevaluation,isevaluation_buy,isevaluation_sl')->items;
// 				var_dump($order);
                $params['evaluation']['status'] = 0;
                $params['evaluation']['buy'] = 1;
                $params['evaluation']['sl'] = 1;
                foreach ($order as $or){
                    if($params['evaluation']['status']==0 && $or['isevaluation']){
                        $params['evaluation']['status'] = 1;
                    }
                    if($params['evaluation']['status']==1){
                        if($params['evaluation']['buy']==1){
                            if(!$or['isevaluation_buy'] && $or['isevaluation']){
                                $params['evaluation']['buy']=0;
                            }
                        }
                        if($params['evaluation']['sl']==1){
                            if(!$or['isevaluation_sl'] && $or['isevaluation']){
                                $params['evaluation']['sl']=0;
                            }
                        }
                    }
                }
            }else{
// 				define('DEBUG', 1);
                $order = $m_order->selectone($ordercondition, 'state,isevaluation,isevaluation_buy,isevaluation_sl');
// 				var_dump($order);
                $params['evaluation']['status'] = $order['isevaluation'];
                $params['evaluation']['buy'] = $order['isevaluation_buy'];
                $params['evaluation']['sl'] = $order['isevaluation_sl'];
            }
        }

        //检查是否被国际站收录及当前状态（是否关闭）
        $job_state = json_decode(lib_api::apiCall(lib_Constant::WITMART_URL . '/cnapi/GetJobState?key=abrfdDFGRd&taskid=' . $iTaskID), true);


        // 检查是否是香港馆的需求
        $hk_zone = new service_hk();
        $hk = $hk_zone->isHkTask( $iTaskID );
        $params['is_hk'] = isset( $hk['zone'] ) ? $hk['zone'] : 0;
        $params['is_hk_hide'] = isset( $hk['is_hide'] ) ? $hk['is_hide'] : 0;
        $params['zone_id'] = isset( $hk['zone_id'] ) ? $hk['zone_id'] : 0;

        $tstatus = $sTask->getTaskStatus();
        $params['taskstatus'] = $tstatus['status'];

        //获取前台用户发布的需求5条
        $task = zbj_lib_BaseUtils::apicall('user', 'gettask', array('uid' => $aTask['user_id'], 'limit' => 10));
        if ($task) {
            foreach($task['data']['items'] as $k=>$v){
                $task['data']['items'][$k]['createtimes'] = date('m-d',$v['createtime']);
                $task['data']['items'][$k]['amount'] = ceil($v['amount']);
            }
            $params['tasklist'] = $task['data']['items'];
        }

        //检查是否联系上雇主
        $optionss = $sTask->get('task_info.option');
        $optionadd = unserialize($optionss);
        $params['abandonreason'] = $optionadd['abandonreason'];

        // 需求标签
        $srvTaskTags = new zbj_service_tasktags();
        $params['taglists'] = $srvTaskTags->getTaskTags($iTaskID);

        //获取跟进信息
        $follows = zbj_model_api::get('zbj_model_mk_follow');
        $followdate = $follows->selectOne("task_id=$iTaskID",'', '', 'ORDER BY follow_id DESC');
        $params['top_order_tag'] = $followdate['top_order_tag'];
        if(!empty($followdate) && date('Y-m-d',$followdate['expriestime']) > '1980-03-25'){
            $params['followlasttime'] = '预约:'.date('Y-m-d H:i:s',$followdate['expriestime']).'再跟进';
        }else{
            $params['followlasttime'] = '暂未预约下次跟进';
        }

        //雇主跟进显示
        $pages = isset($this->url['page']) ? (int) $this->url['page'] : 1;
        $content = zbj_lib_BaseUtils::apicall('misc', 'getremark', array(
            //'remark_catalog' => '10',
            'type_id' => '1',
            'pk_id' => $iTaskID,
            'limit' => 3,
            'page' =>$pages,
        ));
        if (!$content['data']['list']) {
            $params['remarks'] = array();
        } else {
            $params['remarks'] = $content['data']['list'];
        }
        $params['pagebars']=$this->PageBar($content['data']['num'], '3', $pages, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        //获取筛选服务商数据
        $params['lists'] = $this->ScreeningServices($inPath);
        //筛选数据
        $params['selectdata'] = $this->WitkeyService($inPath);

        //投标页面跟进数据
        foreach((array)$params['works_list'] as $k=>$v){
            $uidArr[$k] = $v['user_id'];
        }

        $srvTasks = new zbj_service_task($iTaskID);
        $srvTasks = $srvTasks->init();

        if(!empty($uidArr)){
            $uidArr = array_unique($uidArr);
            $uidStr = implode(',', $uidArr);
            $mdlSeller = zbj_model_api::get('zbj_model_mk_taskseller');
            $mdlContact = zbj_model_api::get('zbj_model_mk_tasksellercontactlog');
            $leftjoin = array(
                'mk_task_seller_contactlog'=>'mk_task_seller.ts_id=mk_task_seller_contactlog.ts_id'
            );
            $mseller = $mdlSeller->select("task_id={$iTaskID} and user_id in({$uidStr})",'','','',$leftjoin)->items;
            unset($v);
            unset($k);
            //跟进数据
            if ($mseller) {
                $contact_data = array();
                foreach($mseller as $v) {
                    if(count($contact_data[$v['user_id']]) < 2){
                        $contact_data[$v['user_id']][] = $v;
                    }
                }
            }
            //搜索用户数据
            $user_search = $this->SearchService($uidArr);
            if(!empty($user_search['list'])){
                $searchresult = $this->user_search($user_search,$uidArr);
            }

            if(!empty($searchresult)){
                $params['user_search'] = $searchresult['user_searchs'];
                $params['Remark_data'] = $searchresult['Remark_data'];
            }

            if($params['works_list'] && ($srvTasks->checkSpecialMode(1) || $srvTasks->checkSpecialMode(3))){
                //需求状态接口调用
                foreach($params['works_list'] as $k=>$v){
                    //需求状态
                    $v['work_flow'] = $srvTasks->getWorkFlowByID($v['works_id']);
                    $params['works_list'][$k] = $v;
                }
            }
        }

        if(!empty($contact_data)){
            $params['contact_data'] = $contact_data;
        }

        //展示跟单小助手信息 20150919 by houxiaopeng
        $params['assistData'] = $sTask->getAssistData();
        //当前登陆交易顾问
        $params['manager_userid'] = $this->_userid;

        //查看该任务是否是机会系统产生
        $tasklist = array($iTaskID);
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
        $api = new com\zhubajie\crm\interfaces\ChanceServiceClient(null);
        zbj_lib_ApiClient::build($api);
        $re = $api->CheckTask($tasklist);
        $check_result = array();
        if($re->data_obj->items !== null){
            foreach ($re->data_obj->items as $k => $v){
                $check_result[$v['task_id']] = $v;
            }
        }
        if(array_key_exists($iTaskID, $check_result)){
            $params["chance"]["is_produced_by_chance"] = 1;
            $params["chance"]["boss_user_name"] = $check_result[$iTaskID]['name'];
            $params["chance"]["boss_user_nickname"] = $check_result[$iTaskID]['nickname'];
        }else{
            $params["chance"]["is_produced_by_chance"] = 0;
        }


        //define('DEBUG',1);
        //print_r($aTask);
        //print_r($followdate);
        //获取备选信息
        $mk_task_sign = zbj_model_api::get('zbj_model_mk_tasksign');
        $mk_task_sign_data = $mk_task_sign->selectOne("task_id=$iTaskID",'', '', '');
        //获取争议信息
        $mk_task_opis = zbj_model_api::get('zbj_model_mk_taskopis');
        $mk_task_opis_data = $mk_task_opis->selectOne("task_id=$iTaskID",'', '', '');
        //获取任务放弃信息
        $mk_effectprotection = zbj_model_api::get('model_mk_effectprotection');
        $mk_effectprotection_data = $mk_effectprotection->selectOne("task_id=$iTaskID",'', '', '');
        //报价信息
        $works_quote = zbj_model_api::get('zbj_model_mk_worksquote');
        $mk_works_quote_data = $works_quote->select("task_id=$iTaskID",'', '', '')->items;

        $twork = new zbj_model_mk_works();
        $tworkinfo = $twork->selectOne('task_id='.$iTaskID.' and issuccess=1','works_id');

        //任务状态判断,交易处理工作台20150318 by houxiaopeng
        if($aTask['open_state'] == 0 && $mk_effectprotection_data['giveup_status'] != 1 && !in_array($aTask['mode'],array(11,12))){
            $time = time() + 302400;
            $nowdate = date('Y-m-d');
            //1、受理订单    1
            if($aTask['audit_state'] == 4 && $followdate['issys'] == 1){
                $params['taskstate'][1] = 1;
            }
            //2、联系雇主梳理需求   2
            /*if(in_array($aTask['audit_state'],array(4,5)) && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0){
                $params['taskstate'] = 2;
            }*/
            //2未发布
            if($aTask['state'] < 3 && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] >= 4){
                $params['taskstate'][2] = 2;
            }
            //3已发布
            if($aTask['state'] == 2 && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] < 4){
                $params['taskstate'][3] = 3;
            }
            //if(暂未开发)
            //$params['taskstate'] = 3;
            //5、选标期过1/2未选标 7
            if($aTask['endymd'] < $nowdate && $aTask['state'] < 3 && $aTask['hosted'] >= 0 && $aTask['ext_selectime'] < $time && $followdate['giveup_option'] == 0 && $followdate['issys'] == 0 && $aTask['audit_state'] < 4){
                $params['taskstate'][5] = 5;
            }
            //6、雇主有备选  8
            if($mk_task_sign_data['alternative_num'] > 0 && $aTask['state'] < 3 && $aTask['hosted'] >= 0){
                $params['taskstate'][6] = 6;
            }
            //7、双方有争议发生 10
            if(!empty($mk_task_opis_data['report_type'])){
                $params['taskstate'][7] = 7;
            }
            //10、已选稿
            if($aTask['state'] == 3){
                $params['taskstate'][10] = 10;
            }
            //11、结束并打款
            if($aTask['state'] == 4){
                $params['taskstate'][11] = 11;
            }

            if(!empty($mk_works_quote_data)){
                foreach($mk_works_quote_data as $k=>$v){
                    //4、有新的报价方案待审核 4 报价方案稿件ID号与稿件表的中标ID不相等
                    if($v['auditstate'] == 0 && $v['works_id'] != $tworkinfo['works_id']){
                        $params['taskstate'][4] = 4;
                        $v['nowtime'] = $this->expriestime($v['createtime']);
                        $params['works_quote_data'][$k] = $v;
                        $useridarray[] = $v['user_id'];
                    }
                    //8、工期过1/2  11
					if($aTask['state'] == 3 && $mk_task_sign_data['success_num'] > 0 && $v['day'] * 43200 < time() - strtotime($v['beginymd']) && $v['state'] == 1){
		                $params['taskstate'][8] = 8;
		            }
					//9、工期截止前3天  12
					$dataymds = time() + 259200;
					if($aTask['state'] == 3 && $mk_task_sign_data['success_num'] > 0 && strtotime($v['endymd']) < $dataymds && strtotime($v['endymd']) > $dataymd && $v['state'] == 1){
		                $params['taskstate'][9] = 9;
		            }
                }
                //如果报价方案的服务商不为空，则搜索用户表nickname
                if(!empty($useridarray)){
                    $useridstr = implode(',',$useridarray);
                    $m_mb_info = zbj_model_api::get('zbj_model_mb_info');
                    $wknickname = $m_mb_info->select("user_id in($useridstr)",'user_id,nickname,brandname')->items;
                    if($wknickname){
                        foreach($wknickname as $k=>$v){
                            $params['wknickname'][$v['user_id']] = $v['brandname'];
                        }
                    }
                }
            }

            //派单状态
            $recommend_model = zbj_model_api::get("zbj_model_mk_recommendoption",$iTaskID);
            $params['recmd_type'] = $sTask->get("task_extends.recmd_type");
            $params['recmd_status'] = $sTask->get("task_opis.recmd_status");
            $params['recommend'] = $recommend_model->getData();

        }
        //雇佣和购买服务
        if($aTask['open_state'] == 0 && $mk_effectprotection_data['giveup_status'] != 1 && $followdate['giveup_option'] == 0 && in_array($aTask['mode'],array(11,12))){
            if(!empty($aInfo['option'])){
                $option_gy = unserialize($aInfo['option']);
                $abandonreason_gy = $option_gy['abandonreason'];
            }
            //12雇佣和购买服务，已选标，未托管,首次受理
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 0 && $aTask['state'] == 3 && $followdate['issys'] == 1){
                $params['taskstate'][12] = 12;
            }
            //13雇佣和购买服务，交易取消（服务商取消）
            if(in_array($aInfo['end_type'],array(2,5)) && $followdate['issys'] == 1){
                $params['taskstate'][13] = 13;
            }
            //17雇佣和购买服务，交易取消（服务商取消）显示放弃和交易取消文案
            if(in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][17] = 17;
            }
            //14雇佣和购买服务，未联系上雇主
            if($abandonreason_gy == 2){
                $params['taskstate'][14] = 14;
            }
            //15已选标，已托管
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 1 && $aTask['state'] == 3 && $abandonreason_gy != 2 && !in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][15] = 15;
            }
            //16雇佣和购买服务，已选标，未托管,受理过后
            if($aTask['audit_state'] == 4 && $aTask['hosted'] == 0 && $aTask['state'] == 3 && $abandonreason_gy != 2 && !in_array($aInfo['end_type'],array(2,5))){
                $params['taskstate'][16] = 16;
            }
        }
        $params['is_website_special_mode'] = ($srvTasks->checkSpecialMode(1) || $srvTasks->checkSpecialMode(3)) ? 1 : 0 ;
        //网站建设类目124
        //$params['is_website_special_modes'] = $aTask['category2id'] == 124 ? 1 : 0 ;
        //通过手机号搜索区域 20150512 by houxiaopeng
        $sMobile = new zbj_service_mobile();
        if($params['taskuser']['usermobile']) $params['taskuser_usermobile_address'] = $sMobile->getInfo($params['taskuser']['usermobile']);
        if($params['taskorder_option']['contact']['phone']) $params['taskorder_option_address'] = $sMobile->getInfo($params['taskorder_option']['contact']['phone']);
        if($params['taskuser_info']['mobile']) $params['taskuser_info_address'] = $sMobile->getInfo($params['taskuser_info']['mobile']);
        if($params['customer']['mobile']) $params['customer_address'] = $sMobile->getInfo($params['customer']['mobile']);

        //获取交易顾问分机号
        try{
            zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
            $userService = new com\zhubajie\boss\interfaces\userServiceClient(null);
            zbj_lib_ApiClient::build($userService);
            $userServiceresult = $userService->getUserBaseInfo($params['task']['manager_id']);
            $params['task']['telnum'] = empty($userServiceresult->tel) ? '':'(分机号：'.$userServiceresult->tel.')';
        }catch(Exception $e){
            $params['task']['telnum'] = '';
        }

        //如果是悬赏任务，则获取相关的专场信息
        if ($aTask['mode'] == 10 && in_array($aTask['allot'], array(1,2))) {
            $params['hall_data'] = $this->_getHallPackage($iTaskID);
        }

        //当没有分配交易顾问或者派单标记不为0和1抛出提示，当前状态不允许操作 20150606
        if($mk_task_opis_data['recmd_status'] == 1 && !in_array($aTask['audit_state'],array(4,5)) && $aTask['mode']==13){
            $params['is_website_special_modes'] = 1;
        }
        if(!in_array($aTask['audit_state'],array(4,5)) && $aTask['mode']!=13){
            $params['is_website_special_modes'] = 2;
        }
        $params['recmd_status'] = $mk_task_opis_data['recmd_status'];
        $reportModel = zbj_model_api::get('zbj_model_mb_report');
        //$reportNum = $reportModel->selectOne("`type`>6 and `type`<35 and ((`o_type`=1 and `o_bel_id`={$iTaskID}) or (`o_type`=2 and `o_id`={$iTaskID}))","count(*) as num");
        $params['report_num'] = $this->getReportNum($iTaskID);

        //商机订单数据 20150730 by houxiaopeng
        $bstoct_task_obj = zbj_model_api::get('zbj_model_mk_bstocttask');
        $bstoct_task_res = $bstoct_task_obj->selectOne("task_id = $iTaskID",'bs_to_ct_id');
        $bs_to_ct_id = $bstoct_task_res['bs_to_ct_id'];

        if($bs_to_ct_id){
            $bstoct_obj = zbj_model_api::get('zbj_model_mk_bstoct');
            $bstoct_res = $bstoct_obj->selectOne("bs_to_ct_id = $bs_to_ct_id",'bs_to_ct_id,isurgent,options');

            if($bstoct_res['options']){
                $bstoct_option = json_decode($bstoct_res['options'],true);
                $bstoct_num = count($bstoct_option['note_info']) - 4;

                if($bstoct_option['note_info']){
                    foreach($bstoct_option['note_info'] as $k=>$v){
                        if((int)$k > (int)$bstoct_num){
                            $bstoct_array[$k] = $v;
                        }
                    }
                }

            }

            $params['bstotc']['note_info'] = $bstoct_array;
            $params['bstotc']['bs_to_ct_id'] = $bstoct_res['bs_to_ct_id'];
            $params['bstotc']['isurgent'] = $bstoct_res['isurgent'];
        }

  		//获取退款状态 #4606
        $refundServ = new zbj_service_refund();
        $refundRecord = $refundServ->checkRefundRecord($iTaskID);
        $params['refundRecord'] = $refundRecord;
        
        return $this->render('new/taskdetails/taskdetails.html', $params);
    }
    private function _getHallTaskExt($task_id) {
        $hall_ext_array = array();
        $m_task2v = zbj_model_api::get("zbj_model_mk_taske2v");
        $task2vleftjoin = array(
            'mk_category_ext_reward'=>'mk_category_ext_reward.ext_id = mk_task_e2v.ext_id'
        );
        $m_task_textarea = zbj_model_api::get("zbj_model_mk_taske2vtextarea");
        $task2v_array = $m_task2v->select(array('task_id'=>$task_id), 'mk_task_e2v.ext_id, mk_task_e2v.ext_name, val_name,ext_type', null, null,$task2vleftjoin)->items;
        $task_textarea_array = $m_task_textarea->select(array('task_id'=>$task_id), 'ext_id, ext_name, content')->items;

        if ($task2v_array) {
            foreach ($task2v_array as $k=>$e2v) {
                if ($e2v['ext_type'] == 'textarr') {
                    $val_name_array = unserialize($e2v['val_name']);
                    if ($val_name_array) {
                        $val_name_str = implode('、', $val_name_array);
                        $temp = array();
                        $temp['ext_id'] = $e2v['ext_id'];
                        $temp['ext_name'] = $e2v['ext_name'];
                        $temp['val_name'] = $val_name_str;
                        $hall_ext_array[$e2v['ext_id']][] = $temp;
                    }
                }else{
                    $hall_ext_array[$e2v['ext_id']][] = $e2v;
                }
            }
        }
        if ($task_textarea_array) {
            foreach ($task_textarea_array as $e2v) {
                $hall_ext_array[$e2v['ext_id']][] = $e2v;
            }
        }
        return $hall_ext_array;
    }

	/**
	 * 根据任务号获取专场套餐，仅在mode=10,allot in(1,2)时调用
	 * @param unknown $task_id
	 */
	private function _getHallPackage($task_id) {
	    $return['success'] = false;
	    $return['data'] = array();
//  	    $task_id = 5179571;
	    if (!$task_id) return $return;
	    zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,10,array('zbj_reward_sdk'));
	    $s_pac = new com\zhubajie\reward\interfaces\PackageServiceClient(null);
	    zbj_lib_ApiClient::build($s_pac);
	    $detailSearchDo = new com\zhubajie\reward\dataobject\Package\DetailSearchDo();
	    $detailSearchDo->task_id = $task_id;
	    $result = $s_pac->getDetai($detailSearchDo);
	    if ($result->success == true) {
	        if ($result->detail) {
	            $data['hall_name'] = $result->detail->hall_name;
	            $data['package_name'] = $result->detail->package_name;
                $data['hall_id'] = $result->detail->hall_id;
	            $data['is_hall_task'] = true;
                $data['rewardPackage'] = $result->detail->option_name_list;
                $data['ext_array'] = $this->_getHallTaskExt($task_id);
	            $return['success'] = true;
	            $return['data'] = $data;
	        }
	    } 
	    return $return;
	}
	/**
	 * 获取nps评分
	 * @param int $phone_user_id
	 */
	public function _getNpsScore($task_id) {
		$result = '还未进行NPS评分';
// 		$m_rel = new zbj_model_mb_surveyuserrel();
		$m_result = new zbj_model_mb_surveyresult();
		$leftjoin = array(
				'mb_survey_option' => 'mb_survey_option.option_id = mb_survey_result.option_id',
				);
		$condition = array();
		$condition['task_id'] = $task_id;
		$condition['type'] = 6;
		$score_array = $m_result->selectOne($condition, 'mb_survey_result.int_value', null, 'order by mb_survey_option.option_id desc', $leftjoin);
		if ($score_array) {
			$result = $score_array['int_value'];
		}
		return $result;
	}
	/**
	 * 计算最近联系时间
	 * 传入参数 $expriestimes跟进时间
	 * 返回搜索条件 $time_begin_end
	 */
	private function expriestime($expriestimes){
	    //计算最近联系时间
	    $expries = '';
		if(!empty($expriestimes)){
            $expriestime = floor((time() - $expriestimes)/3600);

            if($expriestime < 0){
                $expries = '刚刚';
            }else if($expriestime==0){
            	$expries = floor((time() - $expriestimes)/60).'分前';
            }else if($expriestime<24){
            	$expries = $expriestime.'小时前';
            }else{
            	$day = floor($expriestime/24);
            	if($day == 1){
            		$expries = '昨天';
            	}else{
            		$expries = $day.'天前';
            	}
            }
        }
        return $expries;
    }
 

	/**
     * 加入联系服务商列表
     */
    public function pageAddToSellerAddContactlog($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        if (count($_POST)) {
            $task_id = intval($_POST['taskId']);
            $ts_id = intval($_POST['ts_id']);
            $userid = $_POST['witkeyId'];
            $single = $_POST['single'];
            $content = zbj_lib_BaseUtils::getStr($_POST['content']);
            if (empty($task_id)) {
                return $this->printmsg( '参数错误', 0 );
            }
            if (empty($userid)) {
                return $this->printmsg( '请选择服务商', 0 );
            }
            $mdlSeller = zbj_model_api::get('zbj_model_mk_taskseller');
            $mAction = zbj_model_api::get('zbj_model_mb_recommendaction');
            $srvUser = zbj_model_api::get('zbj_service_user');
            //如果taskseller表下边没有服务商数据则添加
            $mseller = $mdlSeller->selectOne("task_id={$task_id} and user_id={$userid})",'','','')->items;
            if(!$mseller){
                $user_id = intval($userid);
                $srvUser->setId($user_id);
                $alloted = 0;
                if ($single) {
                    $scon = "task_id={$task_id} and user_id={$user_id} and action_type=1";
                    $recom = $mAction->selectOne($scon);
                    if ($recom) {
                        $alloted = 1;
                    }
                }
                $item = array(
                    'task_id'=>$task_id,
                    'user_id'=>$user_id,
                    'nickname'=>$srvUser->get('nickname'),
                    'alloted'=>$alloted,
                    'createymd'=>date('Y-m-d', $this->_time),
                    'createtime'=>$this->_time
                );
                $condition = "task_id={$task_id} and user_id={$user_id}";
                $seller = $mdlSeller->selectOne($condition);
                if ($seller) {
                	$ts_id = $seller['ts_id'];
                    if ($alloted) {
                        $res = $mdlSeller->update($condition,array('alloted'=>$alloted));
                    }
                } else {
                    $res = $mdlSeller->insert($item);
                    $ts_id = $res;
                }
                if ($res === false) {
                    $msg .= '写入失败：'.$user_id;
                }
                if ($msg) return $this->printmsg( '操作服务商列表失败!'.$msg, 0 );
            }

            //保存跟进信息
            if (empty($ts_id)) {
                return $this->printmsg( '参数错误', 0 );
            }
            if (empty($content)) {
                return $this->printmsg( '请填写跟进内容', 0 );
            }
            $item = array(
                'ts_id'=>$ts_id,
                'content'=>$content,
                'manager_id'=>$this->_userid,
                'manager_name'=>$this->_nickname,
                'createymd'=>date('Y-m-d', $this->_time),
                'createtime'=>$this->_time
            );
            $mdlContact = zbj_model_api::get('zbj_model_mk_tasksellercontactlog');
            $res = $mdlContact->insert($item);
            if ($res) {
                $this->updateSellerAction($ts_id, 1);
                //加入备注
                $mdlSeller = zbj_model_api::get('zbj_model_mk_taskseller');
                $ts = $mdlSeller->selectOne("ts_id={$ts_id}");
                $srvUser = new zbj_service_user($ts['user_id']);
                $cont = $srvUser->getBrand().'服务商跟进记录：'.$content;
                $sLog = new service_log();
                $res = $sLog->addRemark($this->_userid, $ts['task_id'], $cont);
                return $this->printmsg( '操作成功', 1 );
            }
            return $this->printmsg( '添加失败', 0 );
	        
        }
    }
	
	/**
	 * 订单招标跟进操作变更
	 */
	public function pageEffectProtection($inPath){
		$this->init($inPath);
		$params = array();
		$filter = array();
		$iTaskID = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
		//跟进类别
		$followtype = trim(zbj_lib_BaseUtils::getStr($this->url['ftype'],'int'));
		//商机详情页面标识
		$chance = trim(zbj_lib_BaseUtils::getStr($this->url['chance'],'int'));

		if (!$iTaskID || !$followtype) {
			return $this->printmsg('参数错误');
		}
		$sTask = new zbj_service_task($iTaskID);
		$sTask = $sTask->init();
		//任务信息
		$aTask = $sTask->get();

		if (empty($aTask)) {
			return $this->printmsg("任务不存在");
		}
		if($aTask['state'] >= 3 && !in_array($aTask['mode'],array(11,12))){
			return $this->printmsg("当前状态不允许跟进",0, null, "/task/lastview-id-".$iTaskID);
		}
		if($aTask['open_state'] == 1 && $aTask['state'] != 4){
			return $this->printmsg("任务已经关闭",0, null, "/task/lastview-id-".$iTaskID);
		}
		if($aTask['state'] == 4 && !in_array($aTask['mode'],array(11,12))){
			return $this->printmsg("任务已经结束",0, null, "/task/lastview-id-".$iTaskID);
		}
		//top订单标记 20150514 byhouxiaopeng
		$mk_follow = zbj_model_api::get('zbj_model_mk_follow');
        //查找当前任务top订单状态
        $mk_follow_res = $mk_follow->selectOne("task_id = $iTaskID",'top_order_tag,giveup_option');
        //如果任务已放弃，提示错误
        if($mk_follow_res['giveup_option'] > 0){
        	return $this->printmsg("任务已经被放弃",0, null, "/task/lastview-id-".$iTaskID);
        }
        if(in_array($mk_follow_res['top_order_tag'],array(0,1))){
            $params['top_order_tag'] = $mk_follow_res['top_order_tag'];
        }

		//赏金分配
		if($aTask['allot']>1){
			$mdltaskinfo = zbj_model_api::get('zbj_model_mk_taskinfo');
			$taskinfo = $mdltaskinfo->select(array('task_id' => $iTaskID), '`option`');
			$option = $taskinfo->items[0]['option'];
			$option = unserialize($option);
			
			$allot = $sTask->getTaskAllotModel();
			
			if($aTask['type']<=1){
				$params['allot'] = $allot[0];
			}
			//短信祝福处理
			if($aTask['allot'] == 3 and $aTask['type'] == 3){
				$params['allot'] = $allot[0];
				$params['sendmsg'] = 1;
				$params['posts']['sendtime'] = $option['posts']['sendtime'];
				$params['posts']['sendphone'] = $option['posts']['sendphone'];
			}
			//微博任务
			if($aTask['allot'] == 3 and ($aTask['type'] == 2 or $aTask['is_weibo']>0)){
				$params['weibo'] = 1;
				$iNum = 0;$iHaveNum = 0;
				if (is_array($allot)) {
					foreach ($allot as $m) {
						$totalPay  += $m['amount'] * $m['have_num'];
						$iNum += $m['num'];
						$iHaveNum += $m['have_num'];
					}
				}
				$params['totalFans'] = intval($option['weibo']['fans']);
				$params['totalPay'] = round($totalPay,2);
				$params['leftPay'] = round($aTask['amount']-$totalPay,2);
				$params['iNum'] = $iNum;
				$aTmp = $allot;
				 for ($i = 0; $i < count($aTmp); $i++) {
					$aTmp[$i]['amount'] = number_format($aTmp[$i]['amount'],2);
				}
				$params['weiboprice'] = $aTmp;
			}
			//多人
			if($aTask['allot'] == 2){
				$allot2info = "";
				foreach ( $allot as $row ) {
					if($row['class'] == 1){
						$amount = sprintf('%01.2f',$row ['amount']*$aTask['amount']);
						if($row['have_num']>=1){
							$allot2info .=  "一等奖{$row['num']}名(已颁发)，赏金￥{$amount}元";
						}else{
							$allot2info .=  "一等奖{$row['num']}名(未颁发)，赏金￥{$amount}元";
						}
					}else{
						$row['num'] = $row['num'] <=0 ? 1 : $row['num'];
						$amount = sprintf('%01.2f',$row ['amount'] * $aTask['amount']/$row['num']);
						$allot2info .= "<br />".  $this->changeNum($row['class'])."等奖{$row['num']}名(已颁发{$row['have_num']}个)，赏金￥{$amount}元";
					}
					$iNum += $row['num'];
					$iHaveNum += $row['have_num'];
				}
				$params['allot2info'] = $allot2info;
				$params['iNum'] = intval($iNum);
				$params['iHaveNum'] = intval($iHaveNum);
			}
		}
		if($aTask['allot'] == 3){
			if(in_array($aTask['type'], array(0,3)) and $allot[0]['num']-$allot[0]['have_num']>0 and $aTask['state'] > 1){
				$params['neednum'] = $allot[0]['num']-$allot[0]['have_num'];
				$params['needbid'] = "，已选{$allot[0]['have_num']}个，还要".($allot[0]['num']-$allot[0]['have_num'])."个";
			}
		}

		if ($aTask['category_id']) {
			$s_module = new service_module();
			$module = $s_module->getModuleByCategoryId($aTask['category_id']);
			if ($module && $module['module_name']) {
				$aTask['module_name'] = $module['module_name'];
			}else{
				$aTask['module_name'] = '暂无行业运营';
			}
		}

		//info详情
		$aInfo = $sTask->get("task_info.*");
		$params['info'] = $aInfo;

		$acontent = $sTask->get("task_cont.*");
		$params['content'] = $acontent['content'];

        //任务拓展数据
        $params['info_option'] = unserialize($aInfo['option']);
        $params['task_opis'] = $sTask->get("task_opis.*");
		$params['opis'] = $params['task_opis'];

		//用户信息
		$sUser = new zbj_service_user($aTask['user_id']);
		$params['taskuser'] = $sUser->get();
		$params['taskuser_info'] = $sUser->get('info.*');
		$aTask['brandname'] = $sUser->get('info.brandname');
		$params['task'] = $aTask;

		$leave = '';//交易顾问离职状态

        //需求类目
		$s_category=new zbj_service_category();
		$params['categroy']=$s_category->getTree();
 
		//登陆用户
		$params['cpuid'] = $this->_userid;
		$params['cpuname'] = $this->_nickname;

		//nps
		$params['nps_score'] = service_task::getNpsScore($iTaskID);
		
		//是否有权关闭、冻结需求
		$params['allow_close'] = $this->_allowClose($sTask->get('manager_id'));

		//跟进数据，类型为1时为效果保障跟进
		if($followtype == 1 || $followtype == 4){
			//效果保障跟进
			$s_follow = new service_follow();
			
			$follow_level = $s_follow->getFollowConfigLevel($aTask['mode'], $aTask['hosted'], $aInfo['ispic']);
			
			//是否开启自动派单
			$m_recommend_option = new model_mk_recommendoption($iTaskID);
			$auto_recommend = $m_recommend_option->selectOne(array('task_id' => $iTaskID));
			
			//对移动端问题
			$m_mobile_problem = new model_mk_followMobileProblem();
			$mobile_problem = $m_mobile_problem->selectOne(array('task_id' => $iTaskID), '', '', 'ORDER BY id DESC');

			$mPerson = new zbj_model_mb_customerperson();
			$params['userinfo'] = $mPerson->selectOne(array('user_id' => $sTask->get('user_id')));
			
			//$params['task'] = $aTask;
			$params['task_info'] = $aInfo;
			//$params['task_opis'] = $sTask->get("task_opis.*");
			//行业
			$s_option = new service_cpoption(16);
			$params['option_16'] = $s_option->getItems();
			//企业规模
			$s_option = new service_cpoption(18);
			$params['option_18'] = $s_option->getItems();
			//效果保障放弃原因
			$s_option=new service_cpoption(23);
			$params['option_23']=$s_option->getAllItems();
			//派单后放弃跟进原因
			$s_option=new service_cpoption(26);
			$params['option_26']=$s_option->getItems();
			//用户类型
			$s_option = new service_cpoption(28);
			$params['option_28'] = $s_option->getItems();
			//选择原因
			$s_option = new service_cpoption(29);
			$params['option_29'] = $s_option->getItems();
			//了解渠道
			$s_option = new service_cpoption(30);
			$params['option_30'] = $s_option->getItems();
			//放弃原因
			$s_option = new service_cpoption(61);
			$params['option_61'] = $s_option->getItems();
			//省
			$mRegion = new zbj_model_mb_region();
			$params['provinces'] = $mRegion->select(array("parent_id" => 1))->items;
			//效果保障数据
			$m_effect_pro = new model_mk_effectprotection();
			$effect_pro_follow = $m_effect_pro->selectOne(array('task_id' => $iTaskID));
			$params['effect_pro_follow'] = $effect_pro_follow;
			
			$params['last_follow_answer'] = unserialize($effect_pro_follow['options']);
			//推荐服务商
			$baseajax = new controller_task_baseajax();
		    $params['recommendWK'] = $baseajax->getRecommentWk($this->url);
			//follow questions
			$params['problems'] = $s_follow->getFollowQuestions($aTask['mode'], $aTask['hosted'], $aInfo['ispic'], 0, 'ORDER BY sort');

			$params['level_desc'] = $s_follow->getLevelDesc($follow_level['level_desc']);
			//当前交易顾问工号、分机号等信息
			$m_cp_user = new zbj_model_cp_user();
			$params['cp_user'] = $m_cp_user->selectOne(array('user_id'=> $this->_userid), 'name, worknum, tel');

            //是否开启自动派单
			$m_recommend_option = new model_mk_recommendoption($iTaskID);
			$auto_recommend = $m_recommend_option->selectOne(array('task_id' => $iTaskID));
		    $params['auto_recommend_state'] = $baseajax->auto_recommend_state($auto_recommend, $aTask['amount'], $aTask, $params['task_opis']);

			//移动客户端问题
			$params['mobile_problem'] = $mobile_problem;
		}elseif($followtype == 2 || $followtype == 5){
			//托管前跟进
			if($followtype == 2){
				if(service_rcba::checkAnAccess('task','ajax','effectProtection') && $aTask['hosted']==1 && $aTask['state']!=4){
					header("Location:/task/effectProtection-ftype-1-id-{$iTaskID}.html"); exit;
				}
		    }
		    if($followtype == 5){
				if(service_rcba::checkAnAccess('task','ajax','effectProtection') && $aTask['hosted']==1 && $aTask['state']!=4){
					header("Location:/task/effectProtection-ftype-4-id-{$iTaskID}.html"); exit;
				}
		    }

			$s_follow=new service_follow(0);
		
			//订单等级关系
	 		$follow_level = $s_follow->getFollowConfigLevel($aTask['mode'], $aTask['hosted'], $aInfo['ispic']);
	 		
	 		//是否开启自动派单
			$m_recommend_option = new model_mk_recommendoption($iTaskID);
			$auto_recommend = $m_recommend_option->selectOne(array('task_id' => $iTaskID));
			
			//对移动端问题
			$m_mobile_problem = new model_mk_followMobileProblem();
			$mobile_problem = $m_mobile_problem->selectOne(array('task_id' => $iTaskID), '', '', 'ORDER BY id DESC');
			
			$lastlog=$s_follow->getLastLog($sTask->get('task_id'));
			$lastlogArr=array();
			$last_follow_answer = array();
			if($lastlog['detail']){
				foreach ($lastlog['detail'] as $detail){
					$lastlogArr[$detail['question']]=$detail;
					$lastlogArr[$detail['question']]['deoptions']=unserialize($detail['options']);
					
					$last_follow_answer[$detail['question']] = $detail['answer'];
					if ($lastlogArr[$detail['question']]['deoptions']['question']) {
						$last_follow_answer[$lastlogArr[$detail['question']]['deoptions']['question']] = $lastlogArr[$detail['question']]['deoptions']['answer'];
					}
				}
			}
			$params['lastlog']=$lastlogArr;
			$params['last_follow_answer'] = $last_follow_answer;
			
			$level = $lastlog['log']['level'];
			$levelArray=$s_follow->getLevelArray();
			$params['level'] = $levelArray[$level];//当前等级
			$params['expries'] = $lastlog['log']['expries'];//当前跟进日期
			
			//$params['task'] = $atask;
			//task info
			$params['info'] = $aInfo;
			//task_opis
			//$params['task_opis'] = $sTask->get("task_opis.*");
			//行业
			$s_option = new service_cpoption(16);
			$params['option_16'] = $s_option->getItems();
			//企业规模
			$s_option = new service_cpoption(18);
			$params['option_18'] = $s_option->getItems();
			//放弃跟进原因
			$s_option=new service_cpoption(21);
			$params['option_21']=$s_option->getItems();
			//派单后放弃跟进原因
			$s_option=new service_cpoption(26);
			$params['option_26']=$s_option->getItems();
			//用户类型
			$s_option = new service_cpoption(28);
			$params['option_28'] = $s_option->getItems();
			//选择原因
			$s_option = new service_cpoption(29);
			$params['option_29'] = $s_option->getItems();
			//了解渠道
			$s_option = new service_cpoption(30);
			$params['option_30'] = $s_option->getItems();
			//放弃原因
			$s_option = new service_cpoption(61);
			$params['option_61'] = $s_option->getItems();
			//省
			$mRegion = new zbj_model_mb_region();
			$params['provinces'] = $mRegion->select(array("parent_id" => 1))->items;
			//资料
			$mPerson = new zbj_model_mb_customerperson();
			$params['userinfo'] = $mPerson->selectOne(array('user_id' => $sTask->get('user_id')));
			//推荐服务商
			$baseajax = new controller_task_baseajax();
			$params['recommendWK'] = $baseajax->getRecommentWk($this->url);
			//follow questions
			$params['problems'] = $s_follow->getFollowQuestions($aTask['mode'], $aTask['hosted'], $aInfo['ispic'], 0, 'ORDER BY sort');
						
			$params['level_desc'] = $s_follow->getLevelDesc($follow_level['level_desc']);
			//当前交易顾问工号、分机号等信息
			$m_cp_user = new zbj_model_cp_user();
			$params['cp_user'] = $m_cp_user->selectOne(array('user_id'=> $this->_userid), 'name, worknum, tel');
			//是否开启自动派单
			$m_recommend_option = new model_mk_recommendoption($iTaskID);
			$auto_recommend = $m_recommend_option->selectOne(array('task_id' => $iTaskID));
		    $params['auto_recommend_state'] = $baseajax->auto_recommend_state($auto_recommend, $aTask['amount'], $aTask, $params['task_opis']);
			//移动客户端问题
			$params['mobile_problem'] = $mobile_problem;
		}

        //只有网建行业显示*核心功能 *设计风格 个性化要求
        $params['module_id'] = $module['module_id'];
        //判断是否网建行业
        //网站建设类目124
        //当没有分配交易顾问或者派单标记不为0和1抛出提示，当前状态不允许操作 20150606
        if(($params['task_opis']['recmd_status'] == 1 || in_array($aTask['audit_state'],array(4,5))) && $aTask['mode']==13){
			$params['is_website_special_mode'] = 1;
		}else{
			$params['is_website_special_mode'] = 0;
		}
        //获取前台用户发布的需求5条
        $task = zbj_lib_BaseUtils::apicall('user', 'gettask', array('uid' => $aTask['user_id'], 'limit' => 10));
        if ($task) {
        	foreach($task['data']['items'] as $k=>$v){
        		$task['data']['items'][$k]['createtimes'] = date('m-d',$v['createtime']);
        		$task['data']['items'][$k]['amount'] = ceil($v['amount']);
        	}
            $params['tasklist'] = $task['data']['items'];
        } 

        //备注
		$content = zbj_lib_BaseUtils::apicall('misc', 'getremark', array(
				'type_id' => '1',
				'pk_id' => $iTaskID,
				'limit' => 3,
			));
		if (!$content['data']['list']) {
			$params['remark'] = array();
		} else {
			$params['remark'] = $content['data']['list'];
			foreach ($content['data']['list'] as $key => $value) {
				if ($value['attachment']) {
					$params['remark'][$key]['files'] = json_decode($value['attachment'], TRUE);
				} else {
					$params['remark'][$key]['files'] = array();
				}
				unset($params['remark']['attachment']);
			}
			$sLog = new service_log();
			$params['remark_catalog'] = $sLog->getRemarkCatalog();
		}
        //$params['is_website_special_mode'] = $sTask->checkSpecialMode(1) ? 1 : 0 ;

        //未审核数20150720
        $works = new zbj_model_mk_works();
        $num = $works->selectOne(array('task_id' => $iTaskID, 'issuccess' => 0, 'isalternative' => 0, 'iseliminate' => 0, 'open_state' => 0), 'count(1) as num');
        $params['noview_num'] = $num['num'];

        //通过任务号获取mk_task_e2v中的多个ext_id,通过ext_id查找mk_category_ext表中的ext_type、ext_name,通过ext_id查找mk_category_ext_va中的val_id、val_name
		$m_e2v = new zbj_model_mk_taske2v();
		$params['ext'] = $this->_getTastExtItem($iTaskID);
		$params['e2v'] = $m_e2v->select(array('task_id'=>$iTaskID), 'val_id')->items;
        
        $mb_info = zbj_model_api::get('zbj_model_mb_info');
        $params['mbinfo'] = $mb_info->selectOne(array('user_id' => $aTask['user_id']),'mobile,email,qq,provname,provname,cityname');


		//是否可以bc类派单
		$s_task = new service_task($iTaskID);
		$recmd_option = zbj_model_api::get("zbj_model_mk_recommendoption",$iTaskID);
		$params['bc_sendrecmd'] = $s_task->canRecmdByCategory2ID();
		$params['recmd_status'] = $s_task->get("task_opis.recmd_status");
		$params['recmd_info'] = $recmd_option->getData();

		//商机跟进页面返回的页面
		if($chance == 1){
		    return $this->render('crmchance/ajax/plan.html', $params);
	    }

		if($followtype == 1){
        	//效果保障跟进
		    return $this->render('task/effectProtection.html', $params);
	    }elseif($followtype == 2){
	    	//托管前跟进
	    	return $this->render('task/followProtection.html', $params);
	    }

	    //效果保障跟进第二版本
	    if($followtype == 4 || $followtype == 5){
        	//效果保障跟进
	    	//托管前跟进
	    	return $this->render('task/followProtections.html', $params);
	    }
	}

    /**
	 * 获取任务扩展属性
	 */
	private function _getTastExtItem($task_id) {
		$m_task = new zbj_model_mk_task();
		$task = $m_task->selectOne(array('task_id'=>$task_id), 'category_id');
		$ext_ids = "";
		$m_ext = new zbj_model_mk_categoryext();
		if ($task['category_id']) {
			$ext_ids_array = $m_ext->select(array('category_id'=>$task['category_id'],'type'=>1,'is_show'=>1), 'ext_id')->items;
			if ($ext_ids_array){
				foreach ($ext_ids_array as $v) {
					$ext_ids .= "{$v['ext_id']},";
				}
			}
		}
		$ext_ids = trim($ext_ids, ',');
		$ext = array();
		$ext_con[] = "ext_id in ({$ext_ids})"; 
		//通过ext_id查找mk_category_ext表中的ext_type、ext_name,通过ext_id查找mk_category_ext_val中的val_id、val_name
		
		$ext = $m_ext->select($ext_con, 'ext_id, ext_type,ext_name')->items;
		$m_ext_val = new zbj_model_mk_categoryextval();
		if ($ext) {
			foreach ($ext as $k=>$v) {
				$ext[$k]['option'] = $m_ext_val->select(array('ext_id'=>$v['ext_id']), 'val_id, val_name')->items;
			}
		}
		return $ext;
	}

	 /**
	 * 需求状态变更
	 */
    public function pageNeedstate($inPath){
    	$this->init($inPath);
    	$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
    	$need = trim(zbj_lib_BaseUtils::getStr($this->url['need'],'int'));
    	if (!$task_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		if (!$need) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
    	//需求表
    	$s_task = new zbj_service_task($task_id);
		$s_task = $s_task->init();
		//如果是雇佣购买服务直接返回，雇佣或购买服务无需修改任务状态
		if(in_array($s_task->get('mode'),array(11,12))) {
            return $this->printmsg ( "雇佣或购买服务无需修改任务状态", 1, null, $_SERVER ['HTTP_REFERER'] );
		}
		//需求
		$mdlTask = zbj_model_api::get('zbj_model_mk_task');
		//如果任务已经审核不进行此操作
		$states = $s_task->get('state');
    	if($s_task->get('mode')==13 and $states==1){
			$s_task->checkTaskPub();
		}
		$option = $s_task->getTaskInfoOption();
		if(!is_array($option) || empty($option)){
			return $this->printmsg('获取需求扩展数据失败',0, null, $_SERVER ['HTTP_REFERER']);
		}

		$srvTask = new service_task($task_id);
		if($need == 1){
			//cpo_ishide为0时，让它在搜索引擎出现,audit_state为1时标记为已审核
			$data = array('open_state' => 0, 'audit_state' => 1);
			if($s_task->get('state')<2 && $s_task->get('mode')==13) $data['state'] = 2;
			$log = '需求被标记为已审核，并且可以在搜索引擎出现';
	    }else if($need == 2){
	        //cpo_ishide为1时，不让它在搜索引擎出现,audit_state为4时标记为未审核
			$data = array('open_state' => 0, 'audit_state' => 4);
			$log = '需求被标记为未审核，并且不可以在搜索引擎出现';
	    }else if($need == 8){

			if(!$srvTask->canRecmdByCategory2ID()){
				//cpo_ishide为0时，让它在搜索引擎出现,audit_state为3时标记为发布订单，公开投标
				$data = array('cpo_ishide' => 0, 'open_state' => 0, 'audit_state' => 3);
				if($s_task->get('state')<2 && $s_task->get('mode')==13) $data['state'] = 2;
				$log = '需求被标记为发布订单，公开投标，并且可以在搜索引擎出现';
			}else{
				//公开发布，直接派单
				$data = array('open_state' => 0, 'audit_state' => 3);
				if($s_task->get('state')<2 && $s_task->get('mode')==13) $data['state'] = 2;
				$log = '需求被标记为发布订单，公开投标，并且不可以在搜索引擎出现';
			}

	    }else if($need == 4){
			//cpo_ishide为0时，让它在搜索引擎出现,audit_state为3时标记为发布订单，公开投标
			$data = array('open_state' => 0, 'audit_state' => 3);
			if($s_task->get('state')<2 && $s_task->get('mode')==13) $data['state'] = 2;
			$log = '需求被标记为发布订单，公开投标，并且不可以在搜索引擎出现';
	    }else if($need == 5){
	        //cpo_ishide为1时，不让它在搜索引擎出现,audit_state为5时标记为暂不发布我来撮合
			$data = array('open_state' => 0, 'audit_state' => 5);
			$log = '需求被标记为暂不发布我来撮合，并且不可以在搜索引擎出现';
	    }else if($need == 6){
	        //是手动分配的订单，标记为已处理，会释放待跟进订单数量
			$log = "交易顾问 {$this->_truename} 将订单标记为‘已处理’";
			$option['followed'] = 1;
			$data = array(
				'audit_state' 	=> 3,
				'task_info.option'	=> serialize($option),
			);
	    }
		$params=array();
		$params['isadmin']=1;
		
		// 记录审核通过通知标识
		if($need==4 || $need==8){
			$option['recmtBidOnly'] = 0;
			$data['task_info.option'] = serialize($option);

			$extends_data = array();
			//公开派单类型：0 A类派单 1 B类派单 2 C类派单
			$need ==4 && $extends_data['recmd_type'] = 0;
			$srvTask->canRecmdByCategory2ID() && $need ==8 && $extends_data['recmd_type'] = 1;

			//直接发布且不派单
			if(!$srvTask->canRecmdByCategory2ID() && $need ==8){
				//直接公开发布
				zbj_lib_Api::taskDirectpub($task_id);
			}
			//如果首次跟进时间存在，则更新最后一次审核时间
			if($s_task->get('task_extends.first_audit_time')){
				$extends_data['last_audit_time'] = time();
            }else{
				$extends_data += array("public_release_time"=>time(),"first_audit_time"=>time(),"last_audit_time"=>time());
            }
			$s_task->updateTaskExtends($extends_data);

		}
		if($s_task->get('audit_state')==4 && $data['audit_state']==1 && $option && $option['alreadyaudit']!=1){
			$option['alreadyaudit'] = $neednotice = 1;
			$data['task_info.option'] = serialize($option);
		}
		$data['task_opis.follow_tag'] = 0; // 已跟进，标记为不需跟进
		if ($s_task->edit($data,$params) === true) {
			if($need==6){ // 标记为已跟进
				$srvFollow = new service_follow();
				$back = $srvFollow->add($s_task->get('manager_id'),0,$task_id,time(),'','','是已跟进过的订单',array());
			}
			if($neednotice == 1){
				//发短信通知
				$msgparam = array('task_id'=>$task_id,'sendtime'=>time());
                zbj_lib_Api::throwTaskEvent($msgparam,'task.special1.audited');
			}
			if($need==1 || $need==4 || $need==8){ 
				zbj_lib_Api::taskFollowed($task_id,'publish');
			}else{// 只要是操作过就算跟进了的
				zbj_lib_Api::taskFollowed($task_id,'followed');
			}

			if($need==8){
				//更新搜索引擎
				$mdlTask->upTaskSearch($task_id);
			}
			
			$s_allot4 = new zbj_service_allot(4);
			$s_allot4->processed($task_id);
			$s_allot4 = new zbj_service_allot(17);
			$s_allot4->processed($task_id);
		} else {
			return $this->printmsg ( "需求状态更新失败:".$s_task->getError(), 0, null, $_SERVER ['HTTP_REFERER'] );
		}
	
		//添加特殊需求记录日志
		$s_task->addTaskActionLog($log, false);
		
		return $this->printmsg ( $log, 1, null, $_SERVER ['HTTP_REFERER'] );
    }

    /**
	 * 停止派单公开需求
	 */
    public function pageStopRecmd($inPath){
        $this->init($inPath);
    	$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
    	if(!$task_id) return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);

    	//检测是否在派单中
    	$task = new zbj_service_task($task_id);
    	$task = $task->init();
    	//后台写日志
        $cplog_obj = new zbj_service_cplog();

    	if($task->StopRecmd()){
    		$logcontent = "停止派单，公开需求成功！";
    		$cplog_obj->addLog($this->_userid,$task_id,$logcontent, $type = 'task', $origin = 0, time());
    		//任务操作记录20151028
            $task->addTaskActionRecord(array('type' => 5,'content' => $logcontent,'user_id' => $this->_userid));
            return $this->printmsg ( $logcontent, 1, null, $_SERVER ['HTTP_REFERER'] );
    	}else{
    		$cplog_obj->addLog($this->_userid,$task_id, $task->getError(), $type = 'task', $origin = 0, time());
    		return $this->printmsg ( $task->getError(), 0, null, $_SERVER ['HTTP_REFERER'] );
    	}
    }

    /**
	 * 对协助数据回复并标记为已处理20150922
	 */
    public function pageAssistInDataRecovery($inPath){
    	$this->init($inPath);
    	$task_id = zbj_lib_BaseUtils::getStr($this->url['tid'],'int');
    	$recordId = zbj_lib_BaseUtils::getStr($_POST['recordId'],'int');
    	//交易顾问ID号
    	$userId = zbj_lib_BaseUtils::getStr($_POST['userId'],'int');
    	$replyContent = zbj_lib_BaseUtils::getStr($_POST['replyContent']);
    	$terminal = zbj_lib_BaseUtils::getStr($_POST['terminal'],'int');
    	//协助的服务商ID号
    	$user_id = zbj_lib_BaseUtils::getStr($_POST['sid'],'int');

    	if(!$task_id || !$recordId || !$userId || !$replyContent || !$terminal || !$user_id) {
    		return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
    	}

    	$data = array(
    		  'terminal' => $terminal,
              'recordId' => $recordId,
              'userId' => $userId,
              'userRole' => 3,
              'replyContent' => $replyContent
			);
    	$datas = array(
              'recordId' => $recordId,
              'state' => 1
    		);
	    $taskFollow = new zbj_service_taskfollow();
	    $res1 = $taskFollow->assistInDataRecovery($data);
	    $res2 = $taskFollow->markAssistance($datas);

	    if($res1 && $res2) {
	    	zbj_lib_Api::applyAssistReplyed($task_id,$user_id);
	    	//后台写日志
			$cplog_obj = new zbj_service_cplog();
			//$manager_id 用户ID  $task_id 任务ID $log_reservation 日志内容 $type = 'task' 类型默认为task $origin = 1 来源 1为前台用户 0为后台用户 $time 创建时间 时间戳
			$log = '回复并标记为已处理成功';
			$time = time();
			$cplog_obj->addLog($userId,$task_id, $log, $type = 'task', $origin = 0, $time);
	    	return $this->printmsg($log,1, null, $_SERVER ['HTTP_REFERER']);
	    }else{
            return $this->printmsg('回复并标记为已处理失败',0, null, $_SERVER ['HTTP_REFERER']);
	    }
    }

    /**
	 * 显示已有的“未联系上雇主”列表，可标记为已处理，并且保存处理原因
	 * type 被修改为的类型 1：未处理，2：已处理
	 */
	public function pageMarkedProcessed($inPath){
		$this->init($inPath);
		//type 被修改为的类型 1：未处理，2：已处理
		$state = zbj_lib_BaseUtils::getStr($_POST['state'],'int');
		$works_id = zbj_lib_BaseUtils::getStr($_POST['works_id'],'int');
		$resid = zbj_lib_BaseUtils::getStr($_POST['resid'],'int');

		if(!$state) return $this->printmsg('处理类型有误',0, null, $_SERVER ['HTTP_REFERER']);
		if(!$works_id) return $this->printmsg('稿件ID有误',0, null, $_SERVER ['HTTP_REFERER']);
		if(!$resid) return $this->printmsg('原因ID有误',0, null, $_SERVER ['HTTP_REFERER']);

        $reason = array(
              '1' => '已联系上雇主',
              '2' => '确认联系不上雇主',
              '3' => '服务商放弃了'
        	);
        $createtime = time();
        $createymd = date('Y-m-d',time());

        $cannotContact = zbj_model_api::get('zbj_model_mk_cannotcontact');
        
        if($state == 1){
        	$t = 0;
        	$log = '稿件未联系到雇主，被标记为未处理'.',原因为：'.$reason[$resid];
        }elseif($state == 2){
            $t = 1;
            $log = '稿件未联系到雇主，被标记为已处理'.',原因为：'.$reason[$resid];
        }

        $res = $cannotContact->update(array('works_id' => $works_id),array('state' => $t,'key' => $resid,'manager_id' => $this->_userid,'createtime' => $createtime,'createymd' => $createymd));
        if($res === false){
        	$log = '稿件未联系到雇主，标记失败';
        	return $this->printmsg($log,0, null, $_SERVER ['HTTP_REFERER']);
        }else{
        	return $this->printmsg($log,1, null, $_SERVER ['HTTP_REFERER']);
        }
	}

    /**
	 * 多派一个
	 */
    public function pageAddrecmdLimitNum($inPath){
    	$this->init($inPath);
    	$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
    	if(!$task_id) return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);

    	//检测是否在派单中
    	$taskOpisModel = zbj_model_api::get('zbj_model_mk_taskopis');
        $taskOpis = $taskOpisModel->selectOne(array('task_id' => $task_id));
        if($taskOpis['recmd_status'] != 1){
        	return $this->printmsg('当前状态不在派单中，不允许操作！',0, null, $_SERVER ['HTTP_REFERER']);
        }

    	//获取已派单的数量
    	$recommendModel = zbj_model_api::get('zbj_model_mk_recommend');
    	$condition = array(
            'task_id' => $task_id,
            'action_type in(1,2,3,4)'
    		);
    	$recommend = $recommendModel->selectOne($condition,"count(*) as num");
    	$recommendNum = $recommend['num'];

    	//获取目前派单上限
    	$extendsModel = zbj_model_api::get('zbj_model_mk_taskextends');
    	$extends = $extendsModel->selectOne(array('task_id' => $task_id));
    	$extendsNum = $extends['recmd_limit_num'];

    	if(!$recommendNum || !$extendsNum || $recommendNum != $extendsNum){
    		return $this->printmsg ( "当前状态不允许操作！", 0, null, $_SERVER ['HTTP_REFERER'] );
    	}
   
        //后台写日志
        $cplog_obj = new zbj_service_cplog();

        try{
        	lib_BaseUtils::apiInit();
	        $TaskRecommendClient = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
	        lib_BaseUtils::apigetclient($TaskRecommendClient);
	        $res = $TaskRecommendClient->addRecmdLimitNum($task_id,1);
	        if($res->success){
	        	$logcontent = "多派一个操作成功！";
	        	$cplog_obj->addLog($this->_userid,$task_id, $logcontent, $type = 'task', $origin = 0, time());
	        	//任务操作记录20151028
                $s_task = new zbj_service_task($task_id);
                $s_task = $s_task->init();
                $s_task->addTaskActionRecord(array('type' => 6,'content' => $logcontent,'user_id' => $this->_userid));
	        	return $this->printmsg ( $logcontent, 1, null, $_SERVER ['HTTP_REFERER'] );
	        }else{
	        	$cplog_obj->addLog($this->_userid,$task_id, "多派一个操作失败！", $type = 'task', $origin = 0, time());
	        	return $this->printmsg ( "多派一个操作失败！", 0, null, $_SERVER ['HTTP_REFERER'] );
	        }
        }catch(Exception $e){
            return $this->printmsg($e->getMessage());
        }
    }

    /**
	 * 调整派单方案
	 */
    public function pageRecommendWay($inPath){
    	$this->init($inPath);
    	$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
    	if(!$task_id) return $this->printmsg('任务参数错误',0, null, $_SERVER ['HTTP_REFERER']);
 
        //1、1对多派单，直到找到合适的服务商 2、1对1派单，直到找到合适的服务商
    	$type = trim(zbj_lib_BaseUtils::getStr($_POST['type'],'int'));
    	if(!in_array($type,array(1,2))) return $this->printmsg('派单方式参数错误',0, null, $_SERVER ['HTTP_REFERER']);

        $s_task = new zbj_service_task($task_id);
		$s_task = $s_task->init();
		$extendsNum = $s_task->get("task_extends.recmd_limit_num");

    	if($extendsNum > 3) return $this->printmsg("当前派单上限已大于3个，不允许调整派单方案！",0, null, $_SERVER ['HTTP_REFERER']);
        if($type == 2 && $extendsNum > 1) return $this->printmsg("1对多派单不允许调整为1对1派单！",0, null, $_SERVER ['HTTP_REFERER']);
    	
    	$state = 1;

        if($type == 1){
            $recmd_limit_num = 3;
            $log = "派单方式修改为，1对多派单，直到找到合适的服务商";
            $record_type = 2;
        }elseif($type == 2){
            $recmd_limit_num = 1;
            $log = "派单方式修改为，1对1派单，直到找到合适的服务商";
            $record_type = 1;
        }

        $res = $s_task->updateTaskExtends(array('recmd_limit_num' => $recmd_limit_num));

        if($recmd_limit_num == 3 && $res){
        	$recOptionObj = zbj_model_api::get('zbj_model_mk_recommendoption');
        	$res2 = $recOptionObj->update(array('task_id' => $task_id),array('enable' => 1));
        	if($res2 === false){
                $log = "更改派单方式失败！";
        	    $state = 0;
        	}
        }
        
        if($res === false) {
        	$log = "更改派单方式失败！";
        	$state = 0;
        }

        //后台写日志
        $cplog_obj = new zbj_service_cplog();
        $cplog_obj->addLog($this->_userid,$task_id,$log, $type = 'task', $origin = 0, time());

        //任务操作记录20151028
        $s_task->addTaskActionRecord(array('type' => $record_type,'content' => $log,'user_id' => $this->_userid));

        return $this->printmsg($log,$state, null, $_SERVER ['HTTP_REFERER']);
    }

	 /**
	 * 需求关键字-用于短期分析用
	 */
    public function pageTaskFunction($inPath){
        $this->init($inPath);
        $task_id = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
        if (!$task_id) {
			return $this->printmsg('参数错误',1, null, $_SERVER ['HTTP_REFERER']);
		}
        //需求关键字表
        $keyword_tmp = zbj_model_api::get('model_mk_taskkeywordtmp');
        $keyword_tmp->delete("task_id={$task_id}");
        $sql = '';
        if(!empty($_POST['Corefunction'])){
	        //核心功能
	        $Corefunction = explode(',',preg_replace('/，/',',',zbj_lib_BaseUtils::getStr($_POST['Corefunction'])));
	        foreach($Corefunction as $k=>$v){
	        	$v = trim($v);
                if(!empty($v)) $sql .= "('{$task_id}', '1', '{$v}'),";
	        }
        }
        if(!empty($_POST['Designstyle'])){
	        //设计风格
	        $Designstyle = explode(',',preg_replace('/，/',',',zbj_lib_BaseUtils::getStr($_POST['Designstyle'])));
	        foreach($Designstyle as $k=>$v){
	        	$v = trim($v);
	        	if(!empty($v)) $sql .= "('{$task_id}', '2', '{$v}'),";
	        }
	    }
	    if(!empty($_POST['Individualization'])){
	        //个性化要求
	        $Individualization = explode(',',preg_replace('/，/',',',zbj_lib_BaseUtils::getStr($_POST['Individualization'])));
	        foreach($Individualization as $k=>$v){
	        	$v = trim($v);
	        	if(!empty($v)) $sql .= "('{$task_id}', '3', '{$v}'),";
	        }
	    }
        if(!empty($_POST['Demandcategory'])){
	        //需求类别
	        $Individualization = explode(',',preg_replace('/，/',',',zbj_lib_BaseUtils::getStr($_POST['Demandcategory'])));
	        foreach($Individualization as $k=>$v){
	        	$v = trim($v);
	        	if(!empty($v)) $sql .= "('{$task_id}', '4', '{$v}'),";
	        }
	    }
	    
	    if(!empty($_POST['Keyword'])){
	        //其他关键词
	        $Keyword = explode(',',preg_replace('/，/',',',zbj_lib_BaseUtils::getStr($_POST['Keyword'])));
	        foreach($Keyword as $k=>$v){
	        	$v = trim($v);
	        	if(!empty($v)) $sql .= "('{$task_id}', '100', '{$v}'),";
	        }
	    }
	    if(empty($sql)) return $this->printmsg ('需求关键字为空',1, null, $_SERVER ['HTTP_REFERER'] );
	    $sql = substr($sql,0,strlen($sql)-1);
	    $sql = "INSERT INTO `mk_task_keyword_tmp` (task_id,type,keyword) VALUES ".$sql;
        $res = $keyword_tmp->query($sql);
        if($res !== FALSE){
        	return $this->printmsg ('需求关键字添加成功',1, null, $_SERVER ['HTTP_REFERER'] );
        }else{
        	return $this->printmsg ( '需求关键字添加失败', 0, null, $_SERVER ['HTTP_REFERER'] );
        }
    }
	
	/**
	 * 获取搜索引擎接口地址
	 * */
	private function getSearchEngineHost(){
		return zbj_lib_Constant::DOMAIN=='zhubajie.com'?'http://192.168.1.74:8900':'http://192.168.1.85:8900';
	}
    
     /**
	 * 筛选服务商
	 */
    public function ScreeningServices($inPath){
    	$this->init($inPath);
        $task_id = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
        if (!$task_id) {
			return $this->printmsg('参数错误',1, null, $_SERVER ['HTTP_REFERER']);
		}
		//获取页数
		$Limit = 20;
		$page = trim(zbj_lib_BaseUtils::getStr($this->url['page'],'int'));
		$page = $page>=1?(int)$page:1;
		$param = array();
    	//数据验证
    	$param = $this->ScreeningServicesDataCheck($inPath);
        //组合查询条件
        $post = array(
        	'size'	=> $Limit,
        	'page'	=> ($page-1),
        	'sort' => $param['alldata']['sort'],
        );
        !empty($param['commondata']) && $post = array_merge($post,$param['commondata']);

     	//排序条件
        //调用搜索引擎
        if(!empty($param['commondata']['brandname'])){ // 根据品牌名搜索
        	$post = array('brandname'=>$param['commondata']['brandname']);
        	$url = $this->getSearchEngineHost().'/jdy-servlet/usersbyname';
        }else{ // 根据关键字搜索
        	$url = $this->getSearchEngineHost().'/jdy-servlet/search';
        }
        if(!empty($param['commondata']['brandname']) || strlen($param['commondata']['taskkeywords']) > 0 || strlen($param['commondata']['servicekeywords']) > 0){
            $result = zbj_lib_BaseUtils::file_get_contents_safe($url,json_encode($post),'POST', 15, True);
        }else{
        	$result = '';
        }
       
        $back = json_decode($result,true);
        $back['list'] = (array)$back['list'];
        //地区转为文字
	    $getProvinceList = $this->getProvinceList();
	    //能力等级
	    $srvUser = new zbj_service_user();
	    $ability = $srvUser->abilityLevelConfig();
	    foreach($getProvinceList as $k=>$v){
	    	$provincelist[$v['region_id']] = $v['region_name'];
	    }
        //类似需求列表关键字高亮修改
        $needDesc = $needMark = $needEval = array();
        foreach($back['list'] as $k=>$v){
        	foreach((array)$v['similarneeds'] as $kk=>$vv){
                $v['similarneeds'][$kk]['title'] = $this->getKeywords($param['commondata'],$vv['title']);
        	}
            
        	foreach((array)$v['similarservice'] as $kkk=>$vvv){
        		$v['similarservice'][$kkk]['title'] = $this->getKeywords($param['commondata'],$vvv['title']);
        	}

        	foreach((array)$v['tagmatching'] as $kkkk=>$vvvv){
        		$v['tagmatching'][$kkkk]['content'] = $this->getKeywords($param['commondata'],$vvvv['content']);
        	}
        	$v['address'] = $provincelist[(int)$v['address']];
        	$v['abilityvalue'] = $ability[(int)$v['abilitylevel']]['0'];

        	$v['introduction']['description'] = $this->getKeywords($param['commondata'],$v['introduction']['description']);
        	$v['introduction']['mark'] = $this->getKeywords($param['commondata'],$v['introduction']['mark']);

        	foreach((array)$v['evaluation'] as $k5=>$v5){
        		$v['evaluation'][$k5]['content'] = $this->getKeywords($param['commondata'],$v5['content']);
        		$ntime = $v['evaluation'][$k5]['create_time'];
        		$ntime>0 && $v['evaluation'][$k5]['create_time'] = date('Y-m-d H:i',$ntime);
        	}
        	
        	// 取默认的简介、备注、评价
        	if(strlen($v['introduction']['description'])==0){
        		$needDesc[] = (int)$v['user_id'];
        	}
        	if(strlen($v['introduction']['mark'])==0){
        		$needMark[] = (int)$v['user_id'];
        	}
        	if(empty($v['evaluation'])){
        		$needEval[] = (int)$v['user_id'];
        	}
	        $back['list'][$k] = $v;
        }
        // 获取默认简介、备注、评价
        if(!empty($needDesc)){
        	$needDesc = array_unique($needDesc);
        	$uinfoModel = zbj_model_api::get('zbj_model_mb_info');
        	$uinfoModel->setCount(false);
        	$infolist = $uinfoModel->select('user_id in('.implode(',',$needDesc).')','user_id,selfinfo','','','',array('type'=>'query','dbinfo'=>'co_member'))->items;
        	$infolist = (array)$infolist;
        }
        if(!empty($needMark)){
        	$needMark = array_unique($needMark);
        	$cpersonModel = zbj_model_api::get('model_mb_customerperson');
        	$cpersonModel->setCount(false);
        	$marklist = $cpersonModel->select('user_id in('.implode(',',$needMark).')','user_id,about','','','',array('type'=>'query','dbinfo'=>'co_member'))->items;
        	$marklist = (array)$marklist;
        }
        if(!empty($needEval)){
        	$needEval = array_unique($needEval);
        	$evalModel = zbj_model_api::get('model_cp_remark');
        	$evalModel->setCount(false);
        	$condition = 'type_id=6 and remark_catalog=2 and pk_id in('.implode(',',$needEval).')';
        	$fields = 'user_id as manager_id,name,pk_id as user_id,content,create_time';
        	$elist = $evalModel->select($condition,$fields,'','order by remark_id desc','',array('type'=>'query','dbinfo'=>'co_member'))->items;
        	$elist = (array)$elist;
        	
        	$evallist = array();
        	foreach($elist as $eval){
        		if(count($evallist[$eval['user_id']])<4){
        			$eval['create_time']>0 && $eval['create_time'] = date('Y-m-d H:i',$eval['create_time']);
        			$evallist[$eval['user_id']][] = $eval;
        		}
        	}
        }
        // 设置默认备注、评介
        foreach($back['list'] as $k=>$val){
        	if(empty($val['introduction']['description']) && empty($val['introduction']['mark'])){
        		$val['introduction']['isdefault'] = 1;
        	}
        	if(empty($val['evaluation'])){
        		$val['eval_isdefault'] = 1;
        	}
        	if(empty($val['introduction']['description'])){
	        	foreach($infolist as $uinfo){
	        		if($val['user_id'] == $uinfo['user_id']){
	        			$val['introduction']['description'] = $uinfo['selfinfo']; break;
	        		}
	        	}
        	}
        	if(empty($val['introduction']['mark'])){
        		foreach($marklist as $mark){
	        		if($val['user_id'] == $mark['user_id']){
	        			$val['introduction']['mark'] = $mark['about']; break;
	        		}
	        	}
        	}
        	if(empty($val['evaluation'])){
        		$val['evaluation'] = $evallist[(int)$val['user_id']];
        	}
        	
        	$back['list'][$k] = $val;
        }

        $new['lists'] = $back['list'];
        $new['pagebar'] = $this->PageBar((int)$back['totalSize'], $Limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        unset($post['size'],$post['page']);
        
        !empty($param['alldata']) && $post = array_merge($post,$param['alldata']);
        $new['searchtask'] = $post;
        return $new;
    }

    private function getKeywords($param,$string){
    	if($string == '') return $string;
    	$taskkeywords = str_replace(array(' ','，'), ',', $param['taskkeywords']);
        $taskkeywords = explode(',',$taskkeywords);

        $servicekeywords = str_replace(array(' ','，'), ',', $param['servicekeywords']);
        $servicekeywords = explode(',',$servicekeywords);
        foreach((array)$taskkeywords as $k=>$v){
        	if(empty($v)) continue;
            $taskkeywordss = "<span class='keywordm'>".strtoupper($v)."</span>";
            if(stripos("<span class='keywordm'></span>",$v) === false)
            $string = preg_replace("/$v/is", $taskkeywordss, $string);
        }
        foreach((array)$servicekeywords as $kk=>$vv){
        	if(empty($vv)) continue;
            $servicekeywordss = "<span class='keywordm'>".strtoupper($vv)."</span>";
            if(stripos("<span class='keywordm'></span>",$vv) === false)
            $string = preg_replace("/$vv/is", $servicekeywordss, $string);
        }
        
        return $string;
    }
    /**
	 * 高亮展示方法
	 */
    private function getKeywordsHighlight($param,$string){
    	if($string == '' || empty($param)) return $string;
    	foreach($param as $k=>$v){
    		$taskkeywords[$k] = str_replace(array(' ','，'), ',', $v);
            $taskkeywords[$k] = @explode(',',$taskkeywords[$k]);
            foreach((array)$taskkeywords[$k] as $kk=>$vv){
	        	if(empty($vv)) continue;
	            $taskkeywordss = "<span class='keywordm'>".strtoupper($vv)."</span>";
	            if(stripos("<span class='keywordm'></span>",$vv) === false)
	            $string = preg_replace("/$vv/is", $taskkeywordss, $string);
	        }
    	}
        return $string;
    }

    /**
	 * 筛选数据左右边加逗号
	 */
    private function getImplodeString($string,$isint=true){
    	$intarray = $this->getArrayByString($string,$isint);

    	if(empty($intarray)) return '';

    	return ','.implode(',',$intarray).',';
    }
    
    /**
	 * 验证筛选数据
	 */
    private function getArrayByString($string,$isint=false){
    	$string = trim($string);
    	if(mb_strlen($string) == 0) return array();

    	$string = str_replace(array(' ','，'), ',', $string);
    	$temparray = explode(',',$string);
    	$temparray = (array)$temparray;
    	$intarray = array();
    	foreach($temparray as $v){
    		$v = trim($v);
    		if(mb_strlen($v)==0) continue;
    		if($isint){
    			$v = intval($v);
    			if($v <= 0) continue;
    		}
    		$intarray[] = $v;
    	}
    	return $intarray;
    }
    

    /**
	 * 筛选服务商保存筛选数据
	 * $inPath string 地址
	 */
    public function pageScreeningServicesDataSave($inPath){
    	$this->init($inPath);
        $task_id = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
        if (!$task_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
    	//数据验证
    	$params = $this->ScreeningServicesDataCheck($inPath);
    	//需要保持搜索条件的情况
        if(zbj_lib_BaseUtils::getStr($_POST['savesearch'],'int') == 1){
        	$paramdata = &$params['commondata'];
	        $data = array(
	        	'task_id'	=> $task_id,
	        	'status'	=> 0,
	        	'category1id'	=> intval($paramdata['category1id']),
	        	'category2id'	=> intval($paramdata['category2id']),
	        	'category3id'	=> intval($paramdata['category3id']),
	        	'area'		=> $this->getImplodeString($paramdata['area']),
	        	'fwslevel'	=> $this->getImplodeString($paramdata['fwslevel']),
	        	'abilityfrom'	=> intval($paramdata['abilityfrom']),
	        	'abilityto'	=> intval($paramdata['abilityto']),
	        	'online'	=> strlen($paramdata['online'])==0?2:intval($paramdata['online']),
	        	'recomdnumfrom'	=> intval($paramdata['recomdnumfrom']),
	        	'recomdnumto'	=> intval($paramdata['recomdnumto']),
	        	'inorderfrom'	=> intval($paramdata['inorderfrom']),
	        	'inorderto'	=> intval($paramdata['inorderto']),
	        	'amountfrom'	=> round((float)$paramdata['amountfrom'],2),
	        	'amountto'	=> round((float)$paramdata['amountto'],2),
	        	'issecurity'	=> strlen($paramdata['issecurity'])==0?2:intval($paramdata['issecurity']),
	        	'taskkeywords'	=> $this->getImplodeString($paramdata['taskkeywords'],false),
	        	'servicekeywords'	=> $this->getImplodeString($paramdata['servicekeywords'],false),
	        	'certtype'	=> intval($paramdata['type']),
	        	'ismall'	=> strlen($paramdata['ismall'])==0?-1:intval($paramdata['ismall']),
	        	'industrial'	=> strlen($paramdata['iscyy'])==0?-1:intval($paramdata['iscyy']),
	        	'resultnum'	=> intval($_POST['totalSize']),
	        	'manager_id'	=> intval($this->_userid),
	        	'manager_name'	=> $this->_nickname,
	        	'createymd'		=> date('Y-m-d'),
	        	'createtime'	=> time(),
	        );

	        $sellerfilter = new model_mk_tasksellerfilter();
	        $filterresult = $sellerfilter->insert($data);
	        if($filterresult === false){
	        	return $this->printmsg('招商需求保存失败',0, null, $_SERVER ['HTTP_REFERER']);
	        }else{
	            return $this->printmsg('招商需求保存成功',1, null, $_SERVER ['HTTP_REFERER']);
	        }
        }
        return $this->printmsg('招商需求保存失败',0, null, $_SERVER ['HTTP_REFERER']);
    }

    /**
	 * 上班下班操作20150601
	 */
    public function OnAndOffDutyOperation($inPath){
        //调用接口，操作上下班
        
        //返回操作结果
        
    }

     
    /**
	 * 筛选服务商数据验证
	 */
    public function ScreeningServicesDataCheck($inPath){
    	//获取数据
    	//分类第1级id
        if($_POST['category1id']){
            $params['category1id'] = zbj_lib_BaseUtils::getStr($_POST['category1id'],'int');
        }
        //分类第2级id
        if($_POST['category2id']){
            $params['category2id'] = zbj_lib_BaseUtils::getStr($_POST['category2id'],'int');
        }
        //分类第3级id
        if($_POST['category3id']){
            $params['category3id'] = zbj_lib_BaseUtils::getStr($_POST['category3id'],'int');
        }
        //地区(省)id号,豆号分隔
        if(!empty($_POST['area'])){
            $params['area'] = is_array($_POST['area'])?implode(',',$_POST['area']):$_POST['area'];
            $params['area'] = zbj_lib_BaseUtils::getStr($params['area']);
        }
        //服务商签约等级,豆号分隔
        if(!empty($_POST['fwslevel'])){
        	$params['fwslevel'] = is_array($_POST['fwslevel'])?implode(',',$_POST['fwslevel']):$_POST['fwslevel'];
            $params['fwslevel'] = zbj_lib_BaseUtils::getStr($params['fwslevel']);
        }
        //最小能力等级
        if($_POST['abilityfrom']){
            $params['abilityfrom'] = zbj_lib_BaseUtils::getStr($_POST['abilityfrom'],'int');
        }
        //最大能力等级
        if($_POST['abilityto']){
            $params['abilityto'] = zbj_lib_BaseUtils::getStr($_POST['abilityto'],'int');
        }

        //最大最小能力等级
        if(empty($params['abilityto'])){
            $params['abilityto'] = 32;
        }

        if(empty($params['abilityfrom'])){
            $params['abilityfrom'] = 1;
        }

        //是否在线，2：不限，1：是，0：否
        if($_POST['online']){
            $params['online'] = zbj_lib_BaseUtils::getStr($_POST['online'],'int');
        }
        //最小派单数
        if($_POST['recomdnumfrom']){
            $params['recomdnumfrom'] = zbj_lib_BaseUtils::getStr($_POST['recomdnumfrom'],'int');
        }
        //最大派单数
        if($_POST['recomdnumto']){
            $params['recomdnumto'] = zbj_lib_BaseUtils::getStr($_POST['recomdnumto'],'int');
        }
        //最小的进行中订单
        if($_POST['inorderfrom']){
            $params['inorderfrom'] = zbj_lib_BaseUtils::getStr($_POST['inorderfrom'],'int');
        }
        //最大的进行中订单
        if($_POST['inorderto']){
            $params['inorderto'] = zbj_lib_BaseUtils::getStr($_POST['inorderto'],'int');
        }
        //最小金额&最大金额
        if($_POST['amount']){
        	$amounts = zbj_lib_BaseUtils::getStr($_POST['amount'],'int');
        	switch($amounts){
        		case 1:
                     $params['amountfrom'] = 0;
                     $params['amountto'] = 500;
                     break;
                case 2:
                     $params['amountfrom'] = 500;
                     $params['amountto'] = 1000;
                     break;
                case 3:
                     $params['amountfrom'] = 1000;
                     $params['amountto'] = 3000;
                     break;
                case 4:
                     $params['amountfrom'] = 3000;
                     $params['amountto'] = 5000;
                     break;
                case 5:
                     $params['amountfrom'] = 5000;
                     $params['amountto'] = 10000;
                     break;
                case 6:
                     $params['amountfrom'] = 10000;
                     $params['amountto'] = 20000;
                     break;
                case 7:
                     $params['amountfrom'] = 20000;
                     break;
        	}
            
        }
        if($_POST['amountfrom']){
        	$params['amountfrom'] = round((float)$_POST['amountfrom'],2);
        }
        if($_POST['amountto']){
        	$params['amountto'] = round((float)$_POST['amountto'],2);
        }

        //是否加入雇主保障，2：不限，1：是，0：否
        if($_POST['issecurity']){
            $params['issecurity'] = zbj_lib_BaseUtils::getStr($_POST['issecurity'],'int');
        }
        //20150204by houxiaopeng增加
        //个人/企业
        if($_POST['type']){
            $params['type'] = zbj_lib_BaseUtils::getStr($_POST['type'],'int');
        }
        //优选商城
        if($_POST['ismall']){
            $params['ismall'] = zbj_lib_BaseUtils::getStr($_POST['ismall'],'int');
        }
        //虚拟产业园
        if($_POST['iscyy']){
            $params['iscyy'] = zbj_lib_BaseUtils::getStr($_POST['iscyy'],'int');
        }
        //20150226新增，最小诚信度
        if($_POST['integrityfrom']){
            $params['integrityfrom'] = zbj_lib_BaseUtils::getStr($_POST['integrityfrom'],'int');
        }
        //20150226新增，最小接单率
        if($_POST['singleratefrom']){
            $params['singleratefrom'] = zbj_lib_BaseUtils::getStr($_POST['singleratefrom'],'float');
        }
        //20150226新增，最大退款率
        if($_POST['refundrateto']){
            $params['refundrateto'] = zbj_lib_BaseUtils::getStr($_POST['refundrateto'],'float');
        }
        //20150226新增，最大纠纷率
        if($_POST['disputerateto']){
            $params['disputerateto'] = zbj_lib_BaseUtils::getStr($_POST['disputerateto'],'float');
        }

        //需求关键字，豆号分隔
        $taskkeywords = trim(zbj_lib_BaseUtils::getStr($_POST['taskkeywords']));
        if(!empty($taskkeywords) && mb_strlen($taskkeywords) <= 200){
        	$tmpkeywords = $this->getArrayByString($taskkeywords,false);
        	!empty($tmpkeywords) && $params['taskkeywords'] = implode('，',$tmpkeywords);
        }
        //出售服务关键字，豆号分隔
        $servicekeywords = trim(zbj_lib_BaseUtils::getStr($_POST['servicekeywords']));
        if(!empty($servicekeywords) && mb_strlen($servicekeywords) <= 200){
        	$tmpkeywords = $this->getArrayByString($servicekeywords,false);
        	!empty($tmpkeywords) && $params['servicekeywords'] = implode('，',$tmpkeywords);
        }
        
        $brandnames = trim(zbj_lib_BaseUtils::getStr($_POST['brandname']));
        if(!empty($brandnames) && mb_strlen($brandnames) <= 200){
        	$params['brandname'] = $brandnames;
        }
        $param['commondata'] = $params;
        //排序条件
        //默认排序
        if($_POST['defaultsort']){
            $defaultsort = zbj_lib_BaseUtils::getStr($_POST['defaultsort'],'int');
            if($defaultsort == 1){
                $params['sort'] = 'default';
            }else{
                $params['sort'] = '!default';
            }
            $params['defaultsort'] = $params['sort'];
        }
        //能力等级排序
        if($_POST['abilitysort']){
            $abilitysort = zbj_lib_BaseUtils::getStr($_POST['abilitysort'],'int');
            if($abilitysort == 1){
                $params['sort'] = 'ability';
            }else{
                $params['sort'] = '!ability';
            }
            $params['abilitysort'] = $params['sort'];
        }
        //当前派单数排序
        if($_POST['singularsort']){
            $singularsort = zbj_lib_BaseUtils::getStr($_POST['singularsort'],'int');
            if($singularsort == 1){
                $params['sort'] = 'singular';
            }else{
                $params['sort'] = '!singular';
            }
            $params['singularsort'] = $params['sort'];
        }
        //进行中的订单数
        if($_POST['orderssort']){
            $orderssort = zbj_lib_BaseUtils::getStr($_POST['orderssort'],'int');
            if($orderssort == 1){
                $params['sort'] = 'orders';
            }else{
                $params['sort'] = '!orders';
            }
            $params['orderssort'] = $params['sort'];
        }
        //近3月收入
        if($_POST['incomesort']){
            $incomesort = zbj_lib_BaseUtils::getStr($_POST['incomesort'],'int');
            if($incomesort == 1){
                $params['sort'] = 'income';
            }else{
                $params['sort'] = '!income';
            }
            $params['incomesort'] = $params['sort'];
        }
        $param['alldata'] = $params;

        return $param;
    } 

    /**
     * 获取雇主要求的保障20150606
     * @param $inPath
     */
    private function GetPolicyData($task_id){
    	try{
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET);
			$buyer_instance = new com\zhubajie\task\interfaces\TaskServiceClient(null);
			zbj_lib_ApiClient::build($buyer_instance);
			$buyer_result = $buyer_instance->getTaskDetail($task_id);
			if($buyer_result->success == false){
				throw new Exception($buyer_result->message);
			}
			$buyerobjs = $buyer_result->task_detail->tender_condition;
			$sectype = array();
			if(!empty($buyerobjs->is_require_complete)) $sectype[] = 1;
			if(!empty($buyerobjs->is_require_maintain)) $sectype[] = 4;
			if(!empty($buyerobjs->is_require_original)) $sectype[] = 2;
			if(!empty($buyerobjs->is_require_sourcecode)) $sectype[] = 5;
			if(!empty($buyerobjs->is_require_effect)) $sectype[] = 6;
			if(!empty($sectype)) {
				$sectype_str = implode(',',$sectype);
				$sectype_str = trim($sectype_str,',');
		    }
		    return $sectype_str;
		}catch(Exception $e){
			return false;
		}
    } 

    /**
     * 筛选服务商并派单20150316
     * @param $inPath
     */
    public function pageSellerFiltersDistributeLeaflets($inPath) {
        $this->init($inPath);
        $task_id = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
        //区分任务详情和1跟进页面
        $t = trim(zbj_lib_BaseUtils::getStr($this->url['t'],'int'));
        //1显示未被过滤的服务商前模板  2显示
        //$type = trim(zbj_lib_BaseUtils::getStr($this->url['type'],'int'));
        if (!$task_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		//检测是否填写派单条件
		if(!empty($_POST['attributetype'])){
			foreach($_POST['attributetype'] as $a=>$b){
				if(!empty($b)) $sftag = 1;
				if((int)$a > 0) $sfktag = 1;
			}
		}
    	if($sftag != 1 && $sfktag == 1){
	    	return $this->printmsg('请定义需求扩展属性并勾选！需求扩展属性对精准派单非常重要！',0, null, $_SERVER ['HTTP_REFERER']);
	    }
		$srvTask = new zbj_service_task($task_id);
	    $srvTask = $srvTask->init();
		$params = array();
		$result = array(  //返回数据是json串
          'totalSize' => '0',   //符合以上条件的服务商共 0 人
        );
		if($srvTask->get('task_id') == 0) {
    		return $this->printmsg('需求不存在！',0, null, $_SERVER ['HTTP_REFERER']);
		}
		//判断是否网建专场，网建专场加入基础数据
		$category2id = $srvTask->get('category2id');
		$mode = $srvTask->get('mode');
    	//if($category2id != 124) {
		if($mode != 13) {
    		return $this->printmsg('这不是招标的需求！',0, null, $_SERVER ['HTTP_REFERER']);
		}

		//当没有分配交易顾问或者派单标记不为0和1抛出提示，当前状态不允许操作
		$manager_id = (int)$srvTask->get('manager_id');
		$task_opis_obj = new zbj_model_mk_taskopis();
		$task_opis_res = $task_opis_obj->selectOne("task_id = $task_id",'recmd_status');
		$audit_state = $srvTask->get('audit_state');
		$task_mode = $srvTask->get('mode');


        $task_state = $task_mode == 13;
//        $task_state = ($task_opis_res['recmd_status'] == 1 || in_array($audit_state,array(4,5))) && $task_mode == 13;
		if($task_state){
			// allow
		}else{
			return $this->printmsg('当前状态不允许操作！',0, null, $_SERVER ['HTTP_REFERER']);
		}

        //日志
        $log = '';
    	//数据验证
    	$params = $this->SellerFiltersDistributeLeafletsDataCheck($inPath);
    	//搜索条件日志
    	$SellerFiltersLog = $this->getSellerFiltersLogData($params);
    	//判断是否派单搜索类型
    	if(!in_array($params['subtype'], array(1,2,3))){
    		return $this->printmsg('此类型不属于派单类型',0, null, $_SERVER ['HTTP_REFERER']);
    	}
    	
		//网站建设类目124,is_special=0不是专场,is_special=1是专场
		//$params['is_special'] = $category2id == 124 ?1:0;
		$params['is_special'] = $mode == 13 ?1:0;

		//组合catId1订单所在一级类目catId2 订单所在二级类目catId3 订单所在三级类目policy 要求的保障，多个以“，”分隔amount 订单金额cid 城市ID
		$params['catId1'] = $srvTask->get('category1id');
        $params['catId2'] = $category2id;
        $params['catId3'] = $srvTask->get('category_id');

        $policy = $this->GetPolicyData($task_id);
        if($policy) $params['policy'] = $policy;
        $amount = $srvTask->get('amount');
        $hosted_amount = $srvTask->get('hosted_amount');
        //网建类目只要有托管金额就取托管金额，其他类目托管金额大于悬赏金额取托管金额
        if($category2id == 12){
            $params['amount'] = round((int)$hosted_amount?$hosted_amount:$amount,2);
        }else{
        	$params['amount'] = round((int)$hosted_amount > (int)$amount?$hosted_amount:$amount,2);
        }

        $user_id_par = $srvTask->get('user_id');
        $user_obj = new zbj_service_user($user_id_par);
        $params['cid'] = (int)$user_obj->get('info.city');
        $params['buyer_id'] = $user_id_par;

    	//地区无要求
    	if($params['area'] == 1){
    		unset($params['area']);
    	}
        //判断任务状态
    	if($srvTask->get('open_state') != 0) {
    		return $this->printmsg('任务状态异常，不满足派单要求！',0, null, $_SERVER ['HTTP_REFERER']);
		}
		if($srvTask->get('state') > 2) {
			return $this->printmsg('任务已选标，不满足派单要求！',0, null, $_SERVER ['HTTP_REFERER']);
		}
		

        //保存筛选条件
        if(!empty($params['subtype'])){
	    	$saveresult = $this->SellerFilterDataSave($params,$task_id);
	    	if($saveresult->success){
		    	if($saveresult && ($params['subtype'] == 2 || $params['subtype'] == 1)){
		    		$log .= '保存派单筛选条件成功！';
		    	}elseif($saveresult && $params['subtype'] == 3){

					//提交boss招商需求库
					$data = array();
					$data['task_id'] = $task_id;
					$data['witkey_num'] = intval($_POST['fws_num']);
					$params['area'] && $data['province_ids'] = explode(",",$params['area']);
					$merchantsSrv = new zbj_service_merchants();
					$merchantsSrv->addMerchants($data);

		    		$result['state'] = 1;
		    		$log .= '保存招商需求库成功！';
		    	}
	        }else{
	        	$log .= $saveresult->message;
	        }
        }

        //搜索服务商结果
        if($params['subtype'] == 1 && $saveresult->success){
	        try{
				zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
				$SellerFilterResult = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
				zbj_lib_ApiClient::build($SellerFilterResult);
				$paramssearchresult = $SellerFilterResult->searchWk($task_id);

				if($paramssearchresult->success){
					$result['state'] = 1;
					$log .= '共搜索到'.$paramssearchresult->total.'个服务商';
					$result['totalSize'] = $paramssearchresult->total;
					$uidArr = $paramssearchresult->users;
					//搜索完毕保存搜索到的服务商数量
					$srvTask->updateTaskExtends(array("service_num"=>$paramssearchresult->total));
					//记录日志
				    $srvTask->addTaskActionLog($log, false);
					//参与类似需求列表
                    if(!empty($paramssearchresult->similarneeds)){
                        foreach($paramssearchresult->similarneeds as $k=>$v){
                        	if(!empty($v)){
	                        	foreach($v as $kk=>$vv){
	                        		if((int)$kk < 2){
	                        		    $results['similarneeds'][$k][$kk] = (array)$vv;
	                        		    $results['similarneeds'][$k][$kk]['title'] = $this->getKeywordsHighlight($params['tmpkey_word'],$vv->title);
	                        	    }
	                        	}
                            }
                        }
                    }
					//出售类似服务列表
					if(!empty($paramssearchresult->similarservice)){
                        foreach($paramssearchresult->similarservice as $k=>$v){
                        	if(!empty($v)){
	                        	foreach($v as $kk=>$vv){
	                        		if((int)$kk < 2){
	                        		    $results['similarservice'][$k][$kk] = (array)$vv;
	                        		    $results['similarservice'][$k][$kk]['title'] = $this->getKeywordsHighlight($params['tmpkey_word'],$vv->title);
	                        	    }
	                        	}
                            }
                        }
                    }
                    $result['filteredTotal'] = $paramssearchresult->filteredTotal;   //被过滤掉的总数
                    $filtered = $paramssearchresult->filtered;  //被过滤掉的ID
                    //判断totalSize是否大于20
					if($result['totalSize'] > 20 && !empty($uidArr)){
						//未被过滤掉的
						$filter_not_num = $result['totalSize'] - 20;
						$filternot = array();
						foreach($paramssearchresult->filtered as $k=>$v){
							if(count($filternot) <= $filter_not_num){
							    $filternot[$k] = $v;
						    }else{
                                $filteryes[$k] = $v;
						    }
						}
						if(!empty($filternot)) $uidArr = array_merge($uidArr,$filternot);
						//过滤掉的
						$result['filteredTotal'] = $result['filteredTotal'] - $filter_not_num;
                        if(!empty($filteryes)) $filtered = $filteryes;
					}
     
                    //通过服务商ID搜索过滤原因 by houxiaopeng 20150428
                    if($_POST['seller_filter_id'] && !empty($filtered)){
                    	$results['seller_filter_id'] = $seller_filter_id = zbj_lib_BaseUtils::getStr($_POST['seller_filter_id']);
                    	$seller_filter_id_array = $this->getArrayByString($seller_filter_id,$isint=true);
                        $filtereds = array_intersect($filtered,$seller_filter_id_array);
                        //如果过滤掉的服务商和传入的筛选服务商数据有相同的值，则取相同值部分
                        if(!empty($filtereds)){
                        	unset($filtered);
                        	$filtered = $filtereds;
                        }
                    }
                    //被过滤掉的类型
                    if(!empty($paramssearchresult->filterType)){
	                    foreach($paramssearchresult->filterType as $k=>$v){
	                    	$results['filterType'][$k] = $this->SellerFilterReason($v);
	                    }
                    }
				}else{
                    $result['state'] = 0;
					$log .= $paramssearchresult->message;
				}
		    }catch(Exception $e){
				$result['state'] = 0;
				$log .= $e->getMessage();
			}
	    }

        //筛选服务商派单
        if($params['subtype'] == 2 && $saveresult->success){
        	// 价格标签
        	$upextends = array('price_tag'=>(int)$_POST['pricetag']);
        	if($upextends['price_tag']==1 && $srvTask->updateTaskExtends($upextends)){
				$this->addLog($task_id,'价格低于市场价，交由服务商议价');
			}
        	try{
        		//如果任务三级类目和提交的三级类目不同，则提示出错
        		if((int)$params['catId3'] != (int)$params['category3id']) throw new Exception('派单类目与任务所属类目不一致，请刷新页面后重新派单！');

        		if($srvTask->get('task_opis.special_type') == 0){
					$task_sign = zbj_model_api::get('zbj_model_mk_tasksign');
		        	$task_sign_array = $task_sign->select("task_id = $task_id")->items;
		            if($task_sign_array){
		            	throw new Exception('此任务已被投标，不满足派单要求！');
		            }
				}
        		if($t == 1 && in_array($category2id,array(1257,1258,1260,1261,1259))){
		        	$srvTask->set('task_opis.special_type',1);
		        	if($srvTask->save() === false){
		        		throw new Exception('设置专场标记失败');
		        	}
	            }
	            if($t == 1 && !in_array($category2id,array(1257,1258,1261,1260,1259)) && $task_mode == 13 && $srvTask->get('task_opis.special_type') == 0){
	            	$srvTask->set('task_opis.special_type',3);
		        	if($srvTask->save() === false){
		        		throw new Exception('设置专场标记失败');
		        	}
	            }

				//A类派单
				$srvTask = new service_task($task_id);
				$user_ids = trim(zbj_lib_BaseUtils::getStr($_POST['seller_user'],'int'));

				$manager_info = array(
					'manager_id'=>$this->_userid,
					'manager_name'=>$this->_nickname,
				);
				if(false === ($response = $srvTask->sendRecmd($task_id,0,$manager_info,array(),$user_ids))){
					throw new Exception($srvTask->getError());
				}

				if($response->success){

					$result['state'] = 1;
					$result['totalSize'] = empty($response->total_wks) ? 0:$response->total_wks;
					$uidArr = $response->users;
					if(empty($response->total)){
                        $log .= '一次派单给0个服务商。'.$SellerFiltersLog;
                        //记录日志
				        $srvTask->addTaskActionLog($log, false);
					}else{
						if(!empty($uidArr)){
							$uidstrz = implode(',',$uidArr);
						}
						$log .= '一次派单给'.$uidstrz.'，'.$response->total.'个服务商。'.$SellerFiltersLog;
						//记录日志
				        $srvTask->addTaskActionLog($log, false);
					}
					//修改派单状态
					if(!in_array($task_opis_res['recmd_status'],array(1,2))){
						$task_opis_obj->update(array('task_id' => $task_id),array('recmd_status' => 1));
						//触发预约事件,关闭放弃已选标的任务排除掉
						$followMqDelayDate = array(
	                            'task_id' => $task_id,
	                            'nexttime' => strtotime("+3 hours"),
	                            'state' => 0,
	                            'type' => 3
							);
	                    $srvTask->upDateFollowMqDelay($followMqDelayDate);
					}
			    }else{
			    	$result['state'] = 0;
					$log .= $response->message;
					//记录日志
				    $srvTask->addTaskActionLog($log, false);
			    }
			}catch(Exception $e){
				$result['state'] = 0;
				$log .= $e->getMessage();
			}
	    }
        $result['msg'] = $log;
       
        //如果有用户ID返回
        if ($uidArr || $filtered) {
        	$results = $this->SellerFilterList($inPath,$uidArr,$filtered,$results);
        	$result['list'] = $this->render('consultant/filterlist.html', $results);
        }
        return json_encode($result);
    	
    }

    /**
	 * 获取日志信息
	 * $params
	 */
    private function getSellerFiltersLogData($params){
    	$cache = new zbj_lib_cache('memcache');
	    //获取分类配置
	    $cache_name_category = 'boss.app.controller.task.getSellerFiltersLogData.category';
		$category_name = $cache->get($cache_name_category);
        if (empty($extcategory)){
			$s_category = zbj_model_api::get('zbj_model_mk_category');
			$categroy = $s_category->select('','category_id,category_name')->items;
			if($categroy){
				foreach($categroy as $k=>$v){
					$category_name[$v['category_id']] = $v['category_name'];
				}
			}
			if(!empty($category_name)){
				$cache->set($cache_name_category, $category_name, 3600*24);
			}
		}

		//地区
	    $getProvinceList = $this->getProvinceList();
	    foreach($getProvinceList as $k=>$v){
	    	$provincelist[$v['region_id']] = $v['region_name'];
	    }

	    //缓存所有类目
		$cache_name_category_ext = 'boss.app.controller.task.getSellerFiltersLogData.category_ext';
		$extcategory = $cache->get($cache_name_category_ext);
		if (empty($extcategory)){
			$categoryext = zbj_model_api::get('zbj_model_mk_categoryext');
		    $extcategory = $categoryext->select('', 'ext_id,ext_name', '')->items;
			$cache->set($cache_name_category_ext, $extcategory, 3600*24);
		}

		if($extcategory){
			foreach($extcategory as $k=>$v){
				$exts[$v['ext_id']] = $v['ext_name'];
			}
	    }
		$custom = array(
	              'category3id' => '三级分类ID:',
	              'area' => '地区:',
	              'certtype' => '服务商规模:',
				);
	    
	    if($params['category3id']){
	        $categoryname = $custom['category3id'].$category_name[$params['category3id']];
	        $result .= $categoryname.'<br>';
	    }

	    if(!empty($params['attributetype'])){
	        foreach($params['attributetype'] as $k=>$v){
	            if($k == 999999){
	                $keywords = explode('-',$v);
	                $keyword = '搜索关键字:'.$keywords['1'].'<br>';
	            }elseif(!empty($v)){
	                $extarray = explode('|',$v);
	                foreach($extarray as $kk=>$vv){
	                    $extary = explode('-',$vv);
	                    if($extary[0] == 0 && $extary['1']){
	                    	$ext[$k][$kk] = '关键字:'.$extary['1'];
	                    }else{
	                    	$ext[$k][$kk] = $extary['1'];
	                    }
	                }
	                $extstr[$k] = implode(',',$ext[$k]);
	                $ext[$k] = $exts[$k].':'.$extstr[$k].'<br>';
	            }
	        }
	        if(!empty($ext)){
	            $extres = implode(',',$ext);
	        }
	        $result .= $extres.$keyword;
	    }

	    if($params['area']){
	        $area = explode(',',$params['area']);
	        foreach($area as $kk=>$vv){
	            $areadata[$kk] = $provincelist[$vv];
	        }
	        $area = implode(',',$areadata);
	        $areas = $custom['area'].$area.'<br>';
	        $result .= $areas;
	    }

	    if($params['certtype']){
	        if($params['certtype'] == 1){
	            $certtype = $custom['certtype'].'个人<br>';
	        }elseif($params['certtype'] == 2){
	            $certtype = $custom['certtype'].'企业<br>';
	        }
	        $result .= $certtype;
	    }
 
        if($result){
        	$result = '<br>派单条件:<br>'.$result;
        }

	    return $result;
	}

    /**
	 * 获取服务商列表信息
	 * 传入参数 未被过滤$uidArr 被过滤$filtered 服务商数据$results array
	 * 返回参数 
	 */
    private function SellerFilterList($inPath,$uidArr,$filtered,$results){
    	$this->init($inPath);
        $page = trim(zbj_lib_BaseUtils::getStr($this->url['page'],'int'));
        $task_id = zbj_lib_BaseUtils::getStr($this->url['id'],'int');
	    $page = $page>=1?(int)$page:1;
	    //总数
        $limit = 20;
        //未过滤掉的服务商
        if(!empty($uidArr)){
	        $mtotalSize = count($uidArr);
	        foreach($uidArr as $k=>$v){
	        	$listkey[] = $v;
			    $limitkey = ceil(count($listkey)/$limit);
	            $list[$limitkey][$k] = $v;
		    }
		    $results['list'] = $list[$page];
	    }
	    //过滤掉的服务商
	    if(!empty($filtered)){
	        $ftotalSize = count($filtered);
	        foreach($filtered as $k=>$v){
	        	$listkeys[] = $v;
			    $limitkeys = ceil(count($listkeys)/$limit);
	            $lists[$limitkeys][$k] = $v;
		    }
		    $results['filtered'] = $lists[$page];
	    }
	    if(!empty($results['list'])) $uidall = $results['list'];
	    if(!empty($results['filtered'])) $uidall = $results['filtered'];
	    if(!empty($results['list']) && !empty($results['filtered'])){
		    //合并过滤前和过滤后
	        $uidall = array_merge($results['list'],$results['filtered']);
        }
        

        //通过服务商ID搜索服务商信息
        $user_search = $this->SearchService($uidall);
        if(!empty($user_search['list'])){
        	$searchresult = $this->user_search($user_search,$uidall);
        	//取出服务商品牌名 20150428 by houxiaopeng
        	$m_mb_info = zbj_model_api::get('zbj_model_mb_info');
        	$useridstr = implode(',',$uidall);
        	$useridstr = trim($useridstr,',');
		    $wknickname = $m_mb_info->select("user_id in($useridstr)",'user_id,nickname,brandname')->items;
		    if($wknickname){
		    	foreach($wknickname as $k=>$v){
		    		$wknicknames[$v['user_id']] = $v['brandname'];
		    	}
		    }
		    if($searchresult['user_searchs']){
		    	foreach($searchresult['user_searchs'] as $kk=>$vv){
		    		$searchresult['user_searchs'][$kk]['nikename'] = $wknicknames[$vv['user_id']];
		    	}
		    }
        }
        if(!empty($searchresult)){
        	$results['user_search'] = $searchresult['user_searchs'];
        	$results['Remark_data'] = $searchresult['Remark_data'];
            $results['action_type'] = $searchresult['action_type'];
        }
        
	    $sTask = new zbj_service_task($task_id);
	    $sTask = $sTask->init();
	    //判断是否网建专场，网建专场加入基础数据
		$category2id = $sTask->get('category2id');
		//网站建设类目124,is_special=0不是专场,is_special=1是专场
        //$category2id == 124 ? $results['is_website_special_modes'] = 1:$results['is_website_special_modes'] = 0;
        $mode = $sTask->get('mode');
        if(!$mode) return false;
        $mode == 13 ? $results['is_website_special_modes'] = 1:$results['is_website_special_modes'] = 0;
        if(!empty($uidArr)){
        	//未被过滤服务商
            $results['pagebar'] = $this->PageBar($mtotalSize, $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        }elseif(!empty($filtered)){
        	//过滤掉的服务商
        	$results['pagebars'] = $this->PageBar($ftotalSize, $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        }
        return $results;
    }

    /**
	 * 服务商过滤原因
	 * 传入参数 $type  int
	 * 返回参数 
	 */
    private function SellerFilterReason($type){
        $filter_type = array(
							'1' => '未上班',
							'2' => '响应率低',
							'3' => '退款率高',
							'4' => '等级不够',
							'5' => '投标额度',
							'6' => '派单中，尚未响应',
							'7' => '相同任务不能重复派给同一个服务商',
							'8' => '地域不满足(省)',
							'9' => '不是会员',
				            '10' => '当天刚注册用户，尚无注册信息',
							'11' => '服务商类型不满足',
							'12' => '用户等级不够',
							'13' => '剩余派单额不够',
							'14' => '未购买保障',
							'15' => '未入驻类目',
							'16' => '不满足派单金额范围',
							'17' => '诚信度≤80分',
							'18' => '17分钟内最多接到1个派单',
							'19' => '未手机认证',
							'20' => '未实名认证',
							'21' => '普通服务商没登陆',
							'23' => '普通服务商前三天的派单数大于0，且接单率=0%，不派单',
						);
        return $filter_type[$type];
    }

    /**
	 * 派单时记录最后一次派单状态，专场订单任务数统计
	 * 传入参数 $inPath  int
	 * 返回参数 
	 */
    public function pageTaskStatistics($inPath) {
    	$this->init($inPath);

    	$mTask= new zbj_model_mk_task();
        $mRecommendLog= new zbj_model_mk_recommendlog();
        $taskTable = $mTask->tableName();
        $recommendLogTable = $mRecommendLog->tableName();

        //类型
        $t = zbj_lib_BaseUtils::getStr($_GET['type'],'int');

        $limit=20;
		$page = zbj_lib_BaseUtils::getStr($this->url['page'],'int');
		$page = $page>=1?(int)$page:1;
		$condition = array();

		//按照需求类目筛选
        if($_GET['cat3']){
        	$cat3 = zbj_lib_BaseUtils::getStr($_GET['cat3'],'int');
        	$condition[] = "{$taskTable}.category_id = $cat3";
        }

		//起始时间搜索条件
		if(zbj_lib_BaseUtils::chkdate($_GET['begin'])){
		    $begin = zbj_lib_BaseUtils::getStr($_GET['begin']);
		    $condition[] = "{$recommendLogTable}.create_date >= '{$begin}'";
	    }
	    if(zbj_lib_BaseUtils::chkdate($_GET['end'])){
		    $end = zbj_lib_BaseUtils::getStr($_GET['end']);
		    $condition[] = "{$recommendLogTable}.create_date <= '{$end}'";
	    }
	    if($begin > $end){
	    	$timestart = $end;
            $timeend = $begin;
	    }else{
            $timestart = $begin;
            $timeend = $end;
	    }
		if(zbj_lib_BaseUtils::chkdate($_GET['begin']) && zbj_lib_BaseUtils::chkdate($_GET['end'])){
			$condition[] = "{$recommendLogTable}.create_date >= '{$timestart}' and {$recommendLogTable}.create_date <= '{$timeend}'";
		}
		//有设置条件，且结果>0 有设置条件，且结果=0
		if($t){
            $condition[] = "{$recommendLogTable}.type = {$t}";
		}else{
			$condition[] = "{$recommendLogTable}.type in(1,3)";
		}

		$condition[] = "{$taskTable}.createymd >='2015-01-25'";

        $leftjoin = array(
			$recommendLogTable => "{$taskTable}.task_id={$recommendLogTable}.task_id"
		);

		$items = "{$taskTable}.task_id,{$taskTable}.title,{$recommendLogTable}.manager_id,{$recommendLogTable}.manager_name,{$recommendLogTable}.conditions,{$recommendLogTable}.create_time,{$recommendLogTable}.task_time";		
		
		//导出excel
		if($_GET['excel'] == 1){
			$mTaskRes = $mTask->select($condition,"$items","group by {$taskTable}.task_id","order by {$recommendLogTable}.create_date desc",$leftjoin);
		}else{
			$distinct = "DISTINCT";
            $mTask->setPage($page);
			$mTask->setLimit($limit);
	        $mTaskRes = $mTask->select($condition,"$items","group by {$taskTable}.task_id","order by {$recommendLogTable}.create_date desc",$leftjoin);
	        $mTaskResNum = $mTask->selectOne($condition,"count({$distinct} mk_task.task_id) as count",'',"order by {$recommendLogTable}.create_date desc",$leftjoin);
		}

        if($mTaskRes->items){
        	foreach($mTaskRes->items as $k=>$v){
        		$mTaskRes->items[$v['task_id']] = $v;
        		$mTaskRes->items[$v['task_id']]['date'] = date('Y-m-d H:i:s',$v['create_time']);
        		if(!empty($v['conditions'])){
        			$recommend_items = unserialize($v['conditions']);
        			$recommend_item_res = $this->sellerFilterDataLog($recommend_items);
		        	//对搜索条件处理
		        	if(!empty($recommend_item_res)){
			        	foreach($recommend_item_res as $kk=>$vv){
			        		$rec_tiems[$v['task_id']][] = $kk.':'.$vv.'<br>';
			        	}
			        	$mTaskRes->items[$v['task_id']]['condition'] = implode('',$rec_tiems[$v['task_id']]);
			        	$mTaskRes->items[$v['task_id']]['num'] = count($rec_tiems[$v['task_id']]);
			        	$mTaskRes->items[$v['task_id']]['seller_num'] = 0;
		            }
		        	
        		}
        		unset($mTaskRes->items[$k]);
                $task_id[] = $v['task_id'];
        	}

        	if(!empty($task_id)){
        		$task_id_str = implode(',',$task_id);
        		$task_id_str = trim($task_id_str,',');
        	}

        	//获取派单总数
            if($task_id_str){
            	$taskseller_obj = zbj_model_api::get('zbj_model_mk_taskseller');
                $taskseller_res = $taskseller_obj->select("task_id in({$task_id_str})",'count(*) as recnum,task_id','group by task_id')->items;
            }
            if($taskseller_res){
            	foreach($taskseller_res as $k=>$v){
                    $mTaskRes->items[$v['task_id']]['seller_num'] = $v['recnum'];
            	}
            }

        }

        //导出excel
		if($_GET['excel'] == 1){
			foreach($mTaskRes->items as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['title'] = $v['title'];
				$data[$k]['condition'] = $v['condition'];
				$data[$k]['seller_num'] = $v['seller_num'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['num'] = $v['num'];
				$data[$k]['create_time'] = $v['create_time'];
			}
			$excel=new lib_excel();
            $excel->title=array("需求ID","需求标题","筛选条件",'派单人数','交易顾问','筛选条件量','派单时间');
			$excel->file_name="派单日志".date("Y-m-d H:i:s");
			$excel->exportExcel($data);
		}

        //获取分类配置
	    /*$s_category = zbj_model_api::get('zbj_model_mk_category');
		$categroy = $s_category->select('level = 3','category_id,category_name')->items;
		if($categroy){
			foreach($categroy as $k=>$v){
				$category_name[$v['category_id']] = $v;
			}
		}*/

	    $result['search'] = array(
                'type' => $t,
                'begin' => $begin,
                'end' => $end,
                'cat3' => $cat3
	    	);

	    $result['cat3'] = $category_name;
        $result['recommendlog'] = $mTaskRes->items;
        $result['totalsize'] = $mTaskResNum['count'];
        $result['pagebar'] = $this->PageBar($mTaskResNum['count'], $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);

		return $this->render('task/recommendlog.html', $result);
    }

    //获取筛选条件数据$recommend_items array 条件
    private function sellerFilterDataLog($recommend_items){
        //缓存所有类目
		$cache = new zbj_lib_cache('memcache');
		$cache_name = 'boss.app.controller.task.InvestmentDemandDatabases.category_ext';
		$extcategory = $cache->get($cache_name);
		if (empty($extcategory)){
			$categoryext = zbj_model_api::get('zbj_model_mk_categoryext');
		    $extcategory = $categoryext->select('', 'ext_id,ext_name', '')->items;
			$cache->set($cache_name, $extcategory, 3600*24);
		}

		if($extcategory){
			foreach($extcategory as $k=>$v){
				$exts[$v['ext_id']] = $v['ext_name'];
			}
	    }
		$custom = array(
	              'category3id' => '三级分类ID',
	              'area' => '地区',
	              'amountfrom' => '最小金额',
	              'amountto' => '最大金额',
	              'certtype' => '服务商规模',
                  'iscyy' => '是否产业园'
				);
		//获取分类配置
		$s_category = zbj_model_api::get('zbj_model_mk_category');
		$categroy = $s_category->select('','category_id,category_name')->items;
		if($categroy){
			foreach($categroy as $k=>$v){
				$category_name[$v['category_id']] = $v['category_name'];
			}
		}
		//地区
	    $getProvinceList = $this->getProvinceList();
	    foreach($getProvinceList as $k=>$v){
	    	$provincelist[$v['region_id']] = $v['region_name'];
	    }
		foreach($recommend_items as $k=>$v){
			//扩展属性
            if(is_numeric($k)){
				$k!=999999 && $lists[$exts[$k]] = $v;
				$k==999999 && $lists["搜索关键字"] = $v;
            }

            //自定义属性
        	//地区
        	if($k == 'area' && !empty($v)){
        		$lists_ext_name = explode(',',$v);
        		foreach($lists_ext_name as $kk=>$vv){
                   $areas[$kk] = $provincelist[$vv];
        		}
        		$lists[$custom[$k]] = implode(',',$areas);
        	}
            //分类
            if($k == 'category3id'){
            	$lists[$custom[$k]] = $category_name[$v];
            }
            //服务商ID
            if($k == 'certtype'){
            	if($v == 1){
            	    $lists[$custom[$k]] = '个人';
                }elseif($v == 2){
                	$lists[$custom[$k]] = '企业';
                }
            }
            //虚拟产业园
            if($k == 'iscyy'){
            	if($v == 1){
            	    $lists[$custom[$k]] = '是';
                }elseif($v == 0){
                	$lists[$custom[$k]] = '不是';
                }
            }
			if($k==""){
				$lists["扩展搜索关键字"] = $v;
			}
        }	
        return $lists;
    }

    /**
	 * 邀请服务商
	 * 传入参数 $inPath  int
	 * 返回参数 $Categoryextdata array
	 */
    public function pageSellerFiltersInvitation($inPath) {
        $this->init($inPath);
        $task_id = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
        //区分任务详情和跟进页面
        $t = trim(zbj_lib_BaseUtils::getStr($this->url['t'],'int'));
        if (!$task_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		$srvTask = new zbj_service_task($task_id);
	    $srvTask = $srvTask->init();
		$params = array();
		$result = array(  //返回数据是json串
          'totalSize' => '0',   //符合以上条件的服务商共 0 人
        );
        //日志
        $log = '';
    	//数据验证
    	$params = $this->SellerFiltersDistributeLeafletsDataCheck($inPath);
    	//判断是否邀请服务商搜索类型
    	if(!in_array($params['subtype'], array(3,4,5))){
    		return $this->printmsg('此类型不属于邀请服务商类型',0, null, $_SERVER ['HTTP_REFERER']);
    	}
    	//判断是否网建专场，网建专场加入基础数据
		$category2id = $srvTask->get('category2id');
		//网站建设类目124,is_special=0不是专场,is_special=1是专场
        //$category2id == 124 ? $params['is_special'] = 1:$params['is_special'] = 0;
        $mode = $srvTask->get('mode');
        $mode == 13 ? $params['is_special'] = 1:$params['is_special'] = 0;

    	//地区无要求
    	if($params['area'] == 1){
    		unset($params['area']);
    	}

        //保存筛选条件
        if(!empty($params['subtype'])){
	    	$saveresult = $this->SellerFilterDataSave($params,$task_id);
	    	if($saveresult->success){
		    	if($saveresult && ($params['subtype'] == 5 || $params['subtype'] == 4)){
		    		$log .= '保存邀请服务商筛选条件成功！';
		    	}elseif($saveresult && $params['subtype'] == 3){
		    		$result['state'] = 1;
		    		$log .= '保存招商需求库成功！';
		    	}
	        }else{
	        	$log .= $saveresult->message;
	        }
        }

        //搜索服务商结果
        if($params['subtype'] == 4 && $saveresult->success){
	        try{
				zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
				$SellerFilterResult = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
				zbj_lib_ApiClient::build($SellerFilterResult);
				$paramssearchresult = $SellerFilterResult->getInviteWk($task_id);
				if($paramssearchresult->success){
					$result['state'] = 1;
					$log .= '共搜索到'.$paramssearchresult->total.'个服务商';
					$result['totalSize'] = $paramssearchresult->total;
					$uidArr = $paramssearchresult->users;
					//判断totalSize是否大于20
					if($result['totalSize'] > 20 && !empty($uidArr)){
						$filter_not_num = $result['totalSize'] - 20;
						foreach($paramssearchresult->filtered as $k=>$v){
							if(count($filternot) <= $filter_not_num){
							    $filternot[$k] = $v;
							}
						}
						if(!empty($filternot)) $uidArr = array_merge($uidArr,$filternot);
					}

					//参与类似需求列表
                    if(!empty($paramssearchresult->similarneeds)){
                        foreach($paramssearchresult->similarneeds as $k=>$v){
                        	if(!empty($v)){
	                        	foreach($v as $kk=>$vv){
	                        		if((int)$kk < 2){
	                        		    $results['similarneeds'][$k][$kk] = (array)$vv;
	                        	    }
	                        	}
                            }
                        }
                    }
					//出售类似服务列表
					if(!empty($paramssearchresult->similarservice)){
                        foreach($paramssearchresult->similarservice as $k=>$v){
                        	if(!empty($v)){
	                        	foreach($v as $kk=>$vv){
	                        		if((int)$kk < 2){
	                        		    $results['similarservice'][$k][$kk] = (array)$vv;
	                        		}
	                        	}
                            }
                        }
                    }
				}else{
                    $result['state'] = 0;
					$log .= $paramssearchresult->message;
				}
		    }catch(Exception $e){
				$result['state'] = 0;
				$log .= $e->getMessage();
			}
	    }

        //筛选服务商邀请
        if($params['subtype'] == 5 && $saveresult->success){
        	try{
	        	$mk_task = zbj_model_api::get('zbj_model_mk_task');
	        	$mk_task_array = $mk_task->select("task_id = $task_id and state >= 3")->items;
	            if($mk_task_array){
	            	throw new Exception('此任务已投标，不满足邀请服务商要求！');
	            }
	    		$seller_user = zbj_lib_BaseUtils::getStr($_POST['seller_user'],'int');
	    		//如果有服务商ID传入进行保存服务商信息处理，并发送给服务商信息
	    		if(!empty($seller_user)){
	    			$seller_user_result = $seller_user;
	                //如果不为空保存数据到邀请数据库
	                if(!empty($seller_user_result)){
	                	$seller_user_result_strs = implode(',',$seller_user_result);
	                	$manager_id = $this->_userid;//交易顾问ID
	                    $manager_name = $this->_nickname;//交易顾问nickname
	                    $sendtime = time();
	                    $senddate = date('Y-m-d');
	                	$sql = "insert into mk_task_invitation (task_id,user_id,manager_id,manager_name,sendtime,senddate) values";
	                	
	                	foreach($seller_user_result as $k=>$v){
	                		$sqls[] = "($task_id,$v,$manager_id,'$manager_name',$sendtime,'$senddate')";
	                	}	
	                    $sqll = implode(',',$sqls);
	                    $sql = (string)$sql.(string)$sqll;
	                    $invitation = zbj_model_api::get('zbj_model_mk_taskinvitation');
	                	$resultp = $invitation->query($sql);
	                    if($resultp !== false){
	                    	//抛出事件通知服务商
	                        $sendmsgres = zbj_lib_Api::taskInvited($task_id,$seller_user_result);
	                        //var_dump($sendmsgres);
	                    	$result['state'] = 1;
				            $result['totalSize'] = count($seller_user_result);
				            $seller_user_result_str = implode(',',$seller_user_result);
				            $log .= '邀请到'.$seller_user_result_str.'等'.$result['totalSize'].'位服务商';
				            if($sendmsgres){
	                            $log .= ',发送站内信成功。';
				            }else{
				            	$log .= ',发送站内信失败。';
				            }
	                    }else{
	                    	$result['state'] = 0;
					        $log .= '邀请失败';
	                    }
	                }else{
	                	$result['state'] = 0;
					    $log .= "服务商{$seller_user_result_strs}已经被邀请";
	                }  
	            }else{
	            	$result['state'] = 0;
					$log .= '服务商ID不能为空';
	            }
            }catch(Exception $e){
				$result['state'] = 0;
				$log .= $e->getMessage();
			}
	    }
        $result['msg'] = $log;
        

        //如果有用户ID返回
        if ($uidArr) {
        	$page = trim(zbj_lib_BaseUtils::getStr($this->url['page'],'int'));
		    $page = $page>=1?(int)$page:1;
		    //总数
            $limit = 20;
            $mtotalSize = count($uidArr);
            foreach($uidArr as $k=>$v){
            	$listkey[] = $v;
			    $limitkey = ceil(count($listkey)/$limit);
	            $list[$limitkey][$k] = $v;
		    }
		    $results['list'] = $list[$page];
		    if(!empty($results['list'])) $uidall = $results['list'];

            //通过服务商ID搜索服务商信息
	        $user_search = $this->SearchService($uidall);
	        if(!empty($user_search['list'])){
	        	$searchresult = $this->user_search($user_search,$uidall);
	        }
	        if(!empty($searchresult)){
	        	$results['user_search'] = $searchresult['user_searchs'];
	        	$results['Remark_data'] = $searchresult['Remark_data'];
	            $results['action_type'] = $searchresult['action_type'];
            }
            
		    $sTask = new zbj_service_task($task_id);
		    $sTask = $sTask->init();
		    //判断是否网建专场，网建专场加入基础数据
			$category2id = $sTask->get('category2id');
			//网站建设类目124,is_special=0不是专场,is_special=1是专场
	        //$category2id == 124 ? $results['is_website_special_modes'] = 1:$results['is_website_special_modes'] = 0;
            $mode = $sTask->get('mode');
            if(!$mode) return $this->printmsg('模式错误',0);
            $mode == 13 ? $results['is_website_special_modes'] = 1:$results['is_website_special_modes'] = 0;
            $results['pagebar'] = $this->PageBar($mtotalSize, $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
            $result['list'] = $this->render('consultant/filterlist.html', $results);
        }
        return json_encode($result);
    	
    }



    /**
	 * 通过三级分类ID号取分类配置
	 * 传入参数 $inPath  int
	 * 返回参数 $Categoryextdata array
	 */
    public function pageGetSellerFilterDataConfig($inPath){
    	$this->init($inPath);
    	$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
    	$t = trim(zbj_lib_BaseUtils::getStr($this->url['t'],'int'));
    	//获取上次搜索条件，区分2派单 3邀请服务商
        $search_type = trim(zbj_lib_BaseUtils::getStr($this->url['st'],'int'));
        if (!$task_id || !$search_type) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		$sTask = new zbj_service_task($task_id);
		$sTask = $sTask->init();
    	$Categoryextdata = array();
    	//地区
        $cache = new zbj_lib_cache('memcache');
        $cach_name = 'cp.app.controller.user.province_lists';
        $province_list = $cache->get($cach_name);
        if (empty($province_list)){
            $mdl_region = new zbj_model_mb_region();
            $item = 'region_name,region_ename,region_id';
            $province_list = $mdl_region->select('region_id != 6561 and case when parent_id = 6561 then level=3 else level=2 end',$item)->items;
            $cache->set($cach_name,$province_list,3600*24);
        }

        //判断是否网建专场，网建专场加入基础数据
		$category2id = $sTask->get('category2id');
		//网站建设类目124,is_special=0不是专场,is_special=1是专场
        //$category2id == 124 ? $Categoryextdata['is_website_special_modes'] = 1:$Categoryextdata['is_website_special_modes'] = 0;
        $mode = $sTask->get('mode');
        if(!$mode) return $this->printmsg('模式错误',0);
        $mode == 13 ? $Categoryextdata['is_website_special_modes'] = 1:$Categoryextdata['is_website_special_modes'] = 0;
        $Categoryextdata['province_list'] = $province_list;
        //获取分类
        //$Categoryextdata['category'] = json_decode($this->pageGetEnabledChildrenIdNameList($inPath),true);
        $Categoryextdata['category'] = json_decode($this->GetEnabledChildrenIdNameList($inPath,$category2id),true);
        //获取一级分类
        $categoryfirst = json_decode($this->GetEnabledChildrenIdNameList($inPath,1),true);
        if(!empty($categoryfirst)){
        	foreach($categoryfirst as $k=>$v){
        		if((int)$k == 12){
        			unset($categoryfirst[$k]);
        		}
        	}
        }
        $Categoryextdata['category1'] = $categoryfirst ? $categoryfirst:array();

        
        //读取上次搜索的筛选条件
		$Categoryextdata['SellerFilterRead'] = $this->SellerFilterRead($task_id,$search_type);
        if(empty($Categoryextdata['SellerFilterRead']['category3id'])){
			//默认分类
			$Categoryextdata['SellerFilterRead']['category3id'] = $sTask->get('category_id');
			$Categoryextdata['SellerFilterRead']['category2id'] = $category2id;
			$Categoryextdata['SellerFilterRead']['category1id'] = $sTask->get('category1id');

	    }
        //获取二级分类
        $Categoryextdata['category2'] = json_decode($this->GetEnabledChildrenIdNameList($inPath,$Categoryextdata['SellerFilterRead']['category1id']),true);
 
        //获取三级分类
        $Categoryextdata['category3'] = json_decode($this->GetEnabledChildrenIdNameList($inPath,$Categoryextdata['SellerFilterRead']['category2id']),true);

		//获取三级类目下扩展配置
		$Categoryextdata['attributetype'] = $this->pageGetExtensionResidentConfig($inPath);
		$Categoryextdata['t'] = $t;
		//$html = $category2id == 124 ? 'consultant/sellerfilters.html':'consultant/invitefilters.html';
		$mode = $sTask->get('mode');
		$Categoryextdata['recmd_status'] = $sTask->get("task_opis.recmd_status");

		$recmd_option = zbj_model_api::get("zbj_model_mk_recommendoption",$task_id);
		$Categoryextdata['recmd_info'] = $recmd_option->getData();

		//类目
		$Categoryextdata['cat_1'] = $sTask->get('category1id');
		$Categoryextdata['cat_2'] = $category2id;
		$Categoryextdata['cat_3'] = $sTask->get('category_id');
		
		$Categoryextdata['extends'] = $sTask->get('task_extends.*');

	//	var_dump($Categoryextdata['extends']);exit;
		$html = $mode == 13 ? 'consultant/sellerfilters.html':'consultant/invitefilters.html';
		return $this->render($html, $Categoryextdata);
	}

	/**
	 * 取三级分类下的扩展数据
	 * 传入参数 $inPath  
	 * 返回参数 $Categoryextdata array
	 */
	public function pageGetExtensionResidentConfig($inPath) {
		$this->init($inPath);
		//接收分类ID参数
		$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['id'],'int'));
    	$category3id = trim(zbj_lib_BaseUtils::getStr($this->url['c3id'],'int'));
    	//判断返回模板或数组
    	$type = trim(zbj_lib_BaseUtils::getStr($this->url['type'],'int'));
    	//获取上次搜索条件，区分2派单 3邀请服务商
        $search_type = trim(zbj_lib_BaseUtils::getStr($this->url['st'],'int'));
    	if (!$task_id || !$search_type) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
    	if(!$category3id){
    	    return null;
        }
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
        //取分类配置
        try{
        	$Categoryextdata = array();
			$Categoryext = new com\zhubajie\category\interfaces\CategoryServiceClient(NULL);
			zbj_lib_ApiClient::build($Categoryext);
	        $Categoryexts = $Categoryext->getExtensionResidentConfig($category3id);
			if($Categoryexts->is_success == 1){
				foreach($Categoryexts->data as $k=>$v){
					$Categoryext = json_decode($v,true);
					$Categoryextdata[$Categoryext['ext_id']] = $Categoryext;
				}
		    }
		    if($type == 1){
                $Categoryextdatas['attributetype'] = $Categoryextdata;
                $Categoryextdatas['type'] = $type;
                //读取上次搜索的筛选条件
		        $Categoryextdatas['SellerFilterRead'] = $this->SellerFilterRead($task_id,$search_type);
		        $sTask = new zbj_service_task($task_id);
		        $sTask = $sTask->init();
		        
		        $Categoryextdatas['extends'] = $sTask->get('task_extends.*');
		        
		        //判断是否网建专场，网建专场加入基础数据
		        $category2id = $sTask->get('category2id');
		        //$html = $category2id == 124 ? 'consultant/sellerfilters.html':'consultant/invitefilters.html';
                $mode = $sTask->get('mode');
		        $html = $mode == 13 ? 'consultant/sellerfilters.html':'consultant/invitefilters.html';
                return $this->render($html, $Categoryextdatas);
            }else{
                return $Categoryextdata;
            }
		}catch(Exception $e){
			return false;
		}
	}

    /**
	 * 取后台分类的下一级分类id/name列表 
	 * 传入参数 $inPath  $category1 传入1获取1级分类 
	 * 返回参数 $EnabledChildrenIdNameData array
	 */
    public function pageGetEnabledChildrenIdNameList($inPath){
    	$category1 = 0;
    	return $this->GetEnabledChildrenIdNameList($inPath,$category1);
    }
	
	/**
	 * 取后台分类的下一级分类id/name列表 
	 * 传入参数 $inPath  $category1 传入1获取1级分类 
	 * 返回参数 $EnabledChildrenIdNameData array
	 */
	public function GetEnabledChildrenIdNameList($inPath,$category1){
    	$this->init($inPath);
    	$category_id = zbj_lib_BaseUtils::getStr($this->url['cid'],'int');
    	$c1 = zbj_lib_BaseUtils::getStr($category1,'int');
    	$category_id = $this->url['cid'] ? $category_id:124;
    	//获取一级类目数据
    	if($c1 == 1){
    		$category_id = 0;
    	}elseif($c1 > 1){
    		$category_id = $c1;
    	}
		$EnabledChildrenIdNameList = array();

    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
    	try{
			$EnabledChildrenIdName = new com\zhubajie\category\interfaces\CategoryServiceClient(NULL);
			zbj_lib_ApiClient::build($EnabledChildrenIdName);
			//$category_id = 0; 0时取一级分类列表
			$EnabledChildrenIdNameData = $EnabledChildrenIdName->getEnabledChildrenIdNameList($category_id);
	        if($EnabledChildrenIdNameData->is_success == 1){
				$EnabledChildrenIdNameList = $EnabledChildrenIdNameData->data;
		    }
		    //区分ajax请求，如果ajax请求返回json
            return json_encode($EnabledChildrenIdNameList,true);

		}catch(Exception $e){
			return false;
		}
    }

    /**
	 * 筛选服务商待读取上次筛选条件数据
	 * 传入参数 $task_id  int $search_type 1招商需求 2派单 3邀请服务商
	 * 返回参数 $SellerFilter array
	 */
    private function SellerFilterRead($task_id,$search_type){
    	if (!$task_id || !in_array($search_type, array(2,3))) {
			return false;
		}

    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
        try{
        	$SellerFilterData = array();
        	$SellerFilters = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
			zbj_lib_ApiClient::build($SellerFilters);
			$task_id = $task_id;//任务ID
			$type = 1;//类型 1 返回前端需要数据 2 返回搜索引擎需要数据
			$SellerFilter = $SellerFilters->getCondition($task_id,$search_type,$type);
			if($SellerFilter->success == 1 && !empty($SellerFilter->data)){
				foreach($SellerFilter->data as $k=>$v){
					//自定义属性
					if($v->type == 1){
					   //地区
					   if($v->key == 'area' && !empty($v->value)){
                          $v->value = explode(',',$v->value);
                          foreach($v->value as $kk=>$vv){
                          	  $area[$vv] = $vv;
                          }
                          $v->value = $area;
					   }
					   //金额段
					   if($v->key == 'amountfrom' || $v->key == 'amountto'){
					   	  if($v->key == 'amountfrom' || is_int($v->value)){
					   	  	 $amountfrom = $v->value;
					   	  }
					   	  if($v->key == 'amountto' || is_int($v->value)){
					   	  	 $amountto = $v->value;
					   	  }
					   	  $amount = $this->AmountFromTo($amountfrom,$amountto);
                          $SellerFilterData['amount'] = $amount;
					   }
                       $SellerFilterData[$v->key] = $v->value;
					}
				    //扩展属性
					if($v->type == 0){
                       if(!empty($v->value)){
                       	   //扩展属性用 | 分隔
                           $v->value = explode('|',$v->value);
                           foreach($v->value as $kk=>$vv){
                           	  //取出其他值
                           	  $extvv = explode('-',$vv);
                           	  if($extvv[0] == 0){
                           	  	  $v->value[$extvv[0]] = $extvv[1];
                           	  }else{
                           	  	  $v->value[$extvv[0]] = $extvv[0];
                           	  }
                           	  //删除多余的数据
                           	  unset($v->value[$kk]);
                          }
                       }
                       $SellerFilterData['attributetype'][$v->key] = $v->value;
					}
				}
			}
			return $SellerFilterData;
		}catch(Exception $e){
			return false;
		}
    }

    /**
	 * 获取金额段对应amount的ID号
	 * 传入参数 $amountfrom最小金额,$amountto最大金额
	 * 返回参数 $amount 金额段代码
	 */
    private function AmountFromTo($amountfrom,$amountto) {
    	if($amountfrom == 0 || $amountto == 500){
    		$amount = 1;
    	}elseif($amountfrom == 500 || $amountto == 1000){
    		$amount = 2;
    	}elseif($amountfrom == 1000 || $amountto == 3000){
    		$amount = 3;
    	}elseif($amountfrom == 3000 || $amountto == 5000){
    		$amount = 4;
    	}elseif($amountfrom == 5000 || $amountto == 10000){
    		$amount = 5;
    	}elseif($amountfrom == 10000 || $amountto == 20000){
    		$amount = 6;
    	}elseif($amountfrom == 20000){
    		$amount = 7;
    	}
    	return $amount;
    }

    /**
	 * 筛选服务商待保存数据 by houxiaopeng
	 * 传入参数 $params 筛选服务商数据  $task_id 任务ID号
	 * subtype = 1的时候保存招商需求库，subtype = 2 保存搜索条件
	 * 返回参数 $SellerFilter 
	 */
    private function SellerFilterDataSave($params,$task_id) {
    	if(!$params['category3id'] || !$task_id){
    		return false;
    	}
    	zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
    	try{
	    	$SellerFilterdata = $attributetype = $area = $amountfrom = $amountto = $certtype = $iscyy = $category3id = $category2id = $category1id = $is_special = $user_id = $catId1 = $catId2 = $catId3 = $policy = $amount = $cid = $buyer_id = array();
	    	
			//扩展属性
			if(!empty($params['attributetype'])){
	            foreach($params['attributetype'] as $k=>$v){
	            	//$SellerFilterSave = new com\zhubajie\task\dataobject\taskrecommend\ConditionParamsDO();
	            	if(!empty($v)){
		            	$SellerFilterSave['type'] = 0;//0 扩展属性 1自定义属性
						$SellerFilterSave['key'] = $k;//扩展属性ID-扩展属性值
						$SellerFilterSave['value'] = $v;//扩展属性对应值ID-扩展属性对应值
			            $attributetype[] = (array)$SellerFilterSave;
		            }
	            }
			}
			//三级分类ID号
			if(!empty($params['category3id'])){
			    $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "category3id";//自定义属性值
				$SellerFilterSave['value'] = $params['category3id'];//自定义属性对应值
				$category3id[] = (array)$SellerFilterSave;
			}
			//二级分类ID号
			if(!empty($params['category2id'])){
			    $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "category2id";//自定义属性值
				$SellerFilterSave['value'] = $params['category2id'];//自定义属性对应值
				$category2id[] = (array)$SellerFilterSave;
			}
			//一级分类ID号
			if(!empty($params['category1id'])){
			    $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "category1id";//自定义属性值
				$SellerFilterSave['value'] = $params['category1id'];//自定义属性对应值
				$category1id[] = (array)$SellerFilterSave;
			}
			//对服务商地区要求,地区(省)id号
			if(!empty($params['area'])){
			    $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "area";//自定义属性值
				$SellerFilterSave['value'] = $params['area'];//自定义属性对应值
				$area[] = (array)$SellerFilterSave;
			}
			//最小金额&最大金额
			if(!empty($params['amountfrom'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "amountfrom";//自定义属性值
				$SellerFilterSave['value'] = $params['amountfrom'];//自定义属性对应值
				$amountfrom[] = (array)$SellerFilterSave;
			}

			if(!empty($params['amountto'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "amountto";//自定义属性值
				$SellerFilterSave['value'] = $params['amountto'];//自定义属性对应值
				$amountto[] = (array)$SellerFilterSave;
			}
	        
	        //对服务商规模要求
			if(!empty($params['certtype'])){
	            $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "certtype";//自定义属性值
				$SellerFilterSave['value'] = $params['certtype'];//自定义属性对应值
				$certtype[] = (array)$SellerFilterSave;
			}

			//对服务商规模要求
			if(!empty($params['iscyy'])){
	            $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "iscyy";//自定义属性值
				$SellerFilterSave['value'] = $params['iscyy'];//自定义属性对应值
				$iscyy[] = (array)$SellerFilterSave;
			}

            //服务商ID号
			if(!empty($params['user_id'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "user_id";//自定义属性值
				$SellerFilterSave['value'] = $params['user_id'];//自定义属性对应值
				$user_id[] = (array)$SellerFilterSave;
			}

			//订单所在一级类目
			if(!empty($params['catId1'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "catId1";//自定义属性值
				$SellerFilterSave['value'] = $params['catId1'];//自定义属性对应值
				$catId1[] = (array)$SellerFilterSave;
			}

			//订单所在二级类目
			if(!empty($params['catId2'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "catId2";//自定义属性值
				$SellerFilterSave['value'] = $params['catId2'];//自定义属性对应值
				$catId2[] = (array)$SellerFilterSave;
			}

			//订单所在三级类目
			if(!empty($params['catId3'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "catId3";//自定义属性值
				$SellerFilterSave['value'] = $params['catId3'];//自定义属性对应值
				$catId3[] = (array)$SellerFilterSave;
			}

			//要求的保障，多个以“，”分隔
			if(!empty($params['policy'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "policy";//自定义属性值
				$SellerFilterSave['value'] = $params['policy'];//自定义属性对应值
				$policy[] = (array)$SellerFilterSave;
			}

			//订单金额
			$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
			$SellerFilterSave['key'] = "amount";//自定义属性值
			$SellerFilterSave['value'] = $params['amount'];//自定义属性对应值
			$amount[] = (array)$SellerFilterSave;


			//城市ID
			if(!empty($params['cid'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "cid";//自定义属性值
				$SellerFilterSave['value'] = $params['cid'];//自定义属性对应值
				$cid[] = (array)$SellerFilterSave;
			}

			//雇主本人ID
			if(!empty($params['buyer_id'])){
				$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
				$SellerFilterSave['key'] = "buyer_id";//自定义属性值
				$SellerFilterSave['value'] = $params['buyer_id'];//自定义属性对应值
				$buyer_id[] = (array)$SellerFilterSave;
			}

			//是否网建专场
            $SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
			$SellerFilterSave['key'] = "is_special";//自定义属性值
			$SellerFilterSave['value'] = $params['is_special'];//自定义属性对应值
			$is_special[] = (array)$SellerFilterSave;

			//默认传入task_id
			$SellerFilterSave['type'] = 1;//0 扩展属性 1自定义属性
			$SellerFilterSave['key'] = "task_id";//自定义属性值
			$SellerFilterSave['value'] = $task_id;//自定义属性对应值
			$_task_id[] = (array)$SellerFilterSave;

			$SellerFilterdata = array_merge($_task_id,$category1id,$category2id,$category3id,$attributetype,$area,$amountfrom,$amountto,$certtype,$iscyy,$is_special,$user_id,$catId1,$catId2,$catId3,$policy,$amount,$cid,$buyer_id);
			foreach($SellerFilterdata as $k=>$v){
                $SellerFilterSaves = new com\zhubajie\task\dataobject\taskrecommend\ConditionParamsDO();
				$SellerFilterSaves->type = $SellerFilterdata[$k]['type'];
				$SellerFilterSaves->key = $SellerFilterdata[$k]['key'];
				$SellerFilterSaves->value = $SellerFilterdata[$k]['value'];
				$SellerFilterdatas[] = $SellerFilterSaves;
			}

			$SellerFilters = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
			zbj_lib_ApiClient::build($SellerFilters);
			$task_id = $task_id;
            $category_id = $params['category3id'];
            //subtype = 1的时候保存招商需求库，subtype = 2 保存派单搜索条件 subtype = 3 保存邀请服务商搜索条件
            if($params['subtype'] == 3){
            	$subtype = 1;
            }elseif($params['subtype'] == 2 || $params['subtype'] == 1){
            	$subtype = 2;
            }elseif($params['subtype'] == 5 || $params['subtype'] == 4){
            	$subtype = 3;
            }else{
            	return false;
            }

			$SellerFilter = $SellerFilters->saveCondition($task_id,$category_id,(int)$subtype,$SellerFilterdatas);
            return $SellerFilter;
		}catch(Exception $e){
			return false;
		}
    }

    /**
	 * 筛选服务商数据验证
	 */
    public function SellerFiltersDistributeLeafletsDataCheck($inPath){
    	//获取数据
        //分类第3级id
        if($_POST['category3id']){
            $params['category3id'] = zbj_lib_BaseUtils::getStr($_POST['category3id'],'int');
        }
        //分类第2级id
        if($_POST['category2id']){
            $params['category2id'] = zbj_lib_BaseUtils::getStr($_POST['category2id'],'int');
        }
        //分类第1级id
        if($_POST['category1id']){
            $params['category1id'] = zbj_lib_BaseUtils::getStr($_POST['category1id'],'int');
        }
        //传入类型 1,搜索 2,派单 3，提交招商需求
        if(!empty($_POST['subtype'])){
            $params['subtype'] = zbj_lib_BaseUtils::getStr($_POST['subtype'],'int');
        }

        //其他属性
        if(!empty($_POST['otherkey'])){
        	$otherkey = explode('-',$_POST['otherkey']);
        	if(!empty($otherkey[1])) $_POST['attributetype']['999999'] = zbj_lib_BaseUtils::getStr($_POST['otherkey']);
        }

        //0扩展属性1自定义属性,扩展属性验证
        if(!empty($_POST['attributetype'])){
        	$params['attributetype'] = zbj_lib_BaseUtils::getStr($_POST['attributetype']);
        	foreach($params['attributetype'] as $k=>$v){
        		if(!empty($v)){
        			//解开字符串，对其他进行验证
	        		$params['attributetype'][$k] = @explode('|',$v);
	        		foreach($params['attributetype'][$k] as $kk=>$vv){
	        			if(!empty($vv)){
		        			$params['attributetype'][$k][$kk] = @explode('-',$vv);
		        			//对其他字段进行过滤
		        			if($params['attributetype'][$k][$kk][0] == 0){
		        				if(!empty($params['attributetype'][$k][$kk][1]) && mb_strlen($params['attributetype'][$k][$kk][1]) <= 200){
			        				$tmpkeywords = $this->getArrayByString($params['attributetype'][$k][$kk][1],false);
					        	    //tmpkey_word参与类似需求，出售类似服务，高亮展示所需数据
					        	    !empty($tmpkeywords) && $params['tmpkey_word'][$k] = $params['attributetype'][$k][$kk][1] = @implode(',',$tmpkeywords);
				        	    }else{
				        	    	unset($params['attributetype'][$k][$kk][1]);
				        	    }
		        			}
		        			if($params['attributetype'][$k][$kk][1] == 'undefined') unset($params['attributetype'][$k]);
		        			$params['attributetype'][$k][$kk] = @implode('-',$params['attributetype'][$k][$kk]);
	        		    }
	        		}
        	    }
        	    if(!empty($params['attributetype'][$k])){
        	        $params['attributetype'][$k] = @implode('|',$params['attributetype'][$k]);
        	    }
        	}
        }
        //对服务商地区要求,地区(省)id号,豆号分隔
        if(!empty($_POST['area'])){
            $params['area'] = is_array($_POST['area'])?implode(',',$_POST['area']):$_POST['area'];
            $params['area'] = zbj_lib_BaseUtils::getStr($params['area']);
        }
        //最小金额&最大金额
        if($_POST['amount']){
        	$amounts = zbj_lib_BaseUtils::getStr($_POST['amount'],'int');
        	switch($amounts){
        		case 1:
                     $params['amountfrom'] = 0;
                     $params['amountto'] = 500;
                     break;
                case 2:
                     $params['amountfrom'] = 500;
                     $params['amountto'] = 1000;
                     break;
                case 3:
                     $params['amountfrom'] = 1000;
                     $params['amountto'] = 3000;
                     break;
                case 4:
                     $params['amountfrom'] = 3000;
                     $params['amountto'] = 5000;
                     break;
                case 5:
                     $params['amountfrom'] = 5000;
                     $params['amountto'] = 10000;
                     break;
                case 6:
                     $params['amountfrom'] = 10000;
                     $params['amountto'] = 20000;
                     break;
                case 7:
                     $params['amountfrom'] = 20000;
                     break;
        	}
            
        }
        if($_POST['amountfrom']){
        	$params['amountfrom'] = round((float)$_POST['amountfrom'],2);
        }
        if($_POST['amountto']){
        	$params['amountto'] = round((float)$_POST['amountto'],2);
        }
        //服务商规模ID号 int整形 如：1：个人，2企业
        if($_POST['certtype']){
            $params['certtype'] = zbj_lib_BaseUtils::getStr($_POST['certtype'],'int');
        }
        //是否产业园 1：是 0：不是
        if($_POST['iscyy']){
            $params['iscyy'] = zbj_lib_BaseUtils::getStr($_POST['iscyy'],'int');
        }
        //被过滤的用户ID
        if(!empty($_POST['seller_filter_id'])){
			$user_id = $this->getArrayByString($_POST['seller_filter_id'],true);
    	    !empty($user_id) && count($user_id)<=100 && $params['user_id'] = @implode(',',$user_id);
	    }
        return $params;
    } 
    
    /**
     * 报价详情展示页面
     * @param $inPath
     */
    public function pageQuoteDetails($inPath) {
    	$this->init($inPath);
        $quote_id = trim(zbj_lib_BaseUtils::getStr($this->url['quoteid'],'int'));
        if (!$quote_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);	 
		try{
			$BiddingResults = array();
			$Bidding = new WorkQuoteServiceClient(NULL);
			zbj_lib_ApiClient::build($Bidding);
			$BiddingResult = $Bidding->getDetail($quote_id);  //报价方案ID号
			if($BiddingResult->success == 1 && !empty($BiddingResult->quote)){
				$BiddingResult = (array)$BiddingResult;
				$BiddingResult['quote'] = (array)$BiddingResult['quote'];
				$fws = zbj_model_api::get('zbj_model_mb_info');
				if($BiddingResult['quote']['user_id']){
				    $mb_fws = $fws->selectOne("user_id = {$BiddingResult['quote']['user_id']}");
			    }
				$BiddingResult['quote']['user_msg'] = $mb_fws;
				//组合报价详情数据
				if(!empty($BiddingResult['quote']['quoteitem'])){
					foreach($BiddingResult['quote']['quoteitem'] as $k=>$v){  
	                   $BiddingResult['quote']['quoteitem'][$v->item_key] = (array)$v;
                       unset($BiddingResult['quote']['quoteitem'][$k]);
	                   if($BiddingResult['quote']['quoteitem'][$v->item_key]['content']){
	                       $BiddingResult['quote']['quoteitem'][$v->item_key]['content'] = unserialize($BiddingResult['quote']['quoteitem'][$v->item_key]['content']);
	                   }
					}
			    }
			    $BiddingResults = $BiddingResult['quote'];
			}
            return $this->render('consultant/quoted.html', $BiddingResults);
		}catch(Exception $e){
			return $this->printmsg($e->getMessage(),0, null, $_SERVER ['HTTP_REFERER']);
		}
    }

    /**
     * 报价详情通过
     * @param $inPath
     */
    public function pageQuoteDetailsByRefusingTo($inPath) {
    	$this->init($inPath);
        $quote_id = trim(zbj_lib_BaseUtils::getStr($this->url['quoteid'],'int'));
        $auditstate = trim(zbj_lib_BaseUtils::getStr($this->url['auditstate'],'int'));
        $reasonid = zbj_lib_BaseUtils::getStr($this->url['reasonid']);
        if (!$quote_id || !$auditstate) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		
		//1通过 -1驳回
		if($auditstate == 1){
           $auditstates = 1;
		}elseif($auditstate == 2){
           $auditstates = -1;
		}
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
		try{
			$WorkQuote = new WorkQuoteServiceClient(NULL);
			zbj_lib_ApiClient::build($WorkQuote);
		 
			$auditDto = new QuoteAuditDTO();
			$auditDto->quote_id = $quote_id;  // 报价方案ID号
			$auditDto->auditstate = $auditstates;   // 1审核通过，-1，驳回
			$auditDto->manager_id = $this->_userid;  // 交易顾问ID号
			$auditDto->manager_name = $this->_nickname;  // 交易顾问nickname
			if($reasonid && $auditstates == '-1'){
				$reason = array(
	               '1' => '功能需求与雇主需求不一致',
				   '2' => '报价太离谱',
				   '3' => '报价说明无意义',
				   '4' => '提供虚假案例',
				   '5' => '项目内容随意填写'
				 );
			    $rejectmsg = $reason[$reasonid];
				$auditDto->rejectmsg = $rejectmsg;  // 交易顾问nickname
		    }
			$WorkQuoteResult = $WorkQuote->audit($auditDto);
			//通过报价方案ID号，查找服务商和任务号，方便添加日志
			$mk_works_quote = zbj_model_api::get('zbj_model_mk_worksquote');
			$mk_works_quote_res = $mk_works_quote->selectOne("quote_id = {$quote_id}",'works_id,nickname,user_id,task_id,manager_name');
			$srvTask = new zbj_service_task($mk_works_quote_res['task_id']);
		    $srvTask = $srvTask->init();
			if($WorkQuoteResult->success == 1 && $auditstates == '1'){
				//通过成功添加日志
				$log = "'{$mk_works_quote_res['manager_name']}'审核通过'{$mk_works_quote_res['nickname']}'的报价方案（编号：{$mk_works_quote_res['works_id']}）";
				$srvTask->addTaskActionLog($log, false);
        	    return $this->printmsg('通过成功',1, null, $_SERVER ['HTTP_REFERER']);
	        }elseif($WorkQuoteResult->success == 1 && $auditstates == '-1'){
	        	//拒绝成功添加日志
	        	$log = "'{$mk_works_quote_res['manager_name']}'审核拒绝'{$mk_works_quote_res['nickname']}'的报价方案（编号：{$mk_works_quote_res['works_id']}），原因：{$rejectmsg}";
	        	$srvTask->addTaskActionLog($log, false);
	        	return $this->printmsg('拒绝成功',1, null, $_SERVER ['HTTP_REFERER']);
	        }else{
	        	return $this->printmsg($WorkQuoteResult->message,0, null, $_SERVER ['HTTP_REFERER']);
	        }
		}catch(Exception $e){
			return $this->printmsg($e->getMessage(),0, null, $_SERVER ['HTTP_REFERER']);
		}

    }

    /**
     * 报价详情拒绝
     * @param $inPath
     */
    public function pageQuoteDetailsByGiveUp($inPath) {
    	$this->init($inPath);
        $quote_id = trim(zbj_lib_BaseUtils::getStr($this->url['quoteid'],'int'));
        $type = trim(zbj_lib_BaseUtils::getStr($this->url['type'],'int'));
        $reason = zbj_lib_BaseUtils::getStr($_POST['reason']);
        if (!$quote_id || !$type) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);

        try{
			$api = new WorkQuoteServiceClient(NULL);
			zbj_lib_ApiClient::build($api);
			$giveupDTO = new GiveupDTO();
			$giveupDTO->quote_id = $quote_id;  // 报价方案ID号
			$giveupDTO->reason = $reason; // 放弃的原因，100字以内
			$giveupDTO->roletype = $type;     // 操作人分类， 1：服务商 ，2雇主，3交易顾问，4系统
			$result = $api->giveup($giveupDTO);
			if($result->success){
	        	return $this->printmsg($result->message,1, null, $_SERVER ['HTTP_REFERER']);
	        }else{
	        	return $this->printmsg($result->message,0, null, $_SERVER ['HTTP_REFERER']);
	        }

		}catch(Exception $e){
			return $this->printmsg($e->getMessage(),0, null, $_SERVER ['HTTP_REFERER']);
		}

    }

    /**
	 * 淘汰 by houxiaopeng 20150319
	 * @param int $type 1淘汰/0取消淘汰
	 * @return boolean
	 */
	public function pageeliminateWorks($inPath) {
		$this->init($inPath);
        $tid = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
        $wid = trim(zbj_lib_BaseUtils::getStr($this->url['wid'],'int'));
        $type = trim(zbj_lib_BaseUtils::getStr($this->url['type'],'int'));
        if (!$tid && !$wid && !$type) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init ();
		$srvWork = new zbj_service_works($wid);
		$m_cp_user = zbj_model_api::get('zbj_model_cp_user');
		if($srvTask->get('state') != 2){
			return $this->printmsg('当前状态不允许操作',0, null, $_SERVER ['HTTP_REFERER']);
		}
		
		if($type == 0){
			$condition = array(
				"works_id='{$wid}' and dotype in(10,20,21)",
				'done=0 and roletype>0'
			);
			$srvWorkTask = new zbj_model_mk_workstaskstep();
			$worktask = $srvWorkTask->selectOne($condition);
			if(is_numeric($worktask['step_id'])){
				return $this->printmsg('此稿件被系统淘汰，不可操作取消淘汰',0, null, $_SERVER ['HTTP_REFERER']);
			}
		}
		
		if($type == 1){
			$types = 1;
			$msg = '淘汰出错';
		}else{
			$types = 0;
			$msg = '取消淘汰出错';
		}
		if ($srvWork->setEliminate($types,'mgr') == false){
			return $this->printmsg($msg,0, null, $_SERVER ['HTTP_REFERER']);
		}
		$cp_user = $m_cp_user->selectOne(array('user_id'=> $this->_userid), 'name');
		$srvTask->addTaskActionLog("交易顾问{$cp_user['name']}将{$wid}号投标".($type==1?'设置为不合格':'取消淘汰'), 1);
        return $this->printmsg('设置成功',0, null, $_SERVER ['HTTP_REFERER']);
	}

	/**
     * 跟进标记top订单
     * @param $inPath
     */
    public function pageTopOrderTag($inPath) {
    	if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
    	$this->init($inPath);
        $tid = zbj_lib_BaseUtils::getStr($this->url['tid'],'int');
        if($tid <= 0){
        	return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
        }
        $mk_follow = zbj_model_api::get('zbj_model_mk_follow');
        //查找当前任务top订单状态
        $mk_follow_res = $mk_follow->selectOne("task_id = $tid",'top_order_tag');
        if(empty($mk_follow_res) || $mk_follow_res === false){
            return $this->printmsg('搜索top订单标记失败',0, null, $_SERVER ['HTTP_REFERER']);
        }
        if($mk_follow_res['top_order_tag'] == 1){
        	$tag = 0;     
        }else{
        	$tag = 1;
        }
        $mk_follow_result = $mk_follow->update(array('task_id' => $tid),array('top_order_tag' => $tag));
        if($mk_follow_result === false){
        	$msg = 'top订单状态标记失败';
            $state = 0;
        }else{
        	$msg = $tag == 1 ? '标记为top订单':'取消标记为top订单';
        	$state = $tag == 1 ? 2 : 1;
        }
        return $this->printmsg($msg,$state, null, $_SERVER ['HTTP_REFERER']);
    }


    /**
     * 任务最终页服务商列表
     * @param $inPath
     */
    public function WitkeyService($inPath) {
        //地区
        $cache = new zbj_lib_cache('memcache');
        $cach_name = 'cp.app.controller.user.province_list';
        $province_list = $cache->get($cach_name);
        if (empty($province_list)){
            $mdl_region = new zbj_model_mb_region();
            $item = 'region_name,region_ename,region_id';
            $province_list = $mdl_region->select('level=2',$item)->items;
            $cache->set($cach_name,$province_list,3600*24);
        }
        $this->tplvar['province_list'] = $province_list;
        //分类
        $sCategory = new service_category();
        $this->tplvar['category'] = $sCategory->getChild();
        //能力等级
        $srvUser = new zbj_service_user();
        $this->tplvar['ability'] = $srvUser->abilityLevelConfig();
        return $this->tplvar;
    }


    /**
	 * 招商需求库
	 */
    public function pageInvestmentDemandDatabase($inPath){
    	//获取页数
		$limit=27;
		$this->url = $this->getUrlParams($inPath);
		$page = zbj_lib_BaseUtils::getStr($this->url['page'],'int');
		$condition = array();
		//起始时间搜索条件
		if(zbj_lib_BaseUtils::chkdate($_POST['begin'])){
		    $begin = zbj_lib_BaseUtils::getStr($_POST['begin']);
		    $sql = "createymd >= '{$begin}'";
	    }
	    if(zbj_lib_BaseUtils::chkdate($_POST['end'])){
		    $end = zbj_lib_BaseUtils::getStr($_POST['end']);
		    $sql = "createymd <= '{$end}'";
	    }
	    if($begin > $end){
	    	$timestart = $end;
            $timeend = $begin;
	    }else{
            $timestart = $begin;
            $timeend = $end;
	    }
		if(zbj_lib_BaseUtils::chkdate($_POST['begin']) && zbj_lib_BaseUtils::chkdate($_POST['end'])){
			$sql = "createymd >= '{$timestart}' and createymd <= '{$timeend}'";
		}
		$condition[] = $sql;
		$page = $page>=1?(int)$page:1;
		//需求类目
		$s_category = new zbj_service_category();
		$params['categroy'] = $s_category->getTree();
        $sellerfilter = zbj_model_api::get('model_mk_tasksellerfilter');
        $sellerfilter->setCount(true);
		$sellerfilter->setPage($page);
		$sellerfilter->setLimit($limit);
		$orderby = 'ORDER BY sfw_id DESC';
		$list = $sellerfilter->select($condition, '*', '', $orderby);
		if(!$list->items) return $this->render('task/ScreeningServices.html');
		$params['list'] = $list->items;
		$params['total'] = $list->totalSize;

        $s_module = new service_module();
        $modelRegion = zbj_model_api::get('zbj_model_mb_region');
        $srvUser = new zbj_service_user();
        //能力等级
	    $ability = $srvUser->abilityLevelConfig();
        //签约等级
	    $goldname = array(4=>'皇冠',3=>'钻石',2=>'金牌',1=>'银牌',0=>'普通');
	    //地区
	    $getProvinceList = $this->getProvinceList();
	    foreach($getProvinceList as $k=>$v){
	    	$provincelist[$v['region_id']] = $v['region_name'];
	    }
	    //获取行业
	    $ModuleByCategory = $this->getModuleByCategory();

		$mtask = zbj_model_api::get('zbj_model_mk_task');
		foreach($params['list'] as $key=>&$value){
		    if ($value['category3id']) {
				if ($ModuleByCategory[$value['category3id']]) {
					$params['list'][$key]['module_name'] = $ModuleByCategory[$value['category3id']];
				}else{
					$params['list'][$key]['module_name'] = '暂无行业运营';
				}
			}
			$mtask->setPkid($value['task_id']);
			$taskData = $mtask->get();
			$value['task_title'] = $taskData['title'];
			$value['task_amount'] = $taskData['amount'];
			//地区
			if (!empty($value['area'])) {
				$provinceId = explode(',',trim($value['area'],','));
				foreach($provinceId as $k=>$v){
					$aprovinces[$k] = $provincelist[$v];
			    }
				$params['list'][$key]['province_name'] = implode(',',$aprovinces);
			}

			//能力等级
			if(!empty($value['abilityfrom'])){
                $abilityfroms = $ability[$value['abilityfrom']]['1'];
				$params['list'][$key]['abilityfrom'] = $abilityfroms;
			}
			if(!empty($value['abilityto'])){
				$abilitytos = $ability[$value['abilityto']]['1'];
                $params['list'][$key]['abilityto'] = $abilitytos;
			}

			//签约等级
			if(!empty($value['fwslevel'])){
				$fwslevel = explode(',',trim($value['fwslevel'],','));
				foreach($fwslevel as $k=>$v){
					$fwslevels[$k] = $goldname[$v];
				}
				$params['list'][$key]['fwslevels'] = implode(',',$fwslevels);
			}

			//需求关键字
			if(!empty($value['taskkeywords'])){
                $params['list'][$key]['taskkeywords'] = trim($value['taskkeywords'],',');
			}

			//出售的服务关键字
			if(!empty($value['servicekeywords'])){
                $params['list'][$key]['servicekeywords'] = trim($value['servicekeywords'],',');
			}
		}
		$params['pagebar'] = $this->PageBar($list->totalSize, $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        return $this->render('task/ScreeningServices.html', $params);
    }


    /**
	 * 招商需求库
	 */
    public function pageInvestmentDemandDatabases($inPath){
    	//获取页数
		$limit = 27;
		$this->url = $this->getUrlParams($inPath);
		$page = zbj_lib_BaseUtils::getStr($this->url['page'],'int');
		$condition = array();
		$sql = "search_type = 1";
		//起始时间搜索条件
		if(zbj_lib_BaseUtils::chkdate($_POST['begin'])){
		    $begin = zbj_lib_BaseUtils::getStr($_POST['begin']);
		    $sql .= " and create_date >= '{$begin}'";
	    }
	    if(zbj_lib_BaseUtils::chkdate($_POST['end'])){
		    $end = zbj_lib_BaseUtils::getStr($_POST['end']);
		    $sql .= " and create_date <= '{$end}'";
	    }
	    if($begin > $end){
	    	$timestart = $end;
            $timeend = $begin;
	    }else{
            $timestart = $begin;
            $timeend = $end;
	    }
		if(zbj_lib_BaseUtils::chkdate($_POST['begin']) && zbj_lib_BaseUtils::chkdate($_POST['end'])){
			$sql .= " and create_date >= '{$timestart}' and create_date <= '{$timeend}'";
		}
		$condition[] = $sql;
		$page = $page>=1?(int)$page:1;
		//需求类目
		$s_category = new zbj_service_category();
		$params['categroy'] = $s_category->getTree();
        $sellerfilter = zbj_model_api::get('model_mk_recommendconditions');
        $sellerfilter->setCount(true);
		$sellerfilter->setPage($page);
		//限制一次取出6000条
		$sellerfilter->setLimit('6000');
		$orderby = 'ORDER BY condition_id DESC';
		$list = $sellerfilter->select($condition, '*', '', $orderby)->items;
		if(!$list) return $this->render('task/ScreeningServicess.html');
        //缓存所有类目
		$cache = new zbj_lib_cache('memcache');
		$cache_name = 'boss.app.controller.task.InvestmentDemandDatabases.category_ext';
		$extcategory = $cache->get($cache_name);
		if (empty($extcategory)){
			$categoryext = zbj_model_api::get('zbj_model_mk_categoryext');
		    $extcategory = $categoryext->select('', 'ext_id,ext_name', '')->items;
			$cache->set($cache_name, $extcategory, 3600*24);
		}

		if($extcategory){
			foreach($extcategory as $k=>$v){
				$exts[$v['ext_id']] = $v['ext_name'];
			}
	    }
		$custom = array(
	              'category3id' => '三级分类ID',
	              'area' => '地区',
	              'amountfrom' => '最小金额',
	              'amountto' => '最大金额',
	              'certtype' => '服务商规模',
                  'iscyy' => '是否产业园'
				);
		//获取分类配置
		$s_category = zbj_model_api::get('zbj_model_mk_category');
		$categroy = $s_category->select('','category_id,category_name')->items;
		if($categroy){
			foreach($categroy as $k=>$v){
				$category_name[$v['category_id']] = $v['category_name'];
			}
		}
		//地区
	    $getProvinceList = $this->getProvinceList();
	    foreach($getProvinceList as $k=>$v){
	    	$provincelist[$v['region_id']] = $v['region_name'];
	    }
		foreach($list as $k=>$v){
			//$lists[$v['task_id']][$v['condition_id']] = $v['val_name'];
			//扩展属性
            if($v['type'] == 0){
            	$listss[$v['task_id']][$v['ext_id']][$v['condition_id']] = $v['val_name'];
            	if($listss[$v['task_id']][$v['ext_id']]){
            	    $lists[$v['task_id']][$exts[$v['ext_id']]] = implode(',',$listss[$v['task_id']][$v['ext_id']]);
                }

            }

            //自定义属性
            if($v['type'] == 1){
                $lists[$v['task_id']][$v['ext_name']][] = $v['val_name'];
                if(!empty($lists[$v['task_id']][$v['ext_name']])){
                	//地区
                	if($v['ext_name'] == 'area'){
                		$lists_ext_name = explode(',',$lists[$v['task_id']][$v['ext_name']][0]);
                		foreach($lists_ext_name as $kk=>$vv){
                           $lists[$v['task_id']][$v['ext_name']][$kk] = $provincelist[$vv];
                           
                		}
                	}
                    $lists[$v['task_id']][$custom[$v['ext_name']]] = implode(',',$lists[$v['task_id']][$v['ext_name']]);
                    //分类
                    if($v['ext_name'] == 'category3id'){
                    	$lists[$v['task_id']][$custom[$v['ext_name']]] = $category_name[$v['val_name']];
                    }
                    //服务商ID
                    if($v['ext_name'] == 'certtype'){
                    	if($v['val_name'] == 1){
                    	    $lists[$v['task_id']][$custom[$v['ext_name']]] = '个人';
                        }elseif($v['val_name'] == 2){
                        	$lists[$v['task_id']][$custom[$v['ext_name']]] = '企业';
                        }
                    }
                    //虚拟产业园
                    if($v['ext_name'] == 'iscyy'){
                    	if($v['val_name'] == 1){
                    	    $lists[$v['task_id']][$custom[$v['ext_name']]] = '是';
                        }elseif($v['val_name'] == 0){
                        	$lists[$v['task_id']][$custom[$v['ext_name']]] = '不是';
                        }
                    }


                }
                unset($lists[$v['task_id']][$v['ext_name']]);
            }

		}

		$params['list'] = $lists;
		$params['total'] = count($lists);
		foreach($params['list'] as $k=>$v){
			$listkey[] = $v;
			$limitkey = ceil(count($listkey)/$limit);
            $params['lists'][$limitkey][$k] = $v;
		}
		$params['listtask'] = $params['lists'][$page];
		$params['pagebar'] = $this->PageBar($params['total'], $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        return $this->render('task/ScreeningServicess.html', $params);
    }
   

   /**
	 * 招商需求库获取行业分类
	 */
   public function getModuleByCategory() {
	    $cache = new zbj_lib_cache('memcache');
		$cache_name = 'boss.app.controller.task.getModuleByCategory';
		$cached = $cache->get($cache_name);
		if (empty($cached)){
		    $moodules=array();
			$m_module_category = new model_mk_modulecategory();
			$leftjoin = array(
					'mk_module'=>'mk_module.module_id=mk_module_category.module_id'
			);
			$data=$m_module_category->select('', '', null, null, $leftjoin)->items;
			foreach($data as $k=>$v){
				$cached[$v['category_id']] = $v['module_name'];
			}
			$cache->set($cache_name, $cached, 3600*24);
		}
			
			if($cached){
				return $cached;
			}else{
				return null;
			}

	}

    /**
	 * 获取全部城市
	 */
    private function getProvinceList() {
		$cache = new zbj_lib_cache('memcache');
		$cache_name = 'boss.app.controller.task.province_list';
		$cached = $cache->get($cache_name);
		if (empty($cached)){
			$mdl_region = new zbj_model_mb_region();
			$item = 'region_name,region_ename,region_id';
			$cached = $mdl_region->select('',$item)->items;
			$cache->set($cache_name, $cached, 3600*24);
		}
		return $cached;
	}

	/**
	 * 添加修改特殊需求
	 */
    public function pageSpecialneeds($inPath) {
    	$this->init($inPath);
    	$task_id = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
    	$list = trim(zbj_lib_BaseUtils::getStr($this->url['list'],'int'));
    	//特殊需求列表1,2
    	$listno = trim(zbj_lib_BaseUtils::getStr($this->url['listno'],'int'));
    	$listtype = trim(zbj_lib_BaseUtils::getStr($this->url['listtype'],'int'));
    	if (!$task_id) {
			return $this->printmsg('参数错误',1, null, $_SERVER ['HTTP_REFERER']);
		}
    	//需求表
    	$s_task = new zbj_service_task($task_id);
		$s_task = $s_task->init();
		//需求
		$mdlTask = zbj_model_api::get('zbj_model_mk_task');
    	//特殊需求表
        $mkbidmodetask = zbj_model_api::get('zbj_model_mk_bidmodetask');
        //搜索task数据
        $taskdata = $s_task->get();
        //只有网站建设分类才可以进行需求转换
        $allowcate = array(124,130,152,158,163,166,171,450,463,472,960);
        if(!in_array($taskdata['category2id'],$allowcate)){
        	return $this->printmsg ( "只有开发建站分类才可以进行需求转换", 2, null, $_SERVER ['HTTP_REFERER'] );
        }
        //交易为雇佣或计件不允许转换雇佣mode=11,12,计件mode=10 allot=3
        if($taskdata['mode'] == 11 || $taskdata['mode'] == 12){
        	return $this->printmsg ( "雇佣需求不能进行需求转换", 3, null, $_SERVER ['HTTP_REFERER'] );
        }
        if($taskdata['mode'] == 10 && $taskdata['allot'] >= 2){
        	return $this->printmsg ( "计件或多人中标需求不能进行需求转换", 4, null, $_SERVER ['HTTP_REFERER'] );
        }
        //如果悬赏金额小于10000，提示特殊需求悬赏金额必须小于10000
        //if($taskdata['amount'] < 3000){
         //   return $this->printmsg ( "特殊需求悬赏金额必须大于3000", 5, null, $_SERVER ['HTTP_REFERER'] );
        //}
        //时间截止，状态选标不允许转换需求
        /*
        if(($taskdata['endtime'] > 0 && $taskdata['endtime'] < time()) || $taskdata['state']>=3){
        	return $this->printmsg ( "该状态不允许转换需求", 6, null, $_SERVER ['HTTP_REFERER'] );
        }*/
        //列表一列表二转换
        if(!empty($listno) && $listtype == 1){
	        $item['list_no'] = $listno;
	        $ree = $mkbidmodetask->update(array(
	                                'task_id' => $task_id,
	                                    ), $item);
	        if($re === false){
	       		return $this->printmsg ( "列表转换失败", 7, null, $_SERVER ['HTTP_REFERER'] );
	        }else{
	        	$log = '成功转换为列表'.$listno;
	        	$s_task->addTaskActionLog($log, false);
	        	return $this->printmsg ( "列表转换成功", 7, null, $_SERVER ['HTTP_REFERER'] );
	        }
        }
        //首先查看特殊需求表是否有数据
        $mkbidmodetask->setDbEntry(true);
        $res = $mkbidmodetask->selectOne("task_id={$task_id}");
        //如果投标数量大于等于需要数量时候bid_state = 0
        if($res){
        	$msg = '特殊需求';
        	$item['title'] = $s_task->get('title');
            if($res['mode_type'] == 0){
            	$bidstate = $res['bid_num']<$res['bid_total_num']?1:0;
            	$item['mode_type'] = 1;
            	$item['bid_state'] = $bidstate;
            	//task表1代表关闭
            }else if($list != 1){
            	$item['mode_type'] = 0;
            	$item['bid_state'] = 0;
            	//task表0代表打开
            	$msg = '普通需求';
            }
            $item['list_no'] = $listno;
            $item['datetime'] = time();
            $item['dateymd'] = date('Y-m-d');
            
        	$re = $mkbidmodetask->update(array(
                                'task_id' => $task_id,
                                    ), $item);
        	if($re === false){
        		return $this->printmsg ( "修改特殊需求失败", 7, null, $_SERVER ['HTTP_REFERER'] );
        	}else{
        	    //审核通过
        		$s_task->set('audit_state',1);
        		if($item['mode_type'] == 0 && $list != 1){
        			//cpo_ishide为0时，让它在搜索引擎出现
        			$s_task->set('cpo_ishide',0);
        		}else{
        			$s_task->set('cpo_ishide',1);
        		}
			    $s_task->save();
			    $mdlTask->upTaskSearch($task_id,'U');
			    //更改需求状态记录日志
			    if(empty($listno)){
			        $log = "该需求状态更改为{$msg}";
			    }else{
			    	$log = "该需求状态更改为{$msg}列表{$listno}";
			    }
	        	$s_task->addTaskActionLog($log, false);
        		return $this->printmsg ( $log, 8, null, $_SERVER ['HTTP_REFERER'] );
        	}
        }
        //报名表
        $tasksign = zbj_model_api::get('zbj_model_mk_tasksign');
        $tasksigns = $tasksign->selectOne("task_id={$task_id}");
        //如果已经投过标，则提示无法转换特殊需求
        if($tasksigns){
            return $this->printmsg ( "已经投标的需求无法转换为特殊需求", 9, null, $_SERVER ['HTTP_REFERER'] );
        }

        //确定抢标金额
        if($taskdata['amount']>=0 && $taskdata['amount']<100){
        	$bid_amount = 0.9;
        }elseif($taskdata['amount']>=100 && $taskdata['amount']<500){
        	$bid_amount = 4.9;
        }elseif($taskdata['amount']>=500 && $taskdata['amount']<1000){
        	$bid_amount = 19.9;
        }elseif($taskdata['amount']>=1000 && $taskdata['amount']<3000){
        	$bid_amount = 29;
        }elseif($taskdata['amount']>=3000 && $taskdata['amount']<10000){
        	$bid_amount = 69;
        }elseif($taskdata['amount']>=10000 && $taskdata['amount']<20000){
        	$bid_amount = 99;
        }elseif($taskdata['amount']>=20000 && $taskdata['amount']<30000){
        	$bid_amount = 169;
        }elseif($taskdata['amount']>=30000){
        	$bid_amount = 199;
        }
        //组合特殊任务数据
        $data = array(
                'task_id' => $task_id,
                'user_id' => $taskdata['user_id'],
                'nickname' => $taskdata['nickname'],
                'title' => $taskdata['title'],
                'amount' => $taskdata['amount'],
                'hosted' => $taskdata['hosted'],
                'hosted_amount' => $taskdata['hosted_amount'],
                'category2id' => $taskdata['category2id'],
                'bid_amount' => $bid_amount,
                'list_no' => $listno,
                'bid_total_num' => 3,
                'bid_num' => 0,
                'bid_state' => 1,
                'mode_type' => 1,
                'datetime' => time(),
                'dateymd' => date('Y-m-d', time())
        	);
        $result = $mkbidmodetask->insert($data);
        if($result === false){
        	return $this->printmsg ( "添加特殊需求失败", 10, null, $_SERVER ['HTTP_REFERER'] );
        }
		//如果任务已经审核不进行此操作
		$states = $s_task->get('state');
		//添加特殊需求记录日志
		$log = "该需求被设置为特殊需求列表{$listno}";
    	$s_task->addTaskActionLog($log, false);
        if($states > 1) return $this->printmsg ( $log, 11, null, $_SERVER ['HTTP_REFERER'] );
		if($s_task->get('mode')==13 and $states==1){
			$s_task->checkTaskPub();
		}
		$data = array('cpo_ishide' => 1, 'open_state' => 0, 'audit_state' => 1);
		$params=array();
		$params['isadmin']=1;
		if ($s_task->edit($data,$params) === true) {
			//cpo_ishide为1时，不让它在搜索引擎出现        
        	$mdlTask->upTaskSearch($task_id);

			$s_allot4 = new zbj_service_allot(4);
			$s_allot4->processed($task_id);
			$s_allot4 = new zbj_service_allot(17);
			$s_allot4->processed($task_id);
		} else {
			return $this->printmsg ( $s_task->getError(), 12, null, $_SERVER ['HTTP_REFERER'] );
		}
		//添加特殊需求记录日志
		$log = "{$log},并更新了需求状态";
		$s_task->addTaskActionLog($log, false);
		return $this->printmsg ( $log, 13, null, $_SERVER ['HTTP_REFERER'] );
    }

   


    /**
	 * 特殊需求列表
	 */
    public function pageSpecialneedslist($inPath) {
    	$this->init($inPath);
    	//页数
    	$page = trim(zbj_lib_BaseUtils::getStr($this->url['page'],'int'));
    	$lists['listno'] = $list = trim(zbj_lib_BaseUtils::getStr($this->url['list'],'int'));
        $limit = 40;
        if($list == 1){
            $condition = 'list_no = 1';
        }
        if($list == 2){
            $condition = 'list_no = 2';
        }
        //特殊需求表
        $mkbidmodetask = zbj_model_api::get('zbj_model_mk_bidmodetask');
        $mkbidmodetask->setPage($page);
        $mkbidmodetask->setLimit($limit);
		$mkbidmodetask->setCount(true);
		$lists['list'] = $mkbidmodetask->select($condition,'','','order by dateymd desc')->items;
		$count = count($lists['list']);
		$lists['total'] = $count;
		$lists['pagebar'] = $this->PageBar($count,$limit,$page,$inpath,$style='style5');
        return $this->render('task/Specialneedslist1.html', $lists);

    }

    /**
	 * 修改抢标金额，ajax
	 */
    public function pageModifybidding($inPath) {
    	$this->init($inPath);
    	//任务ID
    	$taskid = trim(zbj_lib_BaseUtils::getStr($this->url['tid'],'int'));
    	$bidamount = trim(zbj_lib_BaseUtils::getStr($_POST['bidamount'],'float'));
    	//投标金额不能小于0
    	if($bidamount <= 0){
    		return $this->printmsg ( '投标金额不能小于0', 2, null, $_SERVER ['HTTP_REFERER'] );
    	}
    	$item['bid_amount'] = $bidamount;
        //特殊需求表
        $mkbidmodetask = zbj_model_api::get('zbj_model_mk_bidmodetask');
        $bidmodetask = $mkbidmodetask->selectOne("task_id={$taskid}");
        if($bidmodetask['bid_num'] != 0){
        	return $this->printmsg ( '投标数量为0,才可以设置投标金额', 2, null, $_SERVER ['HTTP_REFERER'] );
        }
        $re = $mkbidmodetask->update(array(
                                'task_id' => $taskid,
                                    ), $item);
        if($re){
        	return $this->printmsg ( $bidamount, 0, null, $_SERVER ['HTTP_REFERER'] );
        }else{
        	return $this->printmsg ( $bidamount, 1, null, $_SERVER ['HTTP_REFERER'] );
        }
    }

	/**
	 * 获取任务的稿件
	 */
	private function _getWorks($aTask, $limit = 10, $page = 1) {
		$iTaskID = $aTask['task_id'];
		$worksCondition = array('task_id' => $iTaskID);
		$q = trim(zbj_lib_BaseUtils::getStr($_GET ['q']));//输入内容
		$qt = trim(zbj_lib_BaseUtils::getStr($_GET ['qt']));//内容类型
		$s = trim(zbj_lib_BaseUtils::getStr($_GET ['s']));//排序
		$show = trim(zbj_lib_BaseUtils::getStr($this->url ['show']));//搜索类型
		$wtype = (int)$_GET['wtype'];//投标类型
		if($wtype){
			$worksCondition['type'] = $wtype;
		}
		switch ($show) {
			case 'success' :
				$worksCondition['issuccess'] = 1;
				break;
			case 'thk' :///谢谢
				$worksCondition['is_tks'] = 1;
				break;
			case 'noview' ://未审核
				$worksCondition['open_state'] = 0;
				$worksCondition['iseliminate'] = 0;
				$worksCondition['isalternative'] = 0;
				$worksCondition['issuccess'] = 0;
				break;
			case 'all' :
			default:
		}
		switch ($qt) {
			case 1 :
				$worksCondition[] = "works_id = $q";
				break;
			case 2 :
				$info = new zbj_model_mb_info();
				$row = $info->selectOne(array('brandname' => $q), 'user_id');
				if ($row['user_id'] > 0) {
					$worksCondition['user_id'] = $row['user_id'];
				}else{
					$worksCondition[] = "nickname = '$q'";
				}
				break;
			case 3 :
				$worksCondition[] = "content = '$q'";
				break;
		}
		switch ($s) {
			case 1 ://早投标在前
				$orderby = 'order by open_state asc,createtime asc';
				break;
			case 2 ://早投标在后
				$orderby = 'order by open_state asc,createtime desc';
				break;
			case 3 ://能力高在前
				$orderby = 'order by open_state asc,ability desc';
			case 4 ://能力高在前
				$orderby = 'order by open_state asc,isalternative desc,ability desc';
				break;
			default :
			/**
			 * 默认排序规则：
			 * 计件：未操作的在最前面（按时间先后倒序），随后是中标，备选，淘汰
			 * 非计件：中标（按1，2，3等奖排序），备选，未处理（按时间先后倒序），淘汰
			 * isalternative（备选）iseliminate（淘汰）issuccess（中标）
			 */
			if ($aTask['allot'] == 3) { //计件
				$orderby = 'order by open_state asc,isalternative+iseliminate+issuccess asc, issuccess desc,isalternative desc, works_id desc';
			} else {
				$orderby = 'order by open_state asc,issuccess desc, class asc,isalternative desc, iseliminate asc, works_id desc';
			}
		}
		$works = new zbj_model_mk_works();
		$works->setLimit($limit);
		$works->setPage($page);
		$works->setCount(true);
//		define(DEBUG, 1);
		$worksdata = $works->select($worksCondition,'*', '', $orderby);
		$list = $worksdata->items;
		// 从mk_works表中冗余字段files反序列化取出稿件图片与附件
		if ($list) {
			$userinfo = new zbj_model_mb_info();
			$mTasksign = new zbj_model_mk_tasksign();
			$worklistids = array();
			foreach ($list as $key => $val) {
				//用户
				$worklistids[] = $val['works_id'];
				$aUser = $userinfo->selectOne(array('user_id' => $val['user_id']),'ability');
				$list[$key]['userinfo'] = $aUser;
				//
				if($val['option']){
					$list[$key]['option'] = unserialize($val['option']);
				}
				//屏蔽原因
				if ($val['open_state'] == 1) {
					$mCheck = new model_mk_check();
					$oCheck = $mCheck->selectOne(array('pk_id' => $val['works_id']), 'refuse_option,refuse_item_id,cp_name');
					//稿件审核屏蔽原因兼容旧后台 2014-06-18
					if (!empty($oCheck['refuse_item_id'])) {
						$cpoption = new service_cpoption(8);
						$reasons = $cpoption->getItems();
						$refuse_option_reasons = '';
						foreach ($reasons as $k =>$v) {
							if($v['item_id'] == $oCheck['refuse_item_id']){
								$refuse_option_reasons = $v['name'];
								break;
							}
						}
						$list[$key]['refuse_option'] = $refuse_option_reasons;
						$list[$key]['refuse_cp_name'] = $oCheck['cp_name'];
					} else {
						if(!empty($oCheck['refuse_option'])){
							$list[$key]['refuse_option'] = $oCheck['refuse_option'];
							$list[$key]['refuse_cp_name'] = $oCheck['cp_name'];
						}else{
							//从日志中获取稿件审核表意外稿件屏蔽原因
							$m_remark = new model_cp_remark();
							$condition['pk_id'] = $val['works_id'];
							$condition['type_id'] = 3;
							$condition['origin'] = 0;
							$condition['action'] = '/task_shield';
							$items = array('name','content');
							$reasonsremark = $m_remark->selectOne($condition,$items,'',' order by remark_id desc');
							if($reasonsremark) {
								$temp = explode("原因:",$reasonsremark['content']);
								if(count($temp) == 1){
									$temp = explode("原因：",$reasonsremark['content']);
								}
								$item_name = trim(end($temp));
								if($item_name){
									$list[$key]['refuse_option']  = $item_name;
									$list[$key]['refuse_cp_name'] = $reasonsremark['name'];
								}
							}
						}
					}					
				}
				//附件
				if (!empty($val['files'])) {
					$filext = unserialize($val['files']);
					if (!empty($filext)) {
						foreach ($filext as $fval) {
							if (in_array(strtolower($fval['ext']), array('jpg', 'gif', 'jpeg', 'png', 'bmp'))) {
								$list[$key]['img'][] = $fval;
							} else {
								$list[$key]['txt'][] = $fval;
							}
						}
					}
				}
				//
				if ($val['open_state'] == 1) {
					$list[$key]['work_state_class'] = 'luoxuan';
				}else{
					if ($aTask['mode']==10 && $aTask['allot'] == 3) { //合格，不合格
						if ($val['issuccess'] == 1) { //合格
							$list[$key]['work_state_class'] = 'hege';
						} elseif ($val['iseliminate'] == 1) {//不合格
							$list[$key]['work_state_class'] = 'buhege';
						}
					} else {
						if ($val['issuccess'] == 1) { //中标
							if($aTask['allot'] == 2 && $val['is_sysselect'] == 1){
								$list[$key]['work_state_class'] = 'has-select shang';
							}elseif ($aTask['allot'] == 2) {
								$list[$key]['work_state_class'] = 'level' . $val['class'];
							} else {
								$list[$key]['work_state_class'] = 'zhongbiao';
							}
						} elseif ($val['isalternative'] == 1) {//备选
							$list[$key]['work_state_class'] = 'beixuan';
						} elseif ($val['ft_invalid'] == 100) {//服务商放弃
							$list[$key]['work_state_class'] = 'has-select bidfangqi';
						} elseif ($val['iseliminate'] == 1) {//不合格
							$list[$key]['work_state_class'] = 'buhege';
						}
					}
				}
				//操作区
				if($val['issuccess'] == 1 && $aTask['allot'] != 3){
					$list[$key]['successinfo'] = $this->getHandle($val['works_id']);
				}
				//点评
				$comment = new zbj_model_mk_workscomment();
				$list[$key]['wcomment'] = $comment->select(array('works_id' => $val['works_id']))->items;
				//主动抢单或官方派单
				if ($list[$key]['isgold'] == 1) {
					$oTasksign = $mTasksign->selectOne(array('task_id' => $val['task_id'], 'user_id' => $val['user_id']));
					$list[$key]['isinvite'] = $oTasksign['isinvite'];
				}
			}
		}
		//加载交易合同信息
		$agreementlist = $this->getWorksAgreementList($iTaskID,$worklistids);

		if(!empty($list)){
			foreach ($list as $key => $value) {
				$list[$key]['workagreement'] = $agreementlist[$value['works_id']];
			}
		}
		$worksdata->items = $list;
		return $worksdata;
	}
	
	/**
	 * 非计件中标稿件操作区
	 */
	function getHandle($works_id){
		$srvWork = new zbj_service_works($works_id);
		if ($srvWork->get('is_sysselect') > 0) {
			return '';
		}
		$limit = 20;
		$page = 1;
		if (!$this->_userid)
			return '';
		if ($srvWork->get('issuccess') != 1) {
			return '';
		}
		$srvTask = new zbj_service_task($srvWork->get('task_id'), 'free');
		$srvTask = $srvTask->init();
		$works_id = $srvWork->get("works_id");
		$model = new zbj_model_mk_workssourcelog ();
		$condi = "type in (2,4,5) and works_id={$works_id}";
		$model->setLimit($limit);
		$model->setPage($page);
		$model->setCount(true);
		$log = $model->select($condi, "", "", "order by sourcelog_id desc");
		$params['log'] = $log->items;
		if ($params['log']) {
			foreach ($params['log'] as $k => $v) {
				$params['log'][$k]['content'] = unserialize($v['content']);
			}
		}
		$params['iden'] = 2;
		$params['count'] = $log->totalSize;
		$params['taskID'] = $srvWork->get('task_id');
		$params['worksID'] = $works_id;
		$params['works'] = $srvWork->get();
		$params['task'] = $srvTask->get();
		return $this->render("task/viewpart/worksloginfo.html", $params);
	}
	
	/**
	 * 增值服务
	 */
	private function _getTops($aTask){
		$mdl_taskpaidlisting = new zbj_model_mk_taskpaidlisting();
		$get_top = $mdl_taskpaidlisting->select(array('task_id' => $aTask['task_id'], '(state = 1 OR refund_state = 1 AND (state = 0 AND start_time > 0))'))->items;
		
		if($get_top){
			$guide_srv = new zbj_service_categoryguide();
			$guide_id = $guide_srv->getGuideId($aTask['category_id']);
			$guide_category = $guide_srv->getGuideCategoryById($guide_id);
			foreach ($get_top as $key => $value) {
				if ( in_array($value['tag_id'],array(24245,24246)) ) {
					$srv_tag = new zbj_service_tag($value['tag_id']);
					$tag = $srv_tag->get();
					$paid_listing_fee = $srv_tag->getPaidListFee();
					$erliest_time = $srv_tag->getErliestPaidListingTime($left_num);
					if ($erliest_time > $this->_time) {
						$explain = '现在购买' . zbj_lib_BaseUtils::intervalTime2str($erliest_time - $this->_time, $accuracy = "hour") . '后置顶';
					} else {
						$explain = '立刻开始（剩余' . $left_num . '个位置）';
					}
					
					$get_top[$key]['totalamount'] = floor($paid_listing_fee * $value['day']);
					$get_top[$key]['tag_name'] = $tag['tag_name'];
					$get_top[$key]['unitprice'] = $paid_listing_fee;
					$get_top[$key]['follow_num'] = $tag['follow_num'];
					$get_top[$key]['explain'] = $explain;
				} else {
//					$srv_vir = new zbj_service_categoryvirtual($value['tag_id']);
//					$tag = $srv_vir->get();
//					$paid_listing_fee = $srv_vir->getCategoryPaidListFee();
//					$left_num = $srv_vir->getEarliestTopListingTime(0, $earliest_time);
					$guide_srv = new zbj_service_categoryguide($value['tag_id']);
					$tag = $guide_srv->get();
					$is_cross = $guide_srv->isCrossCategory($guide_id, $value['tag_id']);
					$paid_listing_fee = $guide_srv->getCategoryPaidListFee();
					if($is_cross['extra_category'] == 1){
						if($paid_listing_fee == 1){
							$paid_listing_fee = 5;
						}
						$paid_listing_fee = $paid_listing_fee + 0.2*$guide_category['paid_listing_fee'];
					}
					$left_num = $guide_srv->getEarliestTopListingTime(0, $earliest_time);
					if ($earliest_time > $this->_time) {
						$explain = '现在购买' . zbj_lib_BaseUtils::intervalTime2str($erliest_time - $this->_time, $accuracy = "hour") . '后置顶';
					} else {
						$explain = '立刻开始（剩余' . $left_num . '个位置）';
					}
					
					if ( $value['day'] >=3 && $value['day'] <= 6 ) {
						$rate = 0.9;
					} elseif ( $value['day'] >= 7 ) {
						$rate = 0.8;
					} else {
						$rate = 1;
					}

					if ( $value['tag_id'] == 1000459 ) {
						$link = zbj_lib_Constant::TASK_URL."/xuqiu/";
						$get_top[$key]['tag_name'] = '需求大厅';
					} else {
						if ( $tag['level'] == 2 ) {
							$link = zbj_lib_Constant::TASK_URL."/t-".$tag['cndir']."/";
						} else {
							$guide_srv->setId($tag['parent_id']);
							$link = zbj_lib_Constant::TASK_URL."/t-".$guide_srv->get('cndir')."/".$tag['cndir']."/";
						}
						$get_top[$key]['tag_name'] = $tag['guide_name'];
					}
					$get_top[$key]['totalamount'] = floor($paid_listing_fee * $value['day'] * $rate);
					$get_top[$key]['unitprice'] = number_format($paid_listing_fee, 2);
					$get_top[$key]['follow_num'] = $tag['follow_num'];
					$get_top[$key]['explain'] = $explain;
					$get_top[$key]['link'] = $link;
				}
				
			}
		}
		return $get_top;
	}
	
	/**
	 * 获取推荐服务商状态
	 */
	private function _getRecommend($task_id) {
		$page = 1;
		$limit = 2;
		$orderby = "order by operatetime desc";
		$action = service_recommend::getType();
		$mRecommend = new zbj_model_mk_recommend();
		//手动派单
		$mRecommend->setLimit($limit);
		$mRecommend->setPage($page);
		$mRecommend->setCount(false);
		$manual = $mRecommend->select(array('task_id' => $task_id, 'is_sys' => 0), '*', null, $orderby)->items;
		if ($manual) {
			$sLog = new service_log();
			foreach ($manual as $key => $value) {
				$user_id = $value['user_id'];
				//评价
				$remark = $sLog->getUserLastRemark($user_id, 2);
				$manual[$key]['remark'] = $remark['content'];
				//联系方式
				$sUser = new service_user($user_id);
				$manual[$key]['mobile'] = $sUser->getMobile();
				$manual[$key]['qq'] = $sUser->getQQ();
				//
				$manual[$key]['action'] = $action[$value['action_type']];
				$sRecommend = new service_recommend($user_id, $task_id);
				switch ($value['action_type']) {
					case 2://已投标
						$oWorks = $sRecommend->getWorks();
						switch ($oWorks['works_source']) {
							case 0:
								$manual[$key]['source'] = '网页';
								break;
							case 1:
								$manual[$key]['source'] = '标准版APP';
								break;
							case 4:
								$manual[$key]['source'] = '服务商版APP';
								break;
							default:
								$manual[$key]['source'] = '其它';
								break;
						}
						break;
					case 6://服务商放弃
						$manual[$key]['reason'] = $sRecommend->getGiveUpReason();//放弃原因
						break;
				}
			}
		}
		$params['recommend']['manual'] = $manual;
		//手动派单统计
		$oRecommend = $mRecommend->selectOne(array('task_id' => $task_id, 'is_sys' => 0), "action_type,count(*) num", "group by action_type");
		$params['recommend']['manual_sum'] = lib_BaseUtils::array_changekey($oRecommend, 'action_type');
		//系统派单
		$mRecommend->setLimit($limit);
		$mRecommend->setPage($page);
		$mRecommend->setCount(false);
		$sys = $mRecommend->select(array('task_id' => $task_id, 'is_sys' => 1), '*', null, $orderby)->items;
		if ($sys) {
			$sLog = new service_log();
			foreach ($sys as $key => $value) {
				$user_id = $value['user_id'];
				//评价
				$remark = $sLog->getUserLastRemark($user_id, 2);
				$sys[$key]['remark'] = $remark['content'];
				//联系方式
				$sUser = new service_user($user_id);
				$sys[$key]['mobile'] = $sUser->getMobile();
				$sys[$key]['qq'] = $sUser->getQQ();
				//
				$sys[$key]['action'] = $action[$value['action_type']];
				$sRecommend = new service_recommend($user_id, $task_id);
				switch ($value['action_type']) {
					case 2://已投标
						$oWorks = $sRecommend->getWorks();
						switch ($oWorks['works_source']) {
							case 0:
								$manual[$key]['source'] = '网页';
								break;
							case 1:
								$manual[$key]['source'] = '标准版APP';
								break;
							case 4:
								$manual[$key]['source'] = '服务商版APP';
								break;
							default:
								$manual[$key]['source'] = '其它';
								break;
						}
						break;
					case 6://服务商放弃
						$manual[$key]['reason'] = $sRecommend->getGiveUpReason();//放弃原因
						break;
				}
			}
		}
		$params['recommend']['sys'] = $sys;
		//系统派单统计
		$oRecommend = $mRecommend->selectOne(array('task_id' => $task_id, 'is_sys' => 1), "action_type,count(*) num", "group by action_type");
		$params['recommend']['sys_sum'] = lib_BaseUtils::array_changekey($oRecommend, 'action_type');
		//是否开启自动派单
		$m_recommend_option = new model_mk_recommendoption($task_id);
		$params['recommend']['auto_recommend'] = $m_recommend_option->selectOne(array('task_id' => $task_id));
//		$params['recommend']['auto_recommend_categories'] = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 471);
		
		return $params;
	}
	/**
	 * 获取备注
	 */
	private function _getRemark($task_id) {
		$rt = (int) $_GET['rt'];
		$limit = 20;
		$page = isset($this->url['page']) ? (int) $this->url['page'] : 1;
		if ($rt == 6) {//历史
			$m_actionlog = new zbj_model_cp_actionlog();
			$m_actionlog->setLimit($limit);
			$m_actionlog->setPage($page);
			$m_actionlog->setCount(true);
			$condition['task_id'] = $task_id;
			$actionlog = $m_actionlog->select($condition); // 未付
			if (is_array($actionlog->items)) {
				foreach ($actionlog->items as $k => $v) {
					if ($v ['options']) {
						$tmp = unserialize($v ['options']);
						if ($tmp ['files']) {
							foreach (explode('-,', $tmp ['files']) as $v2) {
								if (!trim($v2)) {
									continue;
								}
								$actionlog->items [$k] ['files'] [] = unserialize($v2);
							}
						}
						unset($tmp);
					}
				}
			}
			return $actionlog;
		} else {
			$mRemark = new zbj_model_cp_remark();
			$mRemark->setLimit($limit);
			$mRemark->setPage($page);
			$mRemark->setCount(true);
			$condition['pk_id'] = $task_id;
			$condition['type_id'] = 1;
			switch ($rt) {
				case 1://跟进
					$condition[] = "action in ('/task_ajax/taskajax_effectprotection','/task_ajax/taskajax_follow')";
					break;
				case 2://系统
					$condition['is_log'] = 1;
					break;
				case 3://工单
					$condition['action'] = '/misc_orderadd';
					break;
				case 4://服务
					$condition['remark_catalog'] = 3;
					break;
				case 5://手动
					$condition['is_log'] = 0;
					break;
				default://全部
					break;
			}
		}
		$remarklist = $mRemark->select($condition, '*', '', 'order by remark_id desc');
		if ($remarklist->items) {
			foreach ($remarklist->items as $key => $value) {
				//附件
				if ($value['attachment']) {
					$remarklist->items[$key]['files'] = json_decode($value['attachment'], TRUE);
				} else {
					$remarklist->items[$key]['files'] = array();
				}
				unset($remarklist->items['attachment']);
				//冗余
				$remarklist->items[$key]['option'] = json_decode($value['option'], true);
				//查看服务记录
				if (in_array($value['action'], array('/yunkefu_singleverify'))) {
					preg_match_all("/服务记录\[(.*)\]/", $value['content'], $matches);
					$remarklist->items[$key]['match_record_id'] = $matches[1][0];
				}
			}
		}
		return $remarklist;
	}

	/**
	 * 是否有权关闭、冻结需求
	 */
	private function _allowClose($manager_id){
		if(!$manager_id){
			return true;
		}
		$cpuser = new zbj_model_cp_user($this->_userid);
		$isleader = $cpuser->getData('isleader');
		if ($isleader == 0) {
			$cpuser = new zbj_model_cp_user($manager_id);
			$group_id = $cpuser->getData('group_id');
			if (204 == $this->_userid) {//顾留中
				return true;
			}
			if ($group_id == $this->_usergroupid) {//同组
				return true;
			}
			if ($this->_usergroupid == 125) {//服务一部都显示
				return true;
			}
			if ($this->_usergroupid == 249) {//服务二部都显示
				return true;
			}
			//杜春永负责已经改做别的需求，不再做任务处理
// 			$cache = new zbj_lib_cache('memcache');
// 			$cachename = "cp_task_allowclose";
// 			$groups = $cache->get($cachename);
// 			if (!$groups) {
// 				$cpgroups = new zbj_model_cp_usergroups();
// 				$list = $cpgroups->select("pid=42 and group_id!=71")->items;
// 				if (is_array($list)) {
// 					foreach ($list as $value) {
// 						$groups[] = $value['group_id'];
// 					}
// 					$cache->set($cachename, $groups, 3600);
// 				}  else {
// 					$groups = array();
// 				}
// 			}
// 			if (in_array($group_id, $groups)) {//属于用户满意中心
// 				return false;
// 			} else {
// 				return true;
// 			}
		}
		return true;
	}

	/**
	 * 编辑稿件
	 */
	public function pageEditWorks($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$works_id = zbj_lib_BaseUtils::getStr($urlParam['wid'], 'int');
		$m_works = new zbj_model_mk_works();
		$works = $m_works->selectOne(array('works_id'=>$works_id), 'content');
		$param = array();
		$param['works'] = $works;
		$param['wid'] = $works_id;
		if (count($_POST)) {
			$works_id = zbj_lib_BaseUtils::getStr($_POST['wid'], 'int', 0);
			if (!$works_id) {
				return $this->printmsg('稿件id不合法！', 2);
			}
			$content = zbj_lib_BaseUtils::getStr($_POST['content']);
			if (!$content) {
				return $this->printmsg('稿件内容不能为空！', 2, 'content');
			}
			if($m_works->update(array('works_id'=>$works_id), array('content'=>$content))) {
				return $this->printmsg('操作成功', 2, null, $_SERVER['HTTP_REFERER']);
			}else{
				return $this->printmsg('操作失败！');
			}
		}
		return $this->render('task/ajax/editworks.dialog.html', $param);
	}
	/**
	 * 异步请求数据相关(调用数据)
	 */
	function pageajax($inPath){
		$this->init($inPath);

		//权限检查在这里
		if(!service_rcba::checkAnAccess('task','ajax',$this->url['ac'],'cp')){//有权限
			if(count($_POST)){
				return $this->printmsg('你没有权限',0);
			}else{
				return '你没有权限';
			}
		}
		$s_task = new zbj_service_task($this->url['id']);
		$s_task = $s_task->init();
		if($s_task->get('mode')==13){
			$ajaxObj = new controller_task_newbidajax();
		}else{
			$ajaxObj = new controller_task_taskajax();
		}
		if(!method_exists($ajaxObj, $this->url['ac'])){
			if(count($_POST)){
				return $this->printmsg('未调用接口',0);
			}else{
				return '未调用接口';
			}
		}
		return $ajaxObj->{$this->url['ac']}($this->url);
	}
	/**
	 * 需求操作相关
	 */
	function pagehandle($inPath){
		$this->init($inPath);
		//权限检查在这里
		if(!service_rcba::checkAnAccess('task','handle',$this->url['ac'],'CP')){//有权限
			if(count($_POST)){
				return $this->printmsg('你没有权限',0);
			}else{
				return '你没有权限';
			}
		}		
		$srvTask = new zbj_service_task($this->url['tid']);
		$srvTask = $srvTask->init();
		$mode =  $srvTask->get('mode');
		if($mode == 10){
			$handleObj = new controller_task_freehandle();
		}elseif($mode == 11){//mode 待定
			$handleObj = new controller_task_buyhandle();
		}elseif($mode == 12){//mode 待定
			$handleObj = new controller_task_buyhandle();
		}elseif($mode == 13){//mode 待定
			$handleObj = new controller_task_freehandle();
		}else{
			if(count($_POST)){
				return $this->printmsg('任务模式不支持',0);
			}else{
				return '任务模式不支持';
			}
		}
		if(!method_exists($handleObj, $this->url['ac'])){
			if(count($_POST)){
				return $this->printmsg('该模式下不支持',0);
			}else{
				return '该模式下不支持';
			}
		}
		return $handleObj->{$this->url['ac']}($this->url);
	}
	
	/**
	 * 屏蔽当前稿件或用户的稿件,评论,点评
	 */
	public function pageShield($inPath) {
		
		if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
		$urlparams = $this->getUrlParams($inPath);
		$wid = zbj_lib_BaseUtils::getStr($urlparams['wid'], 'int');//稿件编号
		$tcid = zbj_lib_BaseUtils::getStr($urlparams['tcid'], 'int');//评论编号
		$wcid = zbj_lib_BaseUtils::getStr($urlparams['wcid'], 'int');//点评编号
		if (!$wid && !$tcid && !$wcid) {
			return '缺少参数';
		}

		if (!count($_POST)) {
			$params['wid'] = $wid;
			$params['tcid'] = $tcid;
			$params['wcid'] = $wcid;
			
			//屏蔽原因
			$cpoption = new service_cpoption(8);
			$params['reasons'] = $cpoption->getItems();
			
			return $this->render('task/ajax/shield.dialog.html', $params);
		}
		//屏蔽原因
		$refuse_type = $_POST['refuse_type']; 
		if (!$refuse_type) {
			return $this->printmsg('请选择屏蔽原因', 0);
		}
		//用户自定义屏蔽原因
		$refuse_desc = trim(lib_BaseUtils::getStr($_POST['refuse_desc']));
		$optionitem = new model_cp_optionitem();
		$options = $optionitem->selectOne('item_id in ('. implode(',', $refuse_type) . ')', 'item_id,`name`');
		
		$reson = '';
		$reson_item_id = $options['item_id'] ;
		
		if ($options['name'] == '其他') {
			$reson .= $refuse_desc;
		} else {
			$reson .= $options['name'];
		}

		$type = !empty($_POST['shieldcurr']) ? $_POST['shieldcurr'] : $_POST['shieldta'] ;
		
		$shieldother = !empty($_POST['shieldother']) ? $_POST['shieldother'] : $_POST['shieldother'] ;
		
		//$islock = (int) $_POST['islock'];
		
		$msg = '';
		if ($type) {
			$uid = 0;
			if($wid){
				$mWorks = new zbj_model_mk_works($wid);
				$uid = $mWorks->getData('user_id');
			}elseif($tcid){
				$mComment = new zbj_model_mk_taskcomment($tcid);
				$uid = $mComment->getData('user_id');
			}elseif($wcid){
				$mComment = new zbj_model_mk_workscomment($wcid);
				$uid = $mComment->getData('user_id');
			}
			$m_exam = new model_mb_creditexam();
			$condition = array();
			$condition['user_id'] = $uid;
			$condition['ispass'] = 1;
			$examinfo = $m_exam->selectOne($condition,"updatetime");
			
			foreach ($type as $t) {
					switch ((int) $t) {
						case 1://待审核点评
							$mComment = new zbj_model_mk_workscomment();
							$clist = $mComment->select(array('user_id' => $uid, 'state' => 0),'comment_id')->items;
							//屏蔽原因
							$m_item = new model_cp_optionitem();
							$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
							$refuse_type = array($row['item_id']);
							$allnum = 0;
							$snum = 0;
							if ($clist) {
								$allnum = count($clist);
								$sWorksComment = new service_workscomment();
								foreach ($clist as $value) {
									if ($sWorksComment->shieldComment($value['comment_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
										$snum++;
									}
								}
							}
							$msg .= "需屏蔽{$allnum}条稿件点评，成功了{$snum}条;";
							break;
						case 2://待审核投标
							$mWorks = new zbj_model_mk_works();
							$wlist = $mWorks->select(array('user_id' => $uid, 'open_state' => 0),'works_id,createtime')->items;
							$allnum = 0;
							$snum = 0;
							if ($wlist) {
								$allnum = count($wlist);
								$sWorks = new service_works();
								foreach ($wlist as $value) {
									if ($sWorks->shieldWorks($value['works_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
										//屏蔽扣分处理
										$user = new zbj_service_user($uid);
										$point = $user->getCredit();
										if (!$examinfo) {
											if($point > 20) {
												if (691 != $reson_item_id) {//虚假报价不扣分
													$user->deduceCredit('稿件审核扣分:'.$reson.'稿件ID:'.$value['works_id'], 1, $this->_userid);
												}
											}
										}else{
											if ($examinfo['updatetime'] <= $value['createtime'] && $point > 20) {
												if (691 != $reson_item_id) {//虚假报价不扣分
													$user->deduceCredit('稿件审核扣分:'.$reson.'稿件ID:'.$value['works_id'], 1, $this->_userid);
												}
											}
										}
										//扣分处理完毕
										$snum++;
									}
								}
							}
							$msg .= "需屏蔽{$allnum}条稿件，成功了{$snum}条;";
							break;
						case 99://当前投标
							$sWorks = new service_works($wid);
							if(!$sWorks->shieldWorks($wid, $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)){
								$msg .= "屏蔽当前稿件失败;".$sWorks->getError();
							} else {
								//屏蔽扣分处理
								$user = new zbj_service_user($uid);
								$point = $user->getCredit();
							if (! $examinfo) {
								if ($point > 20) {
									if (691 != $reson_item_id) {//虚假报价不扣分
										$user->deduceCredit ( '稿件审核扣分:' . $reson . '稿件ID:' . $sWorks->get('works_id'), 1, $this->_userid );
									}
								}
							} else {
								if ($examinfo ['updatetime'] <= $sWorks->get('createtime') && $point > 20) {
									if (691 != $reson_item_id) {//虚假报价不扣分	
										$user->deduceCredit ( '稿件审核扣分:' . $reson . '稿件ID:' . $sWorks->get('works_id'), 1, $this->_userid );
									}
								}
							}
								//加入黑名单处理
								if(!empty($shieldother)){
									foreach ($shieldother as $value) {
										switch ($value) {
											//用户加入黑名单
											case 2:
												$s_work = new zbj_service_works($wid);
												$mCheck = new model_mk_checkuserblack();
												$worksblack = array(
														'user_id'	=>	$s_work->get('user_id'),
														'nickname'	=>	$s_work->get('nickname'),
														'worksnums'	=>	'1',
														'creteymd'	=>	date("Y-m-d",time()),
														'cretetime'	=>	time(),
														'lastupdate'=>	date("Y-m-d",time()+1296000),
														'lastuptime'=>	time()+1296000
												);
												$mCheck->insert($worksblack);
												break;
											//稿件加入黑名单	
											case 3:
												$sWorks = new zbj_service_works($wid);
												$sWorks->addBlacklist(1, $this->_userid, $this->_nickname, $reson);
												break;
										}	
									}
								}
								//扣分处理完毕
								$msg .= "屏蔽当前稿件成功;";
							}
							break;
					
					
					/*
					case 1://稿件
						$mWorks = new zbj_model_mk_works();
						$wlist = $mWorks->select(array('user_id' => $uid, 'open_state' => 0),'works_id')->items;
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '8', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						$allnum = 0;
						$snum = 0;
						if ($wlist) {
							$allnum = count($wlist);
							$sWorks = new service_works();
							foreach ($wlist as $value) {
								if ($sWorks->shieldWorks($value['works_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
									$snum++;
								}
							}
						}
						$msg .= "需屏蔽{$allnum}条稿件，成功了{$snum}条;";
						break;
					case 2://任务评论
						$mComment = new zbj_model_mk_taskcomment();
						$clist = $mComment->select(array('user_id' => $uid, 'state' => 0),'comment_id')->items;
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						$allnum = 0;
						$snum = 0;
						if ($clist) {
							$allnum = count($clist);
							$sTaskComment = new service_taskcomment();
							foreach ($clist as $value) {
								if ($sTaskComment->shieldComment($value['comment_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
									$snum++;
								}
							}
						}
						$msg .= "需屏蔽{$allnum}条任务评论，成功了{$snum}条;";
					case 3://稿件点评
						$mComment = new zbj_model_mk_workscomment();
						$clist = $mComment->select(array('user_id' => $uid, 'state' => 0),'comment_id')->items;
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						$allnum = 0;
						$snum = 0;
						if ($clist) {
							$allnum = count($clist);
							$sWorksComment = new service_workscomment();
							foreach ($clist as $value) {
								if ($sWorksComment->shieldComment($value['comment_id'], $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
									$snum++;
								}
							}
						}
						$msg .= "需屏蔽{$allnum}条稿件点评，成功了{$snum}条;";
						break;
					case 99://当前稿件
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '8', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						//
						$sWorks = new service_works();
						if(!$sWorks->shieldWorks($wid, $this->_userid, $this->_nickname, $refuse_type, $reson)){
							$msg .= "屏蔽当前稿件失败;";
						}else{
							$msg .= "屏蔽当前稿件成功;";
						}
						break;
					case 96://当前评论
						if (!$tcid) {
							break;
						}
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						//
						$sTaskComment = new service_taskcomment();
						if ($sTaskComment->shieldComment($tcid, $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
							$msg .= "屏蔽当前评论失败;";
						}else{
							$msg .= "屏蔽当前评论成功;";
						}
						break;
					case 97://当前点评
						if (!$wcid) {
							break;
						}
						//屏蔽原因
						$m_item = new model_cp_optionitem();
						$row = $m_item->selectOne(array('option_id' => '7', 'name' => '其他'));
						$refuse_type = array($row['item_id']);
						//
						$sWorksComment = new service_workscomment();
						if ($sWorksComment->shieldComment($wcid, $this->_userid, $this->_nickname, $refuse_type, $refuse_desc)) {
							$msg .= "屏蔽当前点评失败;";
						}else{
							$msg .= "屏蔽当前点评成功;";
						}
						break;
						*/
				}
			}
		}
		/*
		if($islock){
			$s_user = new zbj_service_user($uid);
			if($s_user->lock(0)){
				$s_user->addUserLog("永久锁定用户。原因：$refuse_desc", 0, '', '', '', 0, $this->_userid);
				//添加后台操作日志
				$this->addLog($uid, "{$this->_nickname}[{$this->_userid}]永久锁定用户[$uid],原因：$refuse_desc", 'user');
			}
			$msg .='已经永久锁定用户';
		}*/
		return $this->printmsg($msg, 1, null, $_SERVER ['HTTP_REFERER']);
	}

	/**
	 * 解除稿件的屏蔽
	 */
	public function pageUnShieldWorks($inPath){
		if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
		$urlparams = $this->getUrlParams($inPath);
		$wid = zbj_lib_BaseUtils::getStr($urlparams['wid'], 'int');//稿件编号
		if(!$wid){
			return $this->printmsg('缺少参数', 0);
		}
		$sWorks = new service_works();
		if (!$sWorks->unShieldWorks($wid, $this->_userid,  $this->_nickname)) {
			return $this->printmsg('解除稿件屏蔽失败，原因：' . $sWorks->getError(), 0);
		}
		return $this->printmsg('解除稿件屏蔽成功', 1, null, $_SERVER ['HTTP_REFERER']);
	}
	/**
	 * 客服老任务功能冻结任务
	 * 
	 * @param unknown $inPath        	
	 */
	public function pagefrozen($inPath) {
		if (! zbj_lib_BaseUtils::isAjax ()) {
			return $this->render ( 'task/frozen.html', $this->tplvar );
		}
		$_POST ['task_id'] = zbj_lib_BaseUtils::getStr ( $_POST ['task_id'], 'int' );
		if ($_POST ['task_id'] <= 0) {
			return $this->printmsg ( "请输入需求流水号", 0, 'task_id' );
		}
		$s_task = new zbj_service_task ( $_POST ['task_id'] );
		$s_task = $s_task->init ();
		if (! count ( $s_task->get () )) {
			return $this->printmsg ( "需求不存在，请检查是否是需求流水号填写错了，早期需求号和需求流水号不一样？", 0, 'task_id' );
		}
		if (isset ( $_REQUEST ['isfrozen'] )) {
			$dostr = $_REQUEST ['isfrozen'] ? '冻结' : '解除冻结';
			$s_task->set ( 'isfrozen', $_REQUEST ['isfrozen'] ? 1 : 0 );
		} else {
			return $this->printmsg ( "请选择操作类型？", 0, 'isfrozen' );
		}
		if ($s_task->save ()) {
			$s_task->addTaskActionLog ( $this->_nickname . '设置任务冻结状态为:' . $dostr, false );
			return $this->printmsg ( '设置成功。' );
		} else {
			return $this->printmsg ( '设置失败，原因:' . $s_task->getError () );
		}
	}

	/**
	 * 任务稿件列表
	 *
	 */
	public function pageWorksList($inPath){
		$tid = (int)$_GET['tid'];
		if(empty($tid))exit('not task id');

		$page = intval($_GET['page']);
		$page = $page > 0 ? $page : 1;
		$limit=4000;

		$condition["task_id"] = $tid;
		$condition["open_state"] = 0;

		$mdl = zbj_model_api::get('zbj_model_mk_works');
		$mdl->setCount(true);
		$mdl->setPage($page);
		$mdl->setLimit($limit);
		$orderby = 'ORDER BY works_id DESC';
		$list = $mdl->select($condition, '*', '', $orderby);

		//稿件附件处理
		if ($list->items){
			foreach ($list->items as $key=>$value){
				$list->items[$key]['option_arr'] = unserialize($value['option']);
				$works_files = unserialize(stripcslashes($value["files"]));
				if ($works_files){
					foreach ($works_files as $k => $v){
						if (in_array(strtolower($v["ext"]),array("jpg","gif","png","jpeg"))){
							$list->items[$key][file_img][] = $works_files[$k];
						} else {
							$list->items[$key][file_other][] = $works_files[$k];
						}
					}
				}
			}
		}
		//var_dump($list);

		$params["list"] = $list->items;
		$params['pagebar']=$this->PageBar($list->totalSize, $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
		return $this->render("task/workslist.html", $params);
	}

	private function changeNum($i){
		$array = array('零', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十');
		if(array_key_exists($i, $array)){
			return $array[$i];
		}else{
			return $i;
		}
	}
	/*
	 * 云客服需求列表
	 * 1．每天上午8点筛选昨天晚上12点到昨天中午12点的数据
	 * 2. 每天中午12点筛选昨天中午12点到昨天12点的数据
	 * 需求发布未托管的、未建工单的。
	 */
	public function pageYunTaskList(){
		return '功能停用';
		if($_REQUEST['debug']){
			define('DEBUG', true);
		}
		$starttime='2014-01-09';
		//conditionFree
		$conditionFree=array(
// 				'mode'=>10,
				'amount=0',					
				'state =2',
				'open_state'=>0,		
				"createymd>='$starttime'",
				'm_is_at!=3',
				'expriestime'=>0,
				'giveup_option!=0 and giveup_option!=233 and giveup_option!=309',
				'giveup_option not in (235,233,237)',
				'isfrozen'=>0,
				'ht'=>0		
		);
		//$conditionPay付费委托管
		$conditionPay=array(
// 				'mode'=>10,
				'amount>0',	
				'hosted_amount<=0',				
				'state <= 2',
				'open_state'=>0,		
				"createymd>='$starttime'",
				'm_is_at!=3',
				'expriestime'=>0,
				'giveup_option!=0 and giveup_option!=233  and giveup_option!=309',
				'giveup_option not in (235,233,237)',
				'isfrozen'=>0,
				'ht'=>0
		);
		//$conditionPay异常无进展
		/**
		 * 其他需求（超期未处理，异常降级，长期无进展）在进入公海24小时候后，
		 * 如果无其他交易顾问认领，交由云客服处理。
		 */
		$conditionexceptional=array(
// 				'mode'=>10,
				'state = 2 ',
				'open_state'=>0,		
				"createymd>='$starttime'",
				'issea=2',
// 				'inseatime'=>date('Y-m-d',time()-86400),
 				'inseatime'=>time()-43200,
				'isfrozen'=>0,
				'm_is_at!=3',
				'giveup_option!=309',
				'giveup_option not in (235,233,237)',
				'ht'=>0
				
		);
		//conditionFree所有资源库
		$condition100=array(
// 				'amount<100',
// 				'state=2',
				'open_state'=>0,
				"createymd>='$starttime'",
				'm_is_at'=>2,
				'isfrozen'=>0,
				'audit_state'=>1,
				"createymd<='" . date ( 'Y-m-d', time () - 86400 ) . "'",
// 				'giveup_option not in (235,233,237)',
				'ht'=>0
// 				'giveup_option!=233  and giveup_option!=309',
		);
		//condition挑战任务包含放弃
		$conditiongiveup309=array(
				'state=2',
				'open_state'=>0,
				"createymd>='$starttime'",
				'giveup_option'=>309,
				'm_is_at!=3',
				"giveupymd<='".date('Y-m-d',time()-172800)."'",
				'giveup_option not in (235,233,237)',
				'ht'=>0
		);
		$mdlTask=zbj_model_api::get('zbj_model_mk_task');
		$mdlTaskopis=zbj_model_api::get('zbj_model_mk_taskopis');
		$mdlTask->setLimit(5000);
		$leftjoin=array('mk_task_info'=>'mk_task_info.task_id=mk_task.task_id',
						'mk_task_opis'=>'mk_task.task_id=mk_task_opis.task_id',
						'mk_follow'=>'mk_task.task_id=mk_follow.task_id',
						'mk_task_cont'=>'mk_task.task_id=mk_task_cont.task_id');
		$oFree = $mdlTask->select($conditionFree," '放弃需求' as type,mk_task.task_id,title,nickname,user_id,amount,createtime,provice_name,city_name,area_name,content",'','order by mk_task.task_id desc',$leftjoin);			
		$oPay = $mdlTask->select($conditionPay," '公海需求' as type,mk_task.task_id,title,nickname,user_id,amount,createtime,provice_name,city_name,area_name,content",'','order by mk_task.task_id desc',$leftjoin);			
		$oexceptional = $mdlTask->select($conditionexceptional,'mk_task.task_id,title,nickname,user_id,amount,createtime,provice_name,city_name,area_name,content','','order by mk_task.task_id desc',$leftjoin);
		$o100 = $mdlTask->select($condition100," '百元以下新需求' as type,mk_task.task_id,title,nickname,user_id,amount,createtime,provice_name,city_name,area_name,content",'','order by mk_task.task_id desc',$leftjoin);			
		$ogiveup309 = $mdlTask->select($conditiongiveup309," '挑战任务' as type,mk_task.task_id,title,nickname,user_id,amount,createtime,provice_name,city_name,area_name,content",'','order by mk_task.task_id desc',$leftjoin);			
		$aFree=$oFree->items;
		$aPay = $oPay->items;
		$aexceptional=$oexceptional->items;
		$a100=$o100->items;
		$agiveupoption=$ogiveup309->items;
// 		$aList=array_merge($aPay,$aFree,$a100,$aexceptional,$agiveupoption);
		$aList=array();
		foreach ($aPay as $val){
			if($aList[$val['task_id']]){
				continue;
			}
			$aList[$val['task_id']]=$val;
		}
		foreach ($aFree as $val){
			if($aList[$val['task_id']]){
				continue;
			}
			$aList[$val['task_id']]=$val;
		}
		foreach ($a100 as $val){
			if($aList[$val['task_id']]){
				continue;
			}
			$aList[$val['task_id']]=$val;
		}
		foreach ($aexceptional as $val){
			if($aList[$val['task_id']]){
				continue;
			}
			$aList[$val['task_id']]=$val;
		}
		foreach ($agiveupoption as $val){
			if($aList[$val['task_id']]){
				continue;
			}
			$aList[$val['task_id']]=$val;
		}
		if($_REQUEST['debug']){
			var_dump($aList);
		}
		$aUids=array();
		if ($aList){
			foreach ($aList as $v){
				$this->addLog($v['task_id'],'云客服已处理');
				$mdlTaskopis->setPkid($v['task_id']);
				$mdlTaskopis->set('cloud_server_id',1);
				$mdlTaskopis->save();
				$mdlTask->setPkid($v['task_id']);
				$mdlTask->set('m_is_at',3);
				$mdlTask->set('manager_id',583);
				$mdlTask->set('manager_name','蒋长峻');
				$mdlTask->set('manager_teamid',44);
				$mdlTask->save();
				$s_task=new service_task($v['task_id']);
				$s_task->addmanagerchangelog(109,3);
				if (!in_array($v['user_id'], $aUids)){
					$aUids[]=$v['user_id'];
				}
			}
			$sUids=implode(',', $aUids);
		}		
		if ($sUids){
			$mdlmbInfo=zbj_model_api::get('zbj_model_mb_info');
			$aUser=$mdlmbInfo->select(array("user_id in ($sUids)"),'user_id,mobile,email,qq,tel')->items;
		}
		if (count($aUser)>0){
			$result=array();		//合并用户需求结果
			$isExist=array();		//去重复数组			
			foreach ($aUser as $v){						
				foreach ($aList as $value){									
					if ($value['user_id']==$v['user_id']){													
						if (!in_array($value['user_id'], $isExist)){
							$v['title']=$value['title'];
							$v['task_id']=$value['task_id'];
							$v['nickname']=$value['nickname'];
							$v['provice_name']=$value['provice_name'];
							$v['amount']=$value['amount'];
							$v['city_name']=$value['city_name'];
							$v['area_name']=$value['area_name'];
							$v['createtime']=$value['createtime'];
							$v['type']=$value['type'];
							$v['content']=$value['content'];
						}
						$isExist[]=$v['user_id'];
					}
				}
				$result[]=$v;				
			}
		}else{
			$result=$aList;
		}
		
		if ($result){
			$name='task'.date('Y-m-d_H-i-s');
			$this->ExcelWrite($result, $name);
		}else{
			return $this->alert(array('msg'=>'没有任务'));
		}
	}
	

 	private function ExcelWrite($data, $name = 'Excel') {
        include_once (dirname(__FILE__) . DIRECTORY_SEPARATOR . "../lib/excel/PHPExcel.php");
        $objPHPExcel = new PHPExcel();
        $num = 1;
        $objPHPExcel->setActiveSheetIndex(0);
        $objActSheet1 = $objPHPExcel->getActiveSheet();
        $objActSheet1->setTitle('任务');
        $objActSheet1->setCellValue('A' . $num, "需求标题")
       			 ->setCellValue('B' . $num, "需求链接")
                ->setCellValue('C' . $num, "需求发布人")
                ->setCellValue('D' . $num, "需求发布人联系方式（电话、QQ、邮箱）")
                ->setCellValue('E' . $num, "需求发布地址")
                ->setCellValue('F' . $num, "悬赏金额")
                ->setCellValue('G' . $num, "需求发布时间")
                ->setCellValue('H' . $num, "类型")              
                ->setCellValue('I' . $num, "内容");
        if (is_array($data)) {
             foreach ($data as $k => $v) {
                    $num = $num + 1;
                    $address='';
                    if ($v['provice_name']){
                    	$address.=$v['provice_name'].'省';
                    }
                    if ($v['city_name']){
                    	$address.=$v['city_name'].'市';
                    }
                    if ($v['area_name']){
                    	$address.=$v['area_name'].'区';   
                    }    
                    $contact='';
                    if ($v['qq']){
                    	$contact.='QQ:'.$v['qq'];
                    }     
                    if ($v['tel']){
                    	$contact.='电话:'.$v['tel'];
                    }
                    if($v['email']){
                    	$contact.='邮箱:'.$v['email'];
                    }
                    if ($v['mobile']){
                    	$contact.='电话:'.$v['mobile'];
                    }           
                    $objActSheet1->getStyleByColumnAndRow('H', $num)
                        		 ->getNumberFormat($num)->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_NUMBER);
                    $objActSheet1
                        ->setCellValue('A' . $num, $v['title'])
                        ->setCellValue('B' . $num, zbj_lib_Constant::TASK_URL.'/'.$v['task_id'])
                        ->setCellValue('C' . $num, $v['nickname'])
                        ->setCellValue('D' . $num, $contact)
                        ->setCellValue('E' . $num, $address)
                        ->setCellValue('F' . $num, $v['amount'])
                        ->setCellValue('G' . $num, date('Y-m-d H:i:s',$v['createtime']))
                        ->setCellValue('H' . $num, $v['type'])                  
                        ->setCellValue('I' . $num, $v['content']);                  
                } 
        }
        $objPHPExcel->setActiveSheetIndex(0);
        header("Content-type: text/csv; charset=utf-8");
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $name . '.xls"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        exit;
    }
	
	/**
	 *添加优质任务
	 */
	public function pageQualityTaskEdit() {
		$tid = intval($_GET['tid']);
		$ptid = intval($_POST['task_id']);
		$tid = $ptid > 0 ? $ptid : $tid;
		$is_print_msg = isset($_GET['print']);
		if ($tid> 0) {
			$srvTask = new zbj_service_task($tid);
			$srvTask = $srvTask->init();
			if ($srvTask->isAllowQualitTask() === false) {
				return $this->jsonOrPrint(array('state'=>-1, 'msg'=>$srvTask->getError()), $is_print_msg);
			}
			$params['task_info'] = $srvTask->get();
			$params['task_info']['content'] = zbj_lib_BaseUtils::getUbbStr($srvTask->get('task_cont.content'), 100);
			$task_uid = $params['task_info']['user_id'];
			$srvUser = new zbj_service_user($task_uid);
			$params['task_info']['brandname'] = $srvUser->getBrand($task_uid);
			//获取稿件列表
			$params['works_list'] = $this->getWorksList($tid);
			//SlightPHP::dbg()->log( $params['works_list']);

			if ($srvTask->isQualityTask()) {
				$qinfo = $srvTask->getQualityTaskInfo();
				//SlightPHP::dbg()->log( $qinfo);
				$qinfo['pic_url'] = zbj_lib_BaseUtils::call_smarty_plugin_modifier('file2url', $qinfo['works_pic'], 'middle');
				$qinfo['works_brandname'] = $srvUser->getBrand($qinfo['works_userid']); 
				if ($qinfo['options']['works']) {
					foreach($qinfo['options']['works'] as $k=>$v) {
						$qinfo['options']['works'][$k]['pic_url'] = zbj_lib_BaseUtils::call_smarty_plugin_modifier('file2url', $v['works_pic'], 'middle');
						$qinfo['options']['works'][$k]['brandname'] = $srvUser->getBrand($v['works_userid']); 
					}
				}
				$params['qinfo'] = $qinfo;
				//SlightPHP::dbg()->log( $params['qinfo']);
			}
			if (isset($_GET['i'])) {
				return $this->json(array('state'=>1, 'msg'=>$params));
			}
			if ($_POST) { //添加修改操作
				$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
				$data = array(
					'works_id'=>intval($_POST['mworks-id']),	
					'works_pic'=>zbj_lib_BaseUtils::getStr($_POST['mworks-pic']),
					'is_top'=> (int) in_array('top', (array)$_POST['case_show']),
					'is_task_top'=> (int) in_array('tasktop', (array)$_POST['case_show']),
					'is_list'=> (int) in_array('list', (array)$_POST['case_show']),
					'is_show'=> (int) !empty($_POST['case_show']) 
				);
				if ($data['is_task_top'] == 1) {
					$options['task']['highlight'] = $_POST['task_highlight'];
				}
				for ($i=1;$i<=4;$i++) {
					$sworks_id = intval($_POST['sworks-id' . $i]);
					if ($sworks_id > 0 ) {
						$options['works'][] = array(
							'works_id'=>$sworks_id,
							'works_pic'=> $_POST['sworks-pic'. $i]
						);
					} 
				}
				$data['options'] = serialize($options);
				if ($qinfo) {
					$rslt = $srvTask->editQualityTask($data);
				} else {
					$data['channel_id'] = 2;
					$data['catalog2id'] = 18;
					$rslt = $srvTask->addQualityTask($data);
				}
				if ($rslt === false) {
					return $this->json(array('state'=>-1, 'msg'=>'操作失败,失败原因:'. $srvTask->getError()));
				} else {
					return $this->json(array('state'=>1, 'msg'=>'操作成功'));
				}
			}
		} elseif (isset($_GET['i'])) {
			return $this->json(array('state'=>-1, 'msg'=>'无法获取任务号'));
		} elseif ( $_POST ) {
			return $this->jsonOrPrint(array('state'=>-1, 'msg'=>'您还没有填写任务号等相关信息'), $is_print_msg);
		}
		return $this->render('task/qualitytaskedit.html', $params);
	}

	public function pageQualityTaskAjax($inPath) {
		//根据图片地址获取完整的图片地址
		if (isset($_GET['qpath'])) {
			$size = in_array(strtolower($_GET['size']), array('middle','small', 'big', 'large')) ? strtolower($_GET['size']) : 'middle';
			$msg = zbj_lib_BaseUtils::call_smarty_plugin_modifier('file2url', zbj_lib_BaseUtils::saddslashes($_GET['qpath']), $size);
			if ($msg === false)  return $this->json(array('state'=>-1, 'msg'=>zbj_lib_BaseUtils::$error));
			return $this->json(array('state'=>1,'msg'=>$msg));
		}
		//根据稿件号获取图片附件列表
		if (isset($_GET['wid'])) {
			$works_id = intval($_GET['wid']);
			if ($works_id <= 0) return $this->json(array('state'=>-1, 'msg'=>'无法获取稿件号'));
			$srv = new zbj_service_works($works_id);
			$works_info = $srv->get();
			$smark = $this->getMark($works_info);
			$srvUser = new zbj_service_user();
			$brandname = $srvUser->getBrand($works_info['user_id']);
			$files = $srv->getImgFiles();
			if (empty($files)) return $this->json(array('state'=>-2, 'msg'=>'该稿件不存在图片', 'brandname'=>$brandname, 'smark'=>$smark));
			$rtn = array();
			foreach($files as $k=>$v) {
				$files[$k]['pic_url'] = $pic_url = zbj_lib_BaseUtils::call_smarty_plugin_modifier('file2url', $v['filename'], 'middle');
				$files[$k]['brandname'] = $brandname;
				$files[$k]['smark'] = $smark;
				$rtn[] = "<li class=\"pic_show pic_show2\" data_brandname=\"{$brandname}\" data_smark=\"{$smark}\"><label><div class=\"pic_container\"><img src=\"{$pic_url}\" /></div><div class=\"center\"><input type=\"radio\" name=\"works_pic_sel\" value=\"{$v['filename']}\" > 选择此图</div></label></li>";
			}
			return $this->json(array('state'=>1, 'msg'=>implode('', $rtn), 'list'=>$files, 'brandname'=>$brandname, 'smark'=>$smark));
		}
	}

	private function getWorksList($tid) {
		$mdl = zbj_model_api::get('zbj_model_mk_works');
		$condition = "task_id={$tid} AND open_state=0";
		$order_by = "ORDER BY issuccess DESC,class ASC,isalternative DESC,iseliminate ASC,works_id ASC";
		$list = $mdl->select($condition, 'issuccess,class,isalternative,iseliminate,works_id,user_id', '', $order_by)->items;
		$uids = zbj_lib_BaseUtils::indexArray($list, 'user_id','user_id');
		$works_by_uid = array();

		$works_ordered = array();
		foreach($list as $v) {
			$uid = $v['user_id'];
			if($v['issuccess'] == 1) {
				$works_ordered[] = $v;
			} elseif ($v['isalternative'] == 1) {
				$works_ordered[] = $v;
			} else {
				$works_by_uid[$uid][] = $v;
			}
		}
		//用户能力值排序
		if ($uids) {
			$mdlUser = zbj_model_api::get('zbj_model_mb_info');
			$condition_user = 'user_id IN (' . implode(',', $uids) .  ')';
			$user_list = $mdlUser->select($condition_user, 'user_id,brandname', '', 'ORDER BY ability DESC')->items;
			$brandname_list = zbj_lib_BaseUtils::indexArray($user_list, 'user_id', 'brandname');
			$uids_ability = array_keys($brandname_list);
			foreach ($uids_ability as $uid) {
				if ($works_by_uid[$uid]) {
					$works_ordered = array_merge($works_ordered, $works_by_uid[$uid]);
				}
			}
		}
		$sug_count = 0;
		foreach($works_ordered as $k=>$v) {
			$is_main = false;
			$str = $works_id = $v['works_id'];
			$uid = $v['user_id'];
			$v['brandname'] = htmlspecialchars($brandname_list[$uid]);
			$v['smark'] = $this->getMark($v);
			if($v['issuccess'] == 1) {
				$sug_count ++;
				switch((int)$v['class']) {
				case 1:
					if (empty($sug['main'])) $is_main = true;
					break;
				case 2:
				case 3:
					break;
				default:
					if (empty($sug['main'])) $is_main = true;
				}
				if ($is_main) {
					$v['pic_info'] = $this->getWorksOnePic($works_id);
					$v['works_pic'] = $v['pic_info']['filename'];
					$v['pic_url'] = zbj_lib_BaseUtils::call_smarty_plugin_modifier('file2url', $v['works_pic'], 'middle');
					$sug['main'] = $v;
				}
			}
			if ($sug_count < 6 && $is_main == false) {
				$v['pic_info'] = $this->getWorksOnePic($works_id);
				$v['works_pic'] = $v['pic_info']['filename'];
				$v['pic_url'] = zbj_lib_BaseUtils::call_smarty_plugin_modifier('file2url', $v['works_pic'], 'middle');
				$sug['sub'][] = $v;
			}
			$str .= $v['smark'];
			$works_ordered[$k] = $v;
			$selected = $is_main ? ' selected="selected"' : '';
			$options[] = "<option value=\"{$works_id}\" {$selected}>稿件#{$str}_{$v['brandname']}</option>";
		}
		$rtn = array(
			'suggest'=>$sug,
			'options'=> implode('',$options),
			'list'=>$works_ordered
		);
		return $rtn;
	}

	private function getWorksOnePic($works_id) {
		$srv = new zbj_service_works($works_id);
		$files = $srv->getImgFiles();
		return $files[0];
	}

	private function getMark($works_info) {
		$mark = '';
		if($works_info['issuccess'] == 1) {
			switch((int)$works_info['class']) {
			case 1:
				$mark = '(中标一等奖)';
				break;
			case 2:
				$mark = '(中标二等奖)';
				break;
			case 3:
				$mark = '(中标三等奖)';
				break;
			default:
				$mark = '(中标)';
			}
		} elseif ($works_info['isalternative'] == 1) {
			$mark = '(备选)';
		} elseif ($works_info['iseliminate'] == 1) {
			$mark = '(淘汰)';
		}
		return $mark;
	}

	private function jsonOrPrint($data, $is_print_msg = false) {
		if ($is_print_msg) {
			return $this->printmsg($data['msg']);
		} else {
			return $this->json($data);
		}
	}

	/**
	 *专场定制需求管理
	 */
	public function pageCustTaskList($inPath) {
		$url = $this->getUrlParams($inPath);

		$page = intval($url['page']);
		$page = $page > 0 ? $page : 1;
		$limit = 10;

		if (isset($_GET['i']) && intval($_GET['cid']) > 0) {
			return $this->getCustTaskInfo(intval($_GET['cid']));
		} 

		$condition = array();
		$datestart = $_GET['datestart'];
		$dateend = $_GET['dateend'];
		if ( zbj_lib_BaseUtils::chkdate($datestart) ) {
			$condition[] = "createymd>='{$datestart}'"; 
		}
		if ( zbj_lib_BaseUtils::chkdate($dateend) ) {
			$condition[] = "createymd<='{$dateend}'"; 
		}

		if ($_GET['state'] == 1) {
			$condition['task_id'] = 0;
		} elseif ($_GET['state'] == 2) {
			$condition[] = 'task_id>0'; 
		}
		
		if($_GET['type'] == 1) {
			$condition['type'] = 1;
		} else {
			$condition['type'] = 0;
		}

		$mdl = zbj_model_api::get('zbj_model_mk_customizetask');
		$mdl->setPage($page);
		$mdl->setCount(true);
		$mdl->setLimit($limit);
		$rslt = $mdl->select($condition, '*', 'ORDER BY cid DESC');
		foreach($rslt->items as $k=>$v) {
			$rslt->items[$k]['options'] = unserialize($v['options']);
			$rslt->items[$k]['token'] = md5(zbj_lib_Constant::SYSUSERKEY.$v['cid']);
		}

		$params['list'] = $rslt->items;
		$params['total'] = $rslt->totalSize;
        $querystring = '?' . $_SERVER['QUERY_STRING'];
        $params['pagebar']= $this->PageBar($rslt->totalSize, $limit, $page, $inPath, 'style4', $querystring);

		return $this->render('task/custtasklist.html', $params);
	}
	
	/**
	 *查看单条专场定制需求信息
	 */
	private function getCustTaskInfo($cid) {
		$mdl = zbj_model_api::get('zbj_model_mk_customizetask');
		$rslt = $mdl->selectOne("cid={$cid}");
		if (empty($rslt)) {
			return $this->printmsg('定制需求不存在', 0);
		} else {
			$rslt['options'] = unserialize($rslt['options']);
			
			switch(true) {
			case $rslt['type'] == '0' && $rslt['catalog2id'] == 18:
				$rslt['diy'] = $rslt['options'];
				$tpl = 'logo/detail.html';
				break;
			case $rslt['type'] == '1':
				$rslt['industry'] = $this->getIndustryList();
				$tpl = 'match/detail.html';
				break;
			default:
				return $this->printmsg('不支持的定制需求', 0);
			}
			return $this->render('task/viewpart/special/' . $tpl, $rslt);
		}
	}
	
	/**
	 * 根据CID跳转到编辑或发布页面
	 */
	public function pagePub() {
		$cid = intval($_GET['cid']);
		if($cid < 1) {
			$this->ShowMsg('请求的定制需求参数无效');
		}
	
		$mdl = zbj_model_api::get('zbj_model_mk_customizetask');
		$custom_task = $mdl->selectOne("cid={$cid}");
	
		if($custom_task == NULL) {
			$this->ShowMsg('请求的定制需求不存在');
		}
		
		switch(true) {
			case $custom_task['type'] == '0' && $custom_task['catalog2id'] == 18:
				$token = md5(zbj_lib_Constant::SYSUSERKEY . $cid);
				$url = SlightPHP::createUrl('/user/quicklogin',array('uid'=>$custom_task['user_id'])).'?url='.urlencode(zbj_lib_Constant::MAIN_URL . "/special/pub-did-{$cid}.html");
// 				$url = SlightPHP::createUrl('/user/quicklogin',array('user_id'=>$custom_task['user_id'])).'?url='.urlencode(zbj_lib_Constant::MAIN_URL . "/special/pub-did-{$cid}.html?edittoken={$token}");
				break;
			case $custom_task['type'] == '1':
				zbj_lib_BaseUtils::ssetcookie(
					array('_custom' =>
						$cid . '_' . md5(zbj_lib_Constant::SYSUSERKEY . $cid)),
						0, '/', zbj_lib_Constant::COOKIE_DOMAIN);
				if($custom_task['task_id'] > 0) {
					$url = zbj_lib_Constant::TASK_URL . "/pub/step2-task-{$custom_task['task_id']}.html";
				} else {
					$url = zbj_lib_Constant::TASK_URL . "/pub/step1.html";
				}
				$srv_user = new service_user($custom_task['user_id']);
				$url = $srv_user->getLoginBuyerAccountUrl($this->_userid, $url, 2);
				break;
			default:
				$this->ShowMsg('定制需求无匹配模式，生成发布链接失败');
		}

		zbj_lib_BaseUtils::ssetcookie(
			array('_kfid' => $this->_userid),
				0, '/', zbj_lib_Constant::COOKIE_DOMAIN);
		$this->redirect($url);
	}
	
	private function getIndustryList() {
		$mdl_idst = new zbj_model_mk_industry();
		$list = $mdl_idst->select()->items;
		$result = array();
	
		if($list) {
			foreach($list as $row) {
				$result[$row['industry_id']] = $row['name'];
			}
		}
	
		return $result;
	}
	
	public function pageTaskList($inPath) {
		$this->init($inPath);
		$type = $_GET['type'] ? (int) $_GET['type'] : 1;
		$limit = 10;
		$page = isset($this->url['page']) ? (int) $this->url['page'] : 1;
		$params['title'] = '订单库';
		$params['leftnav'] = array(60, 10);
		
		$s_cpallot = new service_cpallot();
		
		$mTask = new zbj_model_mk_task();
		$mTaskInfo = new zbj_model_mk_taskinfo();
		$mTaskOpis = new zbj_model_mk_taskopis();
		$mFollow = new model_mk_follow();
		$mEffectprotection = new model_mk_effectprotection();
        $mTaskHall = new zbj_model_mk_taskhall();
		$taskTable = $mTask->tableName();
		$taskInfoTable = $mTaskInfo->tableName();
		$taskOpisTable = $mTaskOpis->tableName();
		$followTable = $mFollow->tableName();
		$effectTable = $mEffectprotection->tableName();
        $taskHallTable = $mTaskHall->tableName();

		$leftjoin = array(
			$taskInfoTable => "{$taskTable}.task_id={$taskInfoTable}.task_id",
			$taskOpisTable => "{$taskTable}.task_id={$taskOpisTable}.task_id",
			$followTable => "{$taskTable}.task_id={$followTable}.task_id",
			$effectTable => "{$taskTable}.task_id={$effectTable}.task_id",
			'mk_task_outsource'=>"mk_task_outsource.task_id={$taskTable}.task_id",
            $taskHallTable => "{$taskTable}.task_id={$taskHallTable}.task_id",
		);
		//------------排序-------------
		$o = $_GET['o']; //排序条件
		$ud = (int) $_GET['ud']; //升降序
		$orderarray = array();
		if($type==2){
			$orderarray[] = "{$taskTable}.hosted desc";
		}
		if ($o) {
			switch ($o) {
				case 'publicity_begintime':
					$orderarray[] = "publicity_outime " . ($ud == 1 ? 'desc' : 'asc');
					break;
				case 'expriestime':
					if (in_array($type, array(5, 6))) {
						$orderarray[] = "{$effectTable}.expriestime " . ($ud == 1 ? 'asc' : 'desc');
					} else {
						$orderarray[] = "{$followTable}.expriestime " . ($ud == 1 ? 'asc' : 'desc');
					}
					break;
				case 'sys_level':
					$orderarray[] = "{$followTable}.level " . ($ud == 1 ? 'asc' : 'desc');
					break;
				default:
					$orderarray[] = "$o " . ($ud == 1 ? 'desc' : 'asc');
					break;
			}
		}
		if(!empty($orderarray)){
			$orderby = 'order by '.implode(',',$orderarray);
		}
//		pf($orderby);
		//------------条件-------------
		//处理人
		$group_id = $_GET['gid'];
		$user_id = $_GET['uid'];
		$own = $_GET['own'];
		if ($own == 1) {//我的
			$params['title'] = '我的订单库';
			$params['leftnav'] = array(60, 20);
			if (!in_array($type, array(18, 19, 21))) {
				$user_id = $this->_userid;
			}
			if ($type == 18) {
//				$group_id = $this->_usergroupid;
				//按分配组2014-06-26
				$group_id = $s_cpallot->getConfigIDByMnagerID($this->_userid);
			}
		}
		
		//
//		if ($this->_time >= 1385827200) {
//			$condition[] = "{$taskOpisTable}.showtime < {$this->_time}";
//		}
		//处理人
        if(!isset($_GET['myagent'])){//added by shenfeng 2015-07-03
            $condition[] = "{$taskInfoTable}.pub_type <9";
        }

		if ($user_id) {
			$condition[$taskTable . '.manager_id'] = $user_id;
		} elseif ($group_id) {
			$cpuser = new zbj_model_cp_user();
			if ($group_id == -2) {
				$auids = $cpuser->selectOne("group_id in (7,8,74,75,76,101,102,104)", 'group_concat(user_id) as auids');
			} else {
//				$auids = $cpuser->selectOne(array('group_id' => $group_id), 'group_concat(user_id) as auids');
				//2014-07-01
				$s_manager = new service_manager();
				$temp = $s_manager->getIndustryuser(0, 1);
				$auids = implode(',', $temp[$group_id]['ids']);
			}
			if ($auids) {
				$condition[] = "{$taskTable}.manager_id in ({$auids})";
			}
		}

        //判断是否商机订单
		if(in_array($_GET['task_source'],array(1,2)) && is_numeric($_GET['task_source'])){
			$task_source = intval($_GET['task_source']);
			if($task_source == 1){
				$condition[] = "{$taskInfoTable}.task_source = 99";
			}else{
                $condition[] = "{$taskInfoTable}.task_source != 99";
			}
		}

		//is_package = 1无套餐is_package = 2有套餐
        if(in_array($_GET['is_package'],array(1,2))){
        	$mExtends = new zbj_model_mk_taskextends();
        	$extendsTable = $mExtends->tableName();
        	$leftjoin[$extendsTable] = "{$taskTable}.task_id={$extendsTable}.task_id";
        }
    	if($_GET['is_package'] == 1){
    		$condition[] = "{$extendsTable}.is_package = 0 ";
    	}
    	if($_GET['is_package'] == 2){
    		$condition[] = "{$extendsTable}.is_package > 0 ";
    	}

		//赏金
		switch ((int) $_GET['amount']) {
			case 1://100以下
				$condition[] = "{$taskTable}.amount < 100";
				break;
			case 2://100以上
				$condition[] = "{$taskTable}.amount >= 100";
				break;
			case 3://500以上
				$condition[] = "{$taskTable}.amount >= 500";
				break;
			case 4://1000以上
				$condition[] = "{$taskTable}.amount >= 1000";
				break;
			case 5://2000以上
				$condition[] = "{$taskTable}.amount >= 2000";
				break;
			case 6://5000以上
				$condition[] = "{$taskTable}.amount >= 5000";
				break;
			case 7://10000以上
				$condition[] = "{$taskTable}.amount >= 10000";
				break;
		}
		//经纪人
		if ($_GET['vip'] == 1) {
			$condition["{$taskOpisTable}.ht"] = 1;
		}

		//提交时间
		if ($_GET['sct']) {
			$condition[] = "{$taskTable}.createtime >=" . strtotime($_GET['sct']);
		}else{
            //默认展示2015-06-12号以后的数据
            $_GET['sct'] = '2015-06-12 00:00:00';
            $condition[] = "{$taskTable}.createtime >= 1434038400";
		}
		if ($_GET['ect']) {
			$condition[] = "{$taskTable}.createtime <=" . strtotime($_GET['ect']);
		}
		//担保时间
		if ($_GET['sht']) {
			$condition[] = "{$taskTable}.hosted_time >=" . strtotime($_GET['sht']);
		}
		if ($_GET['eht']) {
			$condition[] = "{$taskTable}.hosted_time <=" . strtotime($_GET['eht']);
		}
		//投标截止时间
		if ($_GET['sbet']) {
			$condition[] = "{$taskTable}.endtime >=" . strtotime($_GET['sbet']);
		}
		if ($_GET['ebet']) {
			$condition[] = "{$taskTable}.endtime <=" . strtotime($_GET['ebet']);
		}
		//选标截止时间
		if ($_GET['sset']) {
			$condition[] = "{$taskTable}.ext_selectime >=" . strtotime($_GET['sset']);
		}
		if ($_GET['eset']) {
			$condition[] = "{$taskTable}.ext_selectime <=" . strtotime($_GET['eset']);
		}
		//公示开始时间
		if ($_GET['spt']) {
			$condition[] = "{$taskTable}.publicity_outime >=" . (strtotime($_GET['spt']) + 259200);
		}
		if ($_GET['ept']) {
			$condition[] = "{$taskTable}.publicity_outime <=" . (strtotime($_GET['ept']) + 259200);
		}
		//雇主付款时间
		if ($_GET['spyt']) {
			$condition[] = "{$taskInfoTable}.close_time >=" . strtotime($_GET['spyt']);
			$condition["{$taskInfoTable}.end_type"] = 1;
		}
		if ($_GET['epyt']) {
			$condition[] = "{$taskInfoTable}.close_time <=" . strtotime($_GET['epyt']);
			$condition["{$taskInfoTable}.end_type"] = 1;
		}
		//促进担保待跟进时间
		if ($_GET['fst']) {
			$condition[] = "{$followTable}.expriestime >=" . strtotime($_GET['fst']);
		}
		if ($_GET['fet']) {
			$condition[] = "{$followTable}.expriestime <=" . strtotime($_GET['fet']);
		}
		//促进担保实际跟进时间
		if ($_GET['rfst']) {
			$condition[] = "{$followTable}.dateline >=" . strtotime($_GET['rfst']);
		}
		if ($_GET['rfet']) {
			$condition[] = "{$followTable}.dateline <=" . strtotime($_GET['rfet']);
		}
		//效果保障待跟进时间
		if ($_GET['est']) {
			$condition[] = "{$effectTable}.expriestime >=" . strtotime($_GET['est']);
		}
		if ($_GET['eet']) {
			$condition[] = "{$effectTable}.expriestime <=" . strtotime($_GET['eet']);
		}
		//效果保障实际跟进时间
		if ($_GET['rest']) {
			$condition[] = "{$effectTable}.create_time >=" . strtotime($_GET['rest']);
		}
		if ($_GET['reet']) {
			$condition[] = "{$effectTable}.create_time <=" . strtotime($_GET['reet']);
		}
		//退款时间
		if ($_GET['stk']) {
			$condition[] = "{$taskInfoTable}.refund_time >=" . strtotime($_GET['stk']);
		}
		if ($_GET['etk']) {
			$condition[] = "{$taskInfoTable}.refund_time <=" . strtotime($_GET['etk']);
		}
		//最近派单时间
		if ($_GET['lrst']) {
			$condition[] = "{$taskOpisTable}.latest_recommend_time >=" . strtotime($_GET['lrst']);
		}
		if ($_GET['lret']) {
			$condition[] = "{$taskOpisTable}.latest_recommend_time <=" . strtotime($_GET['lret']);
		}
		//保证选标
		if (isset($_GET['isgpay']) && in_array($_GET['isgpay'], array(0, 1))) {
			$condition["{$taskTable}.isgpay"] = $_GET['isgpay'];
		}
		//是否禁止搜索引擎
		if ((int) $_GET['was_nosearch']) {
			$condition["{$taskTable}.was_nosearch"] = 1;
		}
		//是否隐藏交稿
		if ((int) $_GET['was_showorks']) {
			$condition["{$taskTable}.was_showorks"] = 1;
		}
		//任务推广
		if ((int) $_GET['was_promotion']) {
			$condition["{$taskTable}.was_promotion"] = 1;
		}
		//分配模式
		if ($_GET['allot']) {
			$condition[] = "{$taskTable}.allot in (" . implode(',', $_GET['allot']) . ")";
		}
		//包搞定成功
		if ((int) $_GET['gk']) {
			$condition[] = "{$taskOpisTable}.t_task_id!=0";
		}
		//受理状态
		switch ((int) $_GET['astatus']) {
			case 1://正常
				$condition[] = "{$followTable}.expriestime>{$this->_time}";
				break;
			case 2://超期
				$condition[] = "{$taskTable}.hosted=0 and {$followTable}.expriestime<{$this->_time} and {$followTable}.expriestime>0 ";
				break;
		}
		if ($own == 1 && in_array($this->_usergroupid, array(106, 72)) && $type == 2) {
			$_GET['atype'] = 1;
		}
		//跟进状态
		switch ((int) $_GET['fstatus']) {
			case 1://A类
			case 2://B+类
			case 3://B类
			case 4://C类
			case 5://D类
			case 6://E类
			case 7://X类
				$condition["{$followTable}.level"] = (int) $_GET['fstatus'];
				$condition[] = "{$followTable}.giveup_status in (0,1,3)";
				break;
			case 101://超期未跟进
				$condition[] = "{$followTable}.expriestime < '" . $this->_time . "'";
				$condition[] = "{$followTable}.giveup_status in (0,1,3)";
				break;
			case 102://异常，从A,B+,B降级或系统评级高降C级以下
				$condition[] = "(({$followTable}.oldlevel in (1,2,3) and {$followTable}.level>{$followTable}.oldlevel) or ({$followTable}.oldlevel=21 and {$followTable}.level>3))";
				$condition[] = "{$followTable}.giveup_status in (0,1,3)";
				break;
			case 103://无进展
				$condition[] = "{$followTable}.level={$followTable}.oldlevel";
				$condition[] = "{$followTable}.oldlevel in (1,2,3)";
				$condition[] = "{$followTable}.giveup_status in (0,1,3)";
				break;
			case 104://今日
//				$condition['giveup_option'] = 0;
//				$condition['expries'] = date('Y-m-d');
				break;
			case 105://放弃
				$condition["{$followTable}.giveup_status"] = 2;
				break;
			case 106://挑战订单
				$condition["{$followTable}.giveup_status"] = 2;
				$condition["{$followTable}.giveup_option"] = 309;
				break;
			case 107://其它放弃
				$condition["{$followTable}.giveup_status"] = 2;
				$condition[] = "{$followTable}.giveup_option != 309";
				break;
		}
		//转金牌后2天未托管
		if ($_GET['cuh']) {
			$condition[] = "{$taskTable}.startymd <= '" . date('Y-m-d', strtotime("-2 days")) . "'";
			$condition["{$taskTable}.isadvc"] = 1;
		}
		//有退款意向
		if ($_GET['atk']) {
			$condition["{$taskOpisTable}.is_applytk"] = 1;
		}
		//未分配
		if ($_GET['nallot']) {
			$condition["{$taskTable}.manager_id"] = 0;
		}
		//未跟进新订单
		if ($_GET['nt']) {
			$condition[] = "({$followTable}.issys=1 or {$followTable}.issys is null)";
		}
		//争议举报退款
		if ($_GET['zjtk']) {
			$condition["{$taskOpisTable}.refund_option"] = 189;
		}
		//争议举报全额退款
		if ($_GET['fullzjtk']) {
			$condition["{$taskOpisTable}.refund_option"] = 189;
			$condition[] = "{$taskInfoTable}.refund_amount = {$taskTable}.hosted_amount";
		}
		//效果保障跟进状态
		switch ($_GET['estatus']) {
			case 1://A类
			case 2://B类
			case 3://C类
			case 4://D类
			case 5://E类
				$condition["{$effectTable}.level"] = (int) $_GET['estatus'];
				$condition["{$effectTable}.giveup_status"] = 0;
				break;
			case 101://未跟进
				$condition[] = "{$effectTable}.manager_id is null";
				break;
			case 102://放弃
				$condition["{$effectTable}.giveup_status"] = 1;
				break;
			default:
				break;
		}

		//进入时间
		switch ($_GET['inseatime']) {
			case 1://前1小时进入
				$condition[] = "{$followTable}.inseatime>=" . ($this->_time - 3600);
				break;
			case 2://前6小时进入
				$condition[] = "{$followTable}.inseatime>=" . ($this->_time - 21600);
				break;
			case 3://今天进入
				$condition[] = "{$followTable}.inseaymd = '" . date('Y-m-d', $this->_time) . "'";
				break;
		}
		//认领后未处理
		switch ($_GET['fwarn']) {
			case 1://今日需跟进,促进担保
				$condition["{$followTable}.expries"] = date('Y-m-d', $this->_time);
				$condition[] = "{$followTable}.giveup_status in (0,1,3)";
				break;
			case 2://30分钟后即将超期,促进担保
				$condition[] = "{$followTable}.level!=23";
				$condition[] = "{$followTable}.expriestime<" . ($this->_time + 1800);
				$condition[] = "{$followTable}.expriestime>" . $this->_time;
				break;
			case 3://1小时后即将超期,促进担保
				$condition[] = "{$followTable}.level!=23";
				$condition[] = "{$followTable}.expriestime<" . ($this->_time + 3600);
				$condition[] = "{$followTable}.expriestime>" . ($this->_time + 1800);
				break;
			case 4://已超期
				$condition[] = "{$followTable}.expriestime < '" . $this->_time . "'";
				$condition[] = "{$followTable}.giveup_status in (0,1,3)";
				break;
		}
		//效果保障跟进提醒
		switch ($_GET['ewarn']) {
			case 1://今日需跟进
				$condition["{$effectTable}.expries"] = date('Y-m-d', $this->_time);
				$condition["{$effectTable}.giveup_status"] = 0;
				break;
			case 2://30分钟后即将超期
				$condition[] = "{$effectTable}.expriestime<" . ($this->_time + 1800);
				$condition[] = "{$effectTable}.expriestime>" . $this->_time;
				$condition["{$effectTable}.giveup_status"] = 0;
				break;
			case 3://1小时后即将超期
				$condition[] = "{$effectTable}.expriestime<" . ($this->_time + 3600);
				$condition[] = "{$effectTable}.expriestime>" . ($this->_time + 1800);
				$condition["{$effectTable}.giveup_status"] = 0;
				break;
			case 4://已超期
				$condition[] = "{$effectTable}.expriestime < '" . $this->_time . "'";
				$condition[] = "{$effectTable}.giveup_status = 0";
				break;
		}
		//订单类型
		switch ($_GET['otype']) {
			case 1://悬赏选人
				$condition["{$taskTable}.mode"] = 10;
				$condition["{$taskInfoTable}.ispic"] = 2;
				break;
			case 2://悬赏比稿
				$condition["{$taskTable}.mode"] = 10;
				$condition[] = "{$taskInfoTable}.ispic!=2";
				break;
			case 3://雇佣
				$condition[] = "{$taskTable}.mode in (11,12)";
				break;
			case 4://招标
				$condition[] = "({$taskTable}.mode = 13 or ({$taskTable}.mode = 10 and {$taskInfoTable}.ispic=2))";
				break;
		}
		//订单状态
		switch ($_GET['ostatus']) {
			case 1://悬赏投标中
				$condition["{$taskTable}.mode"] = 10;
				$condition["{$taskTable}.state"] = 2;
				$condition[] = "{$taskTable}.starttime<{$this->_time} and {$taskTable}.endtime>{$this->_time}";
				break;
			case 2://悬赏待选标
				$condition["{$taskTable}.mode"] = 10;
				$condition["{$taskTable}.state"] = 2;
				$condition[] = "{$taskTable}.endtime<=" . $this->_time;
				break;
			case 3://雇佣待跟进
				$condition[] = "{$taskTable}.mode in (11,12) and {$taskInfoTable}.isaccept_sl!=1 and {$taskTable}.state!=4";
				break;
		}
		//分类
		if ($_GET['cat1']) {
			$condition["{$taskTable}.category1id"] = (int) $_GET['cat1'];
		}
		if ($_GET['cat2']) {
			$condition["{$taskTable}.category2id"] = (int) $_GET['cat2'];
		}
		if ($_GET['cat3']) {
			$condition["{$taskTable}.category_id"] = (int) $_GET['cat3'];
		}
		//是否延期过
		if ($_GET['isdelay']) {
			$condition["{$followTable}.isdelay"] = 1;
		}
		switch ($_GET['htype']) {
			case 1://悬赏跟进后担保
				$condition[] = "{$taskTable}.hosted = 1 and {$followTable}.issys=0";
				break;
			case 2://悬赏自动担保
				$condition[] = "{$taskTable}.hosted = 1 and ({$followTable}.issys=1 or {$followTable}.issys is null)";
				break;
		}
		//归属
		switch ($_GET['isyun']) {
			case 1://非云顾问
				$condition[] = "{$taskTable}.m_is_at != 3";
				break;
			case 2://云顾问
				$condition[] = "{$taskTable}.m_is_at = 3";
				break;
		}
		//受理类型
		$sTaskList = new service_tasklist();
		$atype = false;
		switch ($_GET['atype']) {
			case 1://新订单
				$condition[] = $sTaskList->getNewCondition();
				break;
			case 2://跟进后担保
				$condition[] = $sTaskList->getFollowHostedCondition();
				break;
			case 3://自动担保
				$condition[] = $sTaskList->getSelfHostedCondition();
				break;
			case 4://认领订单
				$condition[] = $sTaskList->getClaimCondition();
				break;
			case 5://服务商拒绝
				$condition[] = $sTaskList->getSellerDropCondition();
				break;
			case 6://雇主放弃
				$condition[] = $sTaskList->getBuyerDropCondition();
				break;
			case 7://雇佣48小时无响应
				$condition[] = $sTaskList->getNoResponseCondition();
				break;
			case 8://投标期过半
//				$condition[] = $sTaskList->getBidHalfCondition();
				break;
			case 9://选标期过半
//				$condition[] = $sTaskList->getSelHalfCondition();
				break;
			case 10://选标期第四天
				$condition[] = $sTaskList->getSelForthCondition();
				break;
			default :
				$atype = true;
		}
		
		//行业
		$module_id = zbj_lib_BaseUtils::getStr($_REQUEST['module_id']);
		if ($module_id) {
			if (-1 != $module_id) {
				$s_module = new service_module($module_id);
				$categories = $s_module->getCategoryIdStrByModuleId();
			} else {
				$s_module = new service_module();
				$categories = $s_module->getCategoryIdStrByModuleId(0, false);
			}
		
			$condition[] = "category_id IN ({$categories})";
		}
		
		switch ($type) {
			case 1://所有
				$condition[] = "{$taskTable}.mode in (10,11,12,13)";
				$condition[] = "{$taskTable}.state!=4";
				break;
			case 2://待处理
				if($atype){
					$condition[] = $sTaskList->getPendingCondition(null,false);
				}
				$condition[] = $sTaskList->getPendingCommonCondition(null,false);
				break;
			case 4://未托管
				$condition[] = $sTaskList->getNoHostedCondition(null,false);
				break;
			case 5://已托管
				$condition[] = $sTaskList->getHostedCondition(null,false);
				break;
			case 7://已选标
				$condition[] = "(({$taskTable}.mode in (10,13) and {$taskTable}.state=3) or ({$taskTable}.mode in (11,12) and isaccept_sl=1 and {$taskTable}.state!=4))";
				break;
			case 8://交易完成
				$condition[] = "( {$taskTable}.mode in (10,11,12,13) and {$taskTable}.state=4 )";
				break;
			case 9://待处理举报
				$condition[] = "{$taskTable}.mode in (10,11,12,13)";
				break;
			case 18://小组公海
				$condition['issea'] = 1;
				$condition[] = "{$taskTable}.hosted!=1";
				break;
			case 19://中心公海
				$condition['issea'] = 2;
				$condition[] = "{$taskTable}.hosted!=1";
				break;
			case 21://资源库
				$condition[] = "{$taskTable}.mode in (10,11,12,13)";
				$condition[] = "{$taskTable}.amount<100";
				$condition[] = "{$taskTable}.m_is_at=2"; //调配库
				$condition[] = "{$taskTable}.createymd >= '" . date('Y-m-d', strtotime("-30 days")) . "'";
				$condition[] = "{$taskTable}.createtime <= '" . ($this->_time - 600) . "'";
			default:
				$condition[] = "{$taskTable}.mode in (10,11,12,13)";
				break;
		}
		if (!$_GET['sct'] && in_array($type, array(1, 3, 7, 8))) {
			$condition[] = "{$taskTable}.createymd >= '" . date('Y-m-d', strtotime("-365 days")) . "'";
		}
		if ($own != 1 && in_array($type, array(3, 7, 8, 18, 19))) {
			$condition[] = "{$taskTable}.manager_id!=0";
		}
		//关闭状态
        if(!isset($_GET['myagent'])){//added by shenfeng 2015-07-03
            if (isset($_GET['isclose']) && $_GET['isclose'] != -1) {
                $condition["{$taskTable}.open_state"] = (int) $_GET['isclose'];
            } elseif ($_GET['isclose'] == null) {
                $condition["{$taskTable}.open_state"] = 0;
            }
        }

		//关闭原因
		if (isset($_GET['closereason']) && $_GET['closereason'] != -1) {
			$condition["{$taskOpisTable}.refused"] = (int) $_GET['closereason'];
		}
		//退款原因
		if (isset($_GET['refundreason']) && $_GET['refundreason'] != -1) {
			$condition["{$taskOpisTable}.refund_option"] = (int) $_GET['refundreason'];
		}
		//是否延期
		if ($_GET['isext'] == 1) {//正常投标
			$condition[] = "{$taskTable}.ext_num = 0";
		} elseif ($_GET['isext'] == 2) {//延期投标
			$condition[] = "{$taskTable}.ext_num > 0";
		}
		//选标截止时间
		if ($_GET['seday']) {
			if ($_GET['seday'] == -1) {//超期
				$condition[] = "{$taskTable}.ext_selectime<" . $this->_time;
			} else {
				$condition[] = "{$taskTable}.endtime>" . ($this->_time - (86400 * $_GET['seday']));
				$condition[] = "{$taskTable}.endtime<" . ($this->_time - (86400 * ($_GET['seday'] - 1)));
			}
		}
		//投标截止时间
		if ($_GET['etime']) {
			if ($_GET['etime'] == -1) {//其它,大于3天
				$condition[] = "{$taskTable}.endtime>" . ($this->_time + (86400 * 3));
			} else {
				$condition[] = "{$taskTable}.endtime<" . ($this->_time + (86400 * $_GET['etime']));
				$condition[] = "{$taskTable}.endtime>" . ($this->_time + (86400 * ($_GET['etime'] - 1)));
			}
		}
		//待选标状态
		switch ($_GET['sstate']) {
			case 1://正常待选标
				$condition[] = "{$taskTable}.is_sysselect!=1";
				$condition[] = "{$taskTable}.ext_selectime >= " . $this->_time;
				break;
			case 2://超期待选标
				$condition[] = "{$taskTable}.ext_selectime < " . $this->_time;
				$condition[] = "{$taskTable}.is_sysselect!=1";
				break;
			case 3://社会化选标中
				$condition["{$taskTable}.is_sysselect"] = 1;
				$condition["{$taskTable}.state"] = 2;
				break;
			case 4://作弊成立待选标
				$condition["{$taskTable}.is_sysselect"] = 0;
				$condition["{$taskTable}.sysselect_reason"] = 1;
				break;
		}
		//选标模式
		switch ($_GET['smode']) {
			case 1://正常选标
				$condition[] = "{$taskTable}.is_sysselect!=1";
				$condition[] = "{$taskTable}.ext_selectime >= ({$taskTable}.publicity_outime-259200)";
				break;
			case 2://超期选标
				$condition[] = "{$taskTable}.ext_selectime < ({$taskTable}.publicity_outime-259200)";
				break;
			case 3://社会化选标
				$condition["{$taskTable}.is_sysselect"] = 1;
				break;
		}
		//完成类型
		switch ($_GET['etype']) {
			case 1://正常交易成功
				$condition["{$taskTable}.ext_num"] = 0;
				$condition[] = "{$taskTable}.is_sysselect!=1";
				$condition[] = "{$taskTable}.amount > 0";
				$condition["{$taskInfoTable}.refund_state"] = 0;
				$condition[] = "{$taskInfoTable}.end_type IN (1, 3)";
				break;
			case 2://投标延期后交易成功
				$condition[] = "{$taskTable}.ext_num > 0";
				break;
			case 3://社会化选标完成
				$condition["{$taskTable}.is_sysselect"] = 1;
				break;
			case 4://免费需求完成
				$condition["{$taskTable}.amount"] = 0;
				break;
			case 5://退款
				$condition[] = "{$taskInfoTable}.refund_state != 0";
				break;
			case 6://结束需求
				$condition["{$taskInfoTable}.end_type"] = 4;
				break;
			case 7://取消交易（买家放弃或威客拒绝）
				$condition[] = "{$taskInfoTable}.end_type IN (2, 5)";
				break;
		}
		//之前意向
		if ($_GET['olevel']) {
			$condition["{$followTable}.oldlevel"] = $_GET['olevel'];
		}
		//之前意向
		switch ($_GET['mode']) {
			case 1://悬赏(单人)
			case 2://悬赏(多人)
			case 3://悬赏(计件)
				$condition["{$taskTable}.mode"] = 10;
				$condition["{$taskTable}.allot"] = (int) $_GET['mode'];
				break;
			case 4://服务
				$condition["{$taskTable}.mode"] = 11;
				break;
			case 5://雇佣
				$condition["{$taskTable}.mode"] = 12;
				break;
			case 6://招标
				$condition["{$taskTable}.mode"] = 13;
				break;
		}
		//新加筛选
		if ($_REQUEST['catalog2id'] > 0) {
			if($_REQUEST['catalog2id']==99){
				$condition[]='mk_task_outsource.task_id >0';
			}elseif ($_REQUEST['catalog2id']==100){//优选商城
				$condition[]=$taskInfoTable.'.is_mall=1';
            }elseif(in_array($_REQUEST['catalog2id'],array(1,2,3))){
                //前后台增加打标及筛选方式 2015-8-12新增业务
                $condition[] = "{$taskHallTable}.hall_id=".$_REQUEST['catalog2id'];
			}else{
				$condition["{$taskTable}.catalog2id"] = intval($_REQUEST['catalog2id']);
				$condition[] = "{$taskTable}.was_pack>0";
				$condition[] = "{$taskTable}.createymd>'2013-06-10'";
			}
			
		}

        //需求状态筛选20151028
        switch ($_GET['state']) {
			case 1://免费需求
				$condition[] = "{$taskTable}.amount = 0";
				break;
			case 2://待托管
				$condition[] = "{$taskTable}.state = 2 and {$taskTable}.hosted = 0";
				break;
			case 3://投标中
				$condition[] = "{$taskTable}.state = 2 and {$taskTable}.starttime <= ".$this->_time." and {$taskTable}.endtime > ".$this->_time;
				break;
			case 4://待选标
				$condition[] = "{$taskTable}.state = 2 and {$taskTable}.ext_selectime > ".$this->_time;
				break;
			case 5://超期
				$condition[] = "{$taskTable}.state = 2 and {$taskTable}.ext_selectime < ".$this->_time;
				break;
			case 6://已选标
				$condition[] = "{$taskTable}.state = 3";
				break;
			case 7://交易完成
				$condition[] = "{$taskTable}.state = 4";
				break;
		}

		//define('DEBUG',1);
		//var_dump($condition);exit;
		//任务来源
		switch ($_GET['source']) {
			case 1://1:WEB端
				$condition["{$taskInfoTable}.phone_type"] = 0;
				break;
			case 2://2:android端
				$condition["{$taskInfoTable}.phone_type"] = 1;
				break;
			case 3://3:ios端
				$condition["{$taskInfoTable}.phone_type"] = 2;
				break;
			case 4://4:win8端
				$condition[] = "{$taskInfoTable}.phone_type in (3,4)";
				break;
		}
		if (!$orderby) {
			if ($type == 2) {
				$orderby = "order by {$followTable}.level asc,{$followTable}.expriestime asc";
			} else {
				$orderby = "order by {$taskTable}.task_id desc";
			}
		}
		if ($_GET['d']) {
			define('DEBUG', 1);
		}
		//举报
		if ($own == 1) {
			$reportCondition = array();
			$report = new zbj_model_mb_report();
			$taskIds = $mTask->select(array_merge($condition, array("{$taskTable}.createymd >= '" . date('Y-m-d', strtotime("-3 months")) . "'")), "{$taskTable}.task_id",'','',$leftjoin)->items; //change to list_foreach, group_concat_max_len is 1024 --edit by 5+
			if ($taskIds) {
				foreach ($taskIds as $v) {
					$tids[] = $v['task_id'];
				}
				$tids = implode(',', $tids);
				$reportNumcondition = "((t1.o_type=1 and t1.o_bel_id in ($tids)) or (t1.o_type=2 and t1.o_id in ($tids))) and t2.status=3";
				$report = $report->_db->select("mb_report as t1", $reportNumcondition, "t1.o_type,t1.o_id,t1.o_bel_id", "", "", array("mb_council_report as t2" => "t1.report_id=t2.report_id"))->items;
				if (count($report) > 0) {
					$tids = array();
					foreach ($report as $v) {
						$tids[] = $v['o_type'] == 1 ? $v['o_bel_id'] : $v['o_id'];
					}
					$tids = array_unique($tids);
					$tids = implode(',', $tids);
					$reportCondition[] = "{$taskTable}.task_id in ({$tids})";
				} else {
					$reportCondition[] = "1=0";
				}
			}
			if ($type == 9) {
				$condition = array_merge($condition, $reportCondition);
			} else {
				$rTask = $mTask->selectOne(array_merge($condition, $reportCondition), "count(*) num", '', '', $leftjoin);
				$params['report_total'] = $rTask['num'];
			}
		}
		
		//雇主保障查询 我的代发列表 其他条件不变2015-03-23 shenfeng
		if(isset($_GET['myagent'])){
			switch ($_GET['myagent']){
				case 0:{//所有代发
					$condition[] = $mTaskOpis->tableName().'.from_manager_id !=0 ';
					$params['title'] = '所有的代发';
					break;
				}
				case 1:{//我的代发
					$condition[$mTaskOpis->tableName().'.from_manager_id'] = $this->_userid;
					$params['title'] = '我的代发';
					break;
				}
				default:
					break;
			}
		}

		$mTask->setLimit($limit);
		$mTask->setPage($page);
		$mTask->setCount(true);
		$items = "{$taskTable}.task_id,mk_task_outsource.task_id as out_id,mk_task_hall.hall_id";
		$oTask = $mTask->select($condition, $items, '', $orderby, $leftjoin);
// 		var_dump($oTask->items);exit;
		//------------字段-------------
		$sConfig = new service_config();
		$types = $sConfig->getOfferTypes();
		if ($types && $own != 1) {
			unset($types[9]);
		}
		$sConfig = $sConfig->init($type);
		$field = $_POST['field'];
		if (!$field) {
			//视图模式,0:自由视图,1:默认视图,2:跟进视图
			switch ((int) $_GET['v']) {
				case 1://默认视图
					$field = array_keys($sConfig->getDefaultConfig());
					break;
				case 2://跟进视图
					$field = array('title', 'first_follow', 'second_follow', 'third_follow', 'last_follow');
					break;
			}
		}
		if ($field) {
			$sConfig->setField('title');
			foreach ($field as $value) {
				$sConfig->setField($value);
			}
			$sConfig->addConfig($this->_userid);
		}
		$fieldsConfig = $sConfig->getFieldsByUser($this->_userid);
		if (array_key_exists('task_id', $fieldsConfig)) {//需求编号始终第一
			$tmpTidField = $fieldsConfig['task_id'];
			unset($fieldsConfig['task_id']);
			$fieldsConfig = array_merge(array('task_id' => $tmpTidField), (array) $fieldsConfig);
		}
		$fields = array_keys($fieldsConfig);
		if (in_array('refused', $fields)) {//关闭需求原因
			$params['refused_reason'][0] = '前台关闭';
			$option = new service_cpoption(6);
			$refused_reason = $option->getItems();
			if ($refused_reason) {
				foreach ($refused_reason as $key => $value) {
					$name = $value['name'];
					if (strpos($name, "（") !== false) {
						$name = reset(explode('（', $name));
					}
					$params['refused_reason'][$value['item_id']] = $name;
				}
			}
		}
		if (in_array('refund_option', $fields)) {//退款原因
			$params['refund_option_reason'] = array();
			$option = new service_cpoption(15);
			$refund_option_reason = $option->getAllItems();
			if ($refund_option_reason) {
				foreach ($refund_option_reason as $key => $value) {
					$params['refund_option_reason'][$value['item_id']] = $value['name'];
				}
			}
		}
		$list = array();
		$flogs = array();
		if ($oTask->items) {
			$order = new zbj_model_cp_order();
			$sFollow = new service_follow();
			$mTk = new zbj_model_fn_tk();
			$m_score = new model_mk_score();
			$mAction = new zbj_model_mb_recommendaction();
			$cache = new zbj_lib_cache('memcache');
			foreach ($oTask->items as $key => $tk) {
                $hall_id = $tk['hall_id'];
				//var_dump($tk);
				$sTask = new service_task($tk['task_id']);
				$tk = $sTask->getTaskInfo();
				$list[$key] = $tk;
				if($oTask->items[$key]['out_id']>0){
					$list[$key]['out_id']=1;
				}else{
					$list[$key]['out_id']=0;
				}
                //专场
                $list[$key]['hall_id']=$hall_id;
				$ids[] = $tk['task_id'];
				if ($tk['is_sysselect'] == 1 && $tk['state'] == 2) {
					$toption = unserialize($tk['option']);
					switch ($toption['sys_select_status']) {
						case 1:
						case 2:
							$list[$key]['sys_state'] = '诚信委员会处理';
							break;
						case 3:
							$list[$key]['sys_state'] = '客服处理';
							break;
						case 4:
							$list[$key]['sys_state'] = '已选标';
							break;
						default:
							$list[$key]['sys_state'] = '未分配';
							break;
					}
				} else {
					$list[$key]['sys_state'] = '';
				}
				if (array_intersect(array('first_follow', 'second_follow', 'third_follow', 'last_follow'), $fields)) {
					$flogs[$tk['task_id']] = $sFollow->getLogByTaskId($tk['task_id']);
				}

				foreach ($fields as $fname) {
					switch ($fname) {
						case 'cporder_num'://工单
							$row = $order->selectOne(array('type' => 1, 'rid' => $tk['task_id']), 'sum(case when status<>4 then 1 else 0 end) num,count(*) allnum');
							$list[$key][$fname] = (int) $row['num'] . '/' . (int) $row['allnum'];
							break;
						case 'report_num'://举报总数
						case 'report_dispose'://待处理举报
							break;
						case 'refused'://关闭需求原因
							if ($list[$key]['open_state'] == 1) {
								$list[$key][$fname] = $params['refused_reason'][$list[$key][$fname]];
							} else {
								$list[$key][$fname] = '';
							}
							break;
						case 'refund_option'://退款原因
							$list[$key][$fname] = $params['refund_option_reason'][$list[$key][$fname]];
							break;
						case 'select_state':
							$row = $mTk->selectOne(array('state' => 0, 'task_id' => $tk['task_id']), 'count(*) num');
							$list[$key]['is_tk'] = (int) $row['num'] > 0 ? '(退款中)' : '';
							break;
						case 'mobile'://联系手机
							$sUser = new service_user($tk['user_id']);
							$list[$key][$fname] = $sUser->getMobile();
							if (!$list[$key][$fname]) {
								$list[$key][$fname] = '无';
							}
							break;
						case 'remark'://最新备注
							$sLog = new service_log();
							$oRemark = $sLog->getTaskLastRemark($tk['task_id']);
							$list[$key][$fname] = $oRemark['content'];
							break;
						case 'industry_id'://订单分类
							$mTag = new zbj_model_mk_tag();
							if ($tk['industry_id']) {
								$cacheNameTag = 'cp_tasklist_tags';
								$tags = $cache->get($cacheNameTag);
								if (!$tags[$tk['industry_id']]) {
									$oTag = $mTag->selectOne(array('tag_id' => $tk['industry_id']));
									$tags[$tk['industry_id']] = $oTag['tag_name'];
									$cache->set($cacheNameTag, $tags, 3600);
								}
								$list[$key]['tag_name'] = $tags[$tk['industry_id']];
							} else {
								$list[$key]['tag_name'] = '无';
							}
							break;
						case 'sys_level':
							$list[$key][$fname] = $sFollow->getSysLevel($tk['task_id']);
							break;
						case 'follow_status':
							if ($tk['giveup_status'] == 2) {
								$optionitem = new model_cp_optionitem();
								$optionRow = $optionitem->selectOne(array("item_id" => $tk['giveup_option']));
								$list[$key][$fname] = "放弃（{$optionRow['name']}）";
							} else {
								if ($tk['expriestime'] < $this->_time) {
									$list[$key][$fname] .= '超期未跟进，';
								}
								if ((in_array($tk['oldlevel'], array(1, 2, 3)) && $tk['level'] > $tk['oldlevel']) || ($tk['oldlevel'] == 21 && $tk['level'] > 3)) {
									$list[$key][$fname] .= '异常，';
								}
								if (in_array($tk['oldlevel'], array(1, 2, 3)) && $tk['level'] == $tk['oldlevel']) {
									$list[$key][$fname] .= '无进展，';
								}
								$list[$key][$fname] = trim($list[$key][$fname], '，');
							}
							break;
						case 'expriestime':
							if($tk['hosted']==1){
								$list[$key]['expriesstr'] = '';
							}else{
								$list[$key]['expriesstr'] = $sFollow->formatExpries($tk['expriestime']);
							}
							$list[$key]['sea_surplus'] = $sFollow->timeDifference($tk['task_id']);
							break;
						case 'eexpriestime':
							$list[$key]['eexpriesstr'] = $sFollow->formatExpries($tk['eexpriestime']);
							break;
						case 'first_follow':
							if ($flogs[$tk['task_id']][0]) {
								$list[$key][$fname] = $flogs[$tk['task_id']][0];
								$list[$key][$fname]['order'] = count(lib_BaseUtils::getDaysBy2Day($tk['createymd'], date('Y-m-d', $flogs[$tk['task_id']][0]['dateline'])));
							}
							break;
						case 'second_follow':
							if ($flogs[$tk['task_id']][1]) {
								$list[$key][$fname] = $flogs[$tk['task_id']][1];
								$list[$key][$fname]['order'] = count(lib_BaseUtils::getDaysBy2Day($tk['createymd'], date('Y-m-d', $flogs[$tk['task_id']][1]['dateline'])));
							}
							break;
						case 'third_follow':
							if ($flogs[$tk['task_id']][2]) {
								$list[$key][$fname] = $flogs[$tk['task_id']][2];
								$list[$key][$fname]['order'] = count(lib_BaseUtils::getDaysBy2Day($tk['createymd'], date('Y-m-d', $flogs[$tk['task_id']][2]['dateline'])));
							}
							break;
						case 'last_follow':
							if ($flogs[$tk['task_id']]) {
								$list[$key][$fname] = end($flogs[$tk['task_id']]);
								$list[$key][$fname]['order'] = count(lib_BaseUtils::getDaysBy2Day($tk['createymd'], date('Y-m-d', $list[$key][$fname]['dateline'])));
							}
						case 'manager_score'://交易顾问销售积分
							$manager_score = 0;
							if ($tk['manager_id']) {
								$managerAddCon = "task_id={$tk['task_id']} and manager_id = {$tk['manager_id']} and (score_item_id <13 or score_item_id >18)";
								$managerSubCon = "task_id={$tk['task_id']} and manager_id = {$tk['manager_id']} and score_item_id>12 and score_item_id<19";
								$manager_add_score_array = $m_score->selectOne($managerAddCon, 'sum(manager_score) as score');
								$manager_sub_score_array = $m_score->selectOne($managerSubCon, 'sum(manager_score) as score');
								if ($manager_add_score_array) {
									$manager_score += round($manager_add_score_array['score'], 2);
								}
								if ($manager_sub_score_array) {
									$manager_score -= round($manager_sub_score_array['score'], 2);
								}
							}
							$list[$key][$fname] = $manager_score;
							break;
//						case 'latest_recommend_time'://最近派单时间
//							$oAction = $mAction->selectOne(array('task_id' => $tk['task_id'], 'action_type' => 1), 'time', '', 'order by action_id desc');
//							$list[$key][$fname] = $oAction['time'];
//							break;
						case 'recommend_status'://派单状态
//							define('DEBUG', 1);
							$oAction = $mAction->select(array('task_id' => $tk['task_id']), 'max(action_type) as action_type', 'group by user_id,task_id')->items;
							$actionList = array();
							if($oAction){
								foreach ($oAction as $action_type) {
									$actionList[$action_type['action_type']]++;
								}
							}
							$list[$key][$fname] = $actionList;
							break;
					}
				}
			}
			//举报
			if (in_array('report_num', $fields) || in_array('report_dispose', $fields)) {
				$report = new zbj_model_mb_report();
				$ids = implode(',', $ids);
				$reportcondition = "((t1.o_type=1 and t1.o_bel_id in ({$ids})) or (t1.o_type=2 and t1.o_id in ({$ids})))";
				$reportLeftjoin = array("mb_council_report as t2" => "t1.report_id=t2.report_id");
				$res = $report->_db->select("mb_report as t1", $reportcondition, "t1.o_id,t1.o_bel_id,t1.o_type,t2.status", "", "", $reportLeftjoin)->items;
				if ($res) {
					foreach ($res as $v) {
						$taskid = $v['o_type'] == 1 ? $v['o_bel_id'] : $v['o_id'];
						$reportNum[$taskid] += 1;
						if ($v['status'] == 3) {
							$dealNum[$taskid] += 1;
						}
					}
				}
				$params['report_num'] = $reportNum;
				$params['report_dispose'] = $dealNum;
			}
		}
		//
		if ($own == 1 && $type == 2) {
			$sCpallot = new service_cpallot();
			$params['allocated'] = $sCpallot->getAllocated($this->_userid);
			$quotaInfo = $sCpallot->getQuotaInfo($this->_userid);
			$params['locktask'] = $quotaInfo['locktask'];
			$params['locktask_hosted'] = $quotaInfo['locktask_hosted'];
			$params['unlocktask'] = $quotaInfo['unlocktask'];
			$params['unlocktask_hosted'] = $quotaInfo['unlocktask_hosted'];
			$params['close'] = $quotaInfo['close'];
			$params['drop'] = $quotaInfo['drop'];
			$maxNum = $sCpallot->getMax($this->_userid);
			$allotNum = $quotaInfo['unlocktask'];
			$params['surplusquota'] = $maxNum - $allotNum + $quotaInfo['unlocktask_hosted'] + $quotaInfo['close'] + $quotaInfo['drop'];
		}
		//小组、处理人
		$params['groups'] = $s_cpallot->getAllotGroup(1);
//		$usergroups = new zbj_model_cp_usergroups();
//		$params['groups'] = $usergroups->select("pid=164 or group_id in (22,106,44,141)", '`group_id`,`name`')->items;
		//
		
// 		var_dump($list[1]);
		
		//检查task是否是机会系统产出 添加相应的boss员工信息和标记 shenfeng
		$tasklist = array();
		foreach ($list as $v){
			$task_list_id[] = $v['task_id'];
			if(!in_array($v['task_id'],$tasklist)){
				$tasklist[] = $v['task_id'];
			}
		}
		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
		$api = new com\zhubajie\crm\interfaces\ChanceServiceClient(null);
		zbj_lib_ApiClient::build($api);
		$re = $api->CheckTask($tasklist);
		$check_result = array();
		if($re->data_obj->items !== null){
			foreach ($re->data_obj->items as $k => $v){
				$check_result[$v['task_id']] = $v;
			}
		}

		//商机订单数据
        if(!empty($task_list_id)){
            $task_id_string = implode(',',$task_list_id);
            $task_id_string = trim($task_id_string,',');
        }

		//派单类型
		$recmd_types = array();
		if(!empty($task_list_id)) {
			$task_extends_model = zbj_model_api::get("zbj_model_mk_taskextends");
			$condi = array(
				' task_id in (' . implode(",", $task_list_id) . ')'
			);
			$recmd_types = $task_extends_model->select($condi, "task_id,recmd_type,is_package")->items;
			if (is_array($recmd_types) && !empty($recmd_types)) {
				$recmd_types = zbj_lib_BaseUtils::indexArray($recmd_types, "task_id");
			}
		}
        //客户类型，加急客户，重点客户
        if($task_id_string){         
            $bstoct_task_obj = zbj_model_api::get('zbj_model_mk_bstocttask');
            $bstoct_task_res = $bstoct_task_obj->select("task_id in({$task_id_string})",'task_id,bs_to_ct_id')->items;
        }

        if($bstoct_task_res){
        	foreach($bstoct_task_res as $k=>$v){
        		$bstoct_task_array[$v['bs_to_ct_id']] = $v['bs_to_ct_id'];
        		$bstoct_task_id[$v['bs_to_ct_id']][$v['task_id']] = $v['task_id'];
        	}
        	$bstoct_task_string = implode(',',$bstoct_task_array);
            $bstoct_task_string = trim($bstoct_task_string,',');

            if($bstoct_task_string){
            	$bstoct_obj = zbj_model_api::get('zbj_model_mk_bstoct');
                $bstoct_res = $bstoct_obj->select("bs_to_ct_id in({$bstoct_task_string})",'bs_to_ct_id,isurgent')->items;
            }

            if($bstoct_res){
            	foreach($bstoct_res as $k=>$v){
                    foreach($bstoct_task_id[$v['bs_to_ct_id']] as $kk=>$vv){
                		$bstoct[$vv] = $v['isurgent'];
                	}
            	}
            }
            
        }

        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,10,array('zbj_reward_sdk'));
		foreach ($list as $k => $its){
			//商机类型
            $list[$k]['isurgent'] = $bstoct[$its['task_id']];
			if(array_key_exists($its['task_id'], $check_result)){
				$list[$k]["is_produced_by_chance"] = 1;
				$list[$k]["boss_user_name"] = $check_result[$its['task_id']]['name'];
				$list[$k]["boss_user_nickname"] = $check_result[$its['task_id']]['nickname'];
			}else{
				$list[$k]["is_produced_by_chance"] = 0;
			}

            $taskId = $its['task_id'];
            $hall_id = $its['hall_id'];
            $arr_reward_status = array();

            if($hall_id>0){
                //获取套餐信息
                // zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,10,array('zbj_reward_sdk'));
                $s_pac = new com\zhubajie\reward\interfaces\PackageServiceClient(null);
                zbj_lib_ApiClient::build($s_pac);

                $detailSearchDo = new com\zhubajie\reward\dataobject\Package\DetailSearchDo();
                $detailSearchDo->package_id = 0;
                $detailSearchDo->task_id = $taskId;
                $pac_result = $s_pac->getDetai($detailSearchDo);

                if($pac_result->success){
                    $s_detail = new com\zhubajie\reward\dataobject\Package\DetailDo();
                    $s_detail = $pac_result->detail;
                    $arr_reward_status['type'] = $s_detail->type;
                    $arr_reward_status['define_type'] = $s_detail->define_type;
                }
            }
            $list[$k]['reward_status'] = $arr_reward_status;
		}	
		
		//为田红花团队添加 带发人的姓名 产品江东 shenfeng 2015-03-25
		$tmp_userid_arr = array();
		foreach ($list as $k => $its){
			$tmp_userid_arr[] = $its['from_manager_id'];
			//派单类型
			if (is_array($recmd_types) && !empty($recmd_types)) {
                if(array_key_exists($its['task_id'],$recmd_types)){
					$list[$k]['recmd_type'] = $recmd_types[$its['task_id']]['recmd_type'];
					$list[$k]['is_package'] = $recmd_types[$its['task_id']]['is_package'];
				}
			}
		}
		lib_BaseUtils::apiInit();
		$s_message=new com\zhubajie\boss\interfaces\userv2ServiceClient(null);
		lib_BaseUtils::apigetclient($s_message);
		$u=new com\zhubajie\boss\dataobject\userv2\InputUsers();
		$u->user_ids=array_unique($tmp_userid_arr);
		$rt = $s_message->ListUsers($u);
		$user_name_arr = array();
		if($rt->result->success && is_array($rt->users)){
			foreach ($rt->users as $item){
				$user_name_arr[$item->uid] = (array)$item;
			}
		}
		foreach ($list as $k => $lit){
			if(isset($user_name_arr[$lit['from_manager_id']])){
				$list[$k]['boss_name'] = $user_name_arr[$lit['from_manager_id']]['name'];
			}else{
				$list[$k]['boss_name'] = "**";
			}
		}
		
		$params['list'] = $list;
		$params['total'] = (int) $oTask->totalSize;
		$params['fields'] = $fieldsConfig;
		$params['fields_key'] = $fields;
        //shenfeng
        if(isset($_GET['myagent'])){
            $params['fields']["boss_name"] = array("name"=>"代发人");
            $params['fields_key'][] = "boss_name";
        }
		$params['allfields'] = $sConfig->getFields();
		$params['types'] = $types;
		$params['levels'] = array(1 => 'A类', 'B+类', 'B类', 'C类', 'D类', 'E类', 'X类', 20 => '急', '高', '中', '低');
		$params['elevels'] = array(1 => 'A类', 'B类', 'C类', 'D类', 'E类');
		$params['actiontype'] = service_recommendwk::getType();
		$params['myid'] = $this->_userid;
		$params['mygroup'] =  $s_cpallot->getConfigIDByMnagerID($this->_userid);
		//分类
		$sCategory = new service_category();
		$params['category1'] = $sCategory->getChild();
		$params['categorys'] = $sCategory->getCategorys();
		//行业
		$s_module = new service_module();
		$params['modules'] = $s_module->getModule();
		//分页
		$params['pagebar'] = $this->PageBar($oTask->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);

		if(isset($_GET['myagent'])){
			$params['fields']['boss_name'] = array('name'=>'代发客服');
			$params['fields_key'][] = "boss_name";
			switch ($_GET['myagent']){
				case 0:{//所有代发
					$params['title'] = '所有的代发';
					return $this->render('task/tasklist-myagent.html', $params);
					break;
				}
				case 1:{//我的代发
					$params['title'] = '我的代发';
					return $this->render('task/tasklist-myagent.html', $params);
					break;
				}
				default:
					return $this->render('task/tasklist.html', $params);
					break;
			}
		}else{
			return $this->render('task/tasklist.html', $params);
		}
	}
	
	/**
	 * 订单分配概况
	 */
	function pageTaskAllotInfo(){
		$createdate = lib_BaseUtils::getStr($_GET['createdate']);
		//组列表
		$mGroups = new zbj_model_cp_usergroups();
		$gList = $mGroups->select("group_id in (101, 7, 8, 74, 75, 76, 104)", 'group_id,name')->items;
		$glist = lib_BaseUtils::array_changekey($gList, 'group_id');
		//用户列表
		$mUser = new zbj_model_cp_user();
		$uList = $mUser->select("group_id in (101, 7, 8, 74, 75, 76, 104)", 'user_id,group_id,name')->items;
		$uList = (array)$uList;
		foreach ($uList as $value) {
			$params['ulist'][$value['group_id']][] = $value;
		}
		$userinfo = array();
		$groupinfo = array();
		$allinfo = array();
		//剩余订单配额=每日配额-（已分配|已认领-已托管-已关闭-已放弃）
		if($_GET['debug']){
			define('DEBUG', 1);
		}
		
		$cpallot = new service_cpallot();
		$mAllottoday = new model_cp_allottoday();
		if ($createdate != date('Y-m-d')) {
			$alist = $mAllottoday->getList(array('createdate' => $createdate))->items;
			if ($alist) {
				$alist = lib_BaseUtils::array_changekey($alist, 'manager_id');
			}else{
				return $this->render('task/taskallotinfo.html');
			}
		}
		foreach ($uList as $value) {
			$manager_id = $value['user_id'];
			$group_id = $value['group_id'];
			if ($alist) {
				//已分配订单
				$userinfo[$manager_id]['allocated'] = $alist[$manager_id]['allocated'];
				//锁定雇主订单
				$userinfo[$manager_id]['locktask'] = $alist[$manager_id]['locktask']; //锁定雇主订单
				$userinfo[$manager_id]['locktask_hosted'] = $alist[$manager_id]['locktask_hosted']; //已托管锁定雇主订单
				$userinfo[$manager_id]['unlocktask_claim'] = $alist[$manager_id]['unlocktask_claim']; //已认领锁定公海雇主订单
				$userinfo[$manager_id]['unlocktask'] = $alist[$manager_id]['unlocktask']; //锁定公海雇主订单
				$userinfo[$manager_id]['unlocktask_hosted'] = $alist[$manager_id]['unlocktask_hosted']; //已托管锁定公海雇主订单
				$userinfo[$manager_id]['close'] = $alist[$manager_id]['close_num']; //已关闭
				$userinfo[$manager_id]['drop'] = $alist[$manager_id]['drop_num']; //已放弃
				//剩余订单配额
				$maxNum = $alist[$manager_id]['max_num'];
			} else {
				//已分配订单
				$userinfo[$manager_id]['allocated'] = $cpallot->getAllocated($manager_id);
				//锁定雇主订单
				$quotainfo = $cpallot->getQuotaInfo($manager_id);
				$userinfo[$manager_id]['locktask'] = $quotainfo['locktask']; //锁定雇主订单
				$userinfo[$manager_id]['locktask_hosted'] = $quotainfo['locktask_hosted']; //已托管锁定雇主订单
				$userinfo[$manager_id]['unlocktask_claim'] = $cpallot->getClaimNum($manager_id); //已认领锁定公海雇主订单
				$userinfo[$manager_id]['unlocktask'] = $quotainfo['unlocktask']; //锁定公海雇主订单
				$userinfo[$manager_id]['unlocktask_hosted'] = $quotainfo['unlocktask_hosted']; //已托管锁定公海雇主订单
				$userinfo[$manager_id]['close'] = $quotainfo['close']; //已关闭
				$userinfo[$manager_id]['drop'] = $quotainfo['drop']; //已放弃
				//剩余订单配额
				$maxNum = $cpallot->getMax($manager_id);
			}
			$userinfo[$manager_id]['unlocktask'] -= $userinfo[$manager_id]['unlocktask_claim'];
			$userinfo[$manager_id]['surplusquota'] = $maxNum - $userinfo[$manager_id]['unlocktask'] - $userinfo[$manager_id]['unlocktask_claim'] + $userinfo[$manager_id]['unlocktask_hosted'] + $userinfo[$manager_id]['close'] + $userinfo[$manager_id]['drop'];
			$userinfo[$manager_id]['surplusquota_str'] = "{$maxNum} - {$userinfo[$manager_id]['unlocktask']} - {$userinfo[$manager_id]['unlocktask_claim']} + {$userinfo[$manager_id]['unlocktask_hosted']} + {$userinfo[$manager_id]['close']} + {$userinfo[$manager_id]['drop']}";
			//组
			$groupinfo[$group_id]['name'] = $glist[$group_id]['name'];
			$groupinfo[$group_id]['allocated'] += (int) $userinfo[$manager_id]['allocated']; //已分配订单
			$groupinfo[$group_id]['locktask'] += (int) $userinfo[$manager_id]['locktask']; //锁定雇主订单
			$groupinfo[$group_id]['locktask_hosted'] += (int) $userinfo[$manager_id]['locktask_hosted']; //已托管锁定雇主订单
			$groupinfo[$group_id]['unlocktask_claim'] += (int) $userinfo[$manager_id]['unlocktask_claim']; //已认领锁定公海雇主订单
			$groupinfo[$group_id]['unlocktask'] += (int) $userinfo[$manager_id]['unlocktask']; //锁定公海雇主订单
			$groupinfo[$group_id]['unlocktask_hosted'] += (int) $userinfo[$manager_id]['unlocktask_hosted']; //已托管锁定公海雇主订单
			$groupinfo[$group_id]['close'] += (int) $userinfo[$manager_id]['close']; //已关闭
			$groupinfo[$group_id]['drop'] += (int) $userinfo[$manager_id]['drop']; //已放弃
			$groupinfo[$group_id]['surplusquota'] += (int) $userinfo[$manager_id]['surplusquota']; //剩余订单配额
			//总数
			$allinfo['allocated'] += (int) $userinfo[$manager_id]['allocated']; //已分配订单
			$allinfo['locktask'] += (int) $userinfo[$manager_id]['locktask']; //锁定雇主订单
			$allinfo['locktask_hosted'] += (int) $userinfo[$manager_id]['locktask_hosted']; //已托管锁定雇主订单
			$allinfo['unlocktask_claim'] += (int) $userinfo[$manager_id]['unlocktask_claim']; //已认领锁定公海雇主订单
			$allinfo['unlocktask'] += (int) $userinfo[$manager_id]['unlocktask']; //锁定公海雇主订单
			$allinfo['unlocktask_hosted'] += (int) $userinfo[$manager_id]['unlocktask_hosted']; //已托管锁定公海雇主订单
			$allinfo['close'] += (int) $userinfo[$manager_id]['close']; //已关闭
			$allinfo['drop'] += (int) $userinfo[$manager_id]['drop']; //已放弃
			$allinfo['surplusquota'] += (int) $userinfo[$manager_id]['surplusquota']; //剩余订单配额
		}
		$params['userinfo'] = $userinfo;
		$params['groupinfo'] = $groupinfo;
		$params['allinfo'] = $allinfo;
		return $this->render('task/taskallotinfo.html', $params);
	}
	/**
	 * 任务退款组长审核
	 * @param unknown $inPath
	 * @return Ambigous <string, void, boolean, mixed, unknown>
	 */
	public function pageauditrefund($inPath){
		define('PAGE_SIZE', 20);
		$urlparams=$this->getUrlParams($inPath);
		$condition = array();
		$condition['audit_state']=0;//只显示组长审核通过的。
		$page = $urlparams["page"] ? intval($urlparams["page"]) : 1; //页数
		$gid=zbj_lib_BaseUtils::getStr($_GET['gid'],'int');
		$uid=zbj_lib_BaseUtils::getStr($_GET['uid'],'int');
// 		$audit_reqadmin=zbj_lib_BaseUtils::getStr($_GET['audit_reqadmin'],'int');
		if($gid){
			if($uid){
				$condition['audit_manager_id']=$uid;
			}else{
//				$condition['audit_manager_teamid']=$gid;
				$s_manager = new service_manager();
				$temp = $s_manager->getIndustryuser(0, 1);
				$auids = implode(',', $temp[$gid]['ids']);
				$condition[] = "audit_manager_id in ({$auids})";
			}
		}
// 		if($audit_reqadmin){
// 			$condition['audit_reqadmin']=1;
// 		}
		$audit_state=zbj_lib_BaseUtils::getStr($_GET['audit_state'],'int');
		if(in_array($audit_state,array(-1,1,2))){
			$condition['audit_state']=$audit_state==-1?0:$audit_state;
		}
		//400客服退款
		if (3 == $audit_state) {
			$s_cpuser = new service_cpuser();
			$group_399 = $s_cpuser->getGroupUsers(399);
			$group_400 = $s_cpuser->getGroupUsers(400);
			$group_401 = $s_cpuser->getGroupUsers(401);
			$add_users = implode(array_merge(array_keys($group_399), array_keys($group_400), array_keys($group_401)), ',');
			
			$condition[] = "add_userid IN ({$add_users})";
		}
		
		//行业
		$module_id = zbj_lib_BaseUtils::getStr($_REQUEST['module_id']);
		if ($module_id) {
			if (-1 != $module_id) {
				$s_module = new service_module($module_id);
				$categories = $s_module->getCategoryIdStrByModuleId();
			} else {
				$s_module = new service_module();
				$categories = $s_module->getCategoryIdStrByModuleId(0, false);
			}
			
			$condition[] = "category_id IN ({$categories})";
		}
		
		$sht=zbj_lib_BaseUtils::getStr($_REQUEST['sht'],'string');
		$eht=zbj_lib_BaseUtils::getStr($_REQUEST['eht'],'string');
		if($sht){
			$condition[]=" dateymd >= '{$sht}' ";
		}
		if($eht){
			$condition[]=" dateymd <= '{$eht}' ";
		}
		$tk = new zbj_model_fn_tk();
		$tk->setLimit(PAGE_SIZE);
		$tk->setCount(true);
		$tk->setPage($page);
		$list = $tk->select($condition, '*', '', 'order by tk_id desc');
		if($list->totalSecond){
			$taskids=array();
			foreach ($list->items as $tk){
				array_push($taskids, $tk['task_id']);
			}
		}
		$m_mk_task=new zbj_model_mk_task();
		$taskdata=$m_mk_task->select("mk_task.task_id in (".implode(',', $taskids).") and mk_task_info.pub_type < 9",'mk_task.task_id,title,refund_option',null,null,array('mk_task_opis'=>'mk_task_opis.task_id=mk_task.task_id','mk_task_info'=>'mk_task_info.task_id=mk_task.task_id'));
		$taskdata=lib_BaseUtils::array_changekey($taskdata->items, 'task_id');
		if($list->totalSecond){
			$taskids=array();
			foreach ($list->items as $tk=>$val){
				$list->items[$tk]['task']=$taskdata[$val['task_id']];
			}
		}
		$this->tplvar['tktask']=$list->items;
		$s_cpoption=new service_cpoption();
		$this->tplvar['fulloptions']=$s_cpoption->getFullItems();
		$this->tplvar['total']=$list->totalSize;
		$this->tplvar['pagebar']=$this->PageBar($list->totalSize, PAGE_SIZE, $page, $inPath,'style4',$_SERVER['QUERY_STRING']);
// 		$usergroups = new zbj_model_cp_usergroups();
//		$this->tplvar['groups'] = $usergroups->select("pid=164 or group_id in (22,106,44,141)", '`group_id`,`name`')->items;
		
		$s_cpallot = new service_cpallot();
		$this->tplvar['groups'] = $s_cpallot->getAllotGroup(1);
		//
		$sConfig = new service_config();
		$types = $sConfig->getOfferTypes();
		unset($types[9]);
		$this->tplvar['types'] = $types;
		$this->tplvar['mygroup'] = $this->_usergroupid;
		
		//行业
		$s_module = new service_module();
		$this->tplvar['modules'] = $s_module->getModule();
		
		return $this->render('task/auditrefund.html', $this->tplvar);
	}
	
	/**
	 * 放弃跟进列表
	 */
	public function pageGiveUpList($inPath){
		define('PAGE_SIZE', 20);
		$condition = array();
		$condition[] = 'mk_task_info.pub_type <9';
		
		$urlparams = $this->getUrlParams($inPath);
		$page = $urlparams["page"] ? ($urlparams["page"]) : 1;
		
		$gid = zbj_lib_BaseUtils::getStr($_GET['gid'],'int');
		$uid = zbj_lib_BaseUtils::getStr($_GET['uid'],'int');
		if($gid){
			if($uid){
				$condition['mk_task.manager_id'] = $uid;
			}else{
//				$condition['manager_teamid'] = $gid;
				$s_manager = new service_manager();
				$temp = $s_manager->getIndustryuser(0, 1);
				$auids = implode(',', $temp[$gid]['ids']);
				$condition[] = "mk_task.manager_id in ({$auids})";
			}
		}
		
		$sht = zbj_lib_BaseUtils::getStr($_REQUEST['sht'],'string');
		$eht = zbj_lib_BaseUtils::getStr($_REQUEST['eht'],'string');
		if($sht){
			$condition[] = " giveupymd >= '{$sht}' ";
		}
		if($eht){
			$condition[] = " giveupymd <= '{$eht}' ";
		}
		
		$state = zbj_lib_BaseUtils::getStr($_GET['state'],'int')?zbj_lib_BaseUtils::getStr($_GET['state'],'int'):0;
		if(-1 == $state){
			$condition[] = 'giveup_status != 0';
		}elseif(0 == $state){
			$condition['giveup_status'] = 1;
		}elseif(1 == $state){
			$condition['giveup_status'] = 2;
		}else{
			$condition['giveup_status'] = 3;
		}
		
		$mode = zbj_lib_BaseUtils::getStr($_GET['mode'],'int')?zbj_lib_BaseUtils::getStr($_GET['mode'],'int'):0;
		switch ($mode) {
			case 0:
				break;
			case 1:
				$condition['mk_task.mode'] = 10;
				$condition['allot'] = 1;
				break;
			case 2:
				$condition['mk_task.mode'] = 10;
				$condition['allot'] = 2;
				break;
			case 3:
				$condition['mk_task.mode'] = 10;
				$condition['allot'] = 3;
				break;
			case 4:
				$condition['mk_task.mode'] = 12;
				break;
			case 5:
				$condition['mk_task.mode'] = 11;
				break;
			case 6:
				$condition['mk_task.mode'] = 13;
				break;
			default:
				break;
		}
		
		//行业
		$module_id = zbj_lib_BaseUtils::getStr($_REQUEST['module_id']);
		if ($module_id) {
			if (-1 != $module_id) {
				$s_module = new service_module($module_id);
				$categories = $s_module->getCategoryIdStrByModuleId();
			} else {
				$s_module = new service_module();
				$categories = $s_module->getCategoryIdStrByModuleId(0, false);
			}
				
			$condition[] = "category_id IN ({$categories})";
		}
		
		$leftjoin = array('mk_task' => 'mk_task.task_id = mk_follow.task_id','mk_task_info'=>'mk_task_info.task_id=mk_task.task_id');
		$item = array('mk_follow.task_id as task_id', 'title', 'mk_task.manager_name as manager_name', 'giveup_option', 'giveuptime', 'amount', 'expriestime', 'expries', 'giveup_status');
		$orderby = 'ORDER BY giveuptime DESC';
		$m_follow = zbj_model_api::get(model_mk_follow);
		
		$m_follow->setLimit(PAGE_SIZE);
		$m_follow->setPage($page);
		$m_follow->setCount(true);
		$task_list = $m_follow->select($condition, $item, '', $orderby, $leftjoin);
		
		$this->tplvar['task_list']=$task_list->items;
		
		$s_cpoption=new service_cpoption();
		$this->tplvar['fulloptions']=$s_cpoption->getFullItems();
		
		$this->tplvar['total']=$task_list->totalSize;
		
		$this->tplvar['pagebar']=$this->PageBar($task_list->totalSize, PAGE_SIZE, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
		
		$usergroups = new zbj_model_cp_usergroups();
//		$this->tplvar['groups'] = $usergroups->select("pid=164 or group_id in (22,106,44,141)", '`group_id`,`name`')->items;
		$s_cpallot = new service_cpallot();
		$this->tplvar['groups'] = $s_cpallot->getAllotGroup(1);
		//
		$sConfig = new service_config();
		$types = $sConfig->getOfferTypes();
		unset($types[9]);
		$this->tplvar['types'] = $types;
		$this->tplvar['mygroup'] = $this->_usergroupid;
		//行业
		$s_module = new service_module();
		$this->tplvar['modules'] = $s_module->getModule();
		
		return $this->render('task/giveUpList.html', $this->tplvar);
	}
	
	/**
	 * @abstract 对前台未正常生成的订单进行处理
	 */
	public function pageHandleAbnormalOrder ($inPath) {
//		define('DEBUG', true);
		$tid = zbj_lib_BaseUtils::getStr($_GET['tid']);
		if (! $tid) {
			echo "请输入订单号";
		}
		
		$m_follow = new model_mk_follow();
		$item = array(
			'expries' => '0000-00-00', 
			'expriestime' => 0, 
			'issea' => 2, 
			'giveup_option' => 236, 
			'giveuptime' => $this->_time, 
			'giveupymd' => date('Y-m-d', $this->_time),
			'giveup_status' => 2
		);
		$m_follow->update(array('task_id' => $tid), $item);
		
		$m_task_opis = new zbj_model_mk_taskopis();
		$m_task_opis->update(array('task_id' => $tid), array('is_followtimeout' => 0));
		
		$m_cp_allot_log = new zbj_model_cp_allotlog();
		$m_cp_allot_log->update(array('processed' => 0, 'rid' => $tid), array('processed' => 1, 'processeddate' => date('Y-m-d', $this->_time), 'processeddateline' => $this->_time));
		
		echo "执行成功";
	}
	
	/**
	 * @abstract 超期未选标需求列表
	 */
	public function pageOverdueTaskList ($inPath) {
		$this->init($inPath);
		$urlparam = $this->getUrlParams($inPath);
		
		$limit = 10;
		$page = isset($this->url['page']) ? (int) $this->url['page'] : 1;
		
		
		
		$m_task = new zbj_model_mk_task();
		$m_task_opis = new zbj_model_mk_taskopis();
		$m_cp_user = new zbj_model_cp_user();
		
		$condition = array();
		
		$condition[] = '`ext_selectime` < ' . time();
		$condition['mode'] = 10;
		$condition[] = '`allot` in (1, 2)';
		$condition['hosted'] = 1;
		$condition[] = 'mk_task.`amount` = mk_task.`hosted_amount`'; 
		$condition[] = '`sysselect_reason`!= 1';
		
		//售后专员 
		if ($_GET['manager_id3']) {
		    if ($_GET['manager_id3'] == 10000) {
		        $condition['mk_task_opis.timeout_allot'] = 0;
		    }else {
		        $condition[] = "`timeoutallot_date`>= '2015-09-10'";
		        $condition['mk_task_opis.timeout_allot'] = zbj_lib_BaseUtils::getStr($_GET['manager_id3'],'int');
		    }
		}
		
		//选标截止时间
		if ($_GET['sst']) {
			$condition[] = 'ext_selectime >' . strtotime(zbj_lib_BaseUtils::getStr($_GET['sst'],'string'));
		}
		
		if ($_GET['est']) {
			$condition[] = 'ext_selectime <' . strtotime(zbj_lib_BaseUtils::getStr($_GET['est'],'string'));
		}

		//任务超期未选标分配日期 
		if ($_GET['manager_id3'] == 10000) {
		    $sdate = $edate = '';
		}else{
		    $sdate = lib_BaseUtils::getStr($_GET['sdate']) ? lib_BaseUtils::getStr($_GET['sdate']) : date('Y-m-d', strtotime('-7 day'));
		    $edate = lib_BaseUtils::getStr($_GET['edate']) ? lib_BaseUtils::getStr($_GET['edate']) : date('Y-m-d');
		}
		
		if ($sdate) {
			$condition[] = "timeoutallot_date >='" . $sdate."'";
		}
		
		if ($edate) {
			$condition[] = "timeoutallot_date <='" . $edate."'";
		}
		
		$handle_status = lib_BaseUtils::getStr($_GET['handle_status'], 'int');
		$handle_status = $handle_status ? $handle_status : 4;
		//处理状态
		if ($handle_status && $handle_status != 10000) {
			switch ($handle_status) {
				//可退款
				case 2:
				    $condition[] = '`state` < 3';
					$condition[] = '(mk_task_opis.works_status = 1 or mk_task.works_num = 0)';
					break;
				//需开启系统选稿的
				case 3:
				    $condition[] = '`state` < 3';
					$condition[] = '(mk_task_opis.works_status = 2 or mk_task.works_num > 0)';
					$condition['mk_task.is_sysselect'] = 0;					
					break;
				//已开启系统选稿的
				case 4:
				    $condition[] = '`state` < 3';
					$condition[] = '(mk_task_opis.works_status = 2 or mk_task.works_num > 0)';
					$condition['mk_task.is_sysselect'] = 1;	
					break;
				//已处理（对超期订单进行“申请退款”(refund_option>0 && `isfrozen` = 1)、社会化赏金分配state=3、冻结操作isfrozen=1）
				case 5:
				    $condition[] = '(`state` = 4 or `isfrozen` = 1)';
					break;
				default:
					break;
			}
		}
		
		//订单分类
		$category_id = lib_BaseUtils::getStr($_GET['category_id'], 'int');
		if ($category_id > 1) {
		    $condition['category_id'] = $category_id;
		}
		if ($category_id == 1) {
		    $condition[] = '`category_id` not in (1448, 1243, 1244)';
		}
		//获取超期列表
		$m_task->setLimit($limit);
		$m_task->setPage($page);
		$m_task->setCount(true);
		$items = array(
			'`mk_task`.task_id',
			'`mk_task`.title',
			'`mk_task`.amount',
			'`mk_task`.mode',
			'`mk_task`.allot',
			'`mk_task`.works_num',
			'`mk_task`.ext_selectime',
			'`mk_task`.user_id',
			'`mk_task`.nickname',
			'`mk_task`.is_sysselect',
			'`mk_task_opis`.timeout_allot',			
			'`mk_task_opis`.works_status',
			'`mk_task_opis`.timeoutallot_date',
		);
		$orderby = array('ext_selectime'=>'desc');
		$leftjoin = array('mk_task_opis' => 'mk_task_opis.task_id = mk_task.task_id');
		$task_list = $m_task->select($condition, $items, '', $orderby, $leftjoin);
		
		$this->tplvar['task_list'] = $task_list->items;
		$this->tplvar['total'] = $task_list->totalSize;
		
		//分页
		$this->tplvar['pagebar'] = $this->PageBar($task_list->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
		
		
		
		//售后专员
		$temp = $m_task_opis->select('timeout_allot != 0', 'DISTINCT(timeout_allot)')->items;
		if ($temp) {
			$manager_id = array();
			foreach ($temp as $manager) {
				$manager_id[] = $manager['timeout_allot'];
			}
			$temp = $m_cp_user->select('user_id in (' . implode(',', $manager_id) . ')', 'user_id, name')->items;
			if ($temp) {
			    $commissioners = array();
			    foreach ($temp as $manager) {
			        $commissioners[$manager['user_id']] = $manager['name'];
			    }
			}
		}
		
		$this->tplvar['user_id'] = $this->_userid;
		$this->tplvar['commissioners'] = $commissioners;
		$this->tplvar['manager_id3'] = zbj_lib_BaseUtils::getStr($_GET['manager_id3'],'int');
		$this->tplvar['sst'] = zbj_lib_BaseUtils::getStr($_GET['sst'],'string');
		$this->tplvar['est'] = zbj_lib_BaseUtils::getStr($_GET['est'],'string');
		$this->tplvar['sdate'] = $sdate;
		$this->tplvar['edate'] = $edate;
		$this->tplvar['handle_status'] = $handle_status;
		//导航
		return $this->render('task/overdueTaskList.html', $this->tplvar);
	}
	/**
	 * 批量结束任务
	 * @param unknown $inPath
	 */
	public function pageendtask($inPath){
		if(!count($_POST)){
			return $this->render('task/endtask.html', $this->tplvar);
		}
		header('content-type:text/plain;charset=utf-8;');
		$tasks=explode(PHP_EOL, $_POST['task_ids']);
		if(count($tasks)>50){
			return "请输入小于50个任务号。";
		}
		$m_fn_tk=new zbj_model_fn_tk();
		foreach ($tasks as $task_id){
			$task_id=intval($task_id);
			echo $task_id."\t";
			if($task_id<=0){
				echo "需求号不合法".PHP_EOL;
				continue;
			}
			$s_task=new zbj_service_task($task_id);
			$s_task=$s_task->init();
			if($s_task->get('open_state')==1){
				echo "需求已经关闭".PHP_EOL;
				continue;
			}
			if($s_task->get('state')==3){
				echo "需求已选稿".PHP_EOL;
				continue;
			}
			if($s_task->get('state')==4){
				echo "需求已结束".PHP_EOL;
				continue;
			}
// 			if($s_task->get('hosted')==0){
// 				echo "需求未托管".PHP_EOL;
// 				continue;
// 			}
			
			$tkdata = $m_fn_tk->selectOne ( array (
					'task_id' => $s_task->get ( 'task_id' ),
					'state' => 0
			) );
			if($tkdata){
				echo "需求有退款".PHP_EOL;
				continue;
			}
			$order=$s_task->getOneWinOrder(null,1);
			if($order){
				echo "需求已经有选中标稿件".PHP_EOL;
				continue;
			}
			if($s_task->get('state')!=2){
				echo "需求没有在交稿状态".PHP_EOL;
				continue;
			}
			//使用关闭的方式执行任务
			$iRef = 181;
			$sOther = "用户要求关闭";
			$remark = "后台批量结束任务并退款。";
			if(in_array($s_task->get('mode'), array(10,13))){
				$fl = $s_task->refuseTask(true);
			}elseif(in_array($s_task->get('mode'), array(11,12))){
				$fl = $s_task->refuseDeal(2);
			}
			if ($fl === false) {
				echo "结束任务失败原因：".$s_task->getError().PHP_EOL;
				$log="结束任务并退款失败原因:".$s_task->getError();
			}else{
				echo "结束任务成功".PHP_EOL;
				$log="后台批量结束任务并退款。";
				$data = array('cpo_ishide'=>1,'open_state'=>1,'audit_state'=>2,'task_opis.refused'=>$iRef);
				$s_task->set($data);
				$s_task->set('task_opis.is_followtimeout',0);
				$s_task->save();
				$s_score=new service_score();
				$s_score->deleteByTask_id($task_id);
				$mdlTask = zbj_model_api::get('zbj_model_mk_task');
				$mdlTask->upTaskSearch($task_id, 'U');
				$s_allot=new zbj_service_allot(1);
				$s_allot->processed($task_id);
				$s_allot = new zbj_service_allot(2);
				$s_allot->processed($task_id);
				$s_allot4 = new zbj_service_allot(4);
				$s_allot4->processed($task_id);
				$s_allot17 = new zbj_service_allot(17);
				$s_allot17->processed($task_id);
				$s_allot5 = new zbj_service_allot(5);
				$s_allot5->processed($task_id);
			}
			$s_task=new zbj_service_task($task_id);
			$s_task=$s_task->init();
			$s_task->addTaskActionLog($log,false);
			$this->addLog($task_id,$log);
		}
	}
	/*
	boss后台订单库增加特殊需求标识
	return task_id号用于给检索到的task_id号添加特殊需求标识
	*/
	public function pageSpecialTaskList ($inPath){
		$special_list_id = trim($_POST['task_id_list']);
		if(!$special_list_id)
			return false;
		$task_ids = explode(',',$special_list_id);
		$new_task_id = array();
		foreach ($task_ids as $task_id){
			$task_id=intval($task_id);
			if($task_id<=0){
				continue;
			}
			$new_task_id[]=$task_id;
		}
		if(count($new_task_id) == 0)
			return false;
		$task_ids = implode(',',$new_task_id);
		$bidmodetask = zbj_model_api::get('zbj_model_mk_bidmodetask');
		$result = $bidmodetask->select('task_id in ('.$task_ids.') and mode_type = 1','task_id')->items;
		return json_encode($result);
        
	}

    /**
     * 设置香港馆需求显示或隐藏
     *
     * @param $inPath
     * @return bool
     */
    public function pageHk( $inPath ) {
        $this->init( $inPath );

        $hk = new service_hk();
        $res = $hk->update( $this->url['zid'], $this->url['tid'], $this->url['state'] );

        if ( $res === false ) {
            return $this->printmsg( '更新失败', 0 );
        }

        return $this->printmsg( '香港馆列表显示状态更新成功', 2, '', $_SERVER['HTTP_REFERER'] );
    }


    /**
     * 任务最终页服务商列表
     * @param $inPath
     */
    public function pageWitkey($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $task_id = intval($urlparam['id']);
        $this->tplvar['task_id'] = $task_id;
        $lists = $this->ScreeningServices($inPath);
        $this->tplvar = array_merge($this->tplvar,$lists);
        $html = $this->render('task/viewpart/witkey.html', $this->tplvar);
        return $this->printmsg( $html, 1 );
    }

    /**
     * 任务最终页联系服务商列表
     */
    public function pageContact($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        $task_id = intval($urlparam['taskid']);
        //更新投标
        $this->updateRecommendAction($task_id);
        $mdlSeller = zbj_model_api::get('zbj_model_mk_taskseller');
        $mktasksign = zbj_model_api::get('zbj_model_mk_tasksign');
        $mkrecommend = zbj_model_api::get('zbj_model_mk_recommend');
        $contact_num = $allot_num = $bid_num = 0;
        $counts = $mdlSeller->selectOne("task_id={$task_id}",'sum(contacted) as contacted,sum(alloted) as alloted,sum(bided) as bided');
        
        $contact_num = intval($counts['contacted']);
        $allot_num = intval($counts['alloted']);
        $bid_num = intval($counts['bided']);

        //更新是否已经投标
        $allmseller = $mdlSeller->select("task_id={$task_id}",'','','')->items;
        if ($allmseller) {
            foreach($allmseller as $vv) {
                $uidArrall[] = $vv['user_id'];
            }
            $uidStrall = implode(',', $uidArrall);
            //mk_task_sign查是否有投标
	        $mktasksigns = $mktasksign->select("user_id in({$uidStrall}) and task_id={$task_id}",'','','')->items;
            //mk_task_sign有投标的话，更新mk_task_seller表的bided=1
            if(!empty($mktasksigns)){
            	foreach($mktasksigns as $k=>$v){
            		$sqls[$k] = "update mk_task_seller set bided=1 where task_id={$v['task_id']} and user_id={$v['user_id']};";
            	}

            	$tasksellersql = implode('',$sqls);
                $mdlSeller->query($tasksellersql);
            }
            unset($v);
            unset($k);
            //mk_recommend有派单的话，跟新mk_task_seller表的alloted=1
            $mkrecommends = $mkrecommend->select("user_id in({$uidStrall}) and task_id={$task_id}",'','','')->items;
            if(!empty($mkrecommends)){
            	$typelist = service_recommend::getType();
            	foreach($mkrecommends as $k=>$v){
            		$recommendsql[$k] = "update mk_task_seller set alloted=1 where task_id={$v['task_id']} and user_id={$v['user_id']};";
            	    $this->tplvar['recommend_data'][$v['user_id']]['sendtime'] = $v['sendtime'];
            		$this->tplvar['recommend_data'][$v['user_id']]['action_type'] = $typelist[$v['action_type']];
            		$this->tplvar['recommend_data'][$v['user_id']]['action_notes'] = $v['action_notes'];
            	}
            	$recommendsqls = implode('',$recommendsql);
                $mdlSeller->query($recommendsqls);
            }
        }
        unset($v);
        unset($k);

        $limit = 10;
        //页数
    	$page = zbj_lib_BaseUtils::getStr($urlparam['page'],'int');
        $page = $page>=1?(int)$page:1;
        $mdlSeller->setCount(true);
		$mdlSeller->setPage($page);
		$mdlSeller->setLimit($limit);
		
        $mseller = $mdlSeller->select("task_id={$task_id}",'','','order by contacted asc,alloted asc,bided asc');
        $seller = $mseller->items;

        if ($seller) {
            foreach($seller as $v) {
                $tsidArr[] = $v['ts_id'];
                $uidArr[] = $v['user_id'];
            }
            $uidArr = array_unique($uidArr);
            //跟进记录
            $tsidStr = implode(',', $tsidArr);
            $mdlContact = zbj_model_api::get('zbj_model_mk_tasksellercontactlog');
            $contact = $mdlContact->select("ts_id in({$tsidStr})",'','','order by sc_id desc')->items;
            $contact_data = array();
            foreach($contact as $v) {
            	if(count($contact_data[$v['ts_id']]) < 2){
                    $contact_data[$v['ts_id']][] = $v;
                }
            }

            //通过服务商ID搜索服务商信息
	        $user_search = $this->SearchService($uidArr);
	        
	        if(!empty($user_search['list'])){
	        	$searchresult = $this->user_search($user_search,$uidArr);
	        }
        }
       
        if(!empty($searchresult)){
        	$this->tplvar['user_search'] = $searchresult['user_searchs'];
        	$this->tplvar['Remark_data'] = $searchresult['Remark_data'];
            $this->tplvar['action_type'] = $searchresult['action_type'];
        }

		//派单条件
		$recommend_log_model = zbj_model_api::get("zbj_model_mk_recommendlog");
		if($info = $recommend_log_model->selectOne(array('task_id'=>$task_id),"conditions",null," order by id desc")){
			$this->tplvar['conditions'] = $this->sellerFilterDataLog(unserialize($info['conditions']));
		}

		$taskSrv = new service_task($task_id);
        $this->tplvar['recmd_status'] = $taskSrv->get("task_opis.recmd_status");
        $this->tplvar['list'] = $seller;
        $this->tplvar['contact_data'] = $contact_data;
        $this->tplvar['task_id'] = $task_id;
        $this->tplvar['total_nums'] = intval($mseller->totalSize);	
        $this->tplvar['contact_num'] = $contact_num;
        $this->tplvar['allot_num'] = $allot_num;
        $this->tplvar['bid_num'] = $bid_num;
        $this->tplvar['pagebar'] = $this->PageBar($mseller->totalSize, $limit, $page, $inPath, 'style1', '?' . $_SERVER['QUERY_STRING']);
        $html = $this->render('task/viewpart/contact.html', $this->tplvar);
        return $this->printmsg( $html, 1 );
    }

    /**
     * 通过服务商ID搜索服务商信息
     * 传入 $user_search 搜索引擎搜索到的数据 $uidArr array 服务商ID
     * 返回 $result array 服务商信息
     */
    private function user_search($user_search,$uidArr){
    	$srvUser = new zbj_service_user();
        //能力等级
	    $ability = $srvUser->abilityLevelConfig();
        //签约等级
	    $goldname = array(4=>'皇冠',3=>'钻石',2=>'金牌',1=>'银牌',0=>'普通');
	    //地区
	    $getProvinceList = $this->getProvinceList();
	    foreach($getProvinceList as $k=>$v){
	    	$provincelist[$v['region_id']] = $v['region_name'];
	    }
	    //获取行业
	    $ModuleByCategory = $this->getModuleByCategory();

    	foreach($user_search['list'] as $key=>$value){
    		//地区
			if (!empty($value['address'])) {
				$provinceId = explode(',',trim($value['address'],','));
				foreach($provinceId as $k=>$v){
					$aprovinces[$k] = $provincelist[$v];
			    }
				$user_search['list'][$key]['province_name'] = implode(',',$aprovinces);
			}

			//签约等级
			if(!empty($value['fwslevel'])){
				$fwslevel = explode(',',trim($value['fwslevel'],','));
				foreach($fwslevel as $k=>$v){
					$fwslevels[$k] = $goldname[$v];
				}
				$user_search['list'][$key]['fwslevels'] = implode(',',$fwslevels);
			}
			
			$user_search['list'][$key]['abilityvalue'] = $ability[(int)$value['abilitylevel']]['0'];
    	}
    	
    	foreach($user_search['list'] as $key=>$value){
            $user_searchs[$value['user_id']] = $value; 
    	}

        //评价记录
        unset($v);
        $uidStr = implode(',', $uidArr);
        $remark = new zbj_model_cp_remark();
	    $oRemark = $remark->select("pk_id in ({$uidStr}) and type_id=6 and remark_catalog=2", '*', null, 'order by remark_id desc')->items;
	    $Remark_data = array();
        foreach((array)$oRemark as $v) {
        	if(count($Remark_data[$v['pk_id']]) < 2){
                $Remark_data[$v['pk_id']][] = $v;
            }
        }
        unset($v);
        //接单状态用户行为 1被推荐 2参与 3中标 4成功交易 5买家拒绝 6威客拒绝 7交易客服拒绝 8系统放弃
        $recommend = new zbj_model_mk_recommend();
        $recommends = $recommend->select("user_id in ({$uidStr}) and task_id=$task_id", '*', null, '')->items;
        foreach((array)$recommends as $v){
            $action_type[$v['user_id']][] = $v['action_type'];
        }
        $result['user_searchs'] = $user_searchs;
        $result['Remark_data'] = $Remark_data;
        $result['action_type'] = $action_type;
        return $result;
    }

    /**
     * 通过服务商ID搜索服务商信息
     * 传入 $uidArr array 服务商ID
     * 返回 $result array 服务商信息
     */
    private function SearchService($uidArr){
    	if(empty($uidArr)) return array();
    	//测试搜索引擎
        if(zbj_lib_Constant::DOMAIN=='zhubajie.com'){// online
        	$url = 'http://192.168.1.74:8900/jdy-servlet/users';
        }else{ 
        	//$url = 'http://192.168.5.29:8080/jdy-servlet/users';
        	$url = 'http://192.168.1.85:8900/jdy-servlet/users';
        }
    	$userids = array('user_id'=>implode(',',$uidArr));
    	$result = zbj_lib_BaseUtils::file_get_contents_safe($url,json_encode($userids),'POST', 15, True);
    	$result = json_decode($result,true);
        return (array)$result;
    }

    /**
     * 加入联系服务商列表
     */
    public function pageAddToSeller() {
        $urlparam = $this->getUrlParams($inPath);
        if (count($_POST)) {
            $task_id = intval($_POST['taskId']);
            $userid = $_POST['witkeyId'];
            $single = $_POST['single'];
            if (empty($task_id)) {
                return $this->printmsg( '参数错误', 0 );
            }
            if (empty($userid)) {
                return $this->printmsg( '请选择服务商', 0 );
            }
            $mdlSeller = new zbj_model_mk_taskseller();
            $mAction = new zbj_model_mb_recommendaction();
            $srvUser = new zbj_service_user();
            foreach($userid as $v) {
                $user_id = intval($v);
                $srvUser->setId($user_id);
                $alloted = 0;
                if ($single) {
                    $scon = "task_id={$task_id} and user_id={$user_id} and action_type=1";
                    $recom = $mAction->selectOne($scon);
                    if ($recom) {
                        $alloted = 1;
                    }
                }
                $item = array(
                    'task_id'=>$task_id,
                    'user_id'=>$user_id,
                    'nickname'=>$srvUser->get('nickname'),
                    'alloted'=>$alloted,
                    'createymd'=>date('Y-m-d', $this->_time),
                    'createtime'=>$this->_time
                );
                $condition = "task_id={$task_id} and user_id={$user_id}";
                $seller = $mdlSeller->selectOne($condition);
                if ($seller) {
                    if ($alloted) {
                        $res = $mdlSeller->update($condition,array('alloted'=>$alloted));
                    }
                } else {
                    $res = $mdlSeller->insert($item);
                }
                if ($res === false) {
                    $msg .= '写入失败：'.$user_id;
                }
            }
            if ($msg)
                return $this->printmsg( '操作服务商列表失败!'.$msg, 0 );
            else
                return $this->printmsg( '操作服务商列表成功', 1 );
        }
    }

    /**
     * 添加跟进记录
     */
    public function pageAddContactlog($inPath) {
        $urlparam = $this->getUrlParams($inPath);
        if (count($_POST)) {
            $ts_id = intval($_POST['ts_id']);
            $content = zbj_lib_BaseUtils::getStr($_POST['content']);
            if (empty($ts_id)) {
                return $this->printmsg( '参数错误', 0 );
            }
            if (empty($content)) {
                return $this->printmsg( '请填写跟进内容', 0 );
            }
            $item = array(
                'ts_id'=>$ts_id,
                'content'=>$content,
                'manager_id'=>$this->_userid,
                'manager_name'=>$this->_nickname,
                'createymd'=>date('Y-m-d', $this->_time),
                'createtime'=>$this->_time
            );
            $mdlContact = new zbj_model_mk_tasksellercontactlog();
            $res = $mdlContact->insert($item);
            if ($res) {
                $this->updateSellerAction($ts_id, 1);
                //加入备注
                $mdlSeller = new zbj_model_mk_taskseller();
                $ts = $mdlSeller->selectOne("ts_id={$ts_id}");
                $srvUser = new zbj_service_user($ts['user_id']);
                $cont = $srvUser->getBrand().'服务商跟进记录：'.$content;
                $sLog = new service_log();
                $res = $sLog->addRemark($this->_userid, $ts['task_id'], $cont);
                return $this->printmsg( '操作成功', 1 );
            }
            return $this->printmsg( '添加失败', 0 );
        }
    }
    
    
    /**
     * 添加需求标签
     */
    public function pageAddTags($inPath) {
    	$taskid = intval($_POST['taskid']);
    	if($taskid<=0){
    		return $this->printmsg( '请指定需求的ID号', 0 );
    	}
    	$tags = implode(',',$_POST['tags']);
    	$tags = str_replace(array(' ','，'),',',$tags);
    	$tmptags = explode(',',$tags);
    	$tmptags = (array)$tmptags;
    	$tagarray = array();
    	foreach($tmptags as $tag){
    		$tag = trim($tag);
    		strlen($tag)>0 && $tagarray[] = $tag;
    	}
    	if(empty($tagarray)){
    		return $this->printmsg( '请指定需求的标签', 0 );
    	}
    	
    	$srvTaskTags = new zbj_service_tasktags();
    	$back = $srvTaskTags->addTaskTags($taskid,$tagarray,$this->_userid);
    	if($back === false){
    		return $this->printmsg( '标签保存失败 '.$srvTaskTags->getError(), 0 );
    	}
    	return $this->printmsg('标签保存成功', 1 );
    }
    


    /**
     * 跟新联系状态
     * $action 1联系 2派单 3投标
     */
    private function updateSellerAction($ts_id, $action) {
        if (empty($ts_id) || empty($action))
            return false;
        $item = array();
        switch($action) {
            case 1:
                $item['contacted'] = 1;
                break;
            case 2:
                $item['alloted'] = 1;
                break;
            case 3:
                $item['bided'] = 1;
                break;
        }
        if (empty($item)) return false;
        $mdlSeller = new zbj_model_mk_taskseller();
        $res = $mdlSeller->update("ts_id={$ts_id}",$item);
        if ($res === false) {
            return false;
        }
        return true;
    }

    /**
     * 跟新投标标志
     * @param $task_id
     */
    private function updateRecommendAction($task_id) {
        $mdlSeller = new zbj_model_mk_taskseller();
        $seller = $mdlSeller->select("task_id={$task_id} and bided=0")->items;
        if ($seller) {
            foreach($seller as $v) {
                $uidArr[] = $v['user_id'];
            }
            $uidStr = implode(',', $uidArr);
            $mdlAction = new zbj_model_mb_recommendaction();
            $action = $mdlAction->select("task_id={$task_id} and user_id in({$uidStr}) and action_type=2")->items;
            if ($action) {
                foreach($action as $v) {
                    $mdlSeller->update("task_id={$task_id} and user_id={$v['user_id']}",array('bided'=>1));
                }
            }
        }
    }

    /**
     * 搜索用户信息
     * $userid array
     */
    private function searchUser($userid) {
        if (empty($userid) || !is_array($userid))
            return false;
        $uidStr = implode(',', $userid);
        $limit = count($userid);
        $start = date('Y-m-d',time()-30*86400);
        //搜索
        $httpHeader=array('call-user-id:'.$this->_userid,'call-sessionid: '.$this->_uniqid,'call-cookieid: '.$_COOKIE['_uq'],'call-ip: '.zbj_lib_BaseUtils::getIp(),'call-source: mainsite','call-version: t5s');
        $oSe = new Sse(zbj_lib_Constant::SEARCH_API_HOST, zbj_lib_Constant::SEARCH_API_PORT,$httpHeader);
        $oseparam = array(
            'cat' => 'user',
            'size' => $limit,
            'page' => 0,
            'userfilter' => $userid
        );
        $user_results = $oSe->search($oseparam);
        if ($user_results['total_size']) {
            $user_result = (array) $user_results['items'];
        }
        //投标次数
        $mdlTSign = new zbj_model_mk_tasksign();
        $mdlTSign->setLimit($limit);
        $cons = "dateymd>='{$start}' and user_id in({$uidStr})";
        $sign = $mdlTSign->select($cons,'user_id,count(1) num','group by user_id','','',array('dbinfo'=>'co_market'))->items;
        //登录次数
        $mdlLogin = new zbj_model_lg_login();
        $mdlLogin->setLimit($limit);
        $conl = "loginymd>='{$start}' and user_id in({$uidStr}) and state=0";
        $login = $mdlLogin->select($conl,'user_id,count(1) num','group by user_id','','',array('dbinfo'=>'co_log'))->items;
        //电话QQ
        $mdlAcc = new zbj_model_mb_account();
        $acc = $mdlAcc->select("user_id in({$uidStr})")->items;
        $mdlInfo = new zbj_model_mb_info();
        $info = $mdlInfo->select("user_id in({$uidStr})")->items;

        $data = array();
        foreach ($userid as $key => $value) {
            //搜索
            if ($user_result) {
                foreach($user_result as $v) {
                    if ($v['userId'] == $value) {
                        $v['goodCommentRatio_All'] = intval($v['goodCommentRatio_All']*100);//好评率
                        $v['comprehensiveScore_All'] = number_format($v['comprehensiveScore_All'],2);//综合评分
                        $v['serviceArea'] = array_merge((array)$v['expertNameTree'],(array)$v['expertNameTreeNoIncome']);//服务范围
                        $data[$value] = $v;
                    }

                }
            }
            $data[$value]['user_id'] = $value;
            //电话
            if ($acc) {
                foreach ($acc as $v) {
                    if ($value == $v['user_id']) {
                        $data[$value]['usermobile'] = $v['usermobile'];
                        $data[$value]['is_mall'] = $v['is_mall'];
                    }
                }
            }
            //电话QQ
            if ($info) {
                foreach ($info as $v) {
                    if ($value == $v['user_id']) {
                        $data[$value]['mobile'] = $v['mobile'];
                        $data[$value]['qq'] = $v['qq'];
                    }
                }
            }
            //投标次数
            if ($sign) {
                foreach ($sign as $v) {
                    if ($value == $v['user_id']) {
                        $data[$value]['bidnum'] = $v['num'];
                    }
                }
            }
            //登录次数
            if ($login) {
                foreach ($login as $v) {
                    if ($value == $v['user_id']) {
                        $data[$value]['loginnum'] = $v['num'];
                    }
                }
            }
        }
        return $data;
    }


    /**
     * 系统选标
     */
    public function pageSystemChoose($inPath){
    	$urlparam = $this->getUrlParams($inPath);
    	$taskid = zbj_lib_BaseUtils::getStr($urlparam['id'],'int');
    	$page = zbj_lib_BaseUtils::getStr($urlparam['page'],'int');
    	$limit = 1000;
    	if($taskid<=0){
    		return $this->printmsg( '请指定需求的ID号', 0 );
    	}
    	$srvTask = new zbj_service_task($taskid);
    	$srvTask = $srvTask->init();
    	$taskdata = $srvTask->get();
    	if(empty($taskdata)){
    		return $this->printmsg( '找不到指定的需求', 0 );
    	}
    	try {
			$instance = new com\zhubajie\task\interfaces\TaskSysSelectServiceClient(null);
			zbj_lib_ApiClient::build($instance);
			$result = $instance->getTaskSysSelectById($taskid);
			if($result->success == false){
				throw new Exception($result->message);
			}
			$systaskdata = (array)$result->tasksysselect;
			if(empty($systaskdata)){
				 throw new Exception("未找到该任务的系统选稿记录");
			}
			if($systaskdata['sys_state'] == com\zhubajie\task\dataobject\tasksysselect\SysState::CANCEL){
				 throw new Exception("该任务的系统选稿记录已被关闭");
			}
			$param['taskid'] = $taskid;
			$param['limit'] = $limit;			
			$workinfo = $this->ajaxGetWorklist($param);
			if($workinfo == false){
				throw new Exception("获取稿件列表信息失败");
			}
			unset($param);
			$workmodel = new zbj_model_mk_works();           
            $ssuccessworklist = $workmodel->select(array('task_id' => $taskid,'issuccess' => 1,'is_sysselect'=>0), 'works_id')->items;
            $osyssuccessmoney = 0.00;
            $osyssuccessnum = 0;
            if(!empty($ssuccessworklist)){               
                foreach ($ssuccessworklist as $key => $value) {
                    $sorder = $srvTask->getOneWinOrder($value['works_id']);
                    if(!empty($sorder)){
                        $osyssuccessmoney += $sorder['at_price'];
                        $osyssuccessnum++;
                    }else{
                    	$sorder = $srvTask->getOneWinOrder($value['works_id'],1);
                    	if(!empty($sorder)){
	                        $osyssuccessmoney += $sorder['at_price'];
	                        $osyssuccessnum++;
                    	}
                    }
                }
            }         
//             $max_choosenum  =  $this->getMaxWorkNum($taskdata['hosted_amount']);
            $max_choosenum  =  1000;
            $max_choosenum -= $osyssuccessnum;   
			$this->params['itemlist']['totalsize'] = $workinfo['totalsize'];
			$this->params['itemlist']['pagesize'] = $workinfo['totalpage'];
			$this->params['itemlist']['type'] = $systaskdata['sys_type']==1?2:1;
			$this->params['itemlist']['max_choosenum'] = $max_choosenum;
			$this->params['itemlist']['successnum'] = $systaskdata['successnum'];
            $this->params['itemlist']['avgmoney'] = $systaskdata['successnum']>0?sprintf("%.2f",substr(sprintf("%.4f", (($taskdata['hosted_amount']-$osyssuccessmoney)/$systaskdata['successnum'])), 0, -2)):0;
			$this->params['itemlist']['mode'] = $systaskdata['isspecialfilter']==1?2:1;
			$this->params['itemlist']['sys_state'] = $systaskdata['sys_state'];
			//分页控件
			$this->params['itemlist']['pagebar'] = $this->PageBar($this->params['itemlist']['totalsize'], $limit, $page, $inPath,'style9');
			$this->params['itemlist']['task_id'] = $taskid;
			$this->params['itemlist']['task_amount'] = $taskdata['hosted_amount'];
			$this->params['itemlist']['task_sys_amount'] = $taskdata['hosted_amount']-$osyssuccessmoney;
			$this->params['itemlist']['task_name'] = $taskdata['title'];
			$this->params['itemlist']['task_info'] = $srvTask->get('task_cont.content');			
			$this->params['itemlist']['list'] = $workinfo['worklist'];
			return $this->render('task/systemchoose.html',$this->params);
		}catch( Exception $e ) {
			return $this->printmsg( $e->getMessage(), 0 );
		}    	
    }



    /**
     * 确认选稿
     */
    public function pageQrSystemChoose($inPath){
    	$urlparam = $this->getUrlParams($inPath);
    	$taskid = isset($_POST['taskid'])?zbj_lib_BaseUtils::getStr($_POST['taskid'],'int'):zbj_lib_BaseUtils::getStr($_GET['taskid'],'int');
    	if(empty($taskid)){
    		return $this->printmsg("缺失参数task_id",0 );
    	}
    	$worksids = isset($_POST['worksids'])?zbj_lib_BaseUtils::getStr($_POST['worksids'],'string'):zbj_lib_BaseUtils::getStr($_GET['worksids'],'string');
    	$workidlist = explode(",", $worksids);
    	if(empty($workidlist) || !is_array($workidlist)){
    		return $this->printmsg("缺失中标稿件信息",0 );
    	}    	
    	foreach($workidlist as $key => $value) {
    		if(empty($value) || !preg_match('/^[1-9][0-9]{0,}$/',$value)){
    			return $this->printmsg("中标稿件ID无效",0 );
       		}
    	}
    	$workidlist = array_unique($workidlist);
    	$srvTask = new zbj_service_task($taskid);
    	$srvTask = $srvTask->init();
    	$taskdata = $srvTask->get();
    	if(empty($taskdata)){
    		return $this->printmsg( '找不到指定的需求', 0 );
    	}
    	
//     	$allotnum = $this->getMaxWorkNum($taskdata['hosted_amount']);
//     	if($allotnum<count($workidlist)){
//     		return $this->printmsg( '根据系统选稿规则，该任务最多设置 '.$allotnum.' 个稿件中标', 0 );
//     	}
    	//部分退款需要往mk_reward_part_refund表中插入数据，悬赏任务社会化选标部分退款名单，公示期结束后不自动打款，走协商支付流程
    	$is_part_refund_exist = false;
    	$part_refund = lib_BaseUtils::getStr($_POST['part_refund'], 'int');
    	$m_part_refund	= new model_mk_rewardpartrefund();
    	$part_refund_array = $m_part_refund->selectOne(array('task_id'=>$taskid), 'task_id');
    	if($part_refund_array) {
    	    $is_part_refund_exist = true;
    	}
    	if (empty($part_refund_array) && $part_refund) {
    	    $part_refund_data['task_id'] = $taskid;
    	    $part_refund_data['create_user_id'] = $this->_userid;
    	    $part_refund_data['create_user_name'] = $this->_nickname;
    	    $part_refund_data['create_time'] = time();
    	    $part_refund_data['create_ymd'] = date('Y-m-d');
    	    if ($m_part_refund->insert($part_refund_data) === false) {
    	        return $this->printmsg( '需求按比例退款执行失败', 0 );
    	    }
    	    $is_part_refund_exist = true;
    	}
    	try {
    		$instance = new com\zhubajie\task\interfaces\TaskSysSelectServiceClient(null);
			zbj_lib_ApiClient::build($instance);
			$result = $instance->getTaskSysSelectById($taskid);
			if($result->success == false){
				throw new Exception($result->message);
			}
			$systaskdata = (array)$result->tasksysselect;
			if(empty($systaskdata)){
				 throw new Exception("未找到该任务的系统选稿记录");
			}
			if($systaskdata['sys_state'] == com\zhubajie\task\dataobject\tasksysselect\SysState::CANCEL){
				 throw new Exception("该任务的系统选稿记录已被关闭");
			}
			//判断需求中是否有打款成功的记录
			$paymentmodel = new zbj_model_mk_crontaskpayment();
			$paymentmodel->setDbEntry(true);
			$paymentnum = $paymentmodel->selectOne("`task_id`={$taskid} and `state`=1","count(1) as num");
			if(empty($paymentnum['num'])){
				$srvCouncil = new zbj_service_council();
				if($srvCouncil->setWorkSuccess($taskid,$this->_userid,$this->_nickname,$workidlist) == false){
		    		throw new Exception($srvCouncil->getError());
		    	}
		    	$gourl = "/task/lastview-id-{$taskid}.html";
		    	
		    	//清理超期任务阀值
		    	$s_allot = new zbj_service_allot(73);
		    	$s_allot->processed($taskid);
		    	
		    	if ($is_part_refund_exist) {
		    	    $m_crontaskpayment = zbj_model_api::get('zbj_model_mk_crontaskpayment');
		    	    if ($m_crontaskpayment->delete(array('task_id'=>$taskid)) === false) {
		    	        $this->addLog($taskid, "清理公示期结束后自动打款表数据失败，请联系悬赏技术负责人");
		    	    }else{
		    	        $this->addLog($taskid, "成功清理公示期结束后自动打款表数据");
		    	    }
		    	}
		    	
	            return $this->printmsg('系统选稿成功',1,null,$gourl);
			}else{
				return $this->printmsg('该任务已经产生了支付，不能在进行系统选稿',0);
			}

    	} catch (Exception $e) {
    		return $this->printmsg( $e->getMessage(), 0 );
    	}

    }
    private function getMaxWorkNum($amount = 0){
    	if($amount<=0){
    		return 0;
    	}
    	$work_num = 0;
    	switch ( $amount ) {
			case $amount<=500:
				$work_num = 5;
				break;
			case $amount>500 && $amount<=2000:
				$work_num = 10;
				break;
			case $amount>2000:
				$work_num = 20;
				break;	
			default:
				break;
		}
		return $work_num;
    }
    /**
    * ajax获取稿件列表信息
    */
    public function pageajaxgetsysworklist($inPath){
    	$urlparam = $this->getUrlParams($inPath);
    	$taskid = zbj_lib_BaseUtils::getStr($urlparam['taskid'],'int');
    	$page = zbj_lib_BaseUtils::getStr($urlparam['page'],'int');
    	try{
    		$instance = new com\zhubajie\task\interfaces\TaskSysSelectServiceClient(null);
			zbj_lib_ApiClient::build($instance);
			$result = $instance->getTaskSysSelectById($taskid);
			if($result->success == false){
				throw new Exception($result->message);
			}
			$systaskdata = (array)$result->tasksysselect;
			if(empty($systaskdata)){
				 throw new Exception("未找到该任务的系统选稿记录");
			}
			if($systaskdata['sys_state'] == com\zhubajie\task\dataobject\tasksysselect\SysState::CANCEL){
				 throw new Exception("该任务的系统选稿记录已被关闭");
			}
	    	$param['taskid'] = $taskid;
			$param['page'] = $page;							
			$workinfo = $this->ajaxGetWorklist($param);
			if($workinfo == false){
				throw new Exception("获取稿件列表信息失败");				
			}
			$this->params['itemlist']['list'] = $workinfo['worklist'];
			$this->params['itemlist']['mode'] = $systaskdata['isspecialfilter']==1?2:1;
			$this->params['itemlist']['isajax'] = 1;

			$worklist = $this->render('task/systemchooselist.html',$this->params);
			$return['state'] = 1;
			$return['worklist'] = $worklist;
			$return['lastpage'] = $page>=$workinfo['totalpage']?1:0;
			echo json_encode($return);
			exit();
		}catch(Exception $e){
			$return['state'] = -1;
			$return['errormsg'] = $e->getMessage();
			echo json_encode($return);
			exit();
		}

    }

	/**
	 * 定向派单
	 * @param $inPath
	 */
    public function pageajaxGetTaskInviteUrl($inPath){

        $urlparam = $this->getUrlParams($inPath);
        $task_id = zbj_lib_BaseUtils::getStr($urlparam['taskid'],'int');
        $user_id = zbj_lib_BaseUtils::getStr($urlparam['userid'],'int');
		$reason_other =zbj_lib_BaseUtils::getStr(trim($_POST['reason_other']));


		try{

			throw new Exception("功能废弃！");

			if(!$task_id || !$user_id || empty($reason_other)){
				throw new Exception("服务商id和原因需要填写！");
			}

			//没有派单直接公开的需求，3小时内不允许定向派单邀请
			$srvTask = new zbj_service_task($task_id);
			$srvTask = $srvTask->init();
			if(!$srvTask->checkSpecialMode(1) && !$srvTask->checkSpecialMode(3)){
				throw new Exception("非专场需求，不允许生成链接地址！");
			}

			if($srvTask->get("task_opis.recmd_status") == 1){
				throw new Exception("需求派单中，不允许生成链接地址！");
			}

			if($srvTask->get("task_opis.recmd_status") == 0 ){

				if($srvTask->get("task_extends.public_release_time")> time()-60*60*3){
					throw new Exception("需求公开未超过3小时，不允许生成链接地址");
				}

				if($srvTask->get("audit_state") !=3 && $srvTask->get("audit_state") !=1){
					throw new Exception("需求未发布，不允许生成链接地址！");
				}

			}

			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
			$recommend_service = new com\zhubajie\task\interfaces\TaskRecommendServiceClient(null);
			zbj_lib_ApiClient::build($recommend_service);
			$manage=new com\zhubajie\task\dataobject\taskrecommend\SendUserParamsDO();//系统派单可只申明不赋值
			$manage->manager_id = $this->_userid;//交易顾问ID
			$manage->manager_name = $this->_nickname;//交易顾问nickname
			$manage->type =  3;//人工派单
			$manage->seller_user = array($user_id); //服务商ID号 array(32,54);
			$manage->options=array("reason_type"=>1,"reason_other"=>$reason_other);
			$response = $recommend_service->sendRecd($task_id,$manage);
			if(!$response->success){
				if($response->code ==-4){
					throw new Exception("重复派单，该需求已定向派单给服务商！",-2);
				}else{
					throw new Exception($response->message);
				}
			}

			$return = array();
			$return['state'] = 1;
			$return['msg'] = "成功！";
			$return['url'] = zbj_lib_Constant::TASK_URL."/".$task_id;
			echo json_encode($return);

		}catch (Exception $e){
			$return['url'] = zbj_lib_Constant::TASK_URL."/".$task_id;
			$return['state'] = $e->getCode();
			$return['msg'] = $e->getMessage();
			echo json_encode($return);
		}

    }
    /**
    * 获取稿件列表信息
    */
    private function ajaxGetWorklist($param = array(), $is_page = true){
    	if(empty($param) || !is_array($param) || empty($param['taskid']) || !preg_match("/^[1-9][0-9]{0,}$/", $param['taskid'])){
    		return false;
    	}
    	$taskid =  zbj_lib_BaseUtils::getStr($param['taskid'],'int');
    	$page = zbj_lib_BaseUtils::getStr($param['page'],'int');
    	$limit = zbj_lib_BaseUtils::getStr($param['limit'],'int');
    	
    	//2015/10/16-悬赏任务-淘汰稿件不予展示
    	$allow_work_ids = "";
    	$reward_task_flag = $this->isRewardTask($taskid);//是否悬赏任务标志
    	if ($reward_task_flag) {
    		$workmodel = new zbj_model_mk_works();           
            $ssuccessworklist = $workmodel->select(array('task_id' => $taskid), 'works_id,iseliminate')->items;
            foreach ($ssuccessworklist as $key => $val) {
            	if($val['iseliminate']==1){
            		continue;
            	}
            	if(!$allow_work_ids){
            		$allow_work_ids = $val['works_id'];
            	}else{
            		$allow_work_ids .= "," . $val['works_id'];
            	}
            }
    	}
    	try {
			$instance = new com\zhubajie\task\interfaces\TaskSysSelectServiceClient(null);
			zbj_lib_ApiClient::build($instance);
			$paramDO = new com\zhubajie\task\dataobject\tasksysselect\GetTaskSysSelectWorksListParamDO();
			$paramDO->task_id = $taskid;
			//2015/10/19-悬赏任务-淘汰稿件不予展示
			$paramDO->workslist = $allow_work_ids;
			
			$paramDO->orderby = "order by `issuccess` desc,`isalternative` desc,`successrate` desc,`disputerate` asc,`ability30` desc,`ability` desc,`sysselectmoney30`";
			$paramDO->page = $page>0?$page:1;
			if ($is_page) {
			    $paramDO->page_size = $limit>0?$limit:30;
			}
			$worklistresult = $instance->getTaskSysSelectWorksList($paramDO);
			if($worklistresult->success == false){
				throw new Exception("获取该任务的系统选稿的稿件记录失败 ".$worklistresult->message);
			}
			$sysworklist = $worklistresult->tasksysselect_worklist;	
			$totalsize = $worklistresult->total;
			$totalpage = $worklistresult->total_page;
			//2015/10/19-悬赏任务-淘汰稿件不予展示-如果所有的稿件都是淘汰的，基于不改接口的前提，返回结果特殊化处理
			if($reward_task_flag && !$allow_work_ids){
				$sysworklist = array();	
				$totalsize = 0;
				$totalpage = 0;
			}

			$worklist = array();
			if(!empty($sysworklist)){
				$srvUser = new zbj_service_user();
				foreach ($sysworklist as $key => $syswork) {
					$expend = json_decode($syswork->expend,true);
					$expandprice = zbj_lib_BaseUtils::getStr($expend['price'],'float');
					if($expandprice>0){
						continue;
					}
					$work = array();
					$work['id'] = $syswork->work_id;
					$work['task_draft'] = $syswork->content;
					$work['isshield'] = $syswork->isshield;
					$task_picarr =  unserialize($syswork->works_files);
					$task_pic = array();
					$task_atta = array(); //附件列表
					if(!empty($task_picarr)){
						foreach ($task_picarr as $pic) {
							$tmppic = array();
							if(in_array($pic['ext'], array("bmp", "jpg", "jpeg", "gif", "png"))){								
								$tmppic['src'] = zbj_lib_Constant::UPFILEURLOLD.$pic['file'];
								$tmppic['width'] = $pic['widthf'];
								$tmppic['height'] = $pic['heightf'];
								$task_pic[] = $tmppic;
							}else{
								$tmppic['src'] = zbj_lib_Constant::UPFILEURLOLD.$pic['file'];
								$tmppic['ofilename'] = $pic['ofilename'];
								$task_atta[] = $tmppic;
							}
						}
					}
					$work['task_pic'] = $task_pic;
					$work['task_atta'] = $task_atta;
					$work['user_id'] = $syswork->user_id;
					$srvUser->setId($syswork->user_id);
					$work['brand_name'] = $srvUser->getBrand();
					$work['is_bid'] = $syswork->issuccess;
					$work['is_backup'] = $syswork->isalternative;
					$work['bid_rate'] = $syswork->successrate.'%';
					$work['dispute_rate'] = $syswork->disputerate.'%';
					$work['ability_month'] = $syswork->ability30;
					$work['ability_all'] = $syswork->ability;
					$work['bid_amount_month'] = $syswork->sysselectmoney30;
					$worklist[] = $work;
				}
			}
			$returnarr['worklist'] = $worklist;
			$returnarr['totalsize'] = $totalsize;
			$returnarr['totalpage'] = $totalpage;
			return $returnarr;
		}catch(Exception $e){
			return false;
		}
    }

    /**
	 * 验证筛选数据公共方法
	 */
    private function getArrayByArray($temparray){
    	$intarray = array();
    	foreach($temparray as $k=>$v){
    		$v = trim($v);
    		if(mb_strlen($v)==0) continue;
    		if($k != 0){
    			$v = intval($v);
    			if($v <= 0) continue;
    		}
    		if($v == undefined || empty($v)) continue;
    		$intarray[$k] = $v;
    	}
    	return $intarray;
    }

    /**
     * 待审核订单弹出框
     */
    public function pageAuditOrder($inPath){
    	$condition['manager_id2'] = $this->_userid;
		$condition[] = 'audit_state in (0,3)';

		$condition[] = 'state<3';
		$condition[] = 'isaudit>=0';
		$condition[] = 'manager_id=0';
		$condition[] = 'open_state=0';
		$condition[] = 'mk_task_info.refund_state=0';
		$condition[] = 'mk_task_opis.nopass = 0';

		$day60 = date('Y-m-d',strtotime('-60 day'));
	    $condition[] = "createymd>='{$day60}'";

		// 要求只能看到5分钟以前的需求
		$fiveminago = time() - 800;
		$condition[] = "createtime<{$fiveminago}";

		$mTask = new zbj_model_mk_task();

		$leftjoin =array(
				    'mk_task_info'=>'mk_task_info.task_id=mk_task.task_id',
                    'mk_task_opis'=>'mk_task_opis.task_id=mk_task.task_id'
				);

		$taskid = $mTask->selectOne($condition, 'mk_task.task_id', '', '',$leftjoin,array('type'=>'query','dbinfo'=>'co_market'));

        if($taskid === false || empty($taskid)) {
        	$params['error'] = 1;
        	return $this->render('consultant/orderdlg.html',$params);
        }

        if($_REQUEST['debug']){
			$_REQUEST['debug2'] ? define('DEBUG', 1) : 0;
			$taskid['task_id'] = 6043169;
		}
		$sTask = new zbj_service_task($taskid['task_id']);
		$sTask = $sTask->init();
		$aTask = $sTask->get();
		$acont = $sTask->get("task_cont.*");

		//获取分类配置
		$sCategory = zbj_model_api::get('zbj_model_mk_category');
		$categroy = $sCategory->select('','category_id,category_name')->items;
		if($categroy){
			foreach($categroy as $k=>$v){
				$categoryName[$v['category_id']] = $v['category_name'];
			}
		}
        
        //关闭数据
		$data=zbj_lib_BaseUtils::apicall('misc', 'GetOptionItems',array('option_id'=>6));
		if($data['code']){
			$params['options'] = $data['data'];//任务关闭原因
		}else{
			$params['error'] = 2;
        	return $this->render('consultant/orderdlg.html',$params);
		}

		//分配时间
		$mFollow = new model_mk_follow();
		$follow = $mFollow->selectOne(array('task_id' => $taskid['task_id']), 'task_id,follow_id,allottime');

		//类目
		//获取一级分类
        $params['category1'] = json_decode($this->GetEnabledChildrenIdNameList($inPath,1),true);
		//获取二级分类
        $params['category2'] = json_decode($this->GetEnabledChildrenIdNameList($inPath,$aTask['category1id']),true);
        //获取三级分类
        $params['category3'] = json_decode($this->GetEnabledChildrenIdNameList($inPath,$aTask['category2id']),true);

		//获取任务基础数据
		$params['task'] = $aTask;
		$params['content'] = $acont['content'];
		$params['task']['allottime'] = $follow['allottime'];
		$params['category_name'] = $categoryName;

		return $this->render('consultant/orderdlg.html',$params);
    }


	/**
     * 对比编辑差异
     */
    public function pageCompareEditLog($inPath) {
    	$lid = trim($_GET['lid']);
    	$tmpid = explode(',',$lid);
    	$idarray = array();
    	foreach((array)$tmpid as $id){
    		$id = intval($id);
    		if($id>0 && !in_array($id,$idarray)){
    			$idarray[] = $id;
    		}
    	}
    	if(count($idarray) != 2){
    		return '请选择两条记录进行比较';
    	}
    	
    	$editlogModel = zbj_model_api::get('zbj_model_mk_taskeditlog');
    	$editlog = $editlogModel->select('log_id in('.implode(',',$idarray).')','*','','order by log_id asc')->items;
    	$editlog = (array)$editlog;
    	if(count($editlog) != 2){
    		return '未能成功获取日志数据';
    	}
    	if($editlog[0]['task_id'] != $editlog[1]['task_id']){
    		return '不属于同一需求的日志，不可以进行差异比较';
    	}
    	
    	$conttent1 = $editlog[0]['content'] = unserialize($editlog[0]['content']);
    	$conttent2 = $editlog[1]['content'] = unserialize($editlog[1]['content']);
    	
    	$comparer = new SStringComparer();
    	
    	$comparekey = array('title','cont');
    	foreach($comparekey as $key){
    		$result = $comparer->compare($conttent1[$key],$conttent2[$key]);
    		$editlog[0]['compare'][$key] = implode('',$result['old']);
    		$editlog[1]['compare'][$key] = implode('',$result['new']);
    	}
 
    	$params = array();
    	$params['old']	= $editlog[0];
    	$params['new']	= $editlog[1];
    		
    	return $this->render('task/viewpart/compare.html',$params);
    }

    /**
	 * @abstract 发布需求时多选发布原因
	 * @param $pub_array 发布原因集合
	 */
	public function pagePubReason($inPath){

    	$urlparam = $this->getUrlParams($inPath);
    	$task_id = zbj_lib_BaseUtils::getStr($urlparam['taskid'],'int');
    
    	if(!$task_id) return $this->printmsg('任务ID号不存在',0);
		if(empty($_POST['pubreason']) || !is_array($_POST['pubreason'])) return $this->printmsg('发布原因有误',0);
		
		$pub_reason = $this->getArrayByArray($_POST['pubreason']);

		$task_pub_reason = zbj_model_api::get('zbj_model_mk_taskpubreason');

		//发布前先查看是否已有发布数据，有的话删除
        $task_pub_reason_result = $task_pub_reason->select("task_id = $task_id");
        if($task_pub_reason_result->items){
        	$pub_reason_del = $task_pub_reason->delete("task_id = $task_id");
        	if($pub_reason_del === false) return $this->printmsg('删除发布原因失败',0);
        }

		$pub_reason_sql = "insert into mk_task_pubreason (task_id,pubreason_key,pubreason_value,manager_id,manager_name,createtime,createymd) VALUES ";
		
		$createtime = time();
		$createymd = date('Y-m-d',time());

        //发布原因库
		$optionstr = array(
				'1' => '3次未联系上雇主',
				'2' => '价格完全低于市场行情',
				'3' => '长尾需求',
				'4' => '筛选后无可派单服务商',
				'5' => '雇主要求直接公开'
			);

		foreach($pub_reason as $k=>$v){
			if($k == 0){
                $pub_reason_sql_array[$k] = "($task_id,$k,'$v',$this->_userid,'$this->_nickname',$createtime,'$createymd')";
			}else{
                $pub_reason_sql_array[$k] = "($task_id,$v,'',$this->_userid,'$this->_nickname',$createtime,'$createymd')";
                $pub_reason_log[$k] = $optionstr[$v];
			}
		}

		if(!empty($pub_reason_sql_array)){
            $pub_reason_sql_str = implode(',',$pub_reason_sql_array);
            $pub_reason_sql_str = trim($pub_reason_sql_str,',');
            $pub_reason_sql_res = $pub_reason_sql.$pub_reason_sql_str;
            $pub_reason_res = $task_pub_reason->query($pub_reason_sql_res);
        }

        if($pub_reason_res === false) return $this->printmsg('发布原因保存失败',0);

        if($pub_reason_log){
        	$log = implode(',',$pub_reason_log);
		    $log = '直接发布原因：'.trim($log,',');
        }
		
        //添加发布原因日志
        $s_task=new zbj_service_task($task_id);
		$s_task=$s_task->init();
		
		// 打价格标签 pricetag
		$updata = array('price_tag'=>(int)$_POST['pricetag']);
		if($updata['price_tag']==1 && $s_task->updateTaskExtends($updata)){
			$this->addLog($task_id,'价格低于市场价，交由服务商议价');
		}
		
		$s_task->addTaskActionLog($log, false);
        return $this->printmsg('发布原因保存成功',1);

	}

    /**
     * 取名任务[取消雇主保障原创，保证完成功能]
     * @return [type] [description]
     */
    public function pageCancelSecurity($inPath){
        $url_params = $this->getUrlParams($inPath);
        $task_id = zbj_lib_BaseUtils::getStr($url_params['id'],'int',0);
        if(!$task_id){
            return $this->printmsg('任务记录ID不合法',0);
        }

        $model_taskhall = new zbj_model_mk_taskhall();
        $res_task_hall = $model_taskhall->selectOne('hall_id > 0 and task_id='.$task_id,'package_id');
        if(!$res_task_hall){
            return $this->printmsg('任务不存在',0);
        }

        /*业务逻辑 begin*/
        //获取所有专场任务
        $model_task = new zbj_model_mk_task($task_id);
        //筛选条件
        $condition_task = "task_id = {$task_id} AND createymd >='2015-07-12' AND createtime >= 1436940000";
        $res_task = $model_task->selectOne($condition_task,'task_id');

        if(!$res_task){
            return $this->printmsg('专场任务不满足条件',0);
        }

        $srvTask = new zbj_service_task_free();
        $srvTask->setId($task_id);
        $optionstr = $srvTask->get('task_info.option');
        $option = unserialize($optionstr);

        //如果设置了雇主保障
        if(isset($option['security'])){
            unset($option['security']);
            $optionstr = serialize($option);
            $srvTask->set('task_info.option',$optionstr);
            $flag = $srvTask->save();
            if($flag===false){
                return $this->printmsg('操作失败',0);
            }
        }
        $this->addLog($task_id,$this->_nickname.'取消了雇主保障原创/保证完成');
        return $this->printmsg('操作成功',1,null,'/task/lastview-id-'.$task_id);
    }


	/**
	 * 直接公开并派单
	 * @param $inPath
	 * @return string
	 */
	public function pageDirectDisclosureSendRecmd($inPath) {

		$this->init($inPath);
		$task_id = intval($this->url['id']);

		//日志
		$log = '';
		$result = array();

		if (!$task_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}

		try{

			$srvTask = new service_task($task_id);
			if(!$srvTask->canRecmdByCategory2ID()){
				return json_encode(array("state"=>1,"msg"=>"ok"));
			}

			$manager_info = array(
				'manager_id'=>$this->_userid,
				'manager_name'=>$this->_nickname,
			);
			if(false === ($response = $srvTask->sendRecmd($task_id,1,$manager_info))){
				throw new Exception('派单失败：'.$srvTask->getError());
			}

			if($response->success){

				$result['state'] = 1;
				$result['totalSize'] = empty($response->total_wks) ? 0:$response->total_wks;
				$uidArr = $response->users;
				empty($response->total) && $log .= '一次派单给0个服务商。';
				!empty($uidArr) && $log .= '一次派单给'.implode(',',$uidArr).'，'.$response->total.'个服务商。';

			}

		}catch(Exception $e){

			$result['state'] = 0;
			$log = $e->getMessage();
		}

		//记录日志
		$srvTask->addTaskActionLog($log, false);
		$result['msg'] = $log;
		return json_encode($result);

	}

	/**
	 * 开启派单并排单
	 * @param $inPath
	 * @return bool|string
	 */
	public function pageReSendRecmd($inPath) {

		$this->init($inPath);
		$task_id = intval($this->url['id']);

		//日志
		$log = '';
		$result = array();

		if (!$task_id) {
			return $this->printmsg('参数错误',0, null, $_SERVER ['HTTP_REFERER']);
		}

		try{

			$srvTask = new service_task($task_id);

			$manager_info = array(
				'manager_id'=>$this->_userid,
				'manager_name'=>$this->_nickname,
			);
			if(false === ($response = $srvTask->sendRecmd($task_id,1,$manager_info))){
				throw new Exception('派单失败：'.$srvTask->getError());
			}

			if($response->success){
				$result['state'] = 1;
				$result['totalSize'] = empty($response->total_wks) ? 0:$response->total_wks;
				$uidArr = $response->users;
				empty($response->total) && $log .= '一次派单给0个服务商。';
				!empty($uidArr) && $log .= '一次派单给'.implode(',',$uidArr).'，'.$response->total.'个服务商。';
			}

		}catch(Exception $e){

			$result['state'] = 0;
			$log = $e->getMessage();
		}

		//记录日志
		$srvTask->addTaskActionLog($log, false);
		$result['msg'] = $log;
		return json_encode($result);

	}
/**
     * 任务最终页-用户鉴权
     */
    public function pageCheckUserAuth(){
        $tid = (int) $_REQUEST['tid'];
        if (!$tid) {
            return $this->apiout('', -1, '参数错误');
        }

         $this->addLog($tid, $this->_nickname ."[".date("Y-m-d H:i:s")."]"."对任务任务[{$tid}]进行了鉴权操作");

        return $this->apiout("", 1, '删除成功');
    }

    public function pagePermissionDeny(){
        $params = array();
        if($_POST){
            return $this->printmsg('操作成功！', 2, null, $_SERVER['HTTP_REFERER']);
        }

        return $this->render('task/ajax/permission.deny.dialog.html',$params);
    }

    /**
    * 获取任务的举报数
    */
    private function getReportNum($task_id = 0){
    	if($task_id<=0){
    		return 0;
    	}

    	$mcache = new zbj_lib_cache('memcache');
    	$keyname = "boss.zhubajie.com.task.reportnum".$task_id;
    	$reportnum = $mcache->get($keyname);
    	if(!empty($reportnum)){
    		return intval($reportnum['report_num']);
    	}
    	$reportModel = zbj_model_api::get('zbj_model_mb_report');

        $reportResultNumSeller = $reportModel->selectOne("`o_bel_id`={$task_id} and `o_type`=1 and `type`>6 and `type`<35","count(1) as num");
        $reportResultNumBuyer = $reportModel->selectOne("`o_id`={$task_id} and `o_type`=2 and `type`>6 and `type`<35","count(1) as num");
        
        $reportnum = array();
        $reportnum['report_num'] = $reportResultNumSeller['num'] + $reportResultNumBuyer['num'];
        $mcache->set($keyname,$reportnum,86400);

        return intval($reportnum['report_num']);

    }

    /**
     * 取消专场功能
     * @param $inPath
     * @return bool
     */
    public function pageCancelTaskPackageHall($inPath){
        $this->init($inPath);
        $task_id = intval($this->url['id']);
        if(!$task_id){
            return $this->printmsg('任务记录ID不合法',0);
        }
        $cond[] = "task_id={$task_id}";
        $m_task_hall = new zbj_model_mk_taskhall();
        $m_rwd_package = new model_rwd_taskpackage();
        $res = $m_task_hall->delete( $cond);
        if($res===false){
            return $this->printmsg('操作失败[1]',0);
        }

        $res2 =  $m_rwd_package->delete($cond);
        if($res2===false){
            return $this->printmsg('操作失败[2]',0);
        }

        $this->addLog($task_id,$this->_nickname.'取消了专场功能');
        return $this->printmsg('操作成功',1,null,'/task/lastview-id-'.$task_id);
    }

    /**
    * 检查是否存在交易合同
    */
    private function checkTaskExistsAgreement($srvTask){
    	if(!is_object($srvTask)){
    		return false;
    	}

    	try{
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,10);
			$instance = new com\zhubajie\task\interfaces\TaskAgreementServiceClient(null);
			zbj_lib_ApiClient::build($instance);

			$paramDO = new com\zhubajie\task\dataobject\taskagreement\CheckExistsAgreementParamDO();
			$paramDO->task_id = $srvTask->get('task_id');
			$paramDO->user_id = $srvTask->get('user_id');
			$result = $instance->checkExistsAgreement($paramDO);
			if($result->success == false){
				throw new Exception($result->message);				
			}

			return $result->agree_num;

		}catch(Exception $e){
			return false;		
		}
    }

    /**
    * 批量获取交易合同信息
    */
    protected function getWorksAgreementList($task_id,$works_list = array()){
    	if(empty($works_list) || !is_array($works_list)) return false;
		
		try{
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,8);
			$instance = new com\zhubajie\task\interfaces\TaskAgreementServiceClient(null);
			zbj_lib_ApiClient::build($instance);
			$paramDO = new com\zhubajie\task\dataobject\taskagreement\GetTaskAgreementListParamDO;
			$paramDO->task_id = $task_id;
			$paramDO->works_ids = $works_list;	
			$paramDO->needagreestep = true;		
			$result = $instance->getTaskAgreementList($paramDO);
			if($result->success == false){
				throw new Exception($result->message);
			}
			$agreementlist = array();
			if(!empty($result->taskagreement_list)){
				foreach($result->taskagreement_list as $key => $obj ) {
					$tmpobj = (array)$obj;
					if(!empty($tmpobj['content']))  $tmpobj['content'] = json_decode($tmpobj['content'],true);
					if(!empty($tmpobj['files']))  $tmpobj['files'] = json_decode($tmpobj['files'],true);
					if(!empty($tmpobj['data']))  $tmpobj['data'] = json_decode($tmpobj['data'],true);
       				$agreementlist[$obj->works_id] = $tmpobj;
				}
			}
			return $agreementlist;
		}catch(Exception $e ) {
			return false;
		}
    }

    /**
    *是否悬赏任务
    */
    protected function isRewardTask($task_id=0){
    	if(!$task_id){
    		return false;
    	}
    	$srvTask = new zbj_service_task($task_id);
		$srvTask = $srvTask->init();
    	if ($srvTask->get("mode")==10 && in_array($srvTask->get("allot"), array(1,2))) {
    		return true;
    	}
    	return false;
    }
}
