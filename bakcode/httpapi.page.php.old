<?php
/**
 * 对外 http访问接口
 * Class controller_httpapi
 */
class controller_httpapi extends components_basepage
{

    private $singkey ;

    function __construct()
    {
        parent::__construct();

        //签名字段
        $this->singkey = zbj_lib_Constant::SIGN_KEY;
        $this->checkSign();
    }


    /**
     * 新选标接口
     */
    public function pageSelectWorks(){


        $task_id = intval($_POST['task_id']);
        $works_id= intval($_POST['works_id']);
        $addamount= intval($_POST['addamount']);

        try{

            if(!$task_id || !$works_id){
                throw new Exception("缺少参数！");
            }

            $taskSrv = new zbj_service_task($task_id);
            $taskSrv = $taskSrv->init();
            if($taskSrv->get("mode") !=13){
                throw new Exception("不支持非招标需求！");
            }
            if(false === ($r = $taskSrv->selectWorks1($works_id,$addamount))){
                throw new Exception("选稿失败！".$taskSrv->getError());
            }

            //选标成功
            if($r['state'] ==1){
                $this->doJson("选标成功！");
            }

            //托管订单 要求
            $taskamount = round($taskSrv->get("amount"),2);
            $payamount  = round($taskSrv->get("hosted_amount"),2);
            $addamount  = $taskamount-$payamount;

            $data = array(
                'taskamount'=> $taskamount,
                'payamount' => $payamount,
                'addamount' => $addamount,
            );

            $data = array_merge($data,$r);

            $this->doJson("赏金未托管完成",$data['state'],$data);

        }catch (Exception $e){
            $this->doJson($e->getMessage(),$e->getCode());
        }

    }

    /**
     * 首次跟单,提交跟单信息
     * @method POST
     * @param param，首次跟进post接口的json信息，详情查阅基础技术提供接口文件
     * @param debug=1 打印传递json信息
     * @return json
     */
    public function pageSubmitFirstFollow(){
		$tradFollow=new zbj_service_tradefollow();
		$result=$tradFollow->submitFirstFollow($_POST);
		return $result;
	}

    /**
     * 二次跟单,提交跟单信息
     * @method POST
     * @param param，首次跟进post接口的json信息，详情查阅基础技术提供接口文件
     * @param debug=1 打印传递json信息
     * @return json
     */
    public function pageSubmitSecondFollow(){
		$tradFollow=new zbj_service_tradefollow();
		$result=$tradFollow->submitSecondFollow($_POST);
		return $result;
	}

    /**
     * 移动端延长招标订单征集期接口
     * @method POST
     * @param task_id任务ID，day延期天数
     * @return json
     */
    public function pageExtendNewbidEndDate(){
		$data=$_POST;
		$task_id=intval($data['task_id']);
		$day=intval($data['day']);
		$state = 1;
		if($task_id==0 || $day==0){
			$state = 0;
            $msg = "参数错误";
			$this->doJson($msg,$state);
		}
		$srvTask = new zbj_service_task($task_id);
		$srvTask = $srvTask->init();
		$task = $srvTask->get();
		$ext_day = $task['day'] <= 7 ? 7 : $task['day'];
		if(!$task){
			$state = 0;
            $msg = "获取任务失败";
		}
		elseif($task['mode']!=13 || $task['open_state']==1 || $task['audit_state']==0){
			$state = 0;
            $msg = "该任务状态异常，无法延期！";
		}
		elseif($task['state'] != 2){
			$state = 0;
            $msg = "当前状态不允许此操作";
		}
		elseif($task['ext_num'] >= 3){
			$state = 0;
            $msg = "您的任务不能继续延期，请及时选稿!";
		}
		elseif ($day > $ext_day) {
			$state = 0;
            $msg = "周期不能超过限制!";
		}
		if($state==1){
			if ($srvTask->upExtension ( $day ) !== true) {
				$msg = "任务延期失败,请重试!".$srvTask->getError();
			} else {
				$msg= '延期成功';
				$state = 1;
			}
		}
        $this->doJson($msg,$state);
    }
    /**
    * http方式调用雇主关闭任务功能
    */
    public function pageCloseTaskByBuyer($inPath){
        $task_id = zbj_lib_BaseUtils::getStr($_POST['task_id'],'int');
        if(empty($task_id)){            
            $this->doJson("操作的任务ID缺失",0);
        }

        //初始化任务对象
        $srvTask = new zbj_service_task($task_id);
        $srvTask = $srvTask->init();
        $task = $srvTask->get();

        if(empty($task)){           
            $this->doJson("操作的任务丢失",0);
        }

        if(!in_array($task['mode'], array(13))){           
            $this->doJson("暂不提供此功能",0);            
        }

        if(!$srvTask->closeTask(false,2)) {              
            $this->doJson("任务关闭失败，原因：".$srvTask->getError(),0);           
        }

        $this->doJson('任务关闭成功', 1, array('url'=>zbj_lib_Constant::TASK_URL.'/'.$task_id));

    }

    /**
     * 通过task_id号获取交易顾问信息
     */
    public function pageGetTaskUser(){
        $task_id = zbj_lib_BaseUtils::getStr($_POST['tid'],'int');
        if(!$task_id){           
            $this->doJson("任务号参数错误",0);
        }
        $task = new zbj_service_task($task_id);
        $task = $task->init();
        $manager_id = $task->get('manager_id');
        if(!$manager_id){
            $this->doJson("该任务未分配交易顾问",0);
        }
        $userObj = new zbj_service_user();
        $userInfo = $userObj->getManagerBaseInfo($manager_id);

        if($userInfo){
            $msg = "交易顾问信息获取成功";
            $state = 1;
        }else{
            $msg = "交易顾问信息获取失败";
            $state = 0;
        }

        $this->doJson($msg,$state,$userInfo);

    }


    /**
    * 服务商放弃参与该需求
    */
    public function pageSaveGiveUpReason(){  

        $task_id = intval($_POST['task_id']);
        $works_id = intval($_POST['works_id']);
        $user_id = intval($_POST['user_id']);

        $terminal = intval($_POST['terminal']);

        if(empty($task_id)){
            lib_BaseUtils::jsonp("任务ID缺失！", 1, -1);
        }

        if(empty($works_id)){
            lib_BaseUtils::jsonp("稿件ID缺失！", 1, -1);
        }

        $srvTask = new zbj_service_task($task_id);
        $srvTask = $srvTask->init();
        $taskData = $srvTask->get();

        if(empty($taskData)){
            lib_BaseUtils::jsonp("获取任务信息失败！", 1, -1);
        }

        if(!in_array($taskData['state'], array(2,3))){
            lib_BaseUtils::jsonp("任务当前状态不允许此操作！", 1, -1);
        }

        $srvWork = new zbj_service_works($works_id);
        $workData = $srvWork->get();

        if(empty($workData)){
            lib_BaseUtils::jsonp("获取稿件信息失败！", 1, -1);
        }

        if($workData['task_id'] != $task_id){
            lib_BaseUtils::jsonp("非法数据请求！", 1, -1);
        }

        if($workData['user_id'] != $user_id){
            lib_BaseUtils::jsonp("您无权执行此操作！", 1, -1);
        }

        if($workData['issuccess'] == 1){
            lib_BaseUtils::jsonp("雇主已经设置您的稿件中标，不能执行此操作！", 1, -1);
        }

        if($workData['iseliminate'] == 1){
            $tipstr = '淘汰';
            if($workData['ft_invalid'] == 100){
                $tipstr = '放弃';
            }
            lib_BaseUtils::jsonp("您的稿件目前是{$tipstr}状态，不能执行此操作！", 1, -1);
        }
        
        $dataId = zbj_lib_BaseUtils::getStr($_POST['formCfgId'],'int'); 

        try{

            //校验数据
            $reasonRecordNdtoList = $this->checkPostParams($dataId);

            if(empty($reasonRecordNdtoList)){
                throw new Exception("数据校验失败！", 1);
            }

            $data = array();
            $data['taskId'] = $task_id;
            $data['worksId'] = $works_id;
            $data['userId'] = $user_id;
            $data['userRole'] = 2; #用户角色，1:雇主，2:服务商，3:交易顾问
            $data['formCfgId'] = $dataId;
            $data['reasonRecordNdtoList'] = $reasonRecordNdtoList;
            $data['terminal'] = empty($terminal)?21:$terminal; #来源，终端：11pc主站，12boss系统，21android,22ios,31微信，41触屏版

            $this->saveGiveUpReason($data);

            zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET);
            $api = new com\zhubajie\task\interfaces\TaskServiceClient(NULL);
            zbj_lib_ApiClient::build($api);

            $paramDO = new com\zhubajie\task\dataobject\task\SetEliminateParamDO();
            $paramDO->task_id = $task_id;
            $paramDO->works_id = $works_id;
            $paramDO->user_id = $user_id;
            $paramDO->operrole = 2;
            $paramDO->value = 1;
            $paramDO->from_source = 1;

            $result = $api->setWorksEliminateByGiveUp($paramDO);

            if($result->success == false){
                throw new Exception($result->message);              
            }

            //检查是否存在抛事件的类型
            $isexists = array();
            foreach ($reasonRecordNdtoList as $key => $value) {
                if(in_array($value['relationId'],array(1,2,44,45))){
                    $isexists[] = $value['relationId'];
                }
            }

            //调用抛事件的方法，待完成  
            if(!empty($isexists)){
                zbj_lib_Api::userGiveUpBid($task_id,$user_id,$isexists);
            }       

            //添加后台备注信息
            $cplog_obj = new zbj_service_cplog();
            $followstr = "首次跟单";
            if($dataId == 13){
                $followstr = "二次跟单";
            }
            $cplog_obj->addLog($user_id,$task_id, "稿件号为#{$works_id}的服务商在{$followstr}时放弃需求", 'task', 1, time());
     

        }catch(Exception $e){
            lib_BaseUtils::jsonp("执行放弃操作失败！".$e->getMessage(), 1, -1);
        }

        lib_BaseUtils::jsonp("执行放弃成功！", 1, 1);

        
    }

    /**
    * 校验用户提交的数据，
    */
    private function checkPostParams($dataId = 0){

        $postdata = $_POST;

        if(empty($postdata) || empty($dataId)){
            throw new Exception("非法数据请求");          
        }

        $postdata['formCfgId'] = intval($postdata['formCfgId']);
        if($postdata['formCfgId'] != $dataId){
            throw new Exception("操作的表单信息不合法");
        }

        $postdata['reasonRecordNdtoList'] = json_decode($postdata['reasonRecordNdtoList'],true);
        if(empty($postdata['reasonRecordNdtoList']) || !is_array($postdata['reasonRecordNdtoList'])){
            throw new Exception("请选择原因");
        }

        $resultdata = $this->GetFormById($dataId);

        if(empty($resultdata)){
            throw new Exception("获取表单校验数据失败");
        }

        if($resultdata['answerType'] == 1 && count($postdata['reasonRecordNdtoList'])>1){
            throw new Exception("该表单选择不支持多选");
        }

        $itemNdtos = $resultdata['itemNdtos'];
        if(empty($itemNdtos) || !is_array($itemNdtos)){
            throw new Exception("获取表单校验数据失败1");
        }



        $relationIds = array();
        foreach ($itemNdtos as $key => $value) {
            $relationIds[$value['id']] = $value['allowInput'];
        }

        $reasonRecordNdtoList = array();

        foreach($postdata['reasonRecordNdtoList'] as $key => $value) {

            $value['relationId'] = intval($value['relationId']);

            if(empty($value['relationId'])){
                throw new Exception("表单选择项不合法");
            }

            if(!array_key_exists($value['relationId'],$relationIds)){
                throw new Exception("表单选择项不合法");
            }

            $value['inputTxt'] = zbj_lib_BaseUtils::getStr($value['inputTxt'],'string');
            if(!empty($value['relationId']) && !empty($relationIds[$value['relationId']]) && empty($value['inputTxt'])){
                throw new Exception("请填写具体原因");
            }
            $reasonRecordNdtoList[] = array(
                'formCfgId'=>$dataId,
                'relationId'=>$value['relationId'],
                'inputTxt'=>$value['inputTxt']
                );           

        }


        return $reasonRecordNdtoList;

    }


    public static $_memcache = null;

    /**
     * 公共获取表单接口
     * @param $inPath
     */
    private function GetFormById($dataId = 0){        
        
        $dataId = zbj_lib_BaseUtils::getStr($dataId,'int');
        
        if(empty($dataId)){
            return false;
        }

        if(empty(self::$_memcache)){
            self::$_memcache = new zbj_lib_cache('memcache');
        }

        $cachename = "com.zhubajie.task.tradefollow.getformbyid".$dataId;
        $cacheresult = self::$_memcache->get($cachename);

        if(!empty($cacheresult)){
            return $cacheresult;
        }

        $param['data'] = $dataId;

        $data['appid']='trade';
        $data['service']='WtCommonService';
        $data['method']='getFormById';

        $data['param']=json_encode($param);

        try{
            
            $c = new zbj_lib_ApiHttpClient($data);

            $result = $c->execute();

            $result = json_decode($result,1);

            if(!is_array($result) || !$result['success']){
                return false;
            }

            $resultdata = $result['data'];
            self::$_memcache->set($cachename,$resultdata,7200);
            return $resultdata;

        }catch (Exception $e){
            return false;
        }

    }

    /**
    * 保存提交的原因数据
    */
    private function saveGiveUpReason($sdata = array()){
        
        if(empty($sdata)){
            return false;
        }

        $param['data'] = $sdata;

        $data['appid']='trade';
        $data['service']='ReasonService';
        $data['method']='addReasonRecord';
        $data['param']=json_encode($param);

        try{
            
            $c = new zbj_lib_ApiHttpClient($data);

            $result = $c->execute();

            $result = json_decode($result,1);

            if(!is_array($result) || !$result['success']){
                throw new Exception($result['description']);
            }

            return true;

        }catch (Exception $e){
            throw new Exception($e->getMessage());
        }

    }

    /**
     * 工作台 雇主服务商 提醒签单
     * @return mixed
     */
    public function pageRemind(){

        $task_id = intval($_POST['task_id']);
        $works_id = intval($_POST['works_id']);
        $user_id = intval($_POST['user_id']);

        if(!$task_id || !$works_id || !$user_id){
            $this->doJson("传递的参数异常");
        }

        $srvTask = new zbj_service_task($task_id);
        $srvTask = $srvTask->init();

        if($srvTask->get('state')>=4){
            $this->doJson("交易已经完成不能发起提醒");
        }

        $srvWork = new zbj_service_works($works_id);
        if($srvWork->get('task_id') != $task_id || $srvWork->get('iseliminate') ==1){
            $this->doJson("非法操作");
        }

        $agr_step = $srvWork->getAgreementStep();
        if($agr_step > 4){
            $this->doJson("合同已同意！不允许发起提醒！");
        }

        $sdk_lib[] ="zbj_sdk";
        zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,5,$sdk_lib);
        $agreementClient = new com\zhubajie\task\interfaces\TaskAgreementServiceClient(null);
        zbj_lib_ApiClient::build($agreementClient);

        try{

            $result = null;

            if($srvTask->get('user_id') == $user_id){
                //服务商提醒雇主
                $paramDO = new com\zhubajie\task\dataobject\taskagreement\ApplySellerTaskAgreementParamDO();
                $paramDO->user_id = $user_id;
                $paramDO->task_id = $task_id;
                $paramDO->works_id = $works_id;
                $result = $agreementClient->applySeller($paramDO);
                if($result->success == false){
                    throw new Exception($result->message);
                }

            }elseif($agr_step == 3){
                //提醒雇主签合同
                $paramDO = new com\zhubajie\task\dataobject\taskagreement\ApplyBuyerTaskAgreementParamDO();
                $paramDO->user_id = $user_id;
                $paramDO->task_id = $task_id;
                $paramDO->works_id = $works_id;
                $result = $agreementClient->applyBuyer($paramDO);
                if($result->success == false){
                    throw new Exception($result->message);
                }
            }else{
                //提醒雇主签单
                $paramDO = new com\zhubajie\task\dataobject\taskagreement\CheckSellerCanNoticeAgreementParamDO();
                $paramDO->user_id = $user_id;
                $paramDO->task_id = $task_id;
                $paramDO->works_id = $works_id;
                $result = $agreementClient->checkSellerCanNoticeAgreement($paramDO);
                if($result->success == false){
                    throw new Exception($result->message);
                }

                //提醒签单事件
                zbj_lib_Api::sellerRemindSelectWorkNotice($task_id,$user_id);

            }

        }catch(Exception $e){
            $this->doJson('发起提醒失败，'.$e->getMessage());
        }
        $this->doJson('发起提醒成功',1);
    }


    

    //===================  私有方法 ==================//

    /**
     * 请求参数采用 http post 方式传输
     * 将请求参数格式化为“key=value”格式，即“k1=v1”、“k2=v2”、“k3=v3” ；
     * 将格式化好的参数键值对以字典序升序排列后，拼接在一起，即“k1=v1&k2=v2&k3=v3”；
     * 在拼接好的字符串末尾追加上公共加密key；即：k1=v1&k2=v2&k3=v3signkey=加密key
     * 上述字符串的sha1值即为签名的值。
     * 请求参数sign 的值 即为 签名
     * @param $parameters
     * @return string
     * @throws Exception
     *
     */
    private function getSign($parameters)
    {

        if (!$this->singkey) {
            throw new Exception("未设置签名key！");
        }

        ksort($parameters);

        $buff = $reqPar = "";
        foreach ($parameters as $k => $v) {

            //签名参数 不进行加密
            if ("sign" == $k) {
                continue;
            }

            $buff .= $k . "=" . $v . "&";
        }

        if (strlen($buff) > 0) {
            $reqPar = substr($buff, 0, strlen($buff) - 1);
        }

        $reqPar .= "signkey=".$this->singkey;

        return sha1($reqPar);

    }

    /**
     * 检测签名有效性
     * @return bool
     */
    private function checkSign()
    {
        try{

            $sign       = trim($_POST['sign']);
            $parameters = $_POST;

            if(empty($sign)){
                throw new Exception("签名字段不能为空！");
            }

            if($this->getSign($parameters) != $sign){
                throw new Exception("非法接口调用");
            }

            return true;

        }catch (Exception $e){

            $this->doJson($e->getMessage());

        }

    }


    /**
     * json 输出
     * @param $msg 描述信息
     * @param int $state 0 失败 1成功
     * @param array $data 接口返回参数信息
     */
    private function doJson($msg,$state = 0 ,$data = array()){

        header("Content-Type:application/json; charset=utf-8");
        $result = array(
            'state'=>$state,
            'msg'=>$msg,
            'data'=>$data,
        );

        echo json_encode($result);
        exit;
    }

    
    /**
     * 未联系上雇主，添加跟单小助手数据 20150922
     */
    public function pageAddCannotContactData(){
        $task_id = zbj_lib_BaseUtils::getStr($_POST['task_id'],'int');
        $works_id = zbj_lib_BaseUtils::getStr($_POST['works_id'],'int');
        $user_id = zbj_lib_BaseUtils::getStr($_POST['user_id'],'int');
        $state = zbj_lib_BaseUtils::getStr($_POST['state'],'int'); //0未处理 1已处理
        $feedbacktime = zbj_lib_BaseUtils::getStr($_POST['feedbacktime'],'int');
        if(!$task_id){           
            $this->doJson("任务号参数错误",0);
        }

        if(!$works_id){           
            $this->doJson("稿件号参数错误",0);
        }

        if(!$user_id){           
            $this->doJson("稿件号参数错误",0);
        }

        if(!$feedbacktime){
            $this->doJson("反馈时间错误",0);
        }

        if(!in_array($state,array(0,1))){
            $this->doJson("处理状态错误",0);
        }

        //服务商联系不上雇主
        $data = array(
              'task_id' => $task_id,
              'works_id' => $works_id,
              'user_id' => $user_id,
              'nickname' => $nickname,
              'feedbacktime' => $feedbacktime,
              'feedbackymd' => date('Y-m-d',$feedbacktime),
              'state' => $state,
              'createtime' => time(),
              'createymd' => date('Y-m-d',time())
            );

        $task_follow = new zbj_service_taskfollow();
        $res = $task_follow->addCannotContactData($data);

        if($res) $this->doJson("跟单小助手数据修改成功",1);
        $this->doJson("跟单小助手数据修改失败",1);
    }


}

