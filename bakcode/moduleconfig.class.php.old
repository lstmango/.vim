<?php

/**
 * 订单分配系统配置
 * 
 *moduleconfig
 */
class zbj_service_moduleconfig extends zbj_components_baseservice{
	
	public function __construct($id=0){
		parent::__construct($id);
	}
	
	/**
	 * 验证是否满足订单撮合系统要求【废弃2015.3.7】
	 * 新的订单撮合系统,不调用时可删除
	 * @return bool
	 * @author lidacheng
	 * */
	public function isMatchModeTask($task){
		return false;
	}

	/**
	 * 验证是否满足后台分配配置条件【禁止调用】
	 * 新的订单跟进系统,不调用时可删除
	 * @return bool
	 * @author lidacheng
	 * */
	public function getTaskAllotDimensionConfig(&$srvTask){
		$task = $srvTask->get();
		if(!is_array($task) || empty($task['category_id'])){
			$this->setError(0,'传递的参数错误');
			return false;
		}
		
		$allotConfig = $this->getTaskAllotConfigs($task['category_id']);
		$statusName = $this->getTaskStatusName($srvTask);
		
		if($_GET['_d']=='zbjdebug') print_r($allotConfig);
		
		if(empty($allotConfig[0]) || empty($statusName)){
			$this->setError(0,'获取到的分配配置为空或需求状态异常');
			return false;
		}
		$mode = $task['mode'];
		if($task['allot']==3){
			$mode = $mode.'_3';
			$allotAmount = round((float)($srvTask->get('task_allot.amount')),2);
		}
		
		$dimensions = array();
                $isBusiness = $srvTask->isBusinessImportant();
		foreach($allotConfig as $configs){
			$option = (array)$configs['option'];
			$config = $option[$mode][$statusName];
			if(empty($config) || !is_array($config)) continue;
			foreach($config as $conf){
				if(!in_array($conf['allot_type'],array(375,378))){ // 表明不是立即分配或者延迟分配
					continue;
				}
                                
                                if($isBusiness){
                                    $configs['data']['config'] = $conf;
				    $dimensions[] = $configs['data']; break;
                                }
                                
                                switch($statusName){
                                        case 'hosted':
                                        case 'hosted_apart':
                                                $amount = $task['hosted_amount']; break;
                                        case 'cancel':
                                        default:
                                                $amount = $task['amount']; break;
                                }

                                $min = round((float)$conf['min'],2);
                                $max = round((float)$conf['max'],2);

                                $wmin = round((float)$conf['w_min'],2);
                                $wmax = round((float)$conf['w_max'],2);

                                $checkok = false;
                                if($max>0 && $amount>=$min && $amount<=$max){
                                        $checkok = true;
                                }else if($max==0 && $amount>=$min){
                                        $checkok = true;
                                }

                                if($checkok && $mode=='10_3'){
                                        $checkok = false;
                                        if($wmax>0 && $allotAmount>=$wmin && $allotAmount<=$wmax){
                                                $checkok = true;
                                        }else if($wmax==0 && $allotAmount>=$wmin){
                                                $checkok = true;
                                        }
                                }
                                
				if($checkok){
					$configs['data']['config'] = $conf;
					$dimensions[] = $configs['data']; break;
				}
			}
		}
		
		return $dimensions;
	}
	
	private function getTaskStatusName(&$srvTask){
		$task = $srvTask->get();
		if($task['open_state'] != 0){
			return false;
		}
		
		$taskinfo = $srvTask->get('task_info.*');
		
		if($task['state']==4 && in_array($taskinfo['end_type'],array(2,5))){
			return 'cancel';
		}else if($task['state']<4 && $task['hosted']==0){
			return 'unhosted';
		}else if($task['state']<4 && $task['hosted']==1 && round($task['hosted_amount'],2)>=round($task['amount'],2)){
			return 'hosted';
		}else if($task['state']<4 && $task['hosted']==1 && $task['hosted_amount']<$task['amount']){
			return 'hosted_apart';
		}
		return false;
	}
  
	/**
	 * 取得后台订单分配置的相应分组数据【禁止调用，不调用时可删除】
	 * @return array
	 * @author lidacheng
	 */
	private function getTaskAllotConfigs($categoryid) {
		$cache = new zbj_lib_cache('memcache');
		$cachekey = 'task.zhubajie.alloter.configs.'.$categoryid;
		$configlist = $cache->get($cachekey);
		if (!is_array($configlist) || zbj_lib_Constant::DOMAIN!='zhubajie.com') {
			$configlist = array();
			$moduleconfigModel = zbj_model_api::get('zbj_model_mk_moduleconfig');
			$allot_config = $moduleconfigModel->select(array('category_id' => $categoryid))->items;
			$allot_config = (array)$allot_config;
			foreach($allot_config as $config){
				if(empty($config)) continue;
				empty($configlist[0]) && $configlist[] = $this->_format_allot_config($config);
			}
			$cache->set($cachekey, $configlist, 3600);
		}
		return $configlist;
	}
	
	/**
	 * 格式化配置数据
	 * 
	 * @param array $allot_config
	 * 
	 * @access private
	 * @author yuanzhuang
	 */
	private function _format_allot_config($configs) {
		$result_data = array();
		$format_data = array();
		
		if ($configs) {
			$allot_config = json_decode($configs['allot_config_option'],  true);
		} else {
			$allot_config = array();
		}
			
		$modes = array('10', '13', '10_3', '12', '11');
		foreach ($modes as $mode) {
			if (! array_key_exists($mode, $allot_config)) {
				$allot_config[$mode] = array();
			} 
			
			$format_data[$mode] = $allot_config[$mode];
		}
		
		$config_type = $this->_get_config_type();
		
		foreach ($allot_config as $mode => $each_config) {
			if (! $mode) continue;
			
			$temp = array();
			foreach ($config_type[$mode] as $each_type => $each_desc) {
				if (! array_key_exists($each_type, $each_config)) {
					$each_config[$each_type] = array(array());
				}
				
				$temp[$each_type] = $each_config[$each_type];
			}
			$format_data[$mode] = $temp;
		}
		
		unset($configs['allot_config_option']);
		
		return array('option'=>$format_data,'data'=>$configs);
	}
	/**
	 * 格式化配置数据
	 * 
	 * @return array
	 * 
	 * @access private
	 * @author yuanzhuang
	 */
	private function _get_config_type() {
		return array(
			'10' => array(
				'unhosted' => '未托管', 
				'hosted' => '全额托管', 
				'hosted_apart' => '部分托管', 
				'tender' => '投标期过半', 
				'select' => '选标期过半', 
				'report' => '举报'
			),
			'13' => array(
				'unhosted' => '未托管', 
				'hosted' => '全额托管', 
				'hosted_apart' => '部分托管', 
				'tender' => '投标期过半', 
				'select' => '选标期过半', 
				'report' => '举报'
			),
			'10_3' => array(
				'unhosted' => '未托管', 
				'hosted' => '全额托管', 
				'hosted_apart' => '部分托管', 
				'tender' => '投标期过半', 
				'select' => '选标期过半', 
				'report' => '举报'
			),
			'12' => array(
				'unhosted' => '未托管', 
				'cancel' => '取消订单', 
				'report' => '举报'
			),
			'11' => array(
				'unhosted' => '未托管', 
				'cancel' => '取消订单', 
				'report' => '举报'
			)
		);
	}
	

}
