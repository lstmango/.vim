<?php

use com\zhubajie\boss\dataobject\message\messageType;
use com\zhubajie\boss\dataobject\message\messageProduct;
use com\zhubajie\boss\dataobject\message\messageRange;
use com\zhubajie\boss\dataobject\message\messagePack;
use com\zhubajie\boss\dataobject\group\GroupType;

class controller_misc extends components_basepage {

	public $cache = 0;

	function __construct() {
		parent::__construct(true);
		$this->cache = new zbj_lib_cache('memcache');
	}

	/**
	 * 关键词及IP
	 */
	function pageShield() {
		zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID,lib_Constant::API_BOSS_SECRET,30,array('util-sdk'));
		$sensitive=new com\zhubajie\util\interfaces\SensitiveServiceClient(null);
		zbj_lib_ApiClient::build($sensitive);
		$words=$sensitive->getSensitiveWords();
		foreach ($words as $k=>$v){
			$str.=$k."\n";
		}
		$str=rtrim($str,"\n");
		$this->tplvar['count_words']=count($words);
		$this->tplvar['keyword'] =$str;
		$content = zbj_lib_BaseUtils::apicall('misc', 'getshield', array(
				'var' => 'denied_ip'
			));
		$mem = new zbj_lib_cache('memcache');
		$mem->del('banned_ip');
		$mem->del('banned_keyword');
		$this->tplvar['ip']= $content ['data'] ['denied_ip'];
		$this->tplvar['count_ip']=count(explode("\n", $content ['data'] ['denied_ip']));
		return $this->render('misc/shield/index.html', $this->tplvar);
	}
	/**
	 * IP查询
	 */
    function pageIpSearch($inPath)
    {
        $this->urlinfo = $this->getUrlParams($inPath);
        $page = isset($this->urlinfo['page']) ? (int)$this->urlinfo['page'] : 1;
        $limit = 10;
        $censorlog = new model_mb_censorlog();
        if ($_POST['searchip']) {
            $censorip = $_POST['searchip'];
            $condition['censor_ip'] = $censorip;
            @$iplist = $censorlog->getList($condition, $items = "*", $groupby = "", $orderby = array('log_id' => 'DESC'), $leftjoin = "", $limit, $page);
        } else {
            @$iplist = $censorlog->getList($condition = "", $items = "*", $groupby = "", $orderby = array('log_id' => 'DESC'), $leftjoin = "", $limit, $page);
        }
        $this->tplvar['iplist'] = $iplist->items;
        $this->tplvar['totalSize'] = $iplist->totalSize;
        $this->tplvar['pagebar'] = $this->PageBar($iplist->totalSize, $limit, $page, $inPath, 'style4', $_SERVER['QUERY_STRING']);
        return $this->render('misc/shield/ipsearch.html', $this->tplvar);
    }
	/**
	 * 关键词测试
	 */
	function pageTestKeyword() {
		$params = array();
		if ($_POST) {
			$params ['cont'] = htmlspecialchars($_POST ['cont']);
			$params ['filterafter'] = str_replace('**', "<span style=\"color:red;\">**</span>", SFilter::replace($_POST ['cont'], 2));
		}
		return $this->render('misc/shield/test.html', $params);
	}
	
	/**
	 * 添加关键词及IP
	 */
	function pageAddKeyword(){
		if ($_GET['flag']==3){
				return $this->render("misc/ajax/reson.html",$this->tplvar);
			}
		if($_POST){
			if(!$_POST['sensword']&&!$_POST ['sensip']) $this->printmsg('空数据');
			if($_POST['sensword']){
				$sensword=zbj_lib_BaseUtils::getStr($_POST['sensword']);
				$sensitiveWords=explode("\n", $sensword);
				if(!is_array($sensitiveWords)) $this->printmsg('请填写关键字');
				$key = array();
				foreach($sensitiveWords as $k=>$v){
					if($v) $key[$v]=$k;
				}
				zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID,lib_Constant::API_BOSS_SECRET,30,array('util-sdk'));
				$sensitive=new com\zhubajie\util\interfaces\SensitiveServiceClient(null);
				zbj_lib_ApiClient::build($sensitive);
				$mem = new zbj_lib_cache('memcache');
				$mem->del('banned_ip');
				$mem->del('banned_keyword');
				if ($_POST['key_flag']==2){
					foreach ($sensitiveWords as $v){
						$v=	str_replace("\r", '', $v);
						$result=$sensitive->deleteSensitiveWord(explode(',', $v));
						if($result->success){
							zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
								'type' => 'tag',
								'pk_id' => 999,
								'content' => '删除了关键字'.$v.']',
								'user_id' => $this->_userid,
								'name' => $this->_nickname,
								'create_time'=>$this->_time
							));
						}else{
							$this->printmsg('删除失败'.$result->message);
						}
					}$this->printmsg('删除成功',2, '', '/misc/AddKeyword');
				}else {
					$result=$sensitive->addSensitiveWords($key);
					if($result->success){
						$mem = new zbj_lib_cache('memcache');
						$mem->del('banned_keyword');
						zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
							'type' => 'tag',
							'pk_id' => 999,
							'content' => '添加了关键字'.$sensword.']',
							'user_id' => $this->_userid,
							'name' => $this->_nickname,
							'create_time'=>$this->_time
						));
						$this->printmsg('添加成功',2, '', '/misc/AddKeyword');
					}else{
						$this->printmsg('添加失败'.$result->message);
					}
				}
			}
			if ($_POST ['sensip']) {
				$sip=trim($_POST ['sensip']);
				$sips=explode("\n", $sip);
				if(!is_array($sips)) $this->printmsg('请填写关键字');
				if($_POST['reson']=='') $this->printmsg('请填写操作原因');
				$censorlog = new model_mb_censorlog();
				$content = zbj_lib_BaseUtils::apicall('misc', 'getshield', array(
						'var' => 'denied_ip'
					));
				$ipstr = $content ['data'] ['denied_ip'];
				$ipstrarr= explode("\n", $ipstr);
				$censor=new model_mb_censor();
				if ($_POST ['ip_flag']==2){
					foreach ($sips as $v){
						if ($v!=''){
							foreach ($ipstrarr as $k=>$value){
								if (str_replace("\r", '', $v) ==str_replace("\r", '', $value) ){
									$censorlog->add(array(
									'censor_ip'=>$v,
									'op_name'=>$this->_name,
									'op_time'=>time(),
									'op_reson'=>$_POST ['reson'],
									'op_state'=>1,
									));
									$ipstrarr[$k]='';
								}
							}
						}
					}
					 $ipstrarr = @array_filter($ipstrarr);
					 $ipstrarr = @implode("\n",$ipstrarr);
					 $censor->modify(array(
						'var' => 'denied_ip'
						), array(
						'cont' => $ipstrarr
					));
					$this->printmsg('成功删除', '', '', '/misc/AddKeyword');
				}else {
					$ipstr=$ipstr."\n".trim($_POST ['sensip']);
					$result=$censor->modify(array(
						'var' => 'denied_ip'
						), array(
						'cont' => $ipstr
					));
					if ($result!=0){
						foreach($sips as $v){
							$censorlog->add(array(
							'censor_ip'=>$v,
							'op_name'=>$this->_name,
							'op_time'=>time(),
							'op_reson'=>$_POST ['reson'],
							'op_state'=>2,
							));
						}
					}
					$this->printmsg('保存成功', '', '', '/misc/AddKeyword');
				}
			}
		}
		return $this->render('misc/shield/addkey.html');
	}

	/**
	 * 聊天关键词屏蔽
	 */
	function pageShieldIm() {
		if ($_POST) {
			$skeyword = trim($_POST ['keyword']);
			$censor = new model_mb_censor ();
			$censor->modify(array(
				'var' => 'imbanned'
				), array(
				'cont' => $skeyword
			));
			$mem = new zbj_lib_cache('memcache');
			$mem->del('im_banned_keyword');
			$this->printmsg('保存成功', '', '', '/misc/shieldim');
		}
		$content = zbj_lib_BaseUtils::apicall('misc', 'getshield', array(
				'var' => 'imbanned'
			));
		if (!$content) {
			$this->printmsg('没有请求到接口');
		}
		$params ['keyword'] = $content ['data'] ['imbanned'];
		return $this->render('misc/shield/im.html', $params);
	}
	/**
	 * 批量屏蔽稿件
	 * @param unknown $inPath
	 */
	function pageshieldworksitem($inPath){
		if(count($_POST)){
			$works=zbj_lib_BaseUtils::getStr($_POST['works_ids']);
			$worksid= preg_split('/\r\n/', $works);
			if(is_array($worksid)){
				foreach ($worksid as $wid){
					$wid=intval(trim($wid));
					echo "开始处理稿件号",$wid;
					if($wid>0){
						$sworks = new zbj_service_works($wid);
						if ($sworks->get('open_state') == 1) {
							echo "稿件已被屏蔽无需操作。<br />";
						}
						if ($sworks->shield()) {
							echo "屏蔽稿件成功。<br />";
						}else{
							echo "屏蔽稿件失败：".$sworks->getError()."。<br />";
						}
					}else{
						echo "稿件号不合法<br />";
					}
				}
			}else {
				echo "没有输入稿件号<br />";
			}
			exit;
		}
		return $this->render('misc/shield/worksitem.html', array());
	}
	/**
	 * 稿件关键词、IP及用户名
	 */
	function pageShieldWorks() {
		if ($_POST) {
			$works_content = trim($_POST ['works_content']);
			$works_nickname = trim($_POST ['works_nickname']);
			$works_ip = trim($_POST ['works_ip']);
			$censor = new model_mb_censor ();
			$censor->modify(array(
				'var' => 'works_content'
				), array(
				'cont' => $works_content
			));
			$censor->modify(array(
				'var' => 'works_nickname'
				), array(
				'cont' => $works_nickname
			));
			$censor->modify(array(
				'var' => 'works_ip'
				), array(
				'cont' => $works_ip
			));
			$this->printmsg('保存成功', '', '', '/misc/shieldworks');
		}
		$content = zbj_lib_BaseUtils::apicall('misc', 'getshield', array(
				'var' => 'works_ip,works_content,works_nickname'
			));
		if (!$content) {
			$this->printmsg('没有请求到接口');
		}
		$params ['works_ip'] = $content ['data'] ['works_ip'];
		$params ['works_content'] = $content ['data'] ['works_content'];
		$params ['works_nickname'] = $content ['data'] ['works_nickname'];
		return $this->render('misc/shield/work.html', $params);
	}

	/**
	 * 搜索
	 */
	public function pageSearch($inPath){
		$urlparams = $this->getUrlParams($inPath);
		$type = (int) $_GET['type']; // 1:需求,2:出售,3:用户,4:标签,7机会
		$subtype = (int) $_GET['subtype']; // 1:需求,2:出售,3:用户,4:标签
		$keywords = trim($_GET['key']);
		$page = $urlparams ['page'] ? (int) $urlparams ['page'] : 1;
		$limit = 10;

		if(!$keywords){
			$this->printmsg('请输入关键字');
		}elseif (!lib_BaseUtils::isID($keywords)) {
			$keywords = zbj_lib_BaseUtils::getStr($keywords);
		}

		$obj = null;
		$items = '*';
		$orderby = '';
		$left_join = array();
		$error_prompt = '';
		$db = array();
		switch ($type) {
			case 1 ://需求
				$obj = new zbj_model_mk_task();
				switch ($subtype) {
					case 1://标题
						$condition['title'] = $keywords;
						break;
					case 2://交易号
						if ($obj->selectOne(array('task_id' => $keywords))) {
							$this->redirect("/task/lastview-id-$keywords.html");
						}  else {
							$error_prompt = '该交易号没有匹配的交易';
						}
						break;
					case 3://投标号
						$works = new zbj_model_mk_works($keywords);
						$tid = $works->getData('task_id');
						if($tid){
							$this->redirect("/task/lastview-id-$tid.html?q=$keywords&qt=1&s=0");
						}else{
							$error_prompt = '该投标号没有匹配的稿件';
						}
						break;
					case 4://昵称
						$info = new zbj_model_mb_info();
						$row = $info->selectOne(array('brandname' => $keywords), 'user_id');
						if ($row['user_id'] > 0) {
							$condition['user_id'] = $row['user_id'];
						}else{
							$error_prompt = '该昵称不存在';
						}
						break;
					default:
						if (lib_BaseUtils::isID($keywords)) {
							$condition['task_id'] = $keywords;
						} else {
							$condition['title'] = $keywords;
						}
						break;
				}
				$items = 'task_id,noid,title,amount,user_id,nickname';
				$orderby = 'order by createtime desc';
				$db = array('dbinfo' => 'co_market');
				break;
			case 2 ://出售
				switch ($subtype) {
					case 1://标题
						$condition['subject'] = $keywords;
						break;
					case 2://服务号
						$service=new zbj_model_sp_service($keywords);
						$uid = $service->getData('user_id');
						if($uid){
							$this->redirect(str_replace('t5.zbj.net', 'v5.zbj.com', zbj_lib_Constant::HOME_URL) . "/{$uid}/sid-{$keywords}.html");
						}else{
							$error_prompt = '该服务号没有匹配的服务';
						}
						break;
					case 3://昵称
						$info = new zbj_model_mb_info();
						$row = $info->selectOne(array('brandname' => $keywords), 'user_id');
						if ($row['user_id'] > 0) {
							$condition['user_id'] = $row['user_id'];
						}else{
							$error_prompt = '该昵称不存在';
						}
						break;
					default:
						if (lib_BaseUtils::isID($keywords)) {
							$condition['service_id'] = $keywords;
						} else {
							$condition['subject'] = $keywords;
						}
						break;
				}
				$obj = new zbj_model_sp_service();
				$items = 'service_id,user_id,nickname,subject,amount';
				$orderby = 'order by addtime desc';
				$db = array('dbinfo' => 'co_shop');
				break;
			case 3 ://用户
				$obj = new zbj_model_mb_info();
				switch ($subtype) {
					case 1://昵称
						$condition['brandname'] = $keywords;
						break;
					case 2://ID
						$row = $obj->selectOne(array('user_id' => $keywords));
						if ($row) {
							$this->redirect("/user/view-uid-$keywords");
						} else {
							$error_prompt = '该用户不存在';
						}
						break;
					case 3://用户名
						$condition['nickname'] = $keywords;
						break;
					case 4://认证手机
						$account = new zbj_model_mb_account();
						$row = $account->selectOne(array('usermobile' => $keywords), 'user_id');
						if ($row['user_id']) {
							$this->redirect("/user/view-uid-{$row['user_id']}");
						} else {
							$error_prompt = '该认证手机不存在';
						}
						break;
					case 5://联系方式
						$condition['mobile'] = $keywords;
						break;
					case 6://认证邮箱
						$account = new zbj_model_mb_account();
						$row = $account->selectOne(array('useremail' => $keywords), 'user_id');
						if ($row['user_id']) {
							$this->redirect("/user/view-uid-{$row['user_id']}");
						} else {
							$error_prompt = '该认证邮箱不存在';
						}
						break;
					case 7://联系邮箱
						$condition['email'] = $keywords;
						break;
					case 8://易极付ID
						$yijifu = new zbj_model_mb_yijifu();
						$row = $yijifu->selectOne(array('yuser_id' => $keywords), 'user_id');
						if ($row['user_id']) {
							$this->redirect("/user/view-uid-{$row['user_id']}");
						} else {
							$error_prompt = '该易极付ID不存在';
						}
						break;
					case 9://证件号
						$condition[]="(cardid='$keywords' OR licence='$keywords')";
						break;
					case 10://QQ号
						break;
					case 11://豆瓣账号
						break;
					case 12://微博账号
						break;
					case 13://人人网账号
						break;
					case 14://淘宝账号
						break;
					default:
						if(zbj_lib_BaseUtils::IsMobile($keywords)){
							$account = new zbj_model_mb_account();
							$row = $account->selectOne(array('usermobile' => $keywords), 'user_id');
							if ($row['user_id']) {
								$this->redirect("/user/view-uid-{$row['user_id']}");
							} else {
								$error_prompt = '该认证手机不存在';
							}
						}elseif (lib_BaseUtils::isID($keywords)) {
							$condition['user_id'] = $keywords;
						}elseif (filter_var($keywords,FILTER_VALIDATE_EMAIL)) {
							$account = new zbj_model_mb_account();
							$row = $account->selectOne(array('useremail' => $keywords), 'user_id');
							if ($row['user_id']) {
								return $this->redirect("/user/view-uid-{$row['user_id']}");
							}
							$condition['email'] = $keywords;
						} else {
							$condition[] = "nickname = '$keywords' or brandname = '$keywords'";
						}
						break;
				}
				$items = 'user_id,nickname,brandname';
				$db = array('dbinfo' => 'co_member');
				break;
			case 4://举报
				$report = new zbj_model_mb_report();
				$$keywords = zbj_lib_BaseUtils::getStr($keywords,'int');
				$row = $report->selectOne(array('report_id' => $keywords));
				if ($row) {
					$url = "/report/reportview-reportid-$keywords";
					// if ($row['o_bel_id']) {
					// 	$url = "/task/lastview-t-6-id-{$row['o_bel_id']}.html?stype=1&scont=$keywords";
					// } else {
					// 	$url = "/task/lastview-t-6-id-{$row['o_id']}.html?stype=1&scont=$keywords";
					// }
					$this->redirect($url);
				} else {
					$error_prompt = '该举报不存在';
				}
				$db = array('dbinfo' => 'co_member');
				break;
			case 5 ://标签
				$condition['tag_name'] = $keywords;
				$obj = new zbj_model_mk_tag();
				$items = 'tag_id,tag_name,follow_num,task_num,service_num';
				$db = array('dbinfo' => 'co_market');
				break;
			case 6://工单
				$obj = new zbj_model_cp_order();
				$row = $obj->selectOne(array('order_id' => $keywords));
				if ($row) {
					$this->redirect("/misc/orderdetail-oid-$keywords.html");
				} else {
					$error_prompt = '该工单不存在';
				}
				$items = 'order_id';
				$db = array('type'=>'query');
				break;
			case 7://商标版权机会
				switch ($subtype) {
					case 2:
						$obj = new zbj_model_mk_chance();
						$condition['phone'] = $keywords;
						$condition[]='mk_chance.chance_type_group in(1,2)';
						//$condition['pid'] = 0;
						$items = 'mk_chance.user_id, mk_chance.chance_id, mk_chance.source,chance_type, mk_chance.relation_id, copyright_id';
						$left_join['mk_copyright'] = 'mk_chance.chance_id = mk_copyright.chance_id';
						$params ['chanceTypes'] = service_mkchance::getChangeTypes();
						break;
					default:
						$copy_id=zbj_lib_BaseUtils::getStr($keywords,'int');
						$obj = new zbj_model_mk_chance();
						$condition[]='mk_chance.chance_type_group in(1,2)';
						$condition[]='mk_copyright.copyright_id ='.$copy_id;
						$items = 'mk_chance.user_id, mk_chance.chance_id, mk_chance.source,chance_type, mk_chance.relation_id, copyright_id';
						$left_join['mk_copyright'] = 'mk_chance.chance_id = mk_copyright.chance_id';
						$chance = $obj->selectOne($condition,'mk_chance.chance_id',null,null,$left_join);
						if (!$chance['chance_id']) {
							return $this->printmsg('没有找到相关机会',0);
						}
						$this->redirect("/copyright-detail?id={$copy_id}");
// 						$obj = new zbj_model_mk_copyright();
// 						$row = $obj->selectOne(array('chance_id'=>$keywords), 'copyright_id');
// 						if ($row && $row['copyright_id']) {
// 							$this->redirect("/copyright-detail?id={$row['copyright_id']}");
// 						}else{
// 							$error_prompt = '该商标版权机会不存在';
// 						}
						break;
				}

				break;
			case 8:
				//法律服务
				lib_BaseUtils::apiInit(10,array('zbj_biaoju_client'));
				$chanceClient = new com\zhubajie\biaoju\sdk\interfaces\ChanceServiceClient(null);
				lib_BaseUtils::apigetclient($chanceClient);
				$lawChanceQueryDTO = new com\zhubajie\biaoju\sdk\dataobject\law\LawChanceQueryDTO();
				$lawChanceOrderByDTO = new com\zhubajie\biaoju\sdk\dataobject\law\LawChanceOrderByDTO();
				$lawChanceOrderByDTO->field = com\zhubajie\biaoju\sdk\dataobject\law\LawChanceOrderByField::CREATE_TIME;
				$lawChanceOrderByDTO->is_desc = true;
				//法律服务
				switch ($subtype){
						
					case 2:
						//用户ID
						$lawChanceQueryDTO->user_id = $keywords;
						break;
					case 3:
						$lawChanceQueryDTO->telephone = $keywords;
						break;
					default:
						//机会ID
						$lawChanceQueryDTO->chance_id = $keywords;
						break;
				}
				$chanceResilt = $chanceClient->queryLawChance($lawChanceQueryDTO, $lawChanceOrderByDTO, $limit, $limit*($page-1));
				if ($chanceResilt->total ==1) {
					$this->redirect(lib_Constant::LAW_BOSS_URL.'/law/detail?id='.$chanceResilt->items[0]->chance_id);
				}else{
					$params['list'] = $chanceResilt->items;
					$params['num'] = $chanceResilt->total;
					$params ['pagebar'] = $this->PageBar($params ['num'], $limit, $page, $inPath, 'style4', '?'.$_SERVER ['REDIRECT_QUERY_STRING']);
				}
				break;
			default :
				break;
		}
		if (!$params['list']) {
			$params['list'] = array();
		}
		if(!$params['num']){
			$params ['num'] = 0;
		}
		if (!$params['pagebar']) {
			$params ['pagebar'] = '';
		}
		if ($error_prompt) {
			$params ['error_prompt'] = $error_prompt;
		} elseif ($obj) {
			$obj->setLimit($limit);
			$obj->setPage($page);
			$obj->setCount(TRUE);
//			define('DEBUG', 1);
			$data = $obj->select($condition, $items, '', $orderby, $left_join, $db);
			$params['list'] = $data->items;
			$params ['num'] = $data->totalSize;
			if ($params ['num'] == 1) {
				switch ($type) {
					case 1 :
						$this->redirect("/task/lastview-id-{$params['list'][0]['task_id']}.html");
						break;
					case 2 :
						$this->redirect(str_replace('t5.zbj.net', 'v5.zbj.com', zbj_lib_Constant::HOME_URL) . "/{$params['list'][0]['user_id']}/sid-{$params['list'][0]['service_id']}.html");
						break;
					case 3 :
						$this->redirect("/user/view-uid-{$params['list'][0]['user_id']}");
						break;
					case 5 :
						$this->redirect("/misc/tagedit-tid-{$params['list'][0]['tag_id']}");
						break;
					case 6 :
						$this->redirect("/misc/orderdetail-oid-{$params['list'][0]['order_id']}.html");
						break;
					case 7 :
						$this->redirect("/copyright-detail?id={$params['list'][0]['copyright_id']}.html");
						break;
					default:
						break;
				}
			}
			$params ['pagebar'] = $this->PageBar($params ['num'], $limit, $page, $inPath, 'style4', '?'.$_SERVER ['REDIRECT_QUERY_STRING']);
		}
		$params['type'] = $type;
		$params['key'] = $keywords;
		//$params['types'] = array(1 => '交易', '出售', '用户', '举报', '标签', '工单', '机会','法律');
		$params['types'] = array(3=>'用户',1 => '交易',7=> '商标版权', 6=>'工单', 4=> '举报' ,8=>'法律');
		return $this->render('misc/search/index.html', $params);
	}

	/**
	 * 以下是tag部分
	 */
	public function pagetagindex($inPath) {
		$aFilter = array();
		$limit = 20;
		$path = $this->getUrlParams($inPath);
		$page = isset($path ['page']) ? (int) $path ['page'] : 1;
		// 筛选条件
		$_GET = zbj_lib_BaseUtils::saddslashes($_GET);
		$sSort = $_GET ['st'];
		$sTime = $_GET ['stime'];
		$eTime = $_GET ['etime'];
		$iType = (int) $_GET ['tagtype'];
		$sTagName = $_GET ['tag_name'];
		$is_lock = (int) $_GET ['is_lock'];
		$is_enabled = (int)$_GET['is_enabled'];
		$is_free = (int)$_GET ['is_free'];
		$is_channel = (int)$_GET ['is_channel'];
		$svTag = new zbj_lib_list ();
		$mdlOrgn = zbj_model_api::get('zbj_model_mk_tagorganize');
		$mdlTag = zbj_model_api::get('zbj_model_mk_tag');
		//构造条件
		$condition = array();
		if (!empty($sTagName)) {
			$condition = array(
				"tag_name LIKE '%" . $sTagName . "%'"
			);
			$aFilter ['tag_name'] = $sTagName;
		}
		if (!empty($sTime) && !empty($eTime)) {
			$startline = strtotime($sTime);
			$endline = strtotime($eTime);
			$condition = array(
				"dateymd >= '{$sTime}' AND dateymd <= '{$eTime}'"
			);
			$aFilter ['stime'] = $sTime;
			$aFilter ['etime'] = $eTime;
		}
		//排序
		$orderby = '';
		if (!empty($sSort)) {
			switch ($sSort) {
				case 'h' :
					$orderby = 'ORDER BY follow_num DESC';
					break;
				case 't' :
					$orderby = 'ORDER BY dateline ASC';
					break;
				case 'n' :
					$orderby = 'ORDER BY tag_name ASC';
					break;
			}
			$aFilter ['st'] = $sSort;
		}
		//游离标签
		if ($is_free) {
			$cond = array();
			$leftjoin = array(
				'mk_tag_organize AS b' => 'a.tag_id = b.tag_id OR a.tag_id = b.parent_tag_id'
			);
			switch ($is_free) {
				case 1 :
					// 是
					$cond = array(
						'organize_id is NULL'
					);
					break;

				case 2 :
					// 否
					$cond = array(
						'organize_id > 0'
					);
					break;
			}
			$aID = $mdlTag->_db->select('mk_tag AS a', $cond, 'a.tag_id as tag_id', '', '', $leftjoin)->items;
			$aTemp = array();
			if ($aID) {
				foreach ($aID as $value) {
					$aTemp [] = $value ['tag_id'];
				}
				$condition [] = "a.tag_id IN(" . implode(',', $aTemp) . ")";
				$condition ['is_channel'] = 0;
			}
			$aFilter ['is_free'] = $is_free;
		}
		if ($iType) {
			$condition ['type'] = $iType - 1;
			$aFilter ['type'] = $iType;
		}
		switch ($is_enabled) {
			case 1:
				$condition ['is_enabled'] = 1;
				$aFilter ['is_enabled'] = $is_enabled;
				break;
			case 2:
				$condition ['is_eaabled'] = 0;
				$aFilter ['is_enabled'] = $is_enabled;
				break;
		}
		if ($is_lock) {
			$condition ['is_lock'] = $is_lock - 1;
			$aFilter ['is_lock'] = $is_lock;
		}
		if ($is_channel) {
			$condition ['is_channel'] = $is_channel - 1;
			$aFilter ['is_channel'] = $is_channel;
		}
		$oTag = $svTag->getTagList($condition, $limit, $page, '', $orderby);
		$aTag = $oTag->items;
		$pagebar = $this->PageBar($oTag->totalSize, $limit, $page, $inPath, 'style3', '?' . $_SERVER ['REDIRECT_QUERY_STRING']);
		$this->tplvar ['totalsize'] = $oTag->totalSize;
		// 父级标签
		if (!empty($aTag)) {
			$aIDs = array();
			foreach ($aTag as $val) {
				$aIDs [] = $val ['tag_id'];
			}
			$condition = array(
				'a.tag_id IN(' . implode(',', $aIDs) . ')'
			);
			$leftjoin = array(
				'mk_tag AS b' => 'a.parent_tag_id=b.tag_id'
			);
			$pTag = $mdlOrgn->_db->select('mk_tag_organize AS a', $condition, 'a.tag_id as tid,parent_tag_id,tag_name', '', '', $leftjoin)->items;
			if (!empty($pTag)) {
				foreach ($aTag as $key => $value) {
					foreach ($pTag as $item) {
						if ($value ['tag_id'] == $item ['tid']) {
							$aTag [$key] ['ptag'][] = $item;
						}
					}
				}
			}
		}
		// 处理参数
		$sFilter = '';
		$step = '';
		if ($aFilter) {
			foreach ($aFilter as $key => $value) {
				if ($key != 'st') {
					$sFilter .= $step . $key . '=' . $value;
					$step = '&';
				}
			}
		}
		$this->tplvar ['tag'] = $aTag;
		$this->tplvar ['filter'] = $aFilter;
		$this->tplvar ['filters'] = $sFilter;
		$this->tplvar ['pagebar'] = $pagebar;
		return $this->render('misc/tag/index.html', $this->tplvar);
	}

	public function pagetagEdit($inPath) {
		$aParams = array();
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		$path = $this->getUrlParams($inPath);
		$iTagID = (int) $path['tid'];
		$aParams['tid'] = $iTagID;
		if (empty($iTagID) || !is_int($iTagID) || $iTagID <= 0) {
			return $this->alert(array('state' => -1, 'msg' => "缺少必要的参数"));
		}
		//define(DEBUG, 1);
		//父级和子级
		$mdlTagorg = zbj_model_api::get('zbj_model_mk_tagorganize');
		//父级
		$condition = array(
			'a.tag_id'=>$iTagID,
		);
		$leftjoin = array(
			'mk_tag AS b'=>'a.parent_tag_id = b.tag_id'
		);
		$order = "ORDER BY b.tag_id ASC";
		$parent = $mdlTagorg->_db->select("mk_tag_organize AS a", $condition, 'b.tag_id,b.tag_name', '', $order, $leftjoin)->items;
		$aParams['parent'] = $parent;
		//var_dump($parent);
		//子级
		$condition = array(
			'parent_tag_id'=>$iTagID,
		);
		$leftjoin = array(
			'mk_tag AS b'=>'a.tag_id = b.tag_id'
		);
		$order = "ORDER BY b.tag_id ASC";
		$sub = $mdlTagorg->_db->select("mk_tag_organize AS a", $condition, 'b.tag_id,b.tag_name', '', $order, $leftjoin)->items;
		$aParams['sublist'] = $sub;
		//var_dump($sub);

		//标签信息
		$serviceTag = new zbj_service_tag($iTagID);
		$aTag = $serviceTag->get();
		$aParams['tag'] = $aTag;
		$aParams['tag']['sub_loadtype'] = $serviceTag->get('tag_info.sub_loadtype');
		$aParams['tag']['paid_listing_fee'] = $serviceTag->get('tag_info.paid_listing_fee');
		$aParams['tag']['pub_taskdoc'] = unserialize($serviceTag->get('tag_info.pub_taskdoc'));
		$aParams['tag']['pub_servicedoc'] = unserialize($serviceTag->get('tag_info.pub_servicedoc'));

		if ($_POST) {
			//接收post传来的信息
			$sTag_Name = $_POST['tagname'];
			$imgurl = $_POST['imgsrc'];
			$sInfo = $_POST['info'];
			$aChannel = $_POST['channel'];
			$iType = $_POST['tag_type'];
			$iHide = $_POST['tag_hide'];
			$iLock = $_POST['tag_lock'];
			$iChannel = $_POST['tag_channel'];
			$iRecommend = $_POST['tag_recommend'];
			$iLoadType = $_POST['loadtype'];
			$sIntro = $_POST['intro'];
			$sUrl = $_POST['url'];
			$iSpType = $_POST['sptype'];
			$sPrice = zbj_lib_BaseUtils::getStr($_POST['paid_listing_fee'], 'float');
			$sTaskTitle = zbj_lib_BaseUtils::getStr($_POST['tasktitle']);
			$sTaskIntro = zbj_lib_BaseUtils::getStr($_POST['taskintro']);
			$serTitle = zbj_lib_BaseUtils::getStr($_POST['sertitle']);
			$serIntro = zbj_lib_BaseUtils::getStr($_POST['serintro']);
			$guiclose = zbj_lib_BaseUtils::getStr($_POST['guiclose']);
			$guiTitle = zbj_lib_BaseUtils::getStr($_POST['guititle']);
			$guiIntro = zbj_lib_BaseUtils::getStr($_POST['guiinfo']);
			$guide = array(
				'close'=>$guiclose,
				'title'=>$guiTitle,
				'info'=>$guiIntro
			);
			if ($iChannel == 1) {
				$mdlOrg = zbj_model_api::get('zbj_model_mk_tagorganize');
				$condition = array(
					'tag_id' => $iTagID
				);
				$mdlOrg->delete($condition);
			}

			if (!empty($sUrl)) {
				$preg="/^(https?:\/\/)?(((www\.)?[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)?\.([a-zA-Z]+))|(([0-1]?[0-9]?[0-9]|2[0-5][0-5])\.([0-1]?[0-9]?[0-9]|2[0-5][0-5])\.([0-1]?[0-9]?[0-9]|2[0-5][0-5])\.([0-1]?[0-9]?[0-9]|2[0-5][0-5]))(\:\d{0,4})?)(\/[\w- .\/?%&=]*)?$/i"; //用于匹配的正则表达式
				if (!preg_match($preg,$sUrl,$out)) {
					return $this->printmsg('url地址格式不对',0);
				}
			}

			$data = array(
				'type' => $iType,
				'is_hide' => $iHide,
				'is_lock' => $iLock,
				'is_channel' => $iChannel,
				'is_recommend' => $iRecommend,
				'sptype'=>$iSpType,
				'tag_info.sub_loadtype' => $iLoadType,
				'intro' => $sIntro,
				'url'=>$sUrl,
				'tag_info.paid_listing_fee' => $sPrice,
				'tag_info.pub_taskdoc'=>serialize(array('title'=>$sTaskTitle,'intro'=>$sTaskIntro, 'guide'=>$guide)),
				'tag_info.pub_servicedoc'=>serialize(array('title'=>$serTitle,'intro'=>$serIntro))
			);
			$flag = $serviceTag->edit($data);
			if ($flag === true) {
				//清缓存
				$cache = new zbj_lib_cache('memcache');
				$childCacheName = 'www.list.tagorganize.' . $iTagID . '.tag.childtag';
				$cache->del($childCacheName);
				//写入后台日志
				zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
					'type' => 'tag',
					'pk_id' => $iTagID,
					'content' => $this->_nickname.'编辑了 ['.$iTagID.']标签',
					'user_id' => $this->_userid,
					'name' => $this->_nickname,
					'create_time'=>$this->_time
				));
				return $this->alert(array('state' => 1, 'msg' => '保存成功', 'second' => 3, 'backurl' => "/misc-tagedit-tid-{$iTagID}.html"));
			} else {
				return $this->alert(array('state' => 0, 'msg' => $serviceTag->getError()));
			}
		}

		return $this->render('misc/tag/edit.html', $aParams);
	}

	/**
	 * 搜素引擎优化
	 */
	public function pagetagEditSeo($inPath) {
		$aParams = array();
		$path = $this->getUrlParams($inPath);
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		$iTagID = (int) $path['tid'];
		if (!$iTagID) {
			return $this->alert(array('state' => -1, 'msg' => '缺少必要的参数'));
		}
		$svTag = new zbj_service_tag($iTagID);
		$aTag = $svTag->get();
		$aInfo = $svTag->get('tag_info.*');
		$aTag = array_merge($aTag, $aInfo);
		if ($_POST) {
			$svTag = new zbj_service_tag($iTagID);
			$data = array(
				'tag_info.title' => $_POST['title'], 'tag_info.keywords' => $_POST['keywords'], 'tag_info.description' => $_POST['description'],
				'tag_info.tk_title' => $_POST['tk_title'], 'tag_info.tk_keywords' => $_POST['tk_keywords'], 'tag_info.tk_description' => $_POST['tk_description'],
				'tag_info.sv_title' => $_POST['sv_title'], 'tag_info.sv_keywords' => $_POST['sv_keywords'], 'tag_info.sv_description' => $_POST['sv_description'],
				'tag_info.tl_title' => $_POST['tl_title'], 'tag_info.tl_keywords' => $_POST['tl_keywords'], 'tag_info.tl_description' => $_POST['tl_description'],
			);
			$fl = $svTag->edit($data);
			if ($fl === false) {
				return $this->alert(array('state' => -1, 'msg' => '保存失败'));
			} else {
				return $this->alert(array('state' => 1, 'msg' => '保存成功', 'second' => 3, 'backurl' => "/misc-tageditseo-tid-{$iTagID}.html"));
			}
		}

		$aParams['tid'] = $iTagID;
		$aParams['tag'] = $aTag;

		return $this->render('misc/tag/seo.html', $aParams);
	}

	/**
	 * 统计信息
	 */
	public function pagetagStatistics($inPath) {
		$params = array();
		$path = $this->getUrlParams($inPath);
		$tid = (int) $path['tid'];

		$svtag = new zbj_service_tag($tid);
		$atag = $svtag->get();

		$params['tag'] = $atag;
		$params['tid'] = $tid;

		return $this->render('misc/tag/statistics.html', $params);
	}

	/**
	 * 锁定
	 *
	 */
	public function pagetagLock($inPath) {
		$path = $this->getUrlParams($inPath);
		$iTagID = (int) $path['tid'];
		if (!$iTagID) {
			return $this->printmsg('缺少参数');
		}
		$svTag = new zbj_service_tag($iTagID);
		//
		$aTag = $svTag->get();
		$iType = $aTag['is_lock'];
		switch ($iType) {
			case 0:
				$data = array(
					'is_lock' => 1
				);
				$flag = $svTag->edit($data);
				$msg = "锁定成功";
				$btx = '解锁';
				break;
			case 1:
				$data = array(
					'is_lock' => 0
				);
				$flag = $svTag->edit($data);
				$msg = "解锁成功";
				$btx = '<font color="red">锁定</font>';
				break;
			default:
				$flag = false;
				break;
		}
		if ($flag === true) {
			//写入后台日志
			$stype = $iType == 0? '锁定':'解锁';
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
					'type' => 'tag',
					'pk_id' => $iTagID,
					'content' => $this->_nickname.$stype.'了 ['.$aTag['tag_name'].']标签',
					'user_id' => $this->_userid,
					'name' => $this->_nickname,
					'create_time'=>$this->_time
			));
			return $this->printmsg($msg, 2, null, null, $btx);
		} else {
			return $this->printmsg('操作失败');
		}
	}

	/**
	 * 删除父级标签
	 * @param $inPath
	 */
	public function pagetagDelParent($inPath) {
		$path = $this->getUrlParams($inPath);
		$pid = zbj_lib_BaseUtils::getStr($path['pid'], 'int');
		$tid = zbj_lib_BaseUtils::getStr($path['tid'], 'int');
		if (!$tid || !$pid) {
			return $this->printmsg('缺少参数', 0);
		}
		$mdlOrg = zbj_model_api::get('zbj_model_mk_tagorganize');
		$condition = array(
			'parent_tag_id'=>$pid,
			'tag_id'=>$tid
		);
		if ($mdlOrg->delete($condition) === false) {
			return $this->printmsg('删除失败', 0);
		} else {
			//写入后台日志
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
				'type' => 'tag',
				'pk_id' => $tid,
				'content' => $this->_nickname.'删除 ['.$tid.']的父级标签['.$pid.']',
				'user_id' => $this->_userid,
				'name' => $this->_nickname,
				'create_time'=>$this->_time
			));
			//清空缓存
			$this->cache->del('zbj_service_tag.all_sub_ids.pid'.md5($pid));
			$svTag = new zbj_service_tag($tid);
			$aPid = $svTag->getAllParentID();
			if (!empty($aPid)) {
				foreach ($aPid as $val) {
					$pid = intval($val);
					$this->cache->del('zbj_service_tag.all_sub_ids.pid'.md5($pid));
				}
			}
			$this->cache->del('zbj_service_tag.all_parent_ids.pid'.$tid);

			return $this->printmsg('删除成功', 1,'', $_SERVER['HTTP_REFERER']);
		}
	}

	/**
	 * 删除子级标签
	 * @param $inPath
	 */
	public function pagetagDelSub($inPath) {
		$path = $this->getUrlParams($inPath);
		$subid = zbj_lib_BaseUtils::getStr($path['subid'], 'int');
		$tid = zbj_lib_BaseUtils::getStr($path['tid'], 'int');
		if (!$tid || !$subid) {
			return $this->printmsg('缺少参数', 0);
		}
		$mdlOrg = zbj_model_api::get('zbj_model_mk_tagorganize');
		$condition = array(
			'parent_tag_id'=>$tid,
			'tag_id'=>$subid
		);
		if ($mdlOrg->delete($condition) === false) {
			return $this->printmsg('删除失败'.$pid.$tid, 0);
		} else {
			//写入后台日志
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
				'type' => 'tag',
				'pk_id' => $tid,
				'content' => $this->_nickname.'删除 ['.$tid.']的子级标签['.$subid.']',
				'user_id' => $this->_userid,
				'name' => $this->_nickname,
				'create_time'=>$this->_time
			));
			//清空缓存
			$this->cache->del('zbj_service_tag.all_sub_ids.pid'.md5($tid));
			$svTag = new zbj_service_tag($tid);
			$aPid = $svTag->getAllParentID();
			if (!empty($aPid)) {
				foreach ($aPid as $val) {
					$pid = intval($val);
					$this->cache->del('zbj_service_tag.all_sub_ids.pid'.md5($pid));
				}
			}
			$this->cache->del('zbj_service_tag.all_parent_ids.pid'.$subid);
			return $this->printmsg('删除成功', 1,'', $_SERVER['HTTP_REFERER']);
		}
	}

	/**
	 * 删除标签
	 */
	public function pagetagDelTag($inPath) {
		$path = $this->getUrlParams($inPath);
		$iTagID = (int) $path['tid'];

		if (!$iTagID) {
			return $this->alert(array('state' => 0, 'msg' => '缺少必要的参数'));
		}
		$svTag = new zbj_service_tag($iTagID);
		$atag = $svTag->get();
		$flag = $svTag->delete(array('is_not_log' => 1));
		if ($flag === false) {
			return $this->alert(array('state' => -1, 'msg' => "删除失败:" . $svTag->getError()));
		} else {
			//写入日志
			$option = $atag;
			$svTag->addlog(9, $this->_userid, $this->_nickname, $option);
			//写入后台日志
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
				'type' => 'tag',
				'pk_id' => $iTagID,
				'content' => $this->_nickname.'删除了 ['.$atag['tag_name'].']标签',
				'user_id' => $this->_userid,
				'name' => $this->_nickname,
				'create_time'=>$this->_time
			));
			return $this->alert(array('state' => 1, 'msg' => '删除成功'));
		}
	}

	public function pagetagLog($inPath) {
		$path = zbj_lib_BaseUtils::saddslashes($this->getUrlParams($inPath));
		$post = zbj_lib_BaseUtils::saddslashes($_GET);
		$aParams = array();
		$afilter = array();
		$limit = 20;
		$page = isset($path['page']) ? (int) $path['page'] : 1;
		//构造条件
		$start = $post['stime'];
		$send = $post['etime'];
		$suser = $post['nickname'];
		$type = (int) $post['type'];
		$condition = array();
		if (!empty($start)) {
			$condition[] = "dateymd >= '" . $start . "'";
			$afilter['stime'] = $start;
		}
		if (!empty($send)) {
			$condition[] = "dateymd <='" . $send . "'";
			$afilter['etime'] = $send;
		}
		if (!empty($suser)) {
			$condition['nickname'] = $suser;
			$afilter['nickname'] = $suser;
		}
		if (in_array($type, array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))) {
			$condition['type'] = $type;
			$afilter['type'] = $type;
		}
		$mdlTagLog = zbj_model_api::get('zbj_model_mk_taglog');
		$mdlTagLog->setLimit($limit);
		$mdlTagLog->setPage($page);
		$mdlTagLog->setCount(true);
		$oTagLog = $mdlTagLog->select($condition, '*');
		$aTagLog = $oTagLog->items;

		foreach ($aTagLog as $key => $value) {
			$aTagLog[$key]['option'] = unserialize($value['option']);
		}

		//分页
		$pagebar = $this->PageBar($oTagLog->totalSize, $limit, $page, $inPath, 'style3', '?' . $_SERVER['QUERY_STRING']);
		$aParams['filter'] = $afilter;
		$aParams['taglog'] = $aTagLog;
		$aParams['pagebar'] = $pagebar;

		return $this->render('misc/tag/taglog.html', $aParams);
	}

	/**
	 * 批量操作 删除:2 || 锁定:1
	 */
	public function pagetagBatch($inPath) {
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		$sID = $_POST['stid'];
		$type = (int) $_POST['btype'];

		$aID = explode(',', $sID);
		if (empty($aID)) {
			return $this->alert(array('state' => 0, 'msg' => '请选择至少一个标签'));
		}
		if (!$type) {
			return $this->alert(array('state' => 0, 'msg' => '请选择操作方式'));
		}
		switch ($type) {
			case 1:
				$success = 0;
				$faile = 0;
				foreach ($aID as $val) {
					$svtag = new zbj_service_tag((int) $val);
					$data = array(
						'is_lock' => 1
					);
					$fl = $svtag->edit($data);
					if ($fl == false) {
						$faile++;
					} else {
						$success++;
					}
				}
				return $this->alert(array('state' => 1, 'msg' => '执行完成！成功：' . $success . '个，失败' . $faile . '个'), 1);
				break;
			case 2:
				$success = 0;
				$faile = 0;
				//define('DEBUG',1);
				foreach ($aID as $val) {
					$svtag = new zbj_service_tag((int)$val);
					$sub = $svtag->getAllSubID();
					if (!empty($sub)) {
						$faile = $faile + 1;
						continue;
					}
					$data = array(
						'is_enabled'=>0
					);
					$fl = $svtag->edit($data);
					if ($fl == false) {
						$faile = $faile + 1;
					} else {
						$success = $success + 1;
					}
				}
				return $this->alert(array('state' => 1, 'msg' => '执行完成！成功：' . $success . '个，失败' . $faile . '个'), 1);
				break;
		}
	}

	/**
	 * 子标签排序
	 * @param $inPath
	 */
	public function pageTagSort($inPath) {
		$mdlTag = zbj_model_api::get('zbj_model_mk_tag');
		//$sTag = new zbj_service_tag();
		$mdlTagorg = zbj_model_api::get('zbj_model_mk_tagorganize');
		$path = $this->getUrlParams($inPath);
		$iTagID = intval($path['tid']);
		if (zbj_lib_BaseUtils::isAjax()) {
			if (count($_POST) <= 0) {
				if ($iTagID) {
					$condition = array(
						'parent_tag_id'=>$iTagID,
						'b.is_hide'=>0,
						'b.is_merge'=>0
					);
					$leftjoin = array(
						'mk_tag AS b'=>'a.tag_id = b.tag_id'
					);
					$order = "ORDER BY b.sort DESC,a.tag_id ASC";
					$sub = $mdlTagorg->_db->select("mk_tag_organize AS a", $condition, 'a.tag_id,b.tag_name,b.sort', '', $order, $leftjoin)->items;

				} else {
					$condition = array(
						'is_channel'=>1,
						'is_hide'=>0,
						'type'=>0,
						'is_merge'=>0
					);
					$sub = $mdlTag->select($condition, 'tag_id,tag_name,sort')->items;
				}
				if (empty($sub)) return '没有查到系统标签';
				$params['list'] =  $sub;
				return $this->render('misc/tag/sublist.dialog.html', $params);
			}
			//保存排序
			$ids = $_POST['ids'];
			$sort = $_POST['sort'];
			if (!empty($ids)) {
				foreach ($ids as $key=>$value) {
					$sTag = new zbj_service_tag(intval($value));
					$data = array(
						'sort'=>intval($sort[$key]),
					);
					$sTag->edit($data);
				}
			}
			return $this->printmsg('排序成功');
		}
	}

	/**
	 * 子标签列表
	 * @param $inPath
	 */
	public function pagetagsublist($inPath) {
		$mdlTag = zbj_model_api::get('zbj_model_mk_tag');
		//$sTag = new zbj_service_tag();
		$mdlTagorg = zbj_model_api::get('zbj_model_mk_tagorganize');
		$path = $this->getUrlParams($inPath);
		$iTagID = intval($path['tid']);
		if (zbj_lib_BaseUtils::isAjax()) {
			if (count($_POST) <= 0) {
				if ($iTagID) {
					$condition = array(
						'parent_tag_id'=>$iTagID,
					);
					$leftjoin = array(
						'mk_tag AS b'=>'a.tag_id = b.tag_id'
					);
					$order = "ORDER BY a.tag_id ASC";
					$sub = $mdlTagorg->_db->select("mk_tag_organize AS a", $condition, '*', '', $order, $leftjoin)->items;

				} else {
					$condition = array(
						'is_channel'=>1,
					);
					$sub = $mdlTag->select($condition, 'tag_id,tag_name,sort')->items;
				}
				if (empty($sub)) return '没有查到标签';
				$params['list'] =  $sub;
				return $this->render('misc/tag/sublistmanage.dialog.html', $params);
			}
		}
	}

	public function pageTagEnabled($inPath) {
		$path = $this->getUrlParams($inPath);
		$iTagID = intval($path['tid']);
		if (!$iTagID) {
			return $this->printmsg('缺少参数');
		}
		$sTag = new zbj_service_tag($iTagID);
		$mdlTagorg = zbj_model_api::get('zbj_model_mk_tagorganize');
		$aTag = $sTag->get();
		if ($aTag['is_enabled'] == 1) {
			//禁用
			$condition = array(
				'parent_tag_id'=>$iTagID
			);
			$sub = $mdlTagorg->select($condition, '*')->items;
			if (!empty($sub)) {
				return $this->printmsg('该标签存在子级,请把子级移到其他地方！');
			}
			$data = array(
				'is_enabled'=>0
			);
			$btx = '<font color="green">启用</font>';
		} else {
			//启用
			$data = array(
				'is_enabled'=>1
			);
			$btx = '<font color="red">禁用</font>';
		}
		$fl = $sTag->edit($data);
		if ($fl !== false) {
			return $this->printmsg('操作成功', 2, null,null,$btx);
		} else {
			return $this->printmsg('操作失败');
		}
	}

	public function pagetagAdd($inPath) {
		$aParams = array();
		return $this->render('tag/edit.html', $aParams);
	}

	/*
	 * 批量添加父级
	 */
	public function pageTagaddParents($inPath) {
		if (zbj_lib_BaseUtils::isAjax()) {
			if (count($_POST) <= 0) {
				return $this->render('misc/tag/addparents.dialog.html', array());
			}
			$mdlTag = zbj_model_api::get('zbj_model_mk_tag');
			$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
			$iTagIDs = $_POST['TagID'];
			$sPname = $_POST['pname'];
			if (empty($iTagIDs)) {
				return $this->printmsg('请选择标签', 0);
			}

			if (empty($sPname)) {
				return $this->printmsg('请输入父级标签', 0);
			}
			$contidion = array(
				'tag_name'=>$sPname,
				'is_hide'=>0,
				'is_merge'=>0,
				'is_enabled'=>1,
			);
			$aPTag = $mdlTag->selectOne($contidion, 'tag_id,tag_name');
			if (empty($aPTag)) {
				return $this->printmsg('父级标签不存在', 0);
			}
			if ($iTagIDs) {
				$f = 0;
				$s = 0;
				foreach ($iTagIDs as $value) {
				    $svTag = new zbj_service_tag((int)$value);
				    $fl = $svTag->addParent($sPname);
				    if ($fl === false) {
				    	$f ++;
				    } else {
				    	$s++;
				    }
				}
				return $this->printmsg('操作成功：成功'.$s.'个，失败'.$f.'个', 1, '', $_SERVER['HTTP_REFERER']);
			} else {
				return $this->printmsg('程序错误', 0);
			}

		}
	}

	public function pagetagSaveAdd($inPath) {
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		//接收post传来的信息
		$sTag_Name = $_POST['tagname'];
		$imgurl = $_POST['imgsrc'];
		$sInfo = $_POST['info'];
		$aChannel = $_POST['channel'];
		$iType = $_POST['tag_type'];
		$iHide = $_POST['tag_hide'];
		$iLock = $_POST['tag_lock'];

		//判断数据是否合法
		if (empty($sTag_Name)) {
			return $this->alert(array('state' => -1, 'msg' => '请填写标签名称'));
		}
		if (empty($imgurl)) {
			return $this->alert(array('state' => -1, 'msg' => '请上传缩略图'));
		}

		$data = array(
			'tag_name' => $sTag_Name,
			'intro' => $sInfo,
			'type' => $iType,
			'is_hide' => $iHide,
			'is_lock' => $iLock,
			'tag_info.pic' => $imgurl,
		);
		$svTag = new zbj_service_tag();
		//创建一个标签
		$tag_id = $svTag->create($data);
		if ($tag_id) {
			$mdlTag2Channel = zbj_model_api::get('zbj_model_mk_tag2channel');
			if (!empty($aChannel)) {
				foreach ($aChannel as $key => $value) {
					$data = array(
						'tag_id' => $tag_id,
						'channel_id' => (int) $value
					);
					$mdlTag2Channel->set($data);
					$mdlTag2Channel->save();
				}
			}
			return $this->alert(array('state' => 1, 'msg' => '保存成功'));
		} else {
			//添加失败
			return $this->alert(array('state' => 0, 'msg' => $svTag->getError()));
		}
	}

	/**
	 * 上传缩略图
	 */
	public function pagetagUpimg($inPath) {
		$files = $_FILES['filedata'];
		if ($files['error'] > 0) {
			echo "<script>parent.window.uploadCallback({state:0,msg:'浏览器上传失败'});</script>";
			exit;
		}
		$type_img = array('jpg', 'gif', 'jpeg', 'png', 'bmp');
		$ext = strtolower(end(explode('.', $files['name'])));
		if (!in_array($ext, $type_img)) {
			echo "<script>parent.window.uploadCallback({state:0,msg:'格式不正确'});</script>";
			exit;
		}
		$filename = md5($this->_time);
		$productname = 'tag';
		$path = date('/Y-m/d/', time());
		$key = 'upimg';
		$_size = array();
		$url = $this->getUploadFilePath($files, $filename, $productname, $path, $key, $_size);
		$pathdir = parse_url($url, PHP_URL_PATH);
		if ($url) {
			echo "<script>parent.window.uploadCallback({state:1,url:'" . $url . "',pathdir:'" . $pathdir . "'});</script>";
			exit;
		} else {
			echo "<script>parent.window.uploadCallback({state:0,msg:'文件上传失败'});</script>";
			exit;
		}
	}

	/**
	 * 限制用户编辑标签
	 */
	public function pagetagInBlack($inPath) {
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		$uid = (int) $_POST['uid'];

		$user = zbj_model_api::get('zbj_model_mb_account');
		$aUser = $user->get();

		if (empty($aUser)) {
			return $this->alert(array('state' => 0, 'msg' => '该用户不存在'), 1);
		}
		$oBlack = zbj_model_api::get('zbj_model_mk_tagblacklist');
		$condition = array(
			'user_id' => $uid
		);
		$aBlack = $oBlack->selectOne($condition, 'b_id');
		if ($aBlack) {
			return $this->alert(array('state' => 0, 'msg' => '黑名单已存在该用户'), 1);
		}
		$oBlack->set('user_id', $uid);
		$oBlack->set('nickname', $aUser['nickname']);
		$oBlack->set('dateline', $this->_time);
		$oBlack->set('dateymd', date('Y-m-d', $this->_time));
		$oBlack->set('cp_userid', $this->_userid);
		$oBlack->set('cp_username', $this->_nickname);
		if ($oBlack->save() === false) {
			return $this->alert(array('state' => 0, 'msg' => '加入黑名单失败'), 1);
		} else {
			return $this->alert(array('state' => 1, 'msg' => '加入黑名单成功'), 1);
		}
	}

	/*
	 * 添加父标签，后台需求
	 */

	public function pageAddParent($inPath) {
		$url = $this->getUrlParams($inPath);
		if (zbj_lib_BaseUtils::isAjax()) {
			if (!count($_POST)) {
				$this->tplvar['tid'] = zbj_lib_BaseUtils::getStr($url['tid'], 'int');
				return $this->render('misc/tag/addparent.dialog.html', $this->tplvar);
			}
			$iTagID = zbj_lib_BaseUtils::getStr($_POST['tid'], 'int');
			$sName = zbj_lib_BaseUtils::getStr($_POST['tagname'], 'string');
			if (!$iTagID || empty($sName)) {
				return $this->printmsg('缺少参数', 0, 'tagname');
			}
			$sTag = new zbj_service_tag($iTagID);
			$fl = $sTag->addParent($sName);
			if ($fl === false) {
				return $this->printmsg('添加失败:' . $sTag->getError(), 0, 'tagname');
			}
			//写入后台日志
			zbj_lib_BaseUtils::apicall('misc', 'addlog', array(
				'type' => 'tag',
				'pk_id' => $tid,
				'content' => $this->_nickname.'给['.$iTagID.']添加父级标签['.$sName.']',
				'user_id' => $this->_userid,
				'name' => $this->_nickname,
				'create_time'=>$this->_time
			));
			return $this->printmsg('添加成功',1, '', $_SERVER['HTTP_REFERER']);
		}
	}

	/*
	 * 搜索标签
	 */

	public function pageSearchTag($inPath) {
		$path = $this->getUrlParams($inPath);
		$sName = zbj_lib_BaseUtils::getStr($path['key'], 'string');
		if (!empty($sName)) {
			$mdlTag = zbj_model_api::get('zbj_model_mk_tag');
			$condition = array(
				'tag_name like "%' . $sName . '%"',
			);
			$aTag = $mdlTag->select($condition, 'tag_id,tag_name')->items;
			$this->tplvar['tag'] = $aTag;
			$html = $this->render('misc/tag/search.html', $this->tplvar);
			return $this->json(array('state' => 1, 'html' => $html));
		}
	}

	/**
	 * 撤销
	 */
	public function pagetagRevert($inPath) {
		$_POST = zbj_lib_BaseUtils::saddslashes($_POST);
		$iLogID = (int) $_POST['id'];
		if ($iLogID == null) {
			return $this->alert(array('state' => 0, 'msg' => '参数错误'), 1);
		}
		$mdl = zbj_model_api::get('zbj_model_mk_taglog', $iLogID);
		$aLog = $mdl->get();
		if (empty($aLog)) {
			return $this->alert(array('state' => 0, 'msg' => '日志不存在'), 1);
		}
		$svTag = new zbj_service_tag($aLog['tag_id']);
		$aTag = $svTag->get();
		@$option = unserialize($aLog['option']);
		//根据日志实现撤销操作
		$fl = false;
		switch ($aLog['type']) {
			case 0:
				//撤销新增标签
				break;
			case 1:
				//实现撤销添加父标签的操作(删除父标签);
				$mdlOrganize = zbj_model_api::get('zbj_model_mk_tagorganize');
				$condition = array(
					'tag_id' => $aLog['tag_id'],
					'parent_tag_id' => $option['relation']['tag_id']
				);
				$fl = $mdlOrganize->delete($condition);
				break;
			case 2:
				$fl = $svTag->addParent($option['relation']['tag_name']);
				break;
			case 3:
				$mdlOrganize = zbj_model_api::get('zbj_model_mk_tagorganize');
				$condition = array(
					'parent_tag_id' => $aLog['tag_id'],
					'tag_id' => $option['relation']['tag_id']
				);
				$fl = $mdlOrganize->delete($condition);
				break;
			case 4:
				$fl = $svTag->addSub($option['relation']['tag_name']);
				break;
			case 5:
				//修改描述
				break;
			case 6:
				//修改图标
				break;
			case 7:
				//新增别名(撤销)
				$mdlAlias = zbj_model_api::get('zbj_model_mk_tagalias');
				$condition = array(
					'tag_name' => $option['relation']['tag_name'],
					'tag_id' => $aLog['tag_id']
				);
				$fl = $mdlAlias->delete($condition);
				break;
			case 8:
				//删除别名(撤销)
				$fl = $svTag->addAlias($option['relation']['tag_name']);
				break;
			case 9:
			//删除标签(撤销)
			case 10:
				if ($aTag['is_lock'] == 1) {
					return $this->alert(array('state' => 0, 'msg' => '该标签已被锁定，无法执行'), 1);
				}
				//实现修改名称的撤销操作
				$data = array(
					'tag_name' => $option['old'],
				);
				$fl = $svTag->edit($data);
				break;
		}
		if ($fl === false) {
			$message = '撤销失败:' . $svTag->getError();
			return $this->alert(array('state' => 0, 'msg' => $message), 1);
		} else {
			//修改日志状态
			$mdl->update(array('log_id' => $iLogID), array('is_undo' => 1));
			//写入日志
			$option['log_id'] = $aLog['log_id'];
			$option['type'] = $aLog['type'];
			$svTag->addlog(11, $this->_userid, $this->_nickname, $option);
			return $this->alert(array('state' => 1, 'msg' => '撤销成功'), 1);
		}
	}

	public function pagetaglist($inPath) {
		$level = zbj_lib_BaseUtils::getStr($_REQUEST['level'], 'int');
		$data = zbj_lib_BaseUtils::apicall("misc", "taglist", array('level' => $level));
		if ($data['code'] > 0) {
			return $this->json($data['data']);
		} else {
			return $this->json(array());
		}
	}
	/**
	 * 交易行为审核列表
	 */
	function pageCheckList2($inPath) {
		$url = $this->getUrlParams($inPath);
		$limit = 10;
		$page = $url ['page'] ? (int) $url ['page'] : 1;
		$type = (int) $_GET ['t']; //类型
		$status = (int) $_GET ['s']; //状态
		$level = (int) $_GET ['l']; //等级
		$sdate = trim($_GET ['sd']); //开始日期
		$edate = trim($_GET ['ed']); //结束日期
		$brandname = trim($_GET ['n']); //昵称
		$accept_user_id = $_GET ['aid']; //受理人
		$ip = trim($_GET ['ip']); //ip
		$wid = trim($_GET ['wid']); //投标号
		//是否是主管
		//		$s_manager=new zbj_service_manager($this->_userid);
		//		$params['isleader'] = $s_manager->get('isleader');
		//		$params['isleader'] = 1;

		$condition = '';
		$orderby = 'order by worksnum desc';
		if ($type) {
			$condition['type'] = $type;
		}
		if ($status == 1 || $status == 2) {//拒绝或通过
			$orderby = 'order by optiontime desc,createtime desc';
			$condition['status'] = $status;
		} elseif ($status == 0) {//待审
			$condition['status'] = $status;
		}
		if (in_array($level, range(1, 4))) {
			$condition[] = "level=$level";
		}
		if ($sdate) {
			$condition[] = "createdate>='$sdate'";
		}
		if ($edate) {
			$condition[] = "createdate<='$edate'";
		}
		if ($brandname) {
			$info = new zbj_model_mb_info();
			$inforow = $info->selectOne(array('brandname' => $brandname), 'user_id');
			if ($inforow) {
				$condition['user_id'] = $inforow['user_id'];
			} else {
				$condition['user_id'] = 0;
			}
		}
		//		if ($accept_name) {
		//			$condition['accept_name'] = $accept_name;
		//		} elseif ($params['isleader'] == 0) {
		//			$condition['accept_name'] = $this->_nickname;
		//		}
		if ($accept_user_id) {
			$condition['accept_user_id'] = (int) $accept_user_id;
		} elseif ($accept_user_id == null) {//默认只能看自己
			$condition['accept_user_id'] = $this->_userid;
		}
		if ($ip) {
			$condition['ip'] = $ip;
		}
		if ($wid) {
			$condition['type'] = 1;
			$condition['pk_id'] = $wid;
		}
		$check = new zbj_model_lg_check();
		$check->setLimit($limit);
		$check->setPage($page);
		$check->setCount(TRUE);
// 				define('DEBUG', 1);
		$data = $check->select($condition, '*,count(1) as worksnum', 'group by user_id', $orderby);
		$params['list'] = $data->items;
		$params ['num'] = $data->totalSize;
		if ($params['list']) {
			$tmp = array();
			$iptmp = array();
			$abilitytmp = array();
			foreach ($params['list'] as $key => $value) {
				//待审核数量
				if (!$tmp[$value['user_id']][$value['type']]) {
					$tmp[$value['user_id']][$value['type']] = $this->getCheckNum($value['user_id'], $value['type']);
				}
				$params['list'][$key]['num'] = $tmp[$value['user_id']][$value['type']];
				$params['list'][$key]['worksnum'] = $value['worksnum'];
				//等级
				if (!$abilitytmp[$value['user_id']]) {
					$sUser = new zbj_service_user($value['user_id']);
					$abilitytmp[$value['user_id']] = $sUser->get('info.ability');
				}
				$params['list'][$key]['ability']=$abilitytmp[$value['user_id']];
				//冗余
				$opt = unserialize($value['option']);
				$params['list'][$key]['opt'] = $opt;
			}
		}
		//		pf($params['list'],1);
		//		$params['num'] = $data->totalSize;
		$params ['pagetotal']=ceil($params ['num']/$limit);
		$params ['pagebar'] = $this->PageBar($params ['num'], $limit, $page, $inPath, 'style4', '?' . $_SERVER['QUERY_STRING']);
		//获取可用的受理人,3-信息审核
		$s_allot = new zbj_service_allot(3);
		foreach ($s_allot->getusers() as $v) {
			$s_manager = new zbj_service_manager($v);
			$params['accept_list'][] = array('user_id' => $s_manager->get('user_id'), 'nickname' => $s_manager->get('name'));
		}
//		pf($params['works_reason'],1);
		$params['task_url'] = lib_Constant::TASK_URL . '/';
		return $this->render('misc/check/index2.html', $params);
	}
	/**
	 * 交易行为审核列表
	 */
	function pageCheckList($inPath) {
		$url = $this->getUrlParams($inPath);
		if ($_POST['cid']) {
			$srvCheck = new service_check();
			foreach ($_POST['cid'] as $cid) {
				$status = (int) $_POST["status_$cid"];
				$refuse_type = $_POST["refuse_type_$cid"];
				$refuse_desc = $_POST["refuse_desc_$cid"];
//				pf($cid.':'.$status);
				if ($status == 1) {
					$srvCheck->accept($cid, $this->_userid, $this->_nickname);
				} elseif ($status == 2) {
					if ($refuse_type) {
						$srvCheck->refuse($cid, $this->_userid, $this->_nickname, $refuse_type, $refuse_desc);
					}
				}
			}
		}
		$limit = 10;
		$page = $url ['page'] ? (int) $url ['page'] : 1;
		$type = (int) $_GET ['t']; //类型
		$status = (int) $_GET ['s']; //状态
		$level = (int) $_GET ['l']; //等级
		$sdate = trim($_GET ['sd']); //开始日期
		$edate = trim($_GET ['ed']); //结束日期
		$brandname = trim($_GET ['n']); //昵称
		$accept_user_id = $_GET ['aid']; //受理人
		$cu_id = $_GET ['cuid']; //受理人
		$ip = trim($_GET ['ip']); //ip
		$wid = trim($_GET ['wid']); //投标号
		//是否是主管
//		$s_manager=new zbj_service_manager($this->_userid);
//		$params['isleader'] = $s_manager->get('isleader');
//		$params['isleader'] = 1;

		$condition = '';
		$orderby = 'order by createtime asc';
		if ($type) {
			$condition['type'] = $type;
		}

		if ($status == 1 || $status == 2) {//拒绝或通过
			$orderby = 'order by optiontime desc,createtime desc';
			$condition['status'] = $status;
		} elseif ($status == 0) {//待审
			$condition['status'] = $status;
		}
		if (in_array($level, range(1, 4))) {
			$condition[] = "level=$level";
		}

		if ($sdate) {
			$condition[] = "createdate>='$sdate'";
		}
		if ($edate) {
			$condition[] = "createdate<='$edate'";
		}
		if ($brandname) {
			$info = new zbj_model_mb_info();
			$inforow = $info->selectOne(array('brandname' => $brandname), 'user_id');
			if ($inforow) {
				$condition['user_id'] = $inforow['user_id'];
			} else {
				$condition['user_id'] = 0;
			}
		}
//		if ($accept_name) {
//			$condition['accept_name'] = $accept_name;
//		} elseif ($params['isleader'] == 0) {
//			$condition['accept_name'] = $this->_nickname;
//		}
		if ($accept_user_id) {
			$condition['accept_user_id'] = (int) $accept_user_id;
		} elseif ($accept_user_id == null) {//默认只能看自己
			$condition['accept_user_id'] = $this->_userid;
		}
		if ($cu_id) {
			$condition['cp_user_id'] = (int) $cu_id;
		} elseif ($cu_id == null) {//默认只能看自己
			$condition['cp_user_id'] = $this->_userid;
		}
		if ($ip) {
			$condition['ip'] = $ip;
		}
		if ($wid) {
			$condition['type'] = 1;
			$condition['pk_id'] = $wid;
		}
		$check = new zbj_model_lg_check();
		$check->setLimit($limit);
		$check->setPage($page);
		$check->setCount(TRUE);
//		define('DEBUG', 1);
		$data = $check->select($condition, '*', null, $orderby);
		$params['list'] = $data->items;
		$params ['num'] = $data->totalSize;
		if ($params['list']) {
			$tmp = array();
			$iptmp = array();
			$abilitytmp = array();
			foreach ($params['list'] as $key => $value) {
				//待审核数量
				if (!$tmp[$value['user_id']][$value['type']]) {
					$tmp[$value['user_id']][$value['type']] = $this->getCheckNum($value['user_id'], $value['type']);
				}
				$params['list'][$key]['num'] = $tmp[$value['user_id']][$value['type']];
				//等级
				if (!$abilitytmp[$value['user_id']]) {
					$sUser = new zbj_service_user($value['user_id']);
					$abilitytmp[$value['user_id']] = $sUser->get('info.ability');
				}
				$params['list'][$key]['ability']=$abilitytmp[$value['user_id']];
				//ip相同的数量
				$iptag = md5($value['ip'] . $value['type']);
				if (!$iptmp[$iptag]) {
					$iptmp[$iptag] = $this->getIPCheckNum($value['ip'], $value['type']);
				}
				$params['list'][$key]['ipnum'] = $iptmp[$iptag];
				//冗余
				$opt = unserialize($value['option']);
				$params['list'][$key]['opt'] = $opt;
			}
		}
//		pf($params['list'],1);
//		$params['num'] = $data->totalSize;
		$params ['pagetotal']=ceil($params ['num']/$limit);
		$params ['pagebar'] = $this->PageBar($params ['num'], $limit, $page, $inPath, 'style4', '?' . $_SERVER['QUERY_STRING']);
		//获取可用的受理人,3-信息审核
		$s_allot = new zbj_service_allot(3);
		foreach ($s_allot->getusers() as $v) {
			$s_manager = new zbj_service_manager($v);
			$params['accept_list'][] = array('user_id' => $s_manager->get('user_id'), 'nickname' => $s_manager->get('name'));
		}
		//拒绝原因
		$works_content = zbj_lib_BaseUtils::apicall('misc', 'getoptionitems', array('option_id' => 8));
		if ($works_content) {
			$params['works_reason'] = $works_content ['data'];
		}
		$comment_content = zbj_lib_BaseUtils::apicall('misc', 'getoptionitems', array('option_id' => 7));
		if ($comment_content) {
			$params['comment_reason'] = $comment_content ['data'];
		}
//		pf($params['works_reason'],1);
		$params['task_url'] = lib_Constant::TASK_URL . '/';
		return $this->render('misc/check/index.html', $params);
	}

	/**
	 * 获取某人该类型下审核的数量
	 */
	private function getCheckNum($user_id, $type) {
		$check = new zbj_model_lg_check();
		if (in_array($type, array(1, 2, 3))) {//交易
			$condition[] = "type in(1,2,3)";
			$condition['user_id'] = $user_id;
			$condition['status'] = 0;
			$num = $check->selectOne($condition, 'count(1) num');
		} else {//用户，暂时不做
			$num['num'] = 0;
		}
		return $num['num'];
	}

	/**
	 * 获取IP相同的待审核的数量
	 */
	private function getIPCheckNum($ip, $type) {
		if (in_array($type, array(1, 2, 3))) {//交易
			$check = new zbj_model_lg_check();
			$condition['ip'] = $ip;
			$condition['status'] = 0;
			$condition[] = "type in(1,2,3)";
			$num = $check->selectOne($condition, 'count(1) num');
		} else {//用户，暂时不做
			$num['num'] = 0;
		}
		return $num['num'];
	}

	/**
	 * 批量拒绝
	 */
	function pageCheckRefuse() {
		//拒绝原因
		$works_content = zbj_lib_BaseUtils::apicall('misc', 'getoptionitems', array('option_id' => 8));
		if ($works_content) {
			$params['works_reason'] = $works_content ['data'];
		}
		$comment_content = zbj_lib_BaseUtils::apicall('misc', 'getoptionitems', array('option_id' => 7));
		if ($comment_content) {
			$params['comment_reason'] = $comment_content ['data'];
		}
		$params['type'] = (int) $_GET ['t'];
		return $this->render('misc/check/refuse.dialog.html', $params);
	}
	/**
	 * 全部通过
	 */
	function pagecheckpassall() {
		//拒绝原因
		$name = $_GET['name'];
		$m_info=new zbj_model_mb_info();
		$user=$m_info->selectone(array('brandname'=>$name),'user_id');
		if($user['user_id']){
			$srvCheck = new service_check();
			if($srvCheck->acceptbyuid($user['user_id'], $this->_userid, $this->_nickname)){
				return $this->printmsg("操作成功", 1, null, $_SERVER['HTTP_REFERER']);
			}else{
				return $this->printmsg("操作失败原因".$srvCheck->getError(), 0);
			}
		}else{
			return $this->printmsg("没有找到用户", 0);
		}
	}

	/**
	 * 屏蔽用户
	 */
	function pageShieldUser() {
		$params['name'] = $_GET['name'];
		if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
		if ($_POST) {
			$refuse_desc=  trim($_POST['refuse_desc']);
			if(!$refuse_desc){
				return $this->printmsg("请输入屏蔽原因", 0);
			}
			$srvCheck = new service_check();
//			define('DEBUG', 1);
			if (!$srvCheck->shieldUser($_POST['name'], $this->_userid, $this->_nickname, $refuse_desc)) {
				return $this->printmsg("屏蔽失败", 0);
			}
//			exit();
			return $this->printmsg("屏蔽成功", 1, null, $_SERVER['HTTP_REFERER']);
		}
		return $this->render('misc/check/shielduser.dialog.html', $params);
	}

	/**
	 * 改为拒绝
	 */
	function pageReRefuse() {
		$params['cid'] = $_GET['cid'];
		$type = $_GET['type'];
		if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
		if ($_POST) {
			if(!$_POST['refuse_type']){
				return $this->printmsg("请输入屏蔽原因", 0);
			}
			$srvCheck = new service_check();
//			define('DEBUG', 1);
			if ($srvCheck->reRefuse($_POST['cid'], $this->_userid, $this->_nickname, $_POST['refuse_type'], trim($_POST['refuse_desc']))) {
				return $this->printmsg("更改成功", 1, null, $_SERVER['HTTP_REFERER']);
			}
			return $this->printmsg("更改失败", 0);
		}
		//拒绝原因
		if ($type == 1) {
			$works_content = zbj_lib_BaseUtils::apicall('misc', 'getoptionitems', array('option_id' => 8));
			if ($works_content) {
				$params['refuse_reason'] = $works_content ['data'];
			}
		} elseif (in_array($type, array(2, 3))) {
			$comment_content = zbj_lib_BaseUtils::apicall('misc', 'getoptionitems', array('option_id' => 7));
			if ($comment_content) {
				$params['refuse_reason'] = $comment_content ['data'];
			}
		}
		return $this->render('misc/check/rerefuse.dialog.html', $params);
	}

	/**
	 * 改为通过
	 */
	function pageReAccept() {
		$srvCheck = new service_check();
		if ($srvCheck->reAccept($_GET['cid'], $this->_userid, $this->_nickname)) {
			return $this->printmsg("更改成功", 1, null, $_SERVER['HTTP_REFERER']);
		}
		return $this->printmsg("更改失败", 0);
	}
	/**
	 * ajax取地区
	 * @param unknown_type $inPath
	 */
	public function pageregionajaxget($inPath) {
		$m_region = new zbj_model_mb_region ();
		$iPid = zbj_lib_BaseUtils::getStr ( $_REQUEST ['parent_id'], 'int' );
		$data=array();
		if($iPid){
			$aRegions = $m_region->getRegionByPid ( $iPid );
			foreach ( $aRegions as $aRegion ) {
				$r = array (
						'region_id' => $aRegion ['region_id'],
						'region_name' => $aRegion ['region_name']
				);
				$data [] = $r;
			}
		}
		return $this->json($data);
	}
	/**
	 * 个人工单列表页
	 */
	public function pageOrderList($inPath) {
		if (!$this->_userid) {
			return $this->printmsg('您还未登录，或登录已失效，请重新登录！');
		}
		$param = array();
		$urlparam = $this->getUrlParams($inPath);
		$pflag = (int) $urlparam['pflag'] ? (int) $urlparam['pflag'] : 0;//2超期、1今日到期、0进行中、3已完成
		$cflag = (int) $urlparam['cflag'] ? (int) $urlparam['cflag'] : 0;//2全部、1我发的、0我负责的、3我参与的
		$z = (int) $urlparam['z'] ? (int) $urlparam['z'] : 0;//0全部、1紧急 2非常重要 3重要 4一般
		$param['z'] = $z;
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_order = new model_cp_order();
		$m_order->setLimit($limit);
		$m_order->setCount(true);
		$m_order->setPage($curpage);
		$condition = array();
		if ($z){
			$condition['attr'] = $z;
		}
		$curdate = date("Y-m-d");
		switch ($pflag) {
			case 0:
				;//全部
			break;
			case 1:
				$condition[] = " status = 1";//进行中
				// 				$condition[] = " status = 1 and e_time >".time()." and e_time_ymd > '$curdate'";//其它未完成（status=1&&e_time>当前时间）
			break;
			case 2:
				$condition[] = " status = 1 and e_time_ymd = '$curdate'";//今日到期（statu=1&&e_time_ymd=当前到期）
			break;
			case 3:
				$condition[] = ' status = 1 and e_time <'.time();//超期（status=1&&e_time<当前时间）
			break;
			case 4:
				$condition[] = '( status = 2 or status = 4)';//已完成（status=4 or status=2）
			break;
			default:
				;
			break;
		}
		//2全部、1我发的、0我负责的、3我参与的
		switch ($cflag) {
			case 0:
				$condition['to_uid'] = $this->_userid;//0我负责的
			break;
			case 1:
				$condition['f_uid'] = $this->_userid;//1我发的
			break;
			case 2:
				$condition[] = '( f_uid ='.$this->_userid.' or to_uid= '.$this->_userid.' or FIND_IN_SET('.$this->_userid.', joinuserids))';
			break;
			case 3:
				$condition[] = 'FIND_IN_SET('.$this->_userid.', joinuserids)';//我参与的
			break;

			default:
				$condition['to_uid'] = $this->_userid;//0我负责的
			break;
		}
		$param['pflag'] = $pflag;
		$param['cflag'] = $cflag;
		$orderObj = $m_order->select($condition, '*', 'order by order_id desc');
		$order = $orderObj->items;
		$m_orderComment = new model_cp_ordercomment();
		$m_item = new model_cp_optionitem();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['itemname'] = '';
				$order[$k]['pitemname'] = '';
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
				if ($v['rid']) {
					switch ($v['type']) {
						case 1:
							$m_task = new zbj_model_mk_task();
							$task = $m_task->selectOne(array('task_id'=>$v['rid']), 'title');
							if (count($task)) {
								$order[$k]['tasktitle'] = $task['title'];
							}
							break;

						default:
							;
							break;
					}
				}
				if ($v['item_id']) {
					$item = $m_item->selectOne(array('item_id'=>$v['item_id']), 'name');
					if (count($item)) {
						$order[$k]['itemname'] = $item['name'];
					}
				}
				if ($v['item_pid']) {
					$pitem = $m_item->selectOne(array('item_id'=>$v['item_pid']), 'name');
					if (count($pitem)) {
						$order[$k]['pitemname'] = $pitem['name'];
					}
				}
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($orderObj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param ['totalSize']=$orderObj->totalSize;
		return $this->render('misc/order/orderlist.html', $param);
	}
	/**
	 * 工单事故列表页
	 */
	public function pageOrderManagerList($inPath) {

		if (!$this->_userid) {
			return $this->printmsg('您还未登录，或登录已失效，请重新登录！');
		}
		$param = array();
		//获取部门树，发起人
		$group=zbj_lib_BaseUtils::apicall('cpuser', 'getGroupTree');
		if($group){
			$param ['group'] = $group['data'];
		}else{
			echo "接口错误";
		}
		$m_order = new model_cp_order();
		//获取工单一级分类
		$s_record = new service_record();
		$categoryArray = $s_record->getCategories(0, 1);
		$param['categoryArray'] = $categoryArray;

		$urlparam = $this->getUrlParams($inPath);
// 		$urlparam = $_GET;
		$w = (int) $_GET['w'] ? (int) $_GET['w'] : 0;//0全部、1预警
		$f = (int) $_GET['f'] ? (int) $_GET['f'] : 0;//1全部、0我负责的、2我提交的、3我参与的、4我转交的、5我监督的
		$category1_id = (int) $_GET['category1_id'] ? (int) $_GET['category1_id'] : 0;//需求类型一级分类
		$category2_id = (int) $_GET['category2_id'] ? (int) $_GET['category2_id'] : 0;//需求类型二级分类
		$i = (int) $_GET['i'] ? (int) $_GET['i'] : 0;//0全部、1BOSS、2交易、3用户、4争议
		$s = (int) $_GET['s'] ? (int) $_GET['s'] : 0;//0全部、1超期、2今日到期、3进行中、4已结束（包括已中止和已完成）、5已评价、6已结束待评价
		$voteway = zbj_lib_BaseUtils::getStr($_GET['voteway'], 'int', 0);//评价方式，0全部、1内部评价、2用户评价
		$voteresult = zbj_lib_BaseUtils::getStr($_GET['voteresult'], 'int', 0);//评价结果，0全部、1满意、2一般、3不满意
		$t = (int) $_GET['t'] ? (int) $_GET['t'] : 0;//0全部、1今天、2近三天、3近一周、4近一个月
		$sst = zbj_lib_BaseUtils::getStr($_GET['sst'], 'string');
		$set = zbj_lib_BaseUtils::getStr($_GET['set'], 'string');
		$z = (int) $_GET['z'] ? (int) $_GET['z'] : 0;//0全部、1紧急 2非常重要 3重要 4一般
		$et = $_GET['et'];//截至时间
		$dst = zbj_lib_BaseUtils::getStr($_GET['dst'], 'string');
		$det = zbj_lib_BaseUtils::getStr($_GET['det'], 'string');
		$o = (int) $_GET['o'] ? (int) $_GET['o'] : 0;//排序4、5提交时间，2、3优先级，6、1截至时间，0默认
		$param['w'] = $w;
		$param['f'] = $f;
		$param['category1_id'] = $category1_id;
		$param['category2_id'] = $category2_id;
		$param['i'] = $i;
		$param['s'] = $s;
		$param['t'] = $t;
		$param['z']	= $z;
		$param['et'] = $et;
		$param['o'] = $o;
		$dateBegin = date("Y-m-d", strtotime("-".service_order::BEFORE_DAY." day"));//BEFORE_DAY之前的工单不显示
		$condition = array();
		$condition[] = "s_time_ymd >= '{$dateBegin}'";
		if ($et) {
			$condition['e_time_ymd'] = $et;
		}
		//截止时间
		if ($dst) $condition[] = 'e_time_ymd >= "' . $dst . '"';
		if ($det) $condition[] = 'e_time_ymd <= "' . $det . '"';

		$m_cpuser = new zbj_model_cp_user();
		$s_manager = new service_manager();

		$joinConStr = "FIND_IN_SET({$this->_userid}, joinuserids)";
		//获取进行中的工单条数
		$numItems = "
		sum(case when f_uid={$this->_userid} then 1 else 0 end) as fnum,
		sum(case when to_uid={$this->_userid} then 1 else 0 end) as tonum,
		sum(case when FIND_IN_SET({$this->_userid}, joinuserids) then 1 else 0 end) as jnum,
		sum(case when FIND_IN_SET({$this->_userid}, supervisor) then 1 else 0 end) as snum,
		sum(case when iswarn = 1 and ((f_uid={$this->_userid} or to_uid={$this->_userid} or {$joinConStr})) then 1 else 0 end) as wnum
		";
		$numResult = $m_order->selectOne("status =1 and s_time_ymd >= '{$dateBegin}'", $numItems);
		$param['numResult'] = $numResult;
		//发起人
		$f_uid = (int) $_GET['f_uid'] ? (int) $_GET['f_uid'] : 0;//发起人id
		$param['f_uid'] = $f_uid;
		if ($f_uid) {
			$condition['f_uid'] = $f_uid;
		}

		$curdate = date("Y-m-d");
		$curtime = time();
		if ($w) {
			$condition['iswarn'] = 1;
		}
		//全部、0我负责的、2我提交的、3我参与的
		switch ($f) {
			case 0:
				$condition['to_uid'] = $this->_userid;//1我负责的
			break;
			case 1:
				;
			break;
			case 2:
				$condition['f_uid'] = $this->_userid;//2我发的
			break;
			case 3:
				$condition[] = 'FIND_IN_SET('.$this->_userid.', joinuserids)';//我参与的
			break;
			case 4:
				;
			break;
			case 5:
				$condition[] = 'FIND_IN_SET('.$this->_userid.', supervisor)';//我监督的
			break;
			case 6:
				$condition['iswarn'] = 1;//预警的
				$condition['status'] = 1;//进行中
				$condition[] = "(to_uid = {$this->_userid} or f_uid = {$this->_userid} or {$joinConStr})";
				break;
			default:
				;
			break;
		}
		//一直分类
		if ($category1_id){
			$condition['category1_id'] = $category1_id;
		}
		//二级分类
		if ($category2_id) {
			$condition['category2_id'] = $category2_id;
		}
		//0全部、1超期、2今日处理、3进行中、4已完成
	switch ($s) {
			case 0:
			;
			break;
			case 1:
// 				$condition[] = " status = 1 and e_time_ymd < '$curdate' and e_time_ymd > '0'";
				$condition[] = " status = 1 and e_time < {$curtime} and e_time > '0'";
			break;
			case 2:
				$condition[] = " status = 1 and e_time_ymd <= '$curdate'";//今日处理（statu=1&&e_time_ymd=当前到期）
			break;
			case 3:
				$condition[] = ' status = 1';//进行中（status=1）
			break;
			case 4:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
			break;
			case 5:
				//5已评价、6已结束待评价
				//$voteway 评价方式，0全部、1内部评价、2用户评价
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
				switch ($voteway) {
					case 0:
						$condition[] = '((attitude_score>0 or eff_score>0 or result_score>0) or uservote>0)';
					break;
					case 1:
						//1内部评价attitude_score    eff_score    result_score
						$condition[] = '(attitude_score>0 or eff_score>0 or result_score>0) and uservote=0';
						switch ($voteresult) {
							//$voteresult 评价结果，0全部、1满意、2一般、3不满意
							case 0:
							;
							break;
							case 1:
								$condition[] = '(attitude_score + eff_score + result_score)>=12';
							break;
							case 2:
								$condition[] = '(attitude_score + eff_score + result_score)<12 and (attitude_score + eff_score + result_score)>=9';
							break;
							case 3:
								$condition[] = '(attitude_score + eff_score + result_score)<9';
							break;
						}
					;
					break;
					case 2:
						//2用户评价:1、5满意不推荐,2、6一般,3、7不满意,4满意并推荐
						$condition[] = '(attitude_score=0 and eff_score=0 and result_score=0) and uservote>0';
						switch ($voteresult) {
							case 1:
								$condition[] = "uservote in (1,5)";
							break;
							case 2:
								$condition[] = "uservote in (2,6)";
							break;
							case 3:
								$condition[] = "uservote in (3,7)";
							break;
							case 4:
								$condition[] = "uservote = 4";
							break;
						}
					break;
				}
			break;
			case 6:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
				$condition[] = '(attitude_score=0 and eff_score=0 and result_score=0) and uservote=0';
				$condition[]='f_uid !=to_uid';   //自己的工单不评价
			break;
		}

		//提交时间
		if ($sst) $condition[] = 's_time_ymd >= "' . $sst . '"';
		if ($set) $condition[] = 's_time_ymd <= "' . $set . '"';
		//0全部、1今天、2近三天、3近一周、4近一个月
		switch ($t) {
			case 0:
			;
			break;
			case 1:
				$condition['s_time_ymd'] = $curdate;
			break;
			case 2:
				$ctime = date('Y-m-d', strtotime('-3 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 3:
				$ctime = date('Y-m-d', strtotime('-7 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 4:
				$ctime = date('Y-m-d', strtotime('-30 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 5:
				$ctime = date('Y-m-d', strtotime('-1 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;

			default:
				;
			break;
		}

		//0全部、1紧急 2非常重要 3重要 4一般
		if($z) {
			$condition['attr'] = $z;
		}
		//排序4、5提交时间，2、3优先级，0、1截至时间
		$orderStr = '';
		switch ($o) {
			case 4:
				$orderStr = 'order by order_id desc';
			break;
			case 5:
				$orderStr = 'order by order_id';
			break;
			case 2:
				$orderStr = 'order by attr desc';
			break;
			case 3:
				$orderStr = 'order by attr';
			break;
			case 6:
				$orderStr = 'order by e_time_ymd desc';
			break;
			case 1:
				$orderStr = 'order by e_time_ymd';
			break;
			case 0:
				if (in_array($s, array(1,2,3))) {
					$orderStr = 'order by attr,e_time_ymd';
				}
			break;
		}
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_order->setLimit($limit);
		$m_order->setCount(true);
		$m_order->setPage($curpage);
		$orderObj = $m_order->select($condition, '*', $orderStr);
		$order = $orderObj->items;
		$m_orderComment = new model_cp_ordercomment();
		$m_category = new zbj_model_mk_recordcategory();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$s_order = new service_order($v['order_id']);
				$order[$k]['is_label'] = 0;
				if ($s_order->isLabel($this->_userid)) $order[$k]['is_label'] = 1;
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['itemname'] = '';
				$order[$k]['pitemname'] = '';
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
				if($v['type']==1){
					$m_task = new zbj_model_mk_task();
					$task = $m_task->selectOne(array('task_id'=>$v['rid']), 'title');
					if ($task) {
						$order[$k]['tasktitle'] = $task['title'];
					}
				}
				if ($v['category2_id']) {
					$category2Array = $m_category->selectOne(array('category_id'=>$v['category2_id']), 'category_name');
					if (count($category2Array)) {
						$order[$k]['category2_name'] = $category2Array['category_name'];
					}
				}
				if ($v['category1_id']) {
					$category1Array = $m_category->selectOne(array('category_id'=>$v['category1_id']), 'category_name');
					if (count($category1Array)) {
						$order[$k]['category1_name'] = $category1Array['category_name'];
					}
				}
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($orderObj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param['totalSize'] = $orderObj->totalSize;
		return $this->render('misc/order/managerlist.html', $param);
	}
	/**
	 *
	 * 所有人工单
	 */
	public function pageOrderAll($inPath) {

		if (!$this->_userid) {
			return $this->printmsg('您还未登录，或登录已失效，请重新登录！');
		}
		$param = array();
		//获取部门树，发起人
		$group=zbj_lib_BaseUtils::apicall('cpuser', 'getGroupTree');
		if($group){
			$param ['group'] = $group['data'];
		}else{
			echo "接口错误";
		}
		$m_order = new model_cp_order();
		$dateBegin = date("Y-m-d", strtotime("-".service_order::BEFORE_DAY." day"));//BEFORE_DAY之前的工单不显示
		//获取进行中的工单条数
		$numItems = "
		sum(case when f_uid={$this->_userid} then 1 else 0 end) as fnum,
		sum(case when to_uid={$this->_userid} then 1 else 0 end) as tonum,
		sum(case when FIND_IN_SET({$this->_userid}, joinuserids) then 1 else 0 end) as jnum,
		sum(case when FIND_IN_SET({$this->_userid}, supervisor) then 1 else 0 end) as snum
		";
		$numResult = $m_order->selectOne("status =1 and s_time_ymd >= '{$dateBegin}'", $numItems);
		$param['numResult'] = $numResult;

		//获取工单一级分类
		$s_record = new service_record();
		$categoryArray = $s_record->getCategories(0, 1);
		$param['categoryArray'] = $categoryArray;

		$urlparam = $this->getUrlParams($inPath);
// 		$urlparam = $_GET;
		$w = (int) $_GET['w'] ? (int) $_GET['w'] : 0;//0全部、1预警
		$f = 1;//1全部
		$category1_id = (int) $_GET['category1_id'] ? (int) $_GET['category1_id'] : 0;//需求类型一级分类
		$category2_id = (int) $_GET['category2_id'] ? (int) $_GET['category2_id'] : 0;//需求类型二级分类
		$i = (int) $_GET['i'] ? (int) $_GET['i'] : 0;//0全部、1BOSS、2交易、3用户、4争议
		$s = (int) $_GET['s'] ? (int) $_GET['s'] : 0;//0全部、1超期、2今日到期、3进行中、4已结束（包括已中止和已完成）、5已评价、6已结束待评价
		$voteway = zbj_lib_BaseUtils::getStr($_GET['voteway'], 'int', 0);//评价方式，0全部、1内部评价、2用户评价
		$voteresult = zbj_lib_BaseUtils::getStr($_GET['voteresult'], 'int', 0);//评价结果，0全部、1满意、2一般、3不满意
		$t = (int) $_GET['t'] ? (int) $_GET['t'] : 0;//0全部、1今天、2近三天、3近一周、4近一个月
		$sst = zbj_lib_BaseUtils::getStr($_GET['sst'], 'string');
		$set = zbj_lib_BaseUtils::getStr($_GET['set'], 'string');
		$z = (int) $_GET['z'] ? (int) $_GET['z'] : 0;//0全部、1紧急 2非常重要 3重要 4一般
		$et = $_GET['et'];//截至时间
		$dst = zbj_lib_BaseUtils::getStr($_GET['dst'], 'string');
		$det = zbj_lib_BaseUtils::getStr($_GET['det'], 'string');
		$o = (int) $_GET['o'] ? (int) $_GET['o'] : 0;////排序4、5提交时间，2、3优先级，0、1截至时间
		$param['w'] = $w;
		$param['f'] = $f;
		$param['category1_id'] = $category1_id;
		$param['category2_id'] = $category2_id;
		$param['i'] = $i;
		$param['s'] = $s;
		$param['t'] = $t;
		$param['z']	= $z;
		$param['et'] = $et;
		$param['o'] = $o;
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_order->setLimit($limit);
		$m_order->setCount(true);
		$m_order->setPage($curpage);

		$condition = array();
		$condition[] = "s_time_ymd >= '{$dateBegin}'";
		if ($et) {
			$condition['e_time_ymd'] = $et;
		}
		//截止时间
		if ($dst) $condition[] = 'e_time_ymd >= "' . $dst . '"';
		if ($det) $condition[] = 'e_time_ymd <= "' . $det . '"';
		$m_cpuser = new zbj_model_cp_user();
		$s_manager = new service_manager();
	//发起人组
		$f_gid = (int) $_GET['f_gid'] ? (int) $_GET['f_gid'] : 0;//负责人组id
		$param['f_gid'] = $f_gid;
		$f_uidArray = array();
		$f_uidStr = '';

		//发起人
		$f_uid = (int) $_GET['f_uid'] ? (int) $_GET['f_uid'] : 0;//发起人id
		$param['f_uid'] = $f_uid;
		if ($f_uid) {
			$condition['f_uid'] = $f_uid;
		}else{
			if ($f_gid > 1) {
				//根绝负责人组id获取该组所有员工id
				//根绝负责人组id获取该组所有分组
				$f_gidStr = $s_manager->getTreeGroupIdStr($f_gid);
				$f_gidArray = explode(',', $f_gidStr);
				if (count($f_gidArray) && $f_gidArray[0]) {
					for($j = 0; $j < count($f_gidArray); $j++)  {
						$f_users = $m_cpuser->select(array('group_id' => $f_gidArray[$j]), 'user_id')->items;
						if (count($f_users)) {
							foreach ($f_users as $k=>$v) {
								$f_uidArray[$k] = $v['user_id'];
							}
							$f_uidStr .= implode($f_uidArray, ',').',';

						}
					}
					$f_uidStr = trim($f_uidStr, ',');
				}else{
					$f_users = $m_cpuser->select(array('group_id' => $f_gid), 'user_id')->items;
					if (count($f_users)) {
						foreach ($f_users as $k=>$v) {
							$f_uidArray[$k] = $v['user_id'];
						}
						$f_uidStr = implode($f_uidArray, ',');
					}
				}
				if ($f_uidStr) {
					$condition[] = "f_uid in ($f_uidStr)";
				}
			}
		}
		//负责人组
		$to_gid = (int) $_GET['to_gid'] ? (int) $_GET['to_gid'] : 0;//负责人组id
		$param['to_gid'] = $to_gid;
		$to_uidArray = array();
		$to_uidStr = '';

		//负责人
		$to_uid = (int) $_GET['to_uid'] ? (int) $_GET['to_uid'] : 0;//负责人id
		$param['to_uid'] = $to_uid;
		if ($to_uid) {
			$condition['to_uid'] = $to_uid;
		}else{
			if ($to_gid > 1) {
				//根绝负责人组id获取该组所有分组
				$to_gidStr = $s_manager->getTreeGroupIdStr($to_gid);
				$to_gidArray = explode(',', $to_gidStr);
				if (count($to_gidArray) && $to_gidArray[0]) {
					for($j = 0; $j < count($to_gidArray); $j++)  {
						$to_users = $m_cpuser->select(array('group_id' => $to_gidArray[$j]), 'user_id')->items;
						if (count($to_users)) {
							foreach ($to_users as $k=>$v) {
								$to_uidArray[$k] = $v['user_id'];
							}
							$to_uidStr .= implode($to_uidArray, ',').',';

						}
					}
					$to_uidStr = trim($to_uidStr, ',');
				}else{
					$to_users = $m_cpuser->select(array('group_id' => $to_gid), 'user_id')->items;
					if (count($to_users)) {
						foreach ($to_users as $k=>$v) {
							$to_uidArray[$k] = $v['user_id'];
						}
						$to_uidStr = implode($to_uidArray, ',');
					}
				}
				if ($to_uidStr) {
					$condition[] = "to_uid in ($to_uidStr)";
				}

			}
		}
		//处理人组
		$joiner_gid = (int) $_GET['joiner_gid'] ? (int) $_GET['joiner_gid'] : 0;//处理人组id
		$param['joiner_gid'] = $joiner_gid;
		$joinConStr = "";//处理人条件

		//处理人
		$joiner = (int) $_GET['joiner'] ? (int) $_GET['joiner'] : 0;//负责人id
		$param['joiner'] = $joiner;
		if ($joiner) {
			$condition[] = "FIND_IN_SET({$joiner}, joinuserids)";
		}else{
			if ($joiner_gid > 1) {
				//根绝处理人组id获取该组所有分组
				$joiner_gidStr = $s_manager->getTreeGroupIdStr($joiner_gid);
				$joiner_gidArray = explode(',', $joiner_gidStr);
				if (count($joiner_gidArray) && $joiner_gidArray[0]) {
					for($j = 0; $j < count($joiner_gidArray); $j++)  {
						$joiner_users = $m_cpuser->select(array('group_id' => $joiner_gidArray[$j]), 'user_id')->items;
						if (count($joiner_users)) {
							foreach ($joiner_users as $k=>$v) {
								$joinConStr .= " FIND_IN_SET({$v['user_id']}, joinuserids) or";
							}
						}
					}
				}else{
					$joiner_users = $m_cpuser->select(array('group_id' => $joiner_gid), 'user_id')->items;
					if (count($joiner_users)) {
						foreach ($joiner_users as $k=>$v) {
							$joinConStr .= " FIND_IN_SET({$v['user_id']}, joinuserids) or";
						}
					}
				}
				$joinConStr = trim($joinConStr, 'or');
				if ($joinConStr) {
					$condition[] = "({$joinConStr})";
				}

			}
		}
		$curdate = date("Y-m-d");
		$curtime = time();
		if ($w) {
			$condition['iswarn'] = 1;
		}
		//一直分类
		if ($category1_id){
			$condition['category1_id'] = $category1_id;
		}
		//二级分类
		if ($category2_id) {
			$condition['category2_id'] = $category2_id;
		}
		//0全部、1超期、2今日处理、3进行中、4已完成
		switch ($s) {
			case 0:
				;
			break;
			case 1:
// 				$condition[] = " status = 1 and e_time_ymd < '$curdate' and e_time_ymd > '0'";
				$condition[] = " status = 1 and e_time < {$curtime} and e_time > '0'";
			break;
			case 2:
				$condition[] = " status = 1 and e_time_ymd <= '$curdate'";//今日处理（statu=1&&e_time_ymd=当前到期）
			break;
			case 3:
				$condition[] = ' status = 1';//进行中（status=1）
			break;
			case 4:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
			break;
			case 5:
				//5已评价、6已结束待评价
				//$voteway 评价方式，0全部、1内部评价、2用户评价
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
				switch ($voteway) {
					case 0:
						$condition[] = '((attitude_score>0 or eff_score>0 or result_score>0) or uservote>0)';
					break;
					case 1:
						//1内部评价attitude_score    eff_score    result_score
						$condition[] = '(attitude_score>0 or eff_score>0 or result_score>0) and uservote=0';
						switch ($voteresult) {
							//$voteresult 评价结果，0全部、1满意、2一般、3不满意
							case 0:
							;
							break;
							case 1:
								$condition[] = '(attitude_score + eff_score + result_score)>=12';
							break;
							case 2:
								$condition[] = '(attitude_score + eff_score + result_score)<12 and (attitude_score + eff_score + result_score)>=9';
							break;
							case 3:
								$condition[] = '(attitude_score + eff_score + result_score)<9';
							break;
						}
					;
					break;
					case 2:
						//2用户评价:1、5满意不推荐,2、6一般,3、7不满意,4满意并推荐
						$condition[] = '(attitude_score=0 and eff_score=0 and result_score=0) and uservote>0';
						switch ($voteresult) {
							case 1:
								$condition[] = "uservote in (1,5)";
							break;
							case 2:
								$condition[] = "uservote in (2,6)";
							break;
							case 3:
								$condition[] = "uservote in (3,7)";
							break;
							case 4:
								$condition[] = "uservote = 4";
							break;
						}
					break;
				}
			break;
			case 6:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
				$condition[] = '(attitude_score=0 and eff_score=0 and result_score=0) and uservote=0';
			break;
		}

		//提交时间
		if ($sst) $condition[] = 's_time_ymd >= "' . $sst . '"';
		if ($set) $condition[] = 's_time_ymd <= "' . $set . '"';
		//0全部、1今天、2近三天、3近一周、4近一个月
		switch ($t) {
			case 0:
			;
			break;
			case 1:
				$condition['s_time_ymd'] = $curdate;
			break;
			case 2:
				$ctime = date('Y-m-d', strtotime('-3 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 3:
				$ctime = date('Y-m-d', strtotime('-7 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 4:
				$ctime = date('Y-m-d', strtotime('-30 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 5:
				$ctime = date('Y-m-d', strtotime('-1 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;

			default:
				;
			break;
		}

		//0全部、1紧急 2非常重要 3重要 4一般
		if($z) {
			$condition['attr'] = $z;
		}
		//排序4、5提交时间，2、3优先级，0、1截至时间
		$orderStr = '';
		switch ($o) {
			case 4:
				$orderStr = 'order by order_id desc';
			break;
			case 5:
				$orderStr = 'order by order_id';
			break;
			case 2:
				$orderStr = 'order by attr desc';
			break;
			case 3:
				$orderStr = 'order by attr';
			break;
			case 0:
				$orderStr = 'order by e_time_ymd desc';
			break;
			case 1:
				$orderStr = 'order by e_time_ymd';
			break;

			default:
				;
			break;
		}
		$orderObj = $m_order->select($condition, '*', null,$orderStr);
		$order = $orderObj->items;
		$m_orderComment = new model_cp_ordercomment();
		$m_category = new zbj_model_mk_recordcategory();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['itemname'] = '';
				$order[$k]['pitemname'] = '';
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
				if($v['type']==1){
					$m_task = new zbj_model_mk_task();
					$task = $m_task->selectOne(array('task_id'=>$v['rid']), 'title');
					if ($task) {
						$order[$k]['tasktitle'] = $task['title'];
					}
				}
				if ($v['category2_id']) {
					$category2Array = $m_category->selectOne(array('category_id'=>$v['category2_id']), 'category_name');
					if (count($category2Array)) {
						$order[$k]['category2_name'] = $category2Array['category_name'];
					}
				}
				if ($v['category1_id']) {
					$category1Array = $m_category->selectOne(array('category_id'=>$v['category1_id']), 'category_name');
					if (count($category1Array)) {
						$order[$k]['category1_name'] = $category1Array['category_name'];
					}
				}
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($orderObj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param['totalSize'] = $orderObj->totalSize;
		return $this->render('misc/order/all.html', $param);
	}

	/**
	 *
	 * 部门工单
	 */
	public function pageOrderGroup($inPath) {

		if (!$this->_userid) {
			return $this->printmsg('您还未登录，或登录已失效，请重新登录！');
		}
		$param = array();
		//获取部门树，发起人
		$group=zbj_lib_BaseUtils::apicall('cpuser', 'getGroupTree');
		if($group){
			$param ['group'] = $group['data'];
		}else{
			echo "接口错误";
		}

		//获取工单一级分类
		$s_record = new service_record();
		$categoryArray = $s_record->getCategories(0, 1);
		$param['categoryArray'] = $categoryArray;

		$urlparam = $this->getUrlParams($inPath);
// 		$urlparam = $_GET;
		$w = (int) $_GET['w'] ? (int) $_GET['w'] : 0;//0全部、1预警
		$f = (int) $_GET['f'] ? (int) $_GET['f'] : 0;//1全部、0我负责的、2我提交的、3我参与的、4我转交的、5我监督的
		$category1_id = (int) $_GET['category1_id'] ? (int) $_GET['category1_id'] : 0;//需求类型一级分类
		$category2_id = (int) $_GET['category2_id'] ? (int) $_GET['category2_id'] : 0;//需求类型二级分类
		$i = (int) $_GET['i'] ? (int) $_GET['i'] : 0;//0全部、1BOSS、2交易、3用户、4争议
		$s = (int) $_GET['s'] ? (int) $_GET['s'] : 0;//0全部、1超期、2今日到期、3进行中、4已结束（包括已中止和已完成）、5已评价、6已结束待评价
		$voteway = zbj_lib_BaseUtils::getStr($_GET['voteway'], 'int', 0);//评价方式，0全部、1内部评价、2用户评价
		$voteresult = zbj_lib_BaseUtils::getStr($_GET['voteresult'], 'int', 0);//评价结果，0全部、1满意、2一般、3不满意
		$t = (int) $_GET['t'] ? (int) $_GET['t'] : 0;//0全部、1今天、2近三天、3近一周、4近一个月
		$sst = zbj_lib_BaseUtils::getStr($_GET['sst'], 'string');
		$set = zbj_lib_BaseUtils::getStr($_GET['set'], 'string');
		$z = (int) $_GET['z'] ? (int) $_GET['z'] : 0;//0全部、1紧急 2非常重要 3重要 4一般
		$et = $_GET['et'];//截至时间
		$dst = zbj_lib_BaseUtils::getStr($_GET['dst'], 'string');
		$det = zbj_lib_BaseUtils::getStr($_GET['det'], 'string');
		$o = (int) $_GET['o'] ? (int) $_GET['o'] : 0;////排序4、5提交时间，2、3优先级，0、1截至时间
		$param['w'] = $w;
		$param['f'] = $f;
		$param['category1_id'] = $category1_id;
		$param['category2_id'] = $category2_id;
		$param['i'] = $i;
		$param['s'] = $s;
		$param['t'] = $t;
		$param['z']	= $z;
		$param['et'] = $et;
		$param['o'] = $o;
		$m_order = new model_cp_order();
		$dateBegin = date("Y-m-d", strtotime("-".service_order::BEFORE_DAY." day"));//BEFORE_DAY之前的工单不显示
		$condition = array();
		$condition[] = "s_time_ymd >= '{$dateBegin}'";
		if ($et) {
			$condition['e_time_ymd'] = $et;
		}
		//截止时间
		if ($dst) $condition[] = 'e_time_ymd >= "' . $dst . '"';
		if ($det) $condition[] = 'e_time_ymd <= "' . $det . '"';

// 		$m_cpuser = new zbj_model_cp_user();
// 		$s_manager = new service_manager();
// 		$belongGroup = $m_cpuser->selectOne(array('user_id'=>$this->_userid), 'group_id');
// 		$belongGroupId = 0;
// 		if ($belongGroup) $belongGroupId = $belongGroup['group_id'];
// 		if (!$belongGroupId) return $this->printmsg('查询不到你所在的组！');
		$uidStr = '';
		$uidArray = array();

		try {
		    lib_BaseUtils::apiInit();
		    $client = new com\zhubajie\boss\interfaces\userServiceClient(null);
		    lib_BaseUtils::apigetclient($client);
		    $apartment_id = $client->getGroupID($this->_userid, GroupType::DEPARTMENT);
		} catch (Exception $e) {
		    return $this->printmsg($e->getMessage()."查询不到你所在的bu'men！");
		}

		try {
		    lib_BaseUtils::apiInit();
		    $client = new com\zhubajie\boss\interfaces\GroupServiceClient(null);
		    lib_BaseUtils::apigetclient($client);
		    $member = $client->getMember($apartment_id);
		} catch (Exception $e) {
		    return $this->printmsg($e->getMessage());
		}
		$g_users = array();
		$members=json_decode($member->data,true);
		foreach ($members as $key => $value) {
		    $oneuser = array(
		        'user_id' => (int)$value['user_id'],
		        'name' => $value['name'],
		    );
		    array_push($g_users, $oneuser);
		}

		$joinConStr = "";//处理人条件
		if ($apartment_id > 1) {
			//根绝组id获取该组所有员工id
// 			$g_users = $m_cpuser->select(array('group_id' => $belongGroupId), 'user_id,name')->items;
			$param['g_users'] = $g_users;
			if (count($g_users)) {
				foreach ($g_users as $k=>$v) {
					$uidArray[$k] = $v['user_id'];
					$joinConStr .= " FIND_IN_SET({$v['user_id']}, joinuserids) or";
				}
				$uidStr = implode($uidArray, ',');
				$joinConStr = trim($joinConStr, 'or');
			}
		}
		//获取进行中的工单条数
		$numItems = "
		sum(case when f_uid in ({$uidStr}) then 1 else 0 end) as fnum,
		sum(case when to_uid in ({$uidStr}) then 1 else 0 end) as tonum,
		sum(case when {$joinConStr} then 1 else 0 end) as jnum,
		sum(case when iswarn = 1 and ((f_uid in ({$uidStr}) or to_uid in ({$uidStr}) or {$joinConStr})) then 1 else 0 end) as wnum
		";
		$numResult = $m_order->selectOne("status =1 and s_time_ymd >= '{$dateBegin}'", $numItems);
		$param['numResult'] = $numResult;

		//发起人
		$f_uid = (int) $_GET['f_uid'] ? (int) $_GET['f_uid'] : 0;//发起人id
		$param['f_uid'] = $f_uid;
		if ($f_uid) {
			$condition['f_uid'] = $f_uid;
		}
		//负责人
		$to_uid = (int) $_GET['to_uid'] ? (int) $_GET['to_uid'] : 0;//负责人id
		$param['to_uid'] = $to_uid;
		if ($to_uid) {
			$condition['to_uid'] = $to_uid;
		}
		//参与人
		$joiner = (int) $_GET['joiner'] ? (int) $_GET['joiner'] : 0;//参与人
		$param['joiner'] = $joiner;
		if ($joiner) {
			$condition[] = "FIND_IN_SET({$joiner}, joinuserids)";
		}

		$curdate = date("Y-m-d");
		$curtime = time();
		if ($w) {
			$condition['iswarn'] = 1;
		}
		//全部、0负责的、2发起的、3处理的、6预警
		switch ($f) {
			case 0:
				$condition[] = "to_uid in ({$uidStr})";//0负责的
			break;
			case 1:
				;
			break;
			case 2:
				$condition[] = "f_uid in ({$uidStr})";//2发的
			break;
			case 3:
				$condition[] = "({$joinConStr})";//处理的
			break;
			case 4:
				;
			break;
			case 5:
// 				$condition[] = 'FIND_IN_SET('.$this->_userid.', supervisor)';//监督的
				;
			break;
			case 6:
				$condition['iswarn'] = 1;//预警的
				$condition['status'] = 1;//进行中
				$condition[] = "(to_uid in ({$uidStr}) or f_uid in ({$uidStr}) or {$joinConStr})";
			break;

			default:
				;
			break;
		}
		//一直分类
		if ($category1_id){
			$condition['category1_id'] = $category1_id;
		}
		//二级分类
		if ($category2_id) {
			$condition['category2_id'] = $category2_id;
		}
		//0全部、1超期、2今日处理、3进行中、4已完成
	switch ($s) {
			case 0:
			;
			break;
			case 1:
// 				$condition[] = " status = 1 and e_time_ymd < '$curdate' and e_time_ymd > '0'";
				$condition[] = " status = 1 and e_time < {$curtime} and e_time > '0'";
			break;
			case 2:
				$condition[] = " status = 1 and e_time_ymd <= '$curdate'";//今日处理（statu=1&&e_time_ymd=当前到期）
			break;
			case 3:
				$condition[] = ' status = 1';//进行中（status=1）
			break;
			case 4:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
			break;
			case 5:
				//5已评价、6已结束待评价
				//$voteway 评价方式，0全部、1内部评价、2用户评价
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
				switch ($voteway) {
					case 0:
						$condition[] = '((attitude_score>0 or eff_score>0 or result_score>0) or uservote>0)';
					break;
					case 1:
						//1内部评价attitude_score    eff_score    result_score
						$condition[] = '(attitude_score>0 or eff_score>0 or result_score>0) and uservote=0';
						switch ($voteresult) {
							//$voteresult 评价结果，0全部、1满意、2一般、3不满意
							case 0:
							;
							break;
							case 1:
								$condition[] = '(attitude_score + eff_score + result_score)>=12';
							break;
							case 2:
								$condition[] = '(attitude_score + eff_score + result_score)<12 and (attitude_score + eff_score + result_score)>=9';
							break;
							case 3:
								$condition[] = '(attitude_score + eff_score + result_score)<9';
							break;
						}
					;
					break;
					case 2:
						//2用户评价:1、5满意不推荐,2、6一般,3、7不满意,4满意并推荐
						$condition[] = '(attitude_score=0 and eff_score=0 and result_score=0) and uservote>0';
						switch ($voteresult) {
							case 1:
								$condition[] = "uservote in (1,5)";
							break;
							case 2:
								$condition[] = "uservote in (2,6)";
							break;
							case 3:
								$condition[] = "uservote in (3,7)";
							break;
							case 4:
								$condition[] = "uservote = 4";
							break;
						}
					break;
				}
			break;
			case 6:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
				$condition[] = '(attitude_score=0 and eff_score=0 and result_score=0) and uservote=0';
			break;
		}

		//提交时间
		if ($sst) $condition[] = 's_time_ymd >= "' . $sst . '"';
		if ($set) $condition[] = 's_time_ymd <= "' . $set . '"';
		//0全部、1今天、2近三天、3近一周、4近一个月
		switch ($t) {
			case 0:
			;
			break;
			case 1:
				$condition['s_time_ymd'] = $curdate;
			break;
			case 2:
				$ctime = date('Y-m-d', strtotime('-3 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 3:
				$ctime = date('Y-m-d', strtotime('-7 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 4:
				$ctime = date('Y-m-d', strtotime('-30 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 5:
				$ctime = date('Y-m-d', strtotime('-1 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;

			default:
				;
			break;
		}

		//0全部、1紧急 2非常重要 3重要 4一般
		if($z) {
			$condition['attr'] = $z;
		}
		//排序4、5提交时间，2、3优先级，0、1截至时间
		$orderStr = '';
		switch ($o) {
			case 4:
				$orderStr = 'order by order_id desc';
			break;
			case 5:
				$orderStr = 'order by order_id';
			break;
			case 2:
				$orderStr = 'order by attr desc';
			break;
			case 3:
				$orderStr = 'order by attr';
			break;
			case 0:
				$orderStr = 'order by e_time_ymd desc';
			break;
			case 1:
				$orderStr = 'order by e_time_ymd';
			break;

			default:
				;
			break;
		}
// 		define(DEBUG, 1);
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_order->setLimit($limit);
		$m_order->setCount(true);
		$m_order->setPage($curpage);
		$orderObj = $m_order->select($condition, '*',null, $orderStr);
// 		exit;
		$order = $orderObj->items;
		$m_orderComment = new model_cp_ordercomment();
		$m_category = new zbj_model_mk_recordcategory();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$s_order = new service_order($v['order_id']);
				$order[$k]['is_label'] = 0;
				if ($s_order->isLabel($this->_userid)) $order[$k]['is_label'] = 1;
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['itemname'] = '';
				$order[$k]['pitemname'] = '';
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
				if($v['type']==1){
					$m_task = new zbj_model_mk_task();
					$task = $m_task->selectOne(array('task_id'=>$v['rid']), 'title');
					if ($task) {
						$order[$k]['tasktitle'] = $task['title'];
					}
				}
				if ($v['category2_id']) {
					$category2Array = $m_category->selectOne(array('category_id'=>$v['category2_id']), 'category_name');
					if (count($category2Array)) {
						$order[$k]['category2_name'] = $category2Array['category_name'];
					}
				}
				if ($v['category1_id']) {
					$category1Array = $m_category->selectOne(array('category_id'=>$v['category1_id']), 'category_name');
					if (count($category1Array)) {
						$order[$k]['category1_name'] = $category1Array['category_name'];
					}
				}
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($orderObj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param['totalSize'] = $orderObj->totalSize;
		return $this->render('misc/order/group.html', $param);
	}
	/**
	 * 工单转交列表页
	 */
	public function pageOrderChangeList($inPath) {

		if (!$this->_userid) {
			return $this->printmsg('您还未登录，或登录已失效，请重新登录！');
		}
		$param = array();
		//获取部门树，发起人
		$group=zbj_lib_BaseUtils::apicall('cpuser', 'getGroupTree');
		if($group){
			$param ['group'] = $group['data'];
		}else{
			echo "接口错误";
		}
		/**
		 * 工单获取一级分类
		 */
		$option_pitem = zbj_lib_BaseUtils::apicall('misc', 'getOptionItems', array('option_id'=>9));
		if($option_pitem){
			$param ['option_pitem'] = $option_pitem['data'];
		}else{
			echo "接口错误";
		}
		$urlparam = $this->getUrlParams($inPath);
		$f = (int) $_GET['f'] ? (int) $_GET['f'] : 0;//1全部、0我负责的、2我提交的、3我参与的
		if ((int)$urlparam['pitem'] > 0){
			$pitem = (int)$urlparam['pitem'];
		}else{
			$pitem = (int) $_GET['pitem'] ? (int) $_GET['pitem'] : 0;//需求类型一级分类
		}
		$item = (int) $_GET['item'] ? (int) $_GET['item'] : 0;//需求类型二级分类
		$s = (int) $_GET['s'] ? (int) $_GET['s'] : 0;//0全部、1超期、2今日到期、3进行中、4已结束（包括已中止和已完成）
		$t = (int) $_GET['t'] ? (int) $_GET['t'] : 0;//0全部、1今天、2近三天、3近一周、4近一个月
		$z = (int) $_GET['z'] ? (int) $_GET['z'] : 0;//0全部、1紧急 2非常重要 3重要 4一般
		$et = $_GET['et'];//截至时间
		$o = (int) $_GET['o'] ? (int) $_GET['o'] : 0;//排序
		$param['f'] = $f;
		$param['pitem'] = $pitem;
		$param['item'] = $item;
		$param['s'] = $s;
		$param['t'] = $t;
		$param['z']	= $z;
		$param['et'] = $et;
		$param['o'] = $o;
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_orderchange = new model_cp_orderchange();
		$m_orderchange->setLimit($limit);
		$m_orderchange->setCount(true);
		$m_orderchange->setPage($curpage);
		$dateBegin = date("Y-m-d", strtotime("-".service_order::BEFORE_DAY." day"));//BEFORE_DAY之前的工单不显示
		$condition = array();
		$condition[] = "s_time_ymd >= '{$dateBegin}'";
		if ($et) {
			$condition['e_time_ymd'] = $et;
		}
		$m_cpuser = new zbj_model_cp_user();
		$s_manager = new service_manager();
	//发起人组
		$f_gid = (int) $_GET['f_gid'] ? (int) $_GET['f_gid'] : 0;//负责人组id
		$param['f_gid'] = $f_gid;
		$f_uidArray = array();
		$f_uidStr = '';
		if ($f_gid > 1) {
			//根绝负责人组id获取该组所有员工id
			//根绝负责人组id获取该组所有分组
			$f_gidStr = $s_manager->getTreeGroupIdStr($f_gid);
			$f_gidArray = explode(',', $f_gidStr);
			if (count($f_gidArray) && $f_gidArray[0]) {
				for($j = 0; $j < count($f_gidArray); $j++)  {
					$f_users = $m_cpuser->select(array('group_id' => $f_gidArray[$j]), 'user_id')->items;
					if (count($f_users)) {
						foreach ($f_users as $k=>$v) {
							$f_uidArray[$k] = $v['user_id'];
						}
						$f_uidStr .= implode($f_uidArray, ',').',';

					}
				}
				$f_uidStr = trim($f_uidStr, ',');
			}else{
				$f_users = $m_cpuser->select(array('group_id' => $f_gid), 'user_id')->items;
				if (count($f_users)) {
					foreach ($f_users as $k=>$v) {
						$f_uidArray[$k] = $v['user_id'];
					}
					$f_uidStr = implode($f_uidArray, ',');
				}
			}
			if ($f_uidStr) {
				$condition[] = "cp_order.f_uid in ($f_uidStr)";
			}
		}
		//发起人
		$f_uid = (int) $_GET['f_uid'] ? (int) $_GET['f_uid'] : 0;//发起人id
		$param['f_uid'] = $f_uid;
		if ($f_uid) {
			$condition['cp_order.f_uid'] = $f_uid;
		}
		//负责人组
		$to_gid = (int) $_GET['to_gid'] ? (int) $_GET['to_gid'] : 0;//负责人组id
		$param['to_gid'] = $to_gid;
		$to_uidArray = array();
		$to_uidStr = '';
		if ($to_gid > 1) {
			//根绝负责人组id获取该组所有分组
			$to_gidStr = $s_manager->getTreeGroupIdStr($to_gid);
			$to_gidArray = explode(',', $to_gidStr);
			if (count($to_gidArray) && $to_gidArray[0]) {
				for($j = 0; $j < count($to_gidArray); $j++)  {
					$to_users = $m_cpuser->select(array('group_id' => $to_gidArray[$j]), 'user_id')->items;
					if (count($to_users)) {
						foreach ($to_users as $k=>$v) {
							$to_uidArray[$k] = $v['user_id'];
						}
						$to_uidStr .= implode($to_uidArray, ',').',';

					}
				}
				$to_uidStr = trim($to_uidStr, ',');
			}else{
				$to_users = $m_cpuser->select(array('group_id' => $to_gid), 'user_id')->items;
				if (count($to_users)) {
					foreach ($to_users as $k=>$v) {
						$to_uidArray[$k] = $v['user_id'];
					}
					$to_uidStr = implode($to_uidArray, ',');
				}
			}
			if ($to_uidStr) {
				$condition[] = "cp_order.to_uid in ($to_uidStr)";
			}

		}
		//负责人
		$to_uid = (int) $_GET['to_uid'] ? (int) $_GET['to_uid'] : 0;//负责人id
		$param['to_uid'] = $to_uid;
		if ($to_uid) {
			$condition['cp_order.to_uid'] = $to_uid;
		}

		$curdate = date("Y-m-d");
		//全部、0我负责的、2我提交的、3我参与的
		switch ($f) {
			case 0:
				$condition['cp_order.to_uid'] = $this->_userid;//1我负责的
			break;
			case 1:
				;
			break;
			case 2:
				$condition['cp_order.f_uid'] = $this->_userid;//2我发的
			break;
			case 3:
				$condition[] = 'FIND_IN_SET('.$this->_userid.', cp_order.joinuserids)';//我参与的
			break;

			default:
				;
			break;
		}
		//一直分类
		if ($pitem){
			$condition['cp_order.item_pid'] = $pitem;
		}
		//二级分类
		if ($item) {
			$condition['cp_order.item_id'] = $item;
		}
		//0全部、1超期、2今日到期、3进行中、4已完成
		switch ($s) {
			case 0:
			;
			break;
			case 1:
				$condition[] = " cp_order.status = 1 and cp_order.e_time_ymd < '$curdate' and cp_order.e_time_ymd > '0'";
			break;
			case 2:
				$condition[] = " cp_order.status = 1 and cp_order.e_time_ymd = '$curdate'";//今日到期（statu=1&&e_time_ymd=当前到期）
			break;
			case 3:
				$condition[] = ' cp_order.status = 1';//进行中（status=1）
			break;
			case 4:
				$condition[] = ' (cp_order.status = 2 or cp_order.status = 4)';//已完成（status=4 or status=2）
			break;

			default:
				;
			break;
		}

		//0全部、1今天、2近三天、3近一周、4近一个月
		switch ($t) {
			case 0:
			;
			break;
			case 1:
				$condition['cp_order.s_time_ymd'] = $curdate;
			break;
			case 2:
				$ctime = date('Y-m-d', strtotime('-3 day'));
				$condition[] = "cp_order.s_time_ymd > '$ctime' and cp_order.s_time_ymd <= '$curdate'";
			break;
			case 3:
				$ctime = date('Y-m-d', strtotime('-7 day'));
				$condition[] = "cp_order.s_time_ymd > '$ctime' and cp_order.s_time_ymd <= '$curdate'";
			break;
			case 4:
				$ctime = date('Y-m-d', strtotime('-30 day'));
				$condition[] = "cp_order.s_time_ymd > '$ctime' and cp_order.s_time_ymd <= '$curdate'";
			break;

			default:
				;
			break;
		}

		//0全部、1紧急 2非常重要 3重要 4一般
		if($z) {
			$condition['cp_order.attr'] = $z;
		}
		//排序 0、1提交时间，2、3优先级，4、5截至时间
		$orderStr = '';
		switch ($o) {
			case 0:
				$orderStr = 'order by cp_order.order_id desc';
			break;
			case 1:
				$orderStr = 'order by cp_order.order_id';
			break;
			case 2:
				$orderStr = 'order by cp_order.attr';
			break;
			case 3:
				$orderStr = 'order by cp_order.attr desc';
			break;
			case 4:
				$orderStr = 'order by cp_order.e_time_ymd desc';
			break;
			case 5:
				$orderStr = 'order by cp_order.e_time_ymd';
			break;
			default:
				;
			break;
		}
		$leftJoin = array(
				'cp_order' => 'cp_order.order_id = cp_order_change.order_id'
				);
		$condition[] = 'cp_order_change.uid = '.$this->_userid;
		$orderchangeObj = $m_orderchange->select($condition, '*', null, $orderStr, $leftJoin);
		$order = $orderchangeObj->items;
		$m_orderComment = new model_cp_ordercomment();
		$m_item = new model_cp_optionitem();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['itemname'] = '';
				$order[$k]['pitemname'] = '';
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
				if ($v['item_id']) {
					$item = $m_item->selectOne(array('item_id'=>$v['item_id']), 'name');
					if (count($item)) {
						$order[$k]['itemname'] = $item['name'];
					}
				}
				if ($v['item_pid']) {
					$pitem = $m_item->selectOne(array('item_id'=>$v['item_pid']), 'name');
					if (count($pitem)) {
						$order[$k]['pitemname'] = $pitem['name'];
					}
				}
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($orderchangeObj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param['totalSize'] = $orderchangeObj->totalSize;
		if ($param['pitem'] == 153) {
			return $this->render('misc/order/troublelist.html', $param);
		}
		return $this->render('misc/order/managerlist.html', $param);
	}
	/**
	 * 工单关注列表页
	 */
	public function pageOrderLabelList($inPath) {
		$param = array();
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_label = new model_cp_orderlabel();
		$m_label->setLimit($limit);
		$m_label->setCount(true);
		$m_label->setPage($curpage);
		$leftjoin = array(
				'cp_order'=>'cp_order.order_id = cp_order_label.order_id'
				);
		$order_label_obj = $m_label->select(array('manager_id'=>$this->_userid), '*', null, $orderStr, $leftjoin);
		$order = $order_label_obj->items;
		$m_orderComment = new model_cp_ordercomment();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($order_label_obj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param['totalSize'] = $order_label_obj->totalSize;

		return $this->render('misc/order/labellist.html', $param);
	}
	/**
	 * 工单事故列表页
	 */
	public function pageOrderTroubleList($inPath) {
		if (!$this->_userid) {
			return $this->printmsg('您还未登录，或登录已失效，请重新登录！');
		}
		$param = array();
		//获取部门树，发起人
		$group=zbj_lib_BaseUtils::apicall('cpuser', 'getGroupTree');
		if($group){
			$param ['group'] = $group['data'];
		}else{
			echo "接口错误";
		}
		$m_order = new model_cp_order();
		$dateBegin = date("Y-m-d", strtotime("-".service_order::BEFORE_DAY." day"));//BEFORE_DAY之前的工单不显示
// 		define(DEBUG, 1);
		//获取进行中的工单条数
		$numItems = "
			sum(case when f_uid={$this->_userid} then 1 else 0 end) as fnum,
			sum(case when to_uid={$this->_userid} then 1 else 0 end) as tonum,
			sum(case when FIND_IN_SET({$this->_userid}, joinuserids) then 1 else 0 end) as jnum,
			sum(case when FIND_IN_SET({$this->_userid}, supervisor) then 1 else 0 end) as snum
		";
// 		$numResult = $m_order->selectOne("status in (0,1,3)", $numItems);
		$numResult = $m_order->selectOne("status =1 and category1_id=197 and s_time_ymd >= '{$dateBegin}'", $numItems);
		$param['numResult'] = $numResult;
// 		exit;
		$urlparam = $this->getUrlParams($inPath);
// 		$urlparam = $_GET;
		$w = (int) $_GET['w'] ? (int) $_GET['w'] : 0;//0全部、1预警
		$f = (int) $_GET['f'] ? (int) $_GET['f'] : 0;//1全部、0我负责的、2我提交的、3我参与的、4我转交的、5我监督的
		$i = (int) $_GET['i'] ? (int) $_GET['i'] : 0;//需求类型二级分类
		$s = (int) $_GET['s'] ? (int) $_GET['s'] : 0;//0全部、1超期、2今日到期、3进行中、4已结束（包括已中止和已完成）
		$t = (int) $_GET['t'] ? (int) $_GET['t'] : 0;//0全部、1今天、2近三天、3近一周、4近一个月
		$z = (int) $_GET['z'] ? (int) $_GET['z'] : 0;//0全部、1紧急 2非常重要 3重要 4一般
		$et = $_GET['et'];//截至时间
		$o = (int) $_GET['o'] ? (int) $_GET['o'] : 0;//排序
		$param['w'] = $w;
		$param['f'] = $f;
		$param['i'] = $i;
		$param['s'] = $s;
		$param['t'] = $t;
		$param['z']	= $z;
		$param['et'] = $et;
		$param['o'] = $o;
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$m_order->setLimit($limit);
		$m_order->setCount(true);
		$m_order->setPage($curpage);
		$condition = array();
		$condition[] = "s_time_ymd >= '{$dateBegin}'";
		if ($et) {
			$condition['e_time_ymd'] = $et;
		}
		$m_cpuser = new zbj_model_cp_user();
		$s_manager = new service_manager();
		//发起人组
		$f_gid = (int) $_GET['f_gid'] ? (int) $_GET['f_gid'] : 0;//负责人组id
		$param['f_gid'] = $f_gid;
		$f_uidArray = array();
		$f_uidStr = '';
		if ($f_gid > 1) {
			//根绝负责人组id获取该组所有员工id
			//根绝负责人组id获取该组所有分组
			$f_gidStr = $s_manager->getTreeGroupIdStr($f_gid);
			$f_gidArray = explode(',', $f_gidStr);
			if (count($f_gidArray) && $f_gidArray[0]) {
				for($j = 0; $j < count($f_gidArray); $j++)  {
					$f_users = $m_cpuser->select(array('group_id' => $f_gidArray[$j]), 'user_id')->items;
					if (count($f_users)) {
						foreach ($f_users as $k=>$v) {
							$f_uidArray[$k] = $v['user_id'];
						}
						$f_uidStr .= implode($f_uidArray, ',').',';

					}
				}
				$f_uidStr = trim($f_uidStr, ',');
			}else{
				$f_users = $m_cpuser->select(array('group_id' => $f_gid), 'user_id')->items;
				if (count($f_users)) {
					foreach ($f_users as $k=>$v) {
						$f_uidArray[$k] = $v['user_id'];
					}
					$f_uidStr = implode($f_uidArray, ',');
				}
			}
			if ($f_uidStr) {
				$condition[] = "f_uid in ($f_uidStr)";
			}
		}
		//发起人
		$f_uid = (int) $_GET['f_uid'] ? (int) $_GET['f_uid'] : 0;//发起人id
		$param['f_uid'] = $f_uid;
		if ($f_uid) {
			$condition['f_uid'] = $f_uid;
		}
		//负责人组
		$to_gid = (int) $_GET['to_gid'] ? (int) $_GET['to_gid'] : 0;//负责人组id
		$param['to_gid'] = $to_gid;
		$to_uidArray = array();
		$to_uidStr = '';
		if ($to_gid > 1) {
			//根绝负责人组id获取该组所有分组
			$to_gidStr = $s_manager->getTreeGroupIdStr($to_gid);
			$to_gidArray = explode(',', $to_gidStr);
			if (count($to_gidArray) && $to_gidArray[0]) {
				for($j = 0; $j < count($to_gidArray); $j++)  {
					$to_users = $m_cpuser->select(array('group_id' => $to_gidArray[$j]), 'user_id')->items;
					if (count($to_users)) {
						foreach ($to_users as $k=>$v) {
							$to_uidArray[$k] = $v['user_id'];
						}
						$to_uidStr .= implode($to_uidArray, ',').',';

					}
				}
				$to_uidStr = trim($to_uidStr, ',');
			}else{
				$to_users = $m_cpuser->select(array('group_id' => $to_gid), 'user_id')->items;
				if (count($to_users)) {
					foreach ($to_users as $k=>$v) {
						$to_uidArray[$k] = $v['user_id'];
					}
					$to_uidStr = implode($to_uidArray, ',');
				}
			}
			if ($to_uidStr) {
				$condition[] = "to_uid in ($to_uidStr)";
			}

		}
		//负责人
		$to_uid = (int) $_GET['to_uid'] ? (int) $_GET['to_uid'] : 0;//负责人id
		$param['to_uid'] = $to_uid;
		if ($to_uid) {
			$condition['to_uid'] = $to_uid;
		}

		$curdate = date("Y-m-d");
		$curtime = time();
		if ($w) {
			$condition['iswarn'] = 1;
		}
		//全部、0我负责的、2我提交的、3我参与的、4我转交的、5我监督的
		switch ($f) {
			case 0:
				$condition['to_uid'] = $this->_userid;//1我负责的
			break;
			case 1:
				;
			break;
			case 2:
				$condition['f_uid'] = $this->_userid;//2我发的
			break;
			case 3:
				$condition[] = 'FIND_IN_SET('.$this->_userid.', joinuserids)';//我参与的
			break;
			case 4:
				;//我转交的
			break;
			case 5:
				$condition[] = 'FIND_IN_SET('.$this->_userid.', supervisor)';//我监督的
			break;

			default:
				;
			break;
		}
		if ($i) {
			$condition['category2_id'] = $i;
// 			$condition['item_id'] = $i;
		}else{
// 			$condition[] = '( item_id = 154 or item_id = 155 or item_id = 156)';//bug154、新需求155、事故156
			$condition[] = '( category2_id = 378 or category2_id = 379 or category2_id = 198)';
		}

		//0全部、1超期、2今日到期、3进行中、4已完成
		switch ($s) {
			case 0:
			;
			break;
			case 1:
// 				$condition[] = " status = 1 and e_time_ymd < '$curdate' and e_time_ymd > '0'";//超期（status=1&&e_time<当前时间）
// 				$condition[] = ' status = 1 and e_time <'.time();//超期（status=1&&e_time<当前时间）
				$condition[] = " status = 1 and e_time < {$curtime} and e_time > '0'";
			break;
			case 2:
				$condition[] = " status = 1 and e_time_ymd = '$curdate'";//今日到期（statu=1&&e_time_ymd=当前到期）
			break;
			case 3:
				$condition[] = ' status = 1';//进行中（status=1）
			break;
			case 4:
				$condition[] = ' (status = 2 or status = 4)';//已完成（status=4 or status=2）
			break;

			default:
				;
			break;
		}

		//0全部、1今天、2近三天、3近一周、4近一个月
		switch ($t) {
			case 0:
			;
			break;
			case 1:
				$condition['s_time_ymd'] = $curdate;
			break;
			case 2:
				$ctime = date('Y-m-d', strtotime('-3 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 3:
				$ctime = date('Y-m-d', strtotime('-7 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;
			case 4:
				$ctime = date('Y-m-d', strtotime('-30 day'));
				$condition[] = "s_time_ymd > '$ctime' and s_time_ymd <= '$curdate'";
			break;

			default:
				;
			break;
		}

		//0全部、1紧急 2非常重要 3重要 4一般
		if($z) {
			$condition['attr'] = $z;
		}
		//排序4、5提交时间，2、3优先级，0、1截至时间
		$orderStr = '';
		switch ($o) {
			case 4:
				$orderStr = 'order by order_id';
			break;
			case 5:
				$orderStr = 'order by order_id desc';
			break;
			case 2:
				$orderStr = 'order by attr desc';
			break;
			case 3:
				$orderStr = 'order by attr';
			break;
			case 0:
				$orderStr = 'order by e_time_ymd';
			break;
			case 1:
				$orderStr = 'order by e_time_ymd desc';
			break;


			default:
				;
			break;
		}
		$orderObj = $m_order->select($condition, '*', $orderStr);
		$order = $orderObj->items;
		$m_orderComment = new model_cp_ordercomment();
// 		$m_item = new model_cp_optionitem();
		$m_category = new zbj_model_mk_recordcategory();
		if (count($order)) {
			foreach ($order as $k=>$v) {
				$order[$k]['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order[$k]['cont']));//自动识别URL
				$order[$k]['comment'] = $m_orderComment->select('order_id = '.$v['order_id'].' or parent_comment_id ='.$v['order_id'], 'comment_id, user_id, name, action, cont, createtime, sucesslevel', null, 'order by comment_id desc')->items;
				$order[$k]['commentcount'] = count($order[$k]['comment']);
				$order[$k]['sucesslevelcount'] = $m_orderComment->selectOne('order_id = '.$v['order_id'].' and sucesslevel = 1', 'count(1) as levelcount');
				$order[$k]['category1_name'] = '';
				$order[$k]['category2_name'] = '';
				$order[$k]['typename'] = lib_BaseUtils::type2id($v['type'], 'chsname');
				$order[$k]['options'] = unserialize($order[$k]['options']);
				$order[$k]['files'] = $order[$k]['options']['files'];
				if ($v['item_id']) {
					$category2Array = $m_category->selectOne(array('category_id'=>$v['category2_id']), 'category_name');
					if (count($category2Array)) {
						$order[$k]['category1_name'] = $category2Array['category_name'];
					}
				}
				if ($v['item_pid']) {
					$category1Array = $m_category->selectOne(array('category_id'=>$v['category1_id']), 'category_name');
					if (count($category1Array)) {
						$order[$k]['category2_name'] = $category1Array['category_name'];
					}
				}
			}
		}
		$param['uid'] = $this->_userid;
		$param['order'] = $order;
		$h_endurl = $_SERVER ['QUERY_STRING'] ? '?' . $_SERVER ['QUERY_STRING'] : '';
		$param ['h_endurl'] = $h_endurl;
		$param ['pagebar'] = $this->PageBar($orderObj->totalSize, $limit, $curpage, $inPath, 'style4', $h_endurl);
		$param['totalSize'] = $orderObj->totalSize;
		return $this->render('misc/order/troublelist.html', $param);
	}
	/**
	 * 根据mk_record_category主键返回该条记录的相关信息，已json返回，在“产品需求管理”页面中有调用实例
	 */
	public function pageGetRecordCategoryById() {
		$category_id = zbj_lib_BaseUtils::getStr($_GET['cid'], 'int', 0);
		if (!$category_id) return false;
		$m_recordCategory = new zbj_model_mk_recordcategory();
		return json_encode($m_recordCategory->selectOne(array('category_id'=>$category_id)));
	}
	/**
	 * 工单详情
	 */
	public function pageOrderDetail($inPath) {
		$param = array();
		$urlParam = $this->getUrlParams($inPath);
		$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		if(!$order_id) {
			return $this->printmsg('工单编号错误！');
		}

// 		lib_BaseUtils::apiInit();
// 		$s_message=new com\zhubajie\boss\interfaces\messageServiceClient(null);
// 		lib_BaseUtils::apigetclient($s_message);
// 		$s_message->markRead(messageProduct::CPORDER, $order_id, $this->_userid);


		$param['is_label'] = 0;//是否添加过关注
		$s_order = new service_order($order_id);
		if ($s_order->isLabel($this->_userid)) {
			$param['is_label'] = 1;
		}

		$m_order = new model_cp_order();
		$order = $m_order->selectOne(array('order_id'=>$order_id), '*');
		//工单超期
		$param['s']=0;
		if ($order['status']==1&&$order['e_time']<time()&&$order['e_time']>0) {
			$param['s']=1;
		}
		if (!$order) return $this->printmsg('工单不存在！');
		//负责人组长可以操作工单
		$isOperate = 0;//是否有权限操作工单，0无权限，1有权限
		if ($order['to_uid']) {
			$m_cpuser = new zbj_model_cp_user();
			$cpuser = $m_cpuser->selectOne(array('user_id'=>$order['to_uid']), 'group_id');
			if ($cpuser && $this->_usergroupid == $cpuser['group_id']) {
				$isOperate = 1;
			}
		}
		$param['isOperate'] = $isOperate;

		$order['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($order['cont']));//自动识别URL
		$order['options'] = unserialize($order['options']);
		$order['files'] = $order['options']['files'];
		$typename = lib_BaseUtils::type2id($order['type'], 'chsname');
		if ($order['rid']) {
			switch ($order['type']) {
				case 1:
					$m_task = new zbj_model_mk_task();
					$task = $m_task->selectOne(array('task_id'=>$order['rid']), 'title');
					if (count($task)) {
						$order['tasktitle'] = $task['title'];
					}
					break;
				default:
					;
					break;
			}
		}
		$param['typename'] = $typename;
		$param['category1_name'] = '';
		$param['category2_name'] = '';
		if ($order['category1_id']) {
// 			$m_item = new model_cp_optionitem();
			$m_category = new zbj_model_mk_recordcategory();
			$category1Array = $m_category->selectOne(array('category_id'=>$order['category1_id']), 'category_name');
			$category2Array = $m_category->selectOne(array('category_id'=>$order['category2_id']), 'category_name');
			$param['category1_name'] = $category1Array['category_name'];
			$param['category2_name'] = $category2Array['category_name'];
		}
		if ($order['joinuserids']) {
			$uids = explode(',', $order['joinuserids']);
			$joinuser = array();
			for ($i = 0; $i < (count($uids)/2); $i++) {
				$joinuser[$i]['id'] = $uids[2*$i];
				$joinuser[$i]['name'] = $uids[2*$i+1];
			}
			$param['joinuser'] = $joinuser;
		}
		if ($order['supervisor']) {
			$uids = explode(',', $order['supervisor']);
			$supervisor = array();
			for ($i = 0; $i < (count($uids)/2); $i++) {
				$supervisor[$i]['id'] = $uids[2*$i];
				$supervisor[$i]['name'] = $uids[2*$i+1];
			}
			$param['supervisor'] = $supervisor;
		}
		$m_orderComment = new model_cp_ordercomment();
		$sucesslevelcount = $m_orderComment->selectOne('order_id = '.$order_id.' and sucesslevel = 1', 'count(1) as levelcount');
		$order['sucesslevelcount'] = $sucesslevelcount['levelcount'];
		$param['order'] = $order;
		if($param['order']['type']==lib_BaseUtils::type2id('record')){
			$s_record=new zbj_service_record($param['order']['rid']);
			$param['ordercat'] = $s_record->getCategory($s_record->get('category_id'));
			$param['record_tasks'] = $s_record->getMany('record_task');
		}
		/**
		 * 获取工单评论
		 * 评论人user_id name、评论内容cont、操作时间createtime
		 */
		$orderComment = $m_orderComment->select(array('order_id'=>$order_id), '*', null, 'order by createtime desc')->items;
		if (count($orderComment)){
			foreach ($orderComment as $k=>$v) {
				$orderComment[$k]['options'] = unserialize($orderComment[$k]['options']);
				$orderComment[$k]['files'] = $orderComment[$k]['options']['files'];
			}
		}
		$param['orderComment'] = $orderComment;
		$param['uid'] = $this->_userid;
		return $this->render('misc/order/detail.html', $param);
	}
	/**
	 * 发起工单
	 */
	public function pageOrderAdd($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$rid = zbj_lib_BaseUtils::getStr($urlParam['rid'], 'int');
		$pr = (float)$urlParam['pr'];
		$pa = (float)$urlParam['pa'];
		$param['rid'] = $rid;
		$param['type'] = $urlParam['type'] ? (int) $urlParam['type'] : 1;
		$param['to_name'] = zbj_lib_BaseUtils::getStr($urlParam['toname']);
		$param['to_uid'] = zbj_lib_BaseUtils::getStr($urlParam['touid'], 'int');
		$m_cpuser = new zbj_model_cp_user();
		if($param['to_uid']) {
			$cpuserLeave = $m_cpuser->selectOne(array('user_id'=>$param['to_uid']), 'isleave');
			if ($cpuserLeave['isleave']) {
				$param['to_name'] .= "（离职）";
			}
		}
		switch ($param['type']){
			case 1://任务
				//工单获取一级分类
// 				$cpoption = new service_cpoption(9);
// 				$param['option_pitem'] = $cpoption->getItems();
				;
				break;
			case 6://用户
				if(!$param['to_uid']){
					$param['to_uid']=  $this->_userid;
				}
				if(!$param['to_name']){
					$param['to_name']=  $this->_nickname;
				}
				//工单获取一级分类
// 				$cpoption = new service_cpoption(9);
// 				$param['option_pitem'] = $cpoption->getItems();
				break;
		}
		//获取工单一级分类
		$s_record = new service_record();
		$categoryArray = $s_record->getCategories(0, 1);
		$param['categoryArray'] = $categoryArray;
		$param['tomorrow'] = date('Y-m-d', strtotime('+1 day'));
		if (count($_POST)) {
			$s_order = new service_order();
			$f_uid = zbj_lib_BaseUtils::getStr($this->_userid, 'int');
			if (!$f_uid) {
				return $this->printmsg ( "发起人用户id不合法", 0);
			}
			//$cont = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($_POST['cont']));//自动识别URL
			$cont = zbj_lib_BaseUtils::getStr($_POST['cont']);
			if(get_magic_quotes_gpc ()){
				$files = explode('-,', stripslashes($_POST['files']) );
			}else{
				$files = explode('-,', $_POST['files']);
			}
			$options = array();
			//个人主页显示需要，添加冗余信息 2014-12-18 yuanzhuang
			switch (zbj_lib_BaseUtils::getStr($_POST['type'])) {
				case 1: //任务
					$s_task = new zbj_service_task(zbj_lib_BaseUtils::getStr($_POST['rid']));
					$s_task = $s_task->init();
					$options['task_title'] = $s_task->get('title');
					break;
				case 6:
					$s_user = new zbj_service_user(zbj_lib_BaseUtils::getStr($_POST['rid']));
					$options['brandname'] = $s_user->get('brandname');
					break;
				default:
					break;
			}
			
			if (is_array($files)){
				foreach ($files as $k=>$v) {
					if($v && strlen($v)){
						$options['files'][] = unserialize($v);
					}
				}
			}
			$options = serialize($options);
			$type = $_POST['type']?(int) $_POST['type']:1;
			$rid = zbj_lib_BaseUtils::getStr($_POST['rid'], 'int', 0);
			$to_uid = zbj_lib_BaseUtils::getStr($_POST['to_uid'], 'int', 0);
			//$prize = zbj_lib_BaseUtils::getStr($_POST['prize']);
			$joinuserids = zbj_lib_BaseUtils::getStr($_POST['joinuserids']);
			if (!is_array($joinuserids)){
			     $joinuserids = trim($joinuserids,',');
			}
			$supervisor = zbj_lib_BaseUtils::getStr($_POST['supervisor']);
			//var_dump($supervisor);exit;
		    if (!is_array($supervisor)){
			         $supervisor = trim($supervisor,',');
			}
			$endydmtime = zbj_lib_BaseUtils::getStr($_POST['endydmtime']);
			$endydmhour = zbj_lib_BaseUtils::getStr($_POST['endydmhour']);
			$category1_id = zbj_lib_BaseUtils::getStr($_POST['category1_id'], 'int', 0);
			$category2_id = zbj_lib_BaseUtils::getStr($_POST['category2_id'], 'int', 0);
			$category_id = zbj_lib_BaseUtils::getStr($_POST['category_id'], 'int', 0);
			$addtype = zbj_lib_BaseUtils::getStr($_POST['addtype']);
			$attr = (int)$_POST['attr'] ? zbj_lib_BaseUtils::getStr($_POST['attr'], 'int', 4):4;
			$isremark = $_POST['isremark'] ? (int) $_POST['isremark'] : 0;
			if (!$rid && !$cont) {
				return $this->printmsg ( "工单内容不能为空！", 0, 'cont' );
			}
			if ($rid){
				//交易最终页工单内容和类型不能同时为空
				if (!$cont && !$category1_id) {
					return $this->printmsg ( "工单内容和工单类型不能同时为空！", 0, '' );
				}
			}
			if ($addtype == 'trouble' || $category1_id == 197) {
				if(!$category2_id) {
					return $this->printmsg ( "工单类型不能为空！", 0, 'category2_id' );
				}
				if(!$to_uid) {
					return $this->printmsg ( "产品需求管理负责人不能为空！", 0, 'to_uid' );
				}
			}

			//服务最终页创建工单
			if (10 == $type) {
				if (! $cont) return $this->printmsg ( "工单内容不能为空！", 0, 'cont' );
				if (! $to_uid) return $this->printmsg ( "负责人不能为空！", 0, 'to_uid' );
			}

			if ($endydmtime && $endydmhour) {
				$endydmtime = "$endydmtime $endydmhour:00";
				if (strtotime($endydmtime) < $this->_time) {
					return $this->printmsg("工单截止时间不能小与当前时间",0,'endydmtime');
				}
			}
			if ($s_order->create($f_uid, $cont, $options, $type, $rid, $subject = '', $to_uid, $prize, $joinuserids, $issecret = 0, $isallot = 0, $endydmtime, $attr, $star = 0, $category1_id, $category2_id,$category_id, $supervisor)){
				if (($category2_id == 288) && $type == 1) {
					$m_taskopis = new zbj_model_mk_taskopis();
					$m_taskopis->update(array('task_id'=>$rid), 'is_applytk=1');
				}
				switch ($type) {
					case 1://任务
						$remarkType = 'task';
						break;
					case 6://用户
						$remarkType = 'user';
						break;
				}
				$order_id = $s_order->getLastId();

				$s_orderById = new service_order($order_id);
				$s_orderById->addcomment('发起了工单', '',$this->_userid);
				if ($isremark == 1 && $cont) {
					$sRemark=new service_log();
					$sRemark->addRemark($this->_userid, $rid, $cont."[工单：{$order_id}]", '', $remarkType);
				}
				if ($this->_userid != $to_uid) {
					if ($addtype == 'trouble' ) {
						//产品需求管理的工单 并且短信接收人不在线时，给负责人发短息

						$cpuser = $m_cpuser->selectOne(array('user_id'=>$to_uid), 'bLastOnlineTime, mobi');
						if ((time()-$cpuser['bLastOnlineTime']) > 60*30 && $cpuser['mobi']) {
							$sdb=sdb::getDbEngine('pdo_new_mysql');
							$msg_cont = $this->_nickname.'发起一个新工单（'.$order_id.'）给你,请在一个工作日内回复处理时间。【猪八戒BOSS】';
							$msg = array (
									'phone' => $cpuser['mobi'],
									'msg' => $msg_cont,
									'uid' => $to_uid,
									'stime' => date('y-m-d h:i:s',time()),
							);
							$sdb->insert('bc_Task_Sms_bm',$msg , false, false, array(), array('dbinfo' => 'sendmsg', 'type' => 'main'));
						}
					}
				}

				//由于之前服务记录代码里很多地方使用了order_user_id，更改起来很麻烦，所以每次在服务最终页创建工单的时间都去更新下order_user_id
				if (10 == $type) {
					$s_record = new zbj_service_record($rid);
					$s_record->set('order_user_id', $to_uid);
					$s_record->save();
				}


				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else{
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}
		if ($pr) {
			$param['item_pid'] = 18;
			$param['item_id'] = 49;
			switch ($pr) {
				case 10:
					$param['attr'] = 4;
					break;
				case 50:
					$param['attr'] = 3;
					break;
				case 90:
					$param['attr'] = 2;
					break;
			}
			$param['pr'] = $pr;
		}elseif ($pa) {
			$param['item_pid'] = 18;
			$param['item_id'] = 49;
			switch ($pa) {
				case 10:
					$param['attr'] = 4;
					break;
				case 50:
					$param['attr'] = 3;
					break;
				case 90:
					$param['attr'] = 2;
					break;
			}
			$param['pa'] = $pa;
		} else {
			$param['item_pid'] = 0;
			$param['item_id'] = 0;
		}
		return $this->render('misc/order/add.dialog.html', $param);
	}
	/**
	 * 工单评论添加
	 */
	public function pageOrderCommentAdd($inPath) {
		if (count($_POST)) {
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0 );
			}
			$action = zbj_lib_BaseUtils::getStr($_POST['action']);
			$cont = '';
			if ($_POST['cont']) {
				//$cont = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($_POST['cont']));//自动识别URL
				$cont = zbj_lib_BaseUtils::getStr($_POST['cont']);
			}
			$s_order = new service_order($order_id);
			if (!$action) {
				return $this->printmsg ( "操作不能为空！", 0 );
			}
			$user_id = zbj_lib_BaseUtils::getStr($this->_userid, 'int', 0);
			if (!$user_id) {
				return $this->printmsg ( "您还没有登录，或登录会话已失效，请重新登录！", 0 );
			}
			$parent_id = zbj_lib_BaseUtils::getStr($_POST['parent_id'], 'int', 0);
			if(get_magic_quotes_gpc ()){
				$files = explode('-,', stripslashes($_POST['files']) );
			}else{
				$files = explode('-,', $_POST['files']);
			}
			$options = array();
			if (is_array($files)){
				foreach ($files as $k=>$v) {
					if($v && strlen($v)){
						$options['files'][] = unserialize($v);
					}
				}
			}
			$options = serialize($options);
			if ($s_order->addcomment($action,$cont, $user_id, $parent_id, $force = 0, $options)) {
// 				if ($this->_userid != $s_order->get('f_uid')) {
// 					//添加消息提醒
// 					if ($parent_id) {
// 						//当$parent_id存在，则上一级回复的user_id=$to_uid,name=$to_name
// 						$m_comment = new model_cp_ordercomment();
// 						$comment = $m_comment->selectOne(array('comment_id'=>$parent_id));
// 						$to_uid = $comment['user_id'];
// 						$to_name = $comment['name'];
// 					}else{
// 						$to_uid = $s_order->get('f_uid');
// 						$to_name = $s_order->get('f_name');
// 					}
// 					$s_msg = new service_msg();
// 					$s_msg->add($to_uid, $to_name, $this->_userid, $this->_nickname, $this->_nickname.$action.'了工单', $s_order->get('cont'), 1, $order_id, $options = '');
// 				}
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else{
				return $this->printmsg('操作失败！'.$s_order->getError(), 2, null, $_SERVER ['HTTP_REFERER']);
			}
		}
	}
	/**
	 * 设置评论中标
	 */
	public function pageOrderCommentSetBid($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		if (!$order_id) {
			return $this->printmsg ( "工单编号不合法！", 0 );
		}
		$action_user_id = (int)$this->_userid;
		if (!$action_user_id) {
			return $this->printmsg ( "您还没有登录，或登录会话已失效，请重新登录！", 0 );
		}
		$comment_id = zbj_lib_BaseUtils::getStr($urlParam['cid'], 'int');
		if (!$comment_id) {
			return $this->printmsg ( "评论编号不合法！", 0 );
		}
		$s_order = new service_order($order_id);
		if ($s_order->setCommentAsSucess($comment_id, 1,$action_user_id)) {
			return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
		}else {
			return $this->printmsg('操作失败！'.$s_order->getError());
		}
	}
	/**
	 * 编辑工单
	 */
	public function pageOrderEdit($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		$m_order = new model_cp_order();
		$order = $m_order->selectOne(array('order_id'=>$order_id),'*');
		$param = array();
		$order['options'] = unserialize($order['options']);
		$param['files'] = $order['options']['files'];
		$param['ac'] = zbj_lib_BaseUtils::getStr($urlParam['ac']);
		if ($param['ac'] != 'edittime' || $param['ac'] != 'editattr') {
			//工单获取一级分类
			$option_pitem = zbj_lib_BaseUtils::apicall('misc', 'getOptionItems', array('option_id'=>9));
			if($option_pitem){
				$param['option_pitem'] = $option_pitem['data'];
			}else{
				echo "接口错误";
			}
		}

		if (count($_POST)) {
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$prize = zbj_lib_BaseUtils::getStr($_POST['prize']);
			$endydmtime = zbj_lib_BaseUtils::getStr($_POST['endydmtime']);
			$endydmhour = zbj_lib_BaseUtils::getStr($_POST['endydmhour']);
			$cont = zbj_lib_BaseUtils::getStr($_POST['cont']);
			$item_pid = zbj_lib_BaseUtils::getStr($_POST['item_pid'], 'int', 0);
			$item_id = zbj_lib_BaseUtils::getStr($_POST['item_id'], 'int', 0);
			$attr = (int)$_POST['attr'] ? zbj_lib_BaseUtils::getStr($_POST['attr'], 'int', 4):4;
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0);
			}
			$s_order = new service_order($order_id);
			$data = array();
			$ac = zbj_lib_BaseUtils::getStr($_POST['ac']);
			if ($ac == 'edittime') {
				//etime_status =1 及时响应：当天17点前发的当天18点前响应或17点后发的次日18点前响应;星期五则判断周一时间，etime_status = 2超期响应；etime_status = 0未响应
				if ($this->_userid == $s_order->get('to_uid') && ($s_order->get('item_pid') == 153) && $s_order->get('end_status') == 0){
					$addTimeArray = getdate($s_order->get('add_time'));
					$curTime = time();
					$data['answer_time'] = $curTime - $s_order->get('add_time');
					$setEtimeArray = getdate($curTime);
// 					$data['set_etime'] = $curTime;
// 					$data['set_eymd'] = date('Y-m-d');
					if ($addTimeArray['hours'] <= 17) {
						if (date('Y-m-d', $s_order->get('add_time')) == date('Y-m-d', $curTime)) {
							if ($setEtimeArray['hours'] <= 18) {
								$data['etime_status'] = 1;
							}else{
								$data['etime_status'] = 2;
							}
						}else{
							$data['etime_status'] = 2;
						}
					}else{
						if ($addTimeArray['wday'] == 5) {
							if(date('Y-m-d', strtotime('+3 day', $s_order->get('add_time'))) == date('Y-m-d', $curTime) && $setEtimeArray['hours'] <= 18){
								$data['etime_status'] = 1;
							}else{
								$data['etime_status'] = 2;
							}
						}else if (date('Y-m-d', $s_order->get('add_time')) == date('Y-m-d', $curTime)) {
							$data['etime_status'] = 1;
						}
						else if (date('Y-m-d', strtotime('+1 day', $s_order->get('add_time'))) == date('Y-m-d', $curTime) && $setEtimeArray['hours'] <= 18){
							$data['etime_status'] = 1;
						}else{
							$data['etime_status'] = 2;
						}
					}
				}
				if ($endydmtime && $endydmhour) {
					$endydmtime = "$endydmtime $endydmhour:00";
				}
				if ($endydmtime) {
					$endtime = strtotime ( $endydmtime );
					if ($endydmtime) {
						$data ['e_time'] = $endtime;
						$data ['e_time_ymd'] = date ( 'Y-m-d', $endtime );
					}
					$oldendymdtime = '';
					if ($s_order->get('e_time')){
						$oldendymdtime = date('Y-m-d G:i', $s_order->get('e_time'));
					}
					$content = '将截止时间'.$oldendymdtime.'改为'.$endydmtime;
				}
			}else if($ac == 'editattr') {
				$data['attr'] = $attr;
				$oldattr = $s_order->get('attr');
				if ($this->_userid == $s_order->get('to_uid') && ($s_order->get('item_pid') == 153)){
					$data['attr_status'] = 1;
				}
				if ($oldattr == 1) {
					$oldattrStr = '紧急';
				}
				if ($oldattr == 2) {
					$oldattrStr = '非常重要';
				}
				if ($oldattr == 3) {
					$oldattrStr = '重要';
				}
				if ($oldattr == 4) {
					$oldattrStr = '一般';
				}
				if ($attr == 1) {
					$attrStr = '紧急';
				}
				if ($attr == 2) {
					$attrStr = '非常重要';
				}
				if ($attr == 3) {
					$attrStr = '重要';
				}
				if ($attr == 4) {
					$attrStr = '一般';
				}
				$content = '将重要性“'.$oldattrStr.'”改为“'.$attrStr.'”';
			}else{
				$content = '编辑了工单';
				$data['prize'] = $prize;
				$data['cont'] = $cont;
				$data['item_pid'] = $item_pid;
				$data['item_id'] = $item_id;


				$options = $s_order->get('options');
				$options = unserialize($options);
				//添加附件
				$addfiles = explode('-,', $_POST['files']);
				if (is_array($addfiles)){
					foreach ($addfiles as $k=>$v) {
						if($v && strlen($v)){
							$options['files'][] = unserialize($v);
						}
					}
				}
				//删除附件
				$delFiles = trim($_POST['delfiles'], ',') ;
				if (!empty($delFiles)) {
					$adel = explode(',', $delFiles);
					foreach ($options['files'] as $k=>$v) {
						if(in_array($v['ofilename'], $adel)){
							unset($options['files'][$k]);
						}
					}
				}
				$data['options'] = serialize($options);
			}
			if ($m_order->update(array('order_id'=>$order_id), $data) !== false) {
				$s_order->addcomment($content, '',$this->_userid);
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else{
				return $this->printmsg('操作失败！',2, null, $_SERVER ['HTTP_REFERER']);
			}
		}
		$param['order'] = $order;
		return $this->render('misc/order/edit.dialog.html', $param);
	}
	/**
	 * 转交工单
	 */
	public function pageOrderChangeMaster ($inPath){
		$urlParam = $this->getUrlParams($inPath);
		$param = array();
		$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		$joinCheckShow = 1;//是否显示多选框，1显示，0不显示
		if ($order_id) {
			$s_order = new service_order($order_id);
			$f_uid = $s_order->get('f_uid');
			if ($this->_userid == $f_uid) {
				$joinCheckShow = 0;
			}
		}
		$param['joinCheckShow'] = $joinCheckShow;
		$param['order_id'] = $order_id;
		$param['cont'] = zbj_lib_BaseUtils::getStr($urlParam['cont']);
		if (count($_POST)) {
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$cont = zbj_lib_BaseUtils::getStr($_POST['cont']);
			$user_id = zbj_lib_BaseUtils::getStr($_POST['to_uid'], 'int');
			$action_user_id = (int)$this->_userid;
			$joinCheck = zbj_lib_BaseUtils::getStr($_POST['joinCheck'], 'int');
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0);
			}
			if (!$user_id) {
				return $this->printmsg ( "请指定负责人！", 0);
			}
			if (!$action_user_id) {
				return $this->printmsg ( "您还没有登录，或登录会话已失效，请重新登录！", 0 );
			}
			$s_order = new service_order($order_id);

			$isOperate = 0;//是否有权限操作工单，0无权限，1有权限
			if ($s_order->get('to_uid')) {
				$m_cpuser = new zbj_model_cp_user();
				$cpuser = $m_cpuser->selectOne(array('user_id'=>$s_order->get('to_uid')), 'group_id');
				if ($cpuser && $this->_usergroupid == $cpuser['group_id']) {
					$isOperate = 1;
				}
			}
			if ($action_user_id != $s_order->get('to_uid') && $action_user_id != $s_order->get('f_uid') && !$isOperate){
				return $this->printmsg ( "您不是发起人或者负责人或小组组长，没有转交权限！", 0 );
			}
			if ($s_order->changemaster($user_id, $action_user_id, $cont,$joinCheck, $isOperate)){
				//产品需求管理的工单并且短信接收人不在线，转交工单给负责人发送短信
				if ($s_order->get('item_pid') == 153) {
					$m_cpuser = new zbj_model_cp_user();
					$cpuser = $m_cpuser->selectOne(array('user_id'=>$user_id), 'bLastOnlineTime, mobi');
					if ((time()-$cpuser['bLastOnlineTime']) > 60*30 && $cpuser['mobi']) {
						$sdb=sdb::getDbEngine('pdo_new_mysql');
						$msg_cont = $this->_nickname.'转给一个工单（'.$order_id.'）给你，请在一个工作日内回复处理时间。【猪八戒BOSS】';
						$msg = array (
								'phone' => $cpuser['mobi'],
								'msg' => $msg_cont,
								'uid' => $user_id,
								'stime' => date('y-m-d h:i:s',time()),
						);
						$sdb->insert('bc_Task_Sms_bm',$msg , false, false, array(), array('dbinfo' => 'sendmsg', 'type' => 'main'));
					}
				}
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else{
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}
		return $this->render('misc/order/changemaster.dialog.html', $param);
	}
	/**
	 * 编辑工单参与人
	 */
	public function pageOrderEditJoiner($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$param = array();
		$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		$param['order_id'] = $order_id;
		$m_order = new zbj_model_cp_order();
		$order = $m_order->selectOne(array('order_id'=>$order_id), 'joinuserids');
		$ids = '';
		$names = '';
		if ($order['joinuserids']) {
			$uids = explode(',', $order['joinuserids']);
			for ($i = 0; $i < (count($uids)/2); $i++) {
				$ids .=  $uids[2*$i].',';
				$names .= $uids[2*$i+1].' ';
			}
			$param['ids'] = $ids;
			$param['names'] = $names;
		}
		if (count($_POST)) {
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$joinuserids = zbj_lib_BaseUtils::getStr($_POST['joinuserids']);
			$joinuserids = implode(',',$joinuserids);
			//$joinuserids = trim($joinuserids,',');
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0);
			}
			$s_order = new service_order($order_id);
			if ($s_order->editJoinuserids($joinuserids, $this->_userid, $this->_nickname)) {
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else {
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}
		return $this->render('misc/order/editjoiner.dialog.html', $param);
	}
	/**
	 * 编辑工单监督人
	 */
	public function pageOrderEditSupervisor($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$param = array();
		$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		$param['order_id'] = $order_id;
		$m_order = new zbj_model_cp_order();
		$order = $m_order->selectOne(array('order_id'=>$order_id), 'supervisor');
		$ids = '';
		$names = '';
		if ($order['supervisor']) {
			$uids = explode(',', $order['supervisor']);
			for ($i = 0; $i < (count($uids)/2); $i++) {
				$ids .=  $uids[2*$i].',';
				$names .= $uids[2*$i+1].' ';
			}
			$param['ids'] = $ids;
			$param['names'] = $names;
		}
		if (count($_POST)) {
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$supervisorids = zbj_lib_BaseUtils::getStr($_POST['supervisor']);
			$supervisorids = implode(',',$supervisorids);
			//$supervisorids = trim($supervisorids,',');
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0);
			}
			$s_order = new service_order($order_id);
			if ($s_order->editSupervisorids($supervisorids, $this->_userid, $this->_nickname)) {
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else {
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}
		return $this->render('misc/order/editsupervisor.dialog.html', $param);
	}
	/**
	 *
	 * 给处理人进行评分
	 */
	public function pageOrderScore($inPath) {
		$urlParam = $this->getUrlParams($inPath);
		$param = array();
		if ($_POST['order_id']) {
			$order_id = $_POST['order_id'];
		}else{
			$order_id = zbj_lib_BaseUtils::getStr($urlParam['oid'], 'int');
		}
		$param['order_id'] = $order_id;
		$m_order = new zbj_model_cp_order();
		$order = $m_order->selectOne(array('order_id'=>$order_id), 'f_uid,to_uid,status,attitude_score,eff_score,fix_score,result_score,estimate');
		if ($order['f_uid'] == $order['to_uid']) {
			return '自己不能评价自己给自己建的工单';
		}
		if ($this->_userid != $order['f_uid']) {
			if (count($_POST)) {
				return $this->printmsg ( "只有工单发起人才可以进行评价！", 0);
			}else{
				return  "只有工单发起人才可以进行评价！";
			}
		}
		$param['order'] = $order;
		if (count($_POST)) {
			if (!isset($_POST['attitude_score']) || !isset($_POST['eff_score']) || !isset($_POST['fix_score'])) {
				return $this->printmsg('评分项必填，请将评分填写完整！', 0);
			}
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$result_score = zbj_lib_BaseUtils::getStr($_POST['result_score'], 'int');
			$eff_score = zbj_lib_BaseUtils::getStr($_POST['eff_score'], 'int');
			$fix_score = zbj_lib_BaseUtils::getStr($_POST['fix_score'], 'int');
			$attitude_score = zbj_lib_BaseUtils::getStr($_POST['attitude_score'], 'int');
			$estimate = zbj_lib_BaseUtils::getStr($_POST['estimate']);
			$s_order = new service_order($order_id);
			$curtime = time();
			$e_time = $s_order->get('e_time');
			//超期的工单处理速度最高8分
			if ($e_time && $e_time < $curtime && $eff_score>8) {
				$eff_score = 8;
			}
			if ($s_order->updateScore($result_score, $estimate,$this->_userid, $this->_nickname, $eff_score, $fix_score, $attitude_score)) {
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else {
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}
		return $this->render('misc/order/score.dialog.html', $param);
	}
	/**
	 * 结束工单
	 */
	public function pageOrderEnd($inPath) {
		if(count($_POST)) {
			$action_user_id = (int)$this->_userid;
			$action_user_name = $this->_nickname;
			if (!$action_user_id) {
				return $this->printmsg ( "您还没有登录，或登录会话已失效，请重新登录！", 0 );
			}
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$cont = zbj_lib_BaseUtils::getStr($_POST['cont']);
			$status = zbj_lib_BaseUtils::getStr($_POST['status'], 'int');
			$end_reason = zbj_lib_BaseUtils::getStr($_POST['end_reason'], 'int');
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0 );
			}
			if (!$status) {
				return $this->printmsg ( "请选择结束方式！", 0, 'status' );
			}
			if ($status == 4 && !$cont) {
				return $this->printmsg ( "完成工单必须填写回复内容！", 0 );
			}
			$s_order = new service_order($order_id);
			//负责人组长可以操作工单
			$isOperate = 0;//是否有权限操作工单，0无权限，1有权限
			if (strstr($s_order->get('supervisor'), "{$action_user_id}")) {
				$isOperate = 1;
			}
			if ($s_order->get('to_uid')) {
				$m_cpuser = new zbj_model_cp_user();
				$cpuser = $m_cpuser->selectOne(array('user_id'=>$s_order->get('to_uid')), 'group_id');
				if ($cpuser && $this->_usergroupid == $cpuser['group_id']) {
					$isOperate = 1;
				}
			}
			if ($s_order->end($action_user_id, $cont, $status, $end_reason,$isOperate,$action_user_name)) {
				//产品需求管理的工单并且短信接收人不在线，负责人结束工单给发起人发送短信
				if ($s_order->get('category1_id') == 197 && $s_order->get('to_uid') == $this->_userid) {
					$cpuser = $m_cpuser->selectOne(array('user_id'=>$s_order->get('f_uid')), 'bLastOnlineTime, mobi');
					if ((time()-$cpuser['bLastOnlineTime']) > 60*30 && $cpuser['mobi']) {
						$sdb=sdb::getDbEngine('pdo_new_mysql');
						//完成
						if ($status == 4) {
							$msg_cont = '你发起的工单（'.$order_id.'），'.$this->_nickname.'已完成，请注意查看。【猪八戒BOSS】';
						}
						//中止
						else if ($status == 2) {
							$msg_cont = '你发起的工单（'.$order_id.'），'.$this->_nickname.'已中止，请注意查看。【猪八戒BOSS】';
						}
						$msg = array (
								'phone' => $cpuser['mobi'],
								'msg' => $msg_cont,
								'uid' => $s_order->get('f_uid'),
								'stime' => date('y-m-d h:i:s',time()),
						);
						$sdb->insert('bc_Task_Sms_bm',$msg , false, false, array(), array('dbinfo' => 'sendmsg', 'type' => 'main'));
					}
				}
				if ($status == 2 && $s_order->get('category1_id') == 197 && $s_order->get('to_uid') == $this->_userid && $s_order->get('etime_status') == 0){
					$addTimeArray = getdate($s_order->get('add_time'));
					$curTime = time();
					$data['answer_time'] = $curTime - $s_order->get('add_time');
					$setEtimeArray = getdate($curTime);
					// 					$data['set_etime'] = $curTime;
					// 					$data['set_eymd'] = date('Y-m-d');
					if ($addTimeArray['hours'] <= 17) {
						if (date('Y-m-d', $s_order->get('add_time')) == date('Y-m-d', $curTime)) {
							if ($setEtimeArray['hours'] <= 18) {
								$data['end_status'] = 1;
							}else{
								$data['end_status'] = 2;
							}
						}else{
							$data['end_status'] = 2;
						}
					}else{
						if ($addTimeArray['wday'] == 5) {
							if(date('Y-m-d', strtotime('+3 day', $s_order->get('add_time'))) == date('Y-m-d', $curTime) && $setEtimeArray['hours'] <= 18){
								$data['end_status'] = 1;
							}else{
								$data['end_status'] = 2;
							}
						}else if (date('Y-m-d', $s_order->get('add_time')) == date('Y-m-d', $curTime)) {
							$data['end_status'] = 1;
						}
						else if (date('Y-m-d', strtotime('+1 day', $s_order->get('add_time'))) == date('Y-m-d', $curTime) && $setEtimeArray['hours'] <= 18){
							$data['end_status'] = 1;
						}else{
							$data['end_status'] = 2;
						}
					}
					$s_order->set($data);
					$s_order->save();
				}
				//服务与工单解耦，服务必须手动结束
// 				if(lib_BaseUtils::type2id('record')==$s_order->get('type')){
// 					$s_record=new zbj_service_record($s_order->get('rid'));
// 					$s_record->end();
// 				}
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else {
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}else{
			$urlParam = $this->getUrlParams($inPath);
			$order_id = (int)$urlParam['oid'];
			$action_user_id = $this->_userid;
			$status = 4;
			if ($order_id){
				$s_order = new service_order($order_id);
				//负责人组长可以操作工单
				$isOperate = 0;//是否有权限操作工单，0无权限，1有权限
				if ($s_order->get('to_uid')) {
					$m_cpuser = new zbj_model_cp_user();
					$cpuser = $m_cpuser->selectOne(array('user_id'=>$s_order->get('to_uid')), 'group_id');
					if ($cpuser && $this->_usergroupid == $cpuser['group_id']) {
						$isOperate = 1;
					}
				}
				if ( $s_order->end($action_user_id, '', $status, $isOperate)){
					return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
				}else{
					return $this->printmsg('操作失败！'.$s_order->getError());
				}
			}
		}
	}
	/**
	 * 重启工单
	 */
	public function pageOrderRestart($inPath) {
		if(count($_POST)) {
			$action_user_id = (int)$this->_userid;
			if (!$action_user_id) {
				return $this->printmsg ( "您还没有登录，或登录会话已失效，请重新登录！", 0 );
			}
			$order_id = zbj_lib_BaseUtils::getStr($_POST['order_id'], 'int');
			$cont = zbj_lib_BaseUtils::getStr($_POST['cont']);
			if (!$order_id) {
				return $this->printmsg ( "工单编号不合法！", 0 );
			}

			$s_order = new service_order($order_id);
			$isOperate = 0;//是否有权限操作工单，0无权限，1有权限
			if (strstr($s_order->get('supervisor'), "{$action_user_id}")) {
				$isOperate = 1;
			}
			if ($s_order->get('to_uid')) {
				$m_cpuser = new zbj_model_cp_user();
				$cpuser = $m_cpuser->selectOne(array('user_id'=>$s_order->get('to_uid')), 'group_id');
				if ($cpuser && $this->_usergroupid == $cpuser['group_id']) {
					$isOperate = 1;
				}
			}
			if ($s_order->restart($action_user_id, $cont, $this->_nickname, $isOperate)) {
				return $this->printmsg('操作成功！', 2, null, $_SERVER ['HTTP_REFERER']);
			}else {
				return $this->printmsg('操作失败！'.$s_order->getError());
			}
		}
	}
/**
 *
 * 产品需求管理帮助文档
 */
	public function pageOrderHelpTrouble($inPath) {
		return $this->render('misc/order/help_trouble.html');
	}
	//手动更新 任务/用户/服务
	public function pageUpsolr($inPath) {
		if (count($_POST) <= 0) {
			return $this->render('misc/upsolr.html', array());
		}
		$path = $this->getUrlParams($inPath);
		$sid = zbj_lib_BaseUtils::getStr($_POST['sid'], 'string');
		$type = zbj_lib_BaseUtils::getStr($_POST['type'], 'int');
		if (empty($sid) || !$type) {
			return $this->printmsg('参数错误');
		}
		$aid = explode(',', $sid);
		$sfatid = '';
		foreach ($aid as $key=>$val) {
			$i = $j = 0;
			$id = intval($val);
			switch ($type) {
				case 1:
					$mdlTask = zbj_model_api::get('zbj_model_mk_task', $id);
					$mdlTask->upTaskSearch($id, 'U');
					$fl = $mdlTask->upTaskSearch($id, 'U_T');
					break;
				case 2:
					$sUser = new zbj_service_user($id);
					$fl = $sUser->addSearchQueue(1, 'U');
					break;
				case 3:
					$sUser = new zbj_service_user();
					$sUser->addSearchQueueSer($id, 'U');
					$fl = $sUser->addSearchQueueSer($id, 'U_T');
					break;
			}
			if ($fl === false) {
				$sfatid .= '['.$id.']';
			}
		}
		if (!empty($sfatid)) {
			$msg = '失败ID：'.$sfatid;
		}
		return $this->printmsg('更新成功!'.$msg);
	}
	/**
	 *
	 * 工单添加关注
	 */
	public function pageOrderAddLabel($inPath) {
		$order_id = zbj_lib_BaseUtils::getStr($_GET['id'], 'id', 0);
		if (!$order_id) {
			return $this->printmsg('工单编号不合法!', 2);
		}
		$s_order = new service_order($order_id);
		if ($s_order->isLabel($this->_userid)) {
			return $this->printmsg('该工单已添加关注，不需要重复添加!', 2);
		}
		if ($s_order->addLabel($this->_userid, $this->_nickname) === false) {
			return $this->printmsg('操作失败!', 2);
		}
		return $this->printmsg('操作成功!', 2, null, $_SERVER ['HTTP_REFERER']);
	}
	/**
	 *
	 * 工单删除关注
	 */
	public function pageOrderDelLabel ($inPath) {
		$order_id = zbj_lib_BaseUtils::getStr($_GET['id'], 'id', 0);
		if (!$order_id) {
			return $this->printmsg('工单编号不合法!', 2);
		}
		$s_order = new service_order($order_id);
		if (!$s_order->isLabel($this->_userid)) {
			return $this->printmsg('该工单关注已删除，不需要重复操作!', 2);
		}
		if ($s_order->delLabel($this->_userid) === false) {
			return $this->printmsg('操作失败!', 2);
		}else{
			return $this->printmsg('操作成功!', 2, null, $_SERVER ['HTTP_REFERER']);
		}
	}
	function pageipdenylogin($inPath){
		$aGet = $this->getUrlParams($inPath);
		$page = lib_BaseUtils::getStr($_GET['page'], 'int') ? lib_BaseUtils::getStr($_GET['page'], 'int') : 1;
		$type = lib_BaseUtils::getStr($_GET['type'], 'int') ? lib_BaseUtils::getStr($_GET['type'], 'int') : 1;
		$utype = lib_BaseUtils::getStr($_GET['utype'], 'int') ? lib_BaseUtils::getStr($_GET['utype'], 'int') : 1;
		$lockip = lib_BaseUtils::getStr($_GET['ip']);
		$lockip = str_replace(',', '.', $lockip);
		$startime = lib_BaseUtils::getStr($_GET['timea']);
		$endtime = lib_BaseUtils::getStr($_GET['timeb']);
		if ($type == 1) {//查询封锁生效的IP
			$condition = "(state=1 and unlocktime>" . time() . ")";
		} elseif ($type == 2) {//查询封锁过期的IP
			$condition = "(state=0 OR unlocktime<" . time() . ")";
		}
		$utype = lib_BaseUtils::getStr($aGet['utype'], 'int');
		$ucont = lib_BaseUtils::getStr($aGet['ucont']);
		if ($utype == 1 && !empty($ucont)) {//用账号ID查询的情况
			$condition.=" and user_id=$ucont";
		} elseif ($utype == 2 && !empty($ucont)) {//用用户昵称查询的情况
			$condition.=" and nickname=$ucont";
		}
		if (!empty($lockip)) {
			$condition .=" and bannedip like '%%" . $lockip . "%%'";
		}
		if (!empty($startime)) {
			$condition.=' and addtime >= \'' . $startime.'\'';
		}
		if (!empty($endtime)) {
			$condition.=' and addymd<=\'' . $endtime.'\'';
		}
		$oBangip = new model_mb_accountbannedip();
		$limit = 15;
		$aIps = $oBangip->getList($condition, $limit, $page);
		$this->tplvar['pagebar'] = $this->PageBar($aIps->totalSize, $limit = 15, $page, $inPath, 'style1');
		$this->tplvar['list'] = $aIps->items;
		$this->tplvar['getstr'] = $aGet;
		$this->tplvar['getstr']['type'] = $type;
		return $this->render('misc/ipdenylogin.html',$this->tplvar);
	}
	/*
	 * 解除对IP的封锁 @author 韦忠行
	 */
	public function pageipunlock($inPath) {
		$path = $this->getUrlParams ( $inPath );
		$oBangip = new model_mb_accountbannedip ();
		$bid = lib_BaseUtils::getStr ( $path ['bid'], 'int' );
		if($bid){
			$result = $oBangip->unlockAccount ( array (
					'bid' => $bid
			) );
		} else {
			if (count ( $_POST ['id'] )) {
				$result = $oBangip->unlockAccount ( array (
						'bid in (' . implode ( ',', $_POST ['id'] ) . ')'
				) );
			}
		}
		if ($result) {
			return $this->printmsg("解锁成功",1,null,'/misc/ipdenylogin');
		} else {
			return $this->printmsg("解锁失败");
		}
	}


	/**
	 * 绑定友情链接入口页面 @author zhuhuabing @time 2013-05-07
	 */
	public function pagetagFriendedit($inPath) {
		$path = $this->getUrlParams($inPath);
        $path['tid'] = zbj_lib_BaseUtils::getStr($path['tid'], 'int');
		if (empty($path['tid']) || !is_int($path['tid']) || $path['tid'] <= 0) {
			return $this->alert(array('state' => -1, 'msg' => "缺少必要的参数"));
		}
		$this->tplvar['tid'] = $path['tid'];
        $serviceTag = new zbj_service_tag($path['tid']);
		$this->tplvar['tag'] = $serviceTag->get();
        // 取出该标签下现有友情链接
        $mdlfriendsline = zbj_model_api::get('zbj_model_mk_friendsline');
        $this->tplvar['rsflineslist'] = $mdlfriendsline->select(array('tag_id'=>$path['tid']),'mk_friendsline.f_id,mk_friendsline.friendlinename,mk_friendsline.url')->items;
        return $this->render('misc/tag/friendsline.html',$this->tplvar);
	}
	/*
	 * 绑定友情链接 @author zhuhuabing @time 2013-05-07
	 */
	public function pagetagfriendlineadd($inPath) {
		$path = $this->getUrlParams($inPath);
		$path['tid'] = zbj_lib_BaseUtils::getStr($path['tid'], 'int');
		if (empty($path['tid']) || !is_int($path['tid']) || $path['tid'] <= 0) {
			return $this->alert(array('state' => -1, 'msg' => "缺少必要的参数"));
		}
        $_POST['fname']= zbj_lib_BaseUtils::getStr($_POST['fname'], 'string');
        $_POST['furl']= zbj_lib_BaseUtils::getStr($_POST['furl'], 'string');
		if (empty($_POST['fname'])) {
			return $this->printmsg('友情链接名称不能为空',0);
		}
		if (empty($_POST['furl'])) {
			return $this->printmsg('友情链接地址不能为空',0);
		}
        $mdlfriendsline = zbj_model_api::get('zbj_model_mk_friendsline');
        $rsfnameone = $mdlfriendsline->selectOne(array('tag_id'=>$path['tid'],'friendlinename'=>$_POST['fname']),'f_id');
        $rsfurlone = $mdlfriendsline->selectOne(array('tag_id'=>$path['tid'],'url'=>$_POST['furl']),'f_id');
        if(!empty($rsfnameone)){
            return $this->printmsg('友情链接已添加,不可重复添加',0);
        }
        if(!empty($rsfurlone)){
            return $this->printmsg('友情链接已添加，不可重复添加',0);
        }
        $mdlfriendsline->set('tag_id', $path['tid']);
        $mdlfriendsline->set('friendlinename', $_POST['fname']);
        $mdlfriendsline->set('url', $_POST['furl']);
        $mdlfriendsline->set('createtime', $this->_time);
        if ($mdlfriendsline->save() === false) {
            return $this->printmsg('添加失败'.$mdlfriendsline->getError(),0);
        }else {
			return $this->printmsg('添加成功', 1, '', '/misc-tagFriendedit-tid-'.$path['tid']);
		}
        return $this->render('misc/tag/friendsline.html',$this->tplvar);
	}

	/*
	 * 删除友情链接 @author zhuhuabing @time 2013-05-07
	 */
	public function pagetagfriendlinedel($inPath) {
        $mdlfriendsline = zbj_model_api::get('zbj_model_mk_friendsline');
		$path = $this->getUrlParams($inPath);
        $path['tid'] = zbj_lib_BaseUtils::getStr($path['tid'], 'int');
        $path['fid'] = zbj_lib_BaseUtils::getStr($path['fid'], 'int');
		if (empty($path['tid']) || !is_int($path['tid']) || $path['tid'] <= 0) {
			return $this->alert(array('state' => -1, 'msg' => "缺少必要的参数1"));
		}
		if (empty($path['fid']) || !is_int($path['fid']) || $path['fid'] <= 0) {
			return $this->alert(array('state' => -1, 'msg' => "缺少必要的参数2"));
		}
		if ($mdlfriendsline->delete(array('f_id'=>$path['fid'])) === false) {
			return $this->printmsg('删除失败'.$mdlfriendsline->getError(),0);
		} else {
			return $this->printmsg('删除成功', 1, '', '/misc-tagFriendedit-tid-'.$path['tid']);
		}
	}
	/*
	 * 添加或编辑话题
	 */
	public function pageTopicAdd($inPath) {
		return "功能下线";
		$urlparam = $this->getUrlParams($inPath);
		$topic_id = (int)$urlparam['id'];
		$param = array();
		$param['uid'] = $this->_userid;

		$m_topicCategory = new model_cp_topiccategory();
		$pCategory = $m_topicCategory->select(array('valid'=>1, 'pid'=>0), 'category_id, category_name')->items;
		$param['pCategory'] = $pCategory;

		if ($topic_id) {
			$m_topic = new model_cp_topic();
			$topic = $m_topic->selectOne(array('topic_id'=>$topic_id));
			$topic['options'] = unserialize($topic['options']);
			$topic['files'] = $topic['options']['files'];
			$param['topic'] = $topic;
		}else{
			$param['defaultDate'] = date("Y-m-d");
		}
		if (count($_POST)) {
			$topic_id = (int)$_POST['topic_id'];
			if ($topic_id) {
				$s_topic = new service_topic($topic_id);
			}else {
				$s_topic = new service_topic();
			}
			$title = zbj_lib_BaseUtils::getStr($_POST['title']);
			$cont = zbj_lib_BaseUtils::getStr($_POST['cont'],'html');
			$category1_id = zbj_lib_BaseUtils::getStr($_POST['pid']);
			$category2_id = zbj_lib_BaseUtils::getStr($_POST['category_id']);
			$add_uid = $this->_userid;
			$add_name = $this->_nickname;
			$add_gid = $this->_usergroupid;
			$iscomment = zbj_lib_BaseUtils::getStr($_POST['iscomment'], 'int', 0);
			$start_time = strtotime(($_POST['startydmtime'].' '.$_POST['startydmhour'].':00'));
			$end_time = strtotime(($_POST['endydmtime'].' '.$_POST['endydmhour'].':00'));
			//添加附件
			$addfiles = explode('-,', $_POST['files']);
			if (is_array($addfiles)){
				foreach ($addfiles as $k=>$v) {
					if($v && strlen($v)){
						$options['files'][] = unserialize($v);
					}
				}
			}
			//删除附件
			$delFiles = trim($_POST['delfiles'], ',') ;
			if (!empty($delFiles)) {
				$adel = explode(',', $delFiles);
				foreach ($options['files'] as $k=>$v) {
					if(in_array($v['ofilename'], $adel)){
						unset($options['files'][$k]);
					}
				}
			}
			if ($s_topic->create($title, $cont, $add_uid, $add_name, $add_gid, $iscomment, $start_time, $end_time, $options, $category1_id, $category2_id)) {
				return $this->printmsg('操作成功！', 2, null, '/misc/topicDetail-id-'.$s_topic->getLastId());
			}else{
				return $this->printmsg('操作失败！'.$s_topic->getError());
			}
		}
		return $this->render('misc/topic/add.html', $param);
	}

	/**
	 * 话题列表
	 */
	public function pageTopicList($inPath) {
		return "功能下线";
		$urlparam = $this->getUrlParams($inPath);
		$limit = 10;
		$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
		$pid = isset($_GET ['pid']) ? $_GET ['pid'] : 0;
		$param['pid'] = $pid;
		$cid = isset($_GET ['cid']) ? $_GET ['cid'] : 0;
		$param['cid'] = $cid;

		$m_topicCategory = new model_cp_topiccategory();
		$pCategory = $m_topicCategory->select(array('pid'=>0,'valid'=>1), 'category_id,category_name')->items;
		$param['pCategory'] = $pCategory;
		$cCategory = $m_topicCategory->select(array('pid'=>$pid,'valid'=>1), 'category_id,category_name, pid', null, 'order by category_id desc')->items;
		$param['cCategory'] = $cCategory;

		$m_topic = new model_cp_topic();
		$m_topic->setLimit($limit);
		$m_topic->setCount(true);
		$m_topic->setPage($curpage);
		if ($pid) {
			$con['category1_id'] = $pid;
		}
		if ($cid) {
			$con['category2_id'] = $cid;
		}
		$topicObj = $m_topic->select($con, '*', null, 'order by end_time desc');
		$param['topic'] = $topicObj->items;
		$param ['pagebar'] = $this->PageBar($topicObj->totalSize, $limit, $curpage, $inPath, 'style4');
		return $this->render('misc/topic/list.html', $param);
	}
	/**
	 * 话题详情页
	 */
	 public function pageTopicDetail($inPath) {
	 	return "功能下线";
	 	$urlparam = $this->getUrlParams($inPath);
	 	$topic_id = (int)$urlparam['id'];
	 	if (!$topic_id) {
	 		return $this->printmsg('该话题编号不合法');
	 	}
	 	$m_topic = new model_cp_topic();
	 	$topic = $m_topic->selectOne(array('topic_id'=>$topic_id));
	 	//$topic['cont'] = preg_replace('#(^|[\n ])([\w]+?://[\w]+[^ \"\n\r\t<]*)#ise', "'\\1[url=\\2]\\2[/url]'", zbj_lib_BaseUtils::shtmlspecialchars($topic['cont']));//自动识别URL
	 	$topic['options'] = unserialize($topic['options']);
	 	$topic['files'] = $topic['options']['files'];
	 	$param['uid'] = $this->_userid;
	 	$m_topicCategory = new model_cp_topiccategory();
	 	if ($topic['category1_id']) {
	 		$pCategory = $m_topicCategory->selectOne(array('category_id'=>$topic['category1_id']), 'category_name');
	 		if ($pCategory) $topic['category1_name'] = $pCategory['category_name'];
	 	}
	 	if ($topic['category2_id']) {
	 		$cCategory = $m_topicCategory->selectOne(array('category_id'=>$topic['category2_id']), 'category_name');
	 		if ($cCategory) $topic['category2_name'] = $cCategory['category_name'];
	 	}
	 	$param['topic'] = $topic;

	 	$m_comment = new model_cp_topiccomment();
	 	$giftTypeNum = $m_comment->select(array('topic_id'=>$topic_id), 'sum( case when gifttype = 1 then 1 else 0 end) gifttype1,
			sum( case when gifttype = 2 then 1 else 0 end) gifttype2,
			sum( case when gifttype = 3 then 1 else 0 end) gifttype3,
			sum( case when gifttype = 4 then 1 else 0 end) gifttype4,
			sum( case when gifttype = 5 then 1 else 0 end) gifttype5,
			sum( case when gifttype = 6 then 1 else 0 end) gifttype6,
			sum( case when gifttype = 7 then 1 else 0 end) gifttype7,
			sum( case when gifttype = 8 then 1 else 0 end) gifttype8,
			sum( case when gifttype = 9 then 1 else 0 end) gifttype9,
			sum( case when gifttype = 10 then 1 else 0 end) gifttype10')->items;
	 	$param['gifttypenum'] = $giftTypeNum[0];

	 	//获取话题列表
	 	$m_topic->setLimit(5);
		$topicList = $m_topic->select(null, '*', null, 'order by end_time desc')->items;
		$param['topicList'] = $topicList;
	 	return $this->render('misc/topic/detail.html', $param);
	 }

	 /**
	  * 获取置顶的话题列表
	  */
	 public function pageTopicTopList($inPath) {
	 	return "功能下线";
	 	$m_topic = new model_cp_topic();
	 	$date = date("Y-m-d");
	 	$condition = "start_ymd <= '{$date}' and end_ymd >= '{$date}'";
	 	$topic = $m_topic->select($condition, 'topic_id, title, start_time, end_time, giftnum')->items;
	 	echo json_encode($topic);
	 	exit;
	 }
	 /**
	  * 根据topic_id获取动态列表
	  */
	 public function pageTopicCommentByTid($inPath) {
	 	return "功能下线";
	 	$urlparam = $this->getUrlParams($inPath);
 		$topic_id = (int)$urlparam['tid'];
 		if (!$topic_id) {
 			exit;
 		}
 		$m_comment = new model_cp_topiccomment();
 		$comment = $m_comment->select(array('topic_id'=>$topic_id), '*', null, 'order by comment_id desc')->items;
 		echo json_encode($comment);
 		exit;
	 }
	 /**
	  * 为话题添加动态
	  */
	 public function pageTopicCommentAdd($inPath) {
	 	return "功能下线";
	 	if (count($_POST)){
	 		$topic_id = (int)$_POST['tid'];
	 		if (!$topic_id) {
	 			return false;
	 		}
	 		$gifttype = (int)$_POST['gifttype'];
	 		$comment = zbj_lib_BaseUtils::getStr($_POST['comment']);
	 		$add_uid = $this->_userid;
	 		$add_name = $this->_nickname;
	 		$s_topic = new service_topic();
	 		if ($gifttype) {
	 			$m_comment = new model_cp_topiccomment();
	 			$countComment = $m_comment->selectOne(array('topic_id'=>$topic_id, 'gifttype'=>$gifttype, 'add_uid'=>$this->_userid), 'count(1) as num');
	 			if (count($countComment) && $countComment['num']) {
	 				echo json_encode(array('data'=>1));//提示你已经赠送过该礼物
	 				exit;
	 			}
	 			$countType = $m_comment->selectOne(array('topic_id'=>$topic_id, 'add_uid'=>$this->_userid), 'count(DISTINCT gifttype) as num');
	 			if (count($countType) && $countType['num'] > 3) {
	 				echo json_encode(array('data'=>2));//提示赠送礼物类型不能超过3个
	 				exit;
	 			}
	 			$comment = '于'.date('Y-m-d H:i').'赠送了';
	 		}
	 		$s_topic->addcomment($topic_id, $comment, $gifttype, $add_uid, $add_name);
	 	}
	 }
	 /**
	  * 话题分类列表
	  */
	 public function pageTopicCategory($inPath) {
	 	return "功能下线";
	 	$m_topicCategory = new model_cp_topiccategory();
	 	$pCategory = $m_topicCategory->select(array('pid'=>0), 'category_id,category_name')->items;
	 	$this->tplvar['pCategory'] = $pCategory;

	 	return $this->render('misc/topic/category.html', $this->tplvar);
	 }
	 /**
	  * 根据话题一级分类获取二级分类,返回josn
	  */
	 public function pageTopicGetCategory2Json($inPath) {
	 	return "功能下线";
	 	$pid = zbj_lib_BaseUtils::getStr($_GET['pid'], 'int', 0);
	 	if (!$pid) return false;
	 	$m_topicCategory = new model_cp_topiccategory();
	 	$topicCategory = $m_topicCategory->select(array('pid'=>$pid), 'category_id, category_name, valid')->items;
	 	return json_encode($topicCategory);
	 }
	 /**
	  * 添加话题（跑马灯）一级分类
	  */
	 public function pageTopicCategoryAdd($inPath) {
	 	return "功能下线";
	 	$pid = zbj_lib_BaseUtils::getStr($_GET['pid'], 'int', 0);
	 	$m_topicCategory = new model_cp_topiccategory();
	 	if ($pid) {
	 		$pCategory = $m_topicCategory->selectOne(array('category_id'=>$pid), 'category_id, category_name, valid');
	 		$params['pCategory'] = $pCategory;
	 	}
	 	if (count($_POST)) {
	 		$data['category_name'] = zbj_lib_BaseUtils::getStr($_POST['category_name']);
	 		$category_id = zbj_lib_BaseUtils::getStr($_POST['category_id'], 'int', 0);
	 		$data['valid'] = zbj_lib_BaseUtils::getStr($_POST['valid'],'int');
	 		if ($category_id) {
	 			if($m_topicCategory->update(array('category_id'=>$category_id), $data) === false) {
	 				return $this->printmsg('操作失败', 2);
	 			}
	 		}else{
	 			if ($m_topicCategory->insert($data) === false) {
	 				return $this->printmsg('操作失败', 2);
	 			}
	 		}
	 		return $this->printmsg('操作成功', 2, null, '/misc/TopicCategory');
	 	}
	 	return $this->render('misc/topic/categoryadd.dialog.html', $params);
	 }
	 /**
	  * 添加话题（跑马灯）二级分类
	  */
	 public function pageTopicCategory2Add($inPath) {
	 	return "功能下线";
	 	$pid = zbj_lib_BaseUtils::getStr($_GET['pid'], 'int', 0);
	 	$cid = zbj_lib_BaseUtils::getStr($_GET['cid'], 'int', 0);
	 	$m_topicCategory = new model_cp_topiccategory();
	 	if ($pid) {
	 		$pCategory = $m_topicCategory->selectOne(array('category_id'=>$pid), 'category_id, category_name, valid');
	 		$this->tplvar['pCategory'] = $pCategory;
	 	}
	 	if ($cid) {
	 		$cCategory = $m_topicCategory->selectOne(array('category_id'=>$cid), 'category_id, category_name, valid');
	 		$this->tplvar['cCategory'] = $cCategory;
	 	}
	 	if (count($_POST)) {
	 		$pid = zbj_lib_BaseUtils::getStr($_POST['pid'], 'int', 0);
	 		if (!$pid) return $this->printmsg('一级分类不合法，添加失败', 2);
	 		$category_id = zbj_lib_BaseUtils::getStr($_POST['category_id'], 'int', 0);

	 		$data['pid'] = $pid;

	 		$data['category_name'] = zbj_lib_BaseUtils::getStr($_POST['category_name']);
	 		$data['valid'] = zbj_lib_BaseUtils::getStr($_POST['valid'],'int');
	 		if ($category_id) {
	 			if ($m_topicCategory->update(array('category_id'=>$category_id), $data) === false) {
	 				return $this->printmsg('操作失败', 2);
	 			}
	 		}else{
	 			if ($m_topicCategory->insert($data) === false) {
	 				return $this->printmsg('操作失败', 2);
	 			}
	 		}

	 		return $this->printmsg('操作成功', 2, null, '/misc/TopicCategory');
	 	}
	 	return $this->render('misc/topic/category2add.dialog.html', $this->tplvar);
	 }
	 /**
	 * 添加备注
	 */
	public function pageAddRemark($inPath) {
		if (!zbj_lib_BaseUtils::isAjax()) {
			return 'no ajax';
		}
		$urlparam = $this->getUrlParams($inPath);
		$pk_id = $urlparam['pkid'];
		$type = $urlparam['type'] ? $urlparam['type'] : 'task';
		$sLog = new service_log();
		if ($_POST) {
			$content = trim(zbj_lib_BaseUtils::getStr($_POST['content']));
			$remark_catalog = (int)$_POST['remark_catalog'];
			if (!$content) {
				return $this->printmsg("您还没有输入备注内容", 0);
			}
			$files = $_POST['files'];
			$attachment='';
			if($files){
				if(get_magic_quotes_gpc ()){
					$files = explode('-,', stripslashes($files) );
				}else{
					$files = explode('-,', $files);
				}
				foreach ($files as $key => $value) {
					if(!$value){
						continue;
					}
					$value =  unserialize($value);
					$attachment[$key]['filename']=$value['ofilename'];
					$attachment[$key]['src']=$value['file'];
				}
			}
			if($attachment){
				$attachment = json_encode($attachment);
			}
			if ($sLog->addRemark($this->_userid, $pk_id, $content, $attachment, $type, 0, $remark_catalog)) {
				return $this->printmsg("添加成功", 2, null, $_SERVER['HTTP_REFERER']);
			} else {
				return $this->printmsg('添加失败，失败原因：' . $sLog->getError(), 0);
			}
		}
		$params['remark_catalog'] = $sLog->getRemarkCatalog();
		unset($params['remark_catalog'][3]);
		return $this->render('misc/remark/addremark.dialog.html', $params);
	}

	 /**
	  * 从T4移植过来的
	  * 稿件黑名单列表
	  */
	 public function pageWorksBlacklist($inPath) {
	 	$urlParams = $this->getUrlParams($inPath);
	 	$params = array();
	 	$limit = (int)$urlParams['limit'] ? (int)$urlParams['limit'] : 30;
	 	$page = (int)$urlParams['page'] ? (int)$urlParams['page'] : 1;
	 	$worksId = (int)$_GET['worksId'];
	 	$taskId = (int)$_GET['taskId'];

	 	$model = zbj_model_api::get('zbj_model_lg_worksblacklist');
	 	$model->setLimit($limit);
	 	$model->setCount(true);
	 	$model->setPage($page);
	 	$condition = 'black_id>0 ';
	 	$params = array();
	 	if ($worksId) {
	 		$condition .= ' and works_id='.$worksId;
	 		$params['worksId'] = $worksId;
	 	}
	 	if ($taskId) {
	 		$condition .= ' and task_id='.$taskId;
	 		$params['taskId'] = $taskId;
	 	}
	 	$data = $model->select($condition);
	 	$params['title'] = '稿件黑名单';
	 	$params['list'] = $data->items;
	 	$params['totalSize'] = $data->totalSize;
	 	$params['pageBar'] = $this->PageBar($data->totalSize, $limit, $page, $inPath);
	 	return $this->render('misc/works/blacklist.html', $params);
	 }

	 /**
	  * 从T4移植过来的
	  * 用户审核列表
	  */
	 public function pageUserCertList($inPath){
	 	$urlParams = $this->getUrlParams($inPath);
	 	$type = isset($urlParams['type'])?lib_BaseUtils::getStr($urlParams['type'],'int'):13;
	 	$nickname = lib_BaseUtils::getStr($_GET['nickname']);
	 	$stime = lib_BaseUtils::getStr($_GET['stime']);
	 	$etime = lib_BaseUtils::getStr($_GET['etime']);
	 	$status = lib_BaseUtils::getStr($_GET['status'], 'int');
	 	$vKey = (int)$_GET['vKey'];
	 	$cpUser = zbj_lib_BaseUtils::getStr($_GET['cpUser']);
	 	$page = isset($urlParams["page"]) ? $urlParams["page"] : 1;
	 	if ($_GET['isSubmit']) { //过滤来的
	 		$page = 1;
	 	}
	 	$condition = '';
	 	$getPath = '';
	 	$expand = array();
	 	if(is_int($type)) {
	 		$condition .= "type=$type";
	 		if($status == 0 || $status == 1 || $status == 2) {
	 			$condition .= " and status='$status'";
	 			$this->_params['status'] = $status;
	 		} else {
	 			$this->_params['status'] = 3;
	 		}
	 		if(!empty($stime)) {
	 			$condition .= " and dateymd >= '$stime'";
	 			$this->_params['stime'] = $stime;
	 		}
	 		if(!empty($etime)) {
	 			$condition .= " and dateymd <= '$etime'";
	 			$this->_params['etime'] = $etime;
	 		}
	 		$certModel = new zbj_model_mb_usercert();
	 		if(!empty($nickname)) {
	 			//先找到用户的ID
	 			$userData = $certModel->_db->selectOne('mb_account', "nickname='$nickname'");
	 			$userId = $userData['user_id'] ? $userData['user_id'] : -1; //没有就为-1，怕有用户id为0的数据
	 			$condition .= " and user_id={$userId}";
	 			$this->_params['nickname'] = $nickname;
	 		}
	 		if ($vKey) {
	 			$condition .= " and content_id = $vKey";
	 			$this->_params['vKey'] = $vKey;
	 		}
	 		if ($cpUser) {
	 			//判断时间
	 			if (!($stime && $etime)) {
	 				$this->ShowMsg('请选择时间区间');exit;
	 			}
	 			if (strtotime($etime) - strtotime($stime) > 86400*7) {
	 				$this->ShowMsg('时间间隔不能大于7天');exit;
	 			}
	 			$condition .= " and cp_user = '{$cpUser}'";
	 			$this->_params['cpUser'] = $cpUser;
	 		}
	 		$this->_params['nav'] = $type;
	 		$limit = 20;
	 		$certModel->setCount(true);
	 		$certModel->setPage($page);
	 		$certModel->setLimit($limit);
	 		$data = $certModel->select($condition, '*', null, 'order by user_id desc');
	 		$this->_params['list'] = $data->items;
	 		if(!empty($this->_params['list'])) {
	 			foreach($this->_params['list'] as $key=>$value) {
	 				$this->_params['list'][$key]['expand'] = unserialize($this->_params['list'][$key]['expand']);//反序列化冗余字段z
	 			}
	 		}
	 		$this->_params['totalSize'] = isset($data->totalSize)?$data->totalSize:0;
	 		if ($_SERVER['QUERY_STRING']){
	 			if ($_GET['isSubmit']) {
	 				//去掉查询标记
	 				$_SERVER['QUERY_STRING'] = preg_replace(array('/isSubmit=1/'), array('isSubmit=0'), $_SERVER['QUERY_STRING']);
	 			}
	 			$getPath = "?".$_SERVER['QUERY_STRING'];
	 		}
	 		$this->_params['pageBar'] = $this->PageBar($data->totalSize, $limit, $page, $inPath, 'style1', $getPath);
	 		$this->_params['totalPage'] = $data->totalPage;
	 	} else {
	 		$this->ShowMsg('请选择正确的类型！');
	 	}

	 	switch($type) {
	 		case 13:
	 		case 14://招标稿件
	 			//处理稿件相关任务
	 			if ($this->_params['list']) {
	 				$taskidArr = array();
	 				foreach ($this->_params['list'] as $wk) {
	 					if (!in_array($wk['expand']['info']['task_id'], $taskidArr))
	 						$taskidArr[] = $wk['expand']['info']['task_id'];
	 				}
	 				$taskidStr = '';
	 				foreach ($taskidArr as $tia) {
	 					$taskidStr .= $tia.',';
	 				}
	 				$taskidStr = substr($taskidStr, 0, -1);

	 				$taskArr = $certModel->_db->select('mk_task', 'task_id in ('.$taskidStr.')', 'task_id, title')->items;

	 				$taskResult = array();
	 				if ($taskArr) {
	 					foreach ($taskArr as $ta) {
	 						$taskResult[$ta['task_id']] = $ta['title'];
	 					}
	 				}

	 				foreach ($this->_params['list'] as &$v) {
	 					$v['task_title'] = $taskResult[$v['expand']['info']['task_id']];
	 				}
	 			}
	 			return $this->render('misc/works/usercertlist.html', $this->_params);
	 			break;
	 		default:
	 			$this->ShowMsg('请选择正确的类型！');
	 		break;
	 	}
	 }

	 /**
	  * 从T4移植过来的
	  * 获取拒绝条数
	  */
// 	 public function pageGetRefuseNum() {
// 	 	$userId = zbj_lib_BaseUtils::getStr($_POST['userId'], 'int');
// 	 	$type = zbj_lib_BaseUtils::getStr($_POST['type'], 'int');
// 	 	$m_cert = new zbj_model_mb_usercert();
// 	 	$data = $m_cert->selectOne("user_id=$userId and type=$type and status=2", 'count(1) as num');
// 	 	return json_encode(array('state' => 1, 'msg' => $data['num']));
// 	 }

	 /**
	  * 稿件审核，拒绝
	  */
	 public function pageUserCertRefuse($inPath) {
	 	$urlparam = $this->getUrlParams($inPath);
	 	$userId = (int)$urlparam['userId'];
	 	$param['userId'] = $userId;
	 	$contentid = zbj_lib_BaseUtils::getStr($urlparam['contentid']);
	 	$param['contentid'] = $contentid;
	 	//获取拒绝条数
	 	$m_cert = new zbj_model_mb_usercert();
	 	$refuseNum = $m_cert->selectOne("user_id=$userId and type=13 and status=2", 'count(1) as num');
	 	$param['refuseNum'] = $refuseNum;
	 	if (count($_POST)) {
	 		$type = 13;
	 		$idStr = (int)$_POST['verifyid']==0 ? lib_BaseUtils::getStr($_POST['contentid']) : (int)$_POST['verifyid'];
	 		$userLock = lib_BaseUtils::getStr($_POST['userLock'], 'int');
	 		$lockTime = lib_BaseUtils::getStr($_POST['lockTime'], 'int');
	 		$removeAll = lib_BaseUtils::getStr($_POST['removeAll'], 'int');
	 		$limitType = lib_BaseUtils::getStr($_POST['limitType'], 'int');
	 		$othorInfo = isset($_POST['refuseContent'])?$_POST['refuseContent']:'';
	 		$idArr = explode(',', $idStr);

	 		$certModel = new model_mb_usercert();
	 		$other = array();
	 		if ($_POST['moveBlack']) {
	 			$other['moveBlack'] = 1;
	 		}
	 		foreach($idArr as $contentid) {
 				$condition = "type=13 and content_id=$contentid and status=0";
	 			$r1 = $certModel->handleInfo($condition, $type, $othorInfo, $userLock,$lockTime,$removeAll,$limitType,$this->_nickname, $this->_userid, $other);
	 		}
	 		if($r1) {
	 			return $this->printmsg('操作成功！', 2, null, $_SERVER['HTTP_REFERER']);
	 		} else {
	 			return $this->printmsg('操作失败！', 2);
	 		}
	 	}
	 	return $this->render('misc/works/refuse.dialog.html', $param);
	 }

	 /**
	  * 审核稿件，通过
	  */
	 public function pageUserCertAccept($inPath) {
	 	$urlparam = $this->getUrlParams($inPath);
	 	$idStr = zbj_lib_BaseUtils::getStr($urlparam['verifyid']);
	 	if (!$idStr) {
	 		return $this->printmsg('稿件信息不存在！', 2, null, $_SERVER['HTTP_REFERER']);
	 	}
	 	$idArr = explode(',', $idStr);
	 	$certModel = new model_mb_usercert();
	 	foreach($idArr as $key=>$verify_id) {
	 		$result = $certModel->accept($verify_id, 0, $this->_nickname);
	 	}
	 	if($result) {
	 		return $this->printmsg('操作成功！', 2, null, $_SERVER['HTTP_REFERER']);
	 	} else {
	 		return $this->printmsg('操作失败！', 2);
	 	}
	 }
	 /**
	  * 从T4移植过来的
	  * 删除稿件黑名单中的稿件
	  */
	 public function pageDelBlackWorks() {
	 	$blackId = (int)$_POST['blackId'];
	 	$model = zbj_model_api::get('zbj_model_lg_worksblacklist');
	 	//查询相同files_code的黑名单
	 	$bw = $model->selectOne('black_id='.$blackId);
	 	$blackData = $model->select("files_code!='' and files_code='{$bw['files_code']}'")->items;
	 	$idstr = $blackId.',';
	 	foreach ($blackData as $data) {
	 		$idstr .= $data['black_id'].',';
	 	}
	 	$idstr = substr($idstr, 0, -1);
	 	if ($model->delete("black_id in ($idstr)") !== false) {
	 		return json_encode(array('state' => 1, 'msg' => 'success'));
	 	}
	 }

	 /**
	  * Tags into categories
	  * @author yuanzhuang
	  */
	public function pageTagTransform($inPath){
		if ($_GET['act']) {//ajax请求
			return $this->tagTransformAjax();
		}

		if (empty($_POST)) {
			$this->tplvar['left_tags'] = $this->getUnconvertedTag();
			$this->tplvar['industries'] = $this->getIndustryList();
			return $this->render('misc/tag/tagTransform.html', $this->tplvar);
		}

		//处理提交
		$tag_name = zbj_lib_BaseUtils::getStr($_POST['tagName'], 'string');
		$industry_id = zbj_lib_BaseUtils::getStr($_POST['industry'], 'int');
		$channel_id = zbj_lib_BaseUtils::getStr($_POST['channel'], 'int');
		$category_id = zbj_lib_BaseUtils::getStr($_POST['category'], 'int');

		$tag_name = strtoupper($tag_name);
		if(empty($tag_name)){
			$this->ShowMsg("标签名称不能为空！");
		}
		if(empty($industry_id)){
			$this->ShowMsg("请选择标签所属行业！");
		}
		if(empty($channel_id)){
			$this->ShowMsg("请选择标签所属频道！");
		}
		if(empty($category_id)){
			$this->ShowMsg("请选择标签所属分类！");
		}

		$model_tag = zbj_model_api::get('zbj_model_mk_tag');
		$tag_info = $model_tag->selectOne("UPPER(tag_name)='{$tag_name}'", 'tag_id,is_channel,industry_id,catalog2id,channel_id');

		if(empty($tag_info['tag_id'])) {
			$this->ShowMsg("你输入的标签不存在，请正确输入！");
		}
		if ($tag_info['is_channel'] == 1) {
			$this->ShowMsg('顶级标签不允许修改');
		}
		if ($tag_info['industry_id'] && $tag_info['catalog2id'] && $tag_info['channel_id']) {
			//$this->ShowMsg('已经转换，勿需操作');
		}

		$up_data = array(
			'industry_id'=>$industry_id,
			'channel_id'=>$channel_id,
			'catalog2id'=>$category_id
		);
		$rslt = $this->updateTagAndChildren($tag_info['tag_id'], $up_data);

		if($rslt){
			$this->ShowMsg("提交成功！", "/misc/tagTransform", 3);
		}else{
			$this->ShowMsg("提交失败！");
		}
	}

    /***
	 *转老分类
	 */
	public function pageConvCatalog($inPath) {
		if ($_GET['act']) {
			return $this->convCatalogAjax();
		}
		if (empty($_POST)) {
			$this->tplvar['industries'] = $this->getIndustryList();
			return $this->render('misc/tag/convCatalog.html', $this->tplvar);
		}

		//处理提交
		$cat_name = trim(strtoupper(zbj_lib_BaseUtils::getStr($_POST['catname'], 'string')));
		$industry_id = zbj_lib_BaseUtils::getStr($_POST['industry'], 'int');
		$channel_id = zbj_lib_BaseUtils::getStr($_POST['channel'], 'int');
		$category_id = zbj_lib_BaseUtils::getStr($_POST['category'], 'int');

		if(empty($cat_name)){
			$this->ShowMsg("分类名不能为空！");
		}
		if(empty($industry_id)){
			$this->ShowMsg("请选择分类所属行业！");
		}
		if(empty($channel_id)){
			$this->ShowMsg("请选择分类所属频道！");
		}
		if(empty($category_id)){
			$this->ShowMsg("请选择分类所属分类！");
		}

		$mdl = zbj_model_api::get('zbj_model_mk_catalog');
		$cat_info = $mdl->selectOne("UPPER(cname)='{$cat_name}' AND pid>0", 'catalog_id');

		$cat_id = $cat_info['catalog_id'];
		if(empty($cat_id)) {
			$this->ShowMsg("你输入的分类不存在，请正确输入！");
		}


		$up_data = array(
			'category1id'=>$industry_id,
			'category2id'=>$channel_id,
			'category_id'=>$category_id,
		);

		if( $mdl->update("catalog_id={$cat_id}", $up_data) ) {
			$this->ShowMsg("提交成功！", "/misc/convCatalog", 2);
		}else{
			$this->ShowMsg("提交失败！你是否已经更新？");
		}
	}


    /***
	 * 网站支付接口设置
	 */
	public function pagePaySetting($inPath) {
		$cacheName = 'zhubajie_noticeservciestop_sdfwf';
    	$cacheName1 = 'zhubajie_noticeservciestop_begin';
    	$cacheName2 = 'zhubajie_noticeservciestop_end';
    	$cache = new zbj_lib_cache('memcache');

		if(empty($_POST)){ // 没有提交，查看详细
			$begin = $cache->get($cacheName1);
			$end = $cache->get($cacheName2);

			$param = array();
			$param['begin'] = !empty($begin)?date('Y-m-d H:i:s',$begin):'';
    		$param['end'] 	= !empty($end)?date('Y-m-d H:i:s',$end):'';
    		$param['state'] = intval($cache->get($cacheName));

    		return $this->render('misc/works/paysetting.html', $param);
		}
		if(!in_array($this->_nickname,array('陈继安','李达成','杨彦楠','朱陶'))){
			return $this->printmsg('对不起，你没有操作的权限！', 2, null, $_SERVER['HTTP_REFERER']);
		}

		// 设置
		$open 	= zbj_lib_BaseUtils::getStr($_POST['open'], 'int');
		$begin 	= zbj_lib_BaseUtils::getStr($_POST['begin'], 'string');
		$end 	= zbj_lib_BaseUtils::getStr($_POST['end'], 'string');
		$day 	= zbj_lib_BaseUtils::getStr($_POST['day'], 'int');

		$begin 	= strtotime(trim($begin));
    	$end 	= strtotime(trim($end));

		if($open == 1){// 拦截期间 外部可访问
			$cache->del($cacheName);
		}
		if($open == -1){// 拦截期间 外部不可访问
			$cache->set($cacheName,1,864000);
		}

    	if(!empty($begin) && !empty($end) && $end > $begin){
    		$daytime = $day>0?($day*86400):864000;
    		$cache->set($cacheName1,$begin,$daytime);
    		$cache->set($cacheName2,$end,$daytime);
    	}
    	return $this->printmsg('设置成功！', 2, null, $_SERVER['HTTP_REFERER']);
	}




	/***
	 *转老分类ajax请求
	 */
	private function convCatalogAjax() {
		$act = trim(strtolower($_GET['act']));
		$rtn_ajax = array();
		switch ($act) {
			case 'catsearch':
				$search = zbj_lib_BaseUtils::saddslashes(zbj_lib_BaseUtils::getStr($_GET['q'], 'string'));
				return $this->json($this->fuzzySearchCatalog($search));
			default:
				return $this->json($rtn_ajax);
		}
	}

	private function fuzzySearchCatalog($search) {
		$search = trim(strtoupper($search));
		$mdl = zbj_model_api::get('zbj_model_mk_catalog');
		$mdl->setLimit(50);
		$rslt = $mdl->select("UPPER(cname) LIKE '%{$search}%' AND pid=0", 'catalog_id as value,cname as text')->items;
		return $rslt;
	}


	private function updateTagAndChildren($tag_id, $data) {
		$mdl = zbj_model_api::get('zbj_model_mk_tag');
		$srv = new zbj_service_tag($tag_id);
		$children = array();
		//$srv->getAllSystemSubID($children, $tag_id);
		//$children[] = $tag_id;
		//$condition[] = 'tag_id IN (' . implode(',', $children) . ')';
		$condition[] = "tag_id={$tag_id}";
		//$condition[] = 'is_channel=0 AND channel_id=0 AND catalog2id=0 AND industry_id=0';
		//$condition[] = 'is_channel=0';
		return $mdl->update($condition, $data) ? true : false;
	}

	private function getUnconvertedTag() {
		$mdl = zbj_model_api::get('zbj_model_mk_tag');
		$condition = 'type=0 AND is_channel=0 AND channel_id=0 AND catalog2id=0 AND industry_id=0';
		$mdl->setLimit(100);
		$left = zbj_lib_BaseUtils::indexArray($mdl->select($condition, 'tag_name')->items, 'tag_name', 'tag_name');
		return array_rand($left, 30);
	}

	private function getIndustryList() {
		$cache = new zbj_lib_cache('memcache');
		$cache_name = 'com.zhubajie.boss.misc.getIndustryList';
		$list = $cache->get($cache_name);
		if ($list === false || empty($list)) {
			$mdl = zbj_model_api::get('zbj_model_mk_category');
			$list = $mdl->select('parent_id=0 AND level=1', 'category_id as value, category_name as text')->items;
			$cache->set($cache_name, $list, 1800);
		}
		return $list;
	}

	private function tagTransformAjax() {
		$act = trim(strtolower($_GET['act']));
		$rtn_ajax = array();
		switch ($act) {
			case 'chanlist':
				$search = zbj_lib_BaseUtils::getStr($_GET['value'], 'int');
				return $this->json($this->getChannelListByIndustryId($search));
			case 'catlist':
				$search = zbj_lib_BaseUtils::getStr($_GET['value'], 'int');
				return $this->json($this->getCatalogListByChannelId($search));
			case 'tagsearch':
				$search = zbj_lib_BaseUtils::saddslashes(zbj_lib_BaseUtils::getStr($_GET['q'], 'string'));
				return $this->json($this->fuzzySearchTag($search));
			default:
				return $this->json($rtn_ajax);
		}
	}

	private function fuzzySearchTag($search) {
		$search = trim(strtoupper($search));
		$mdl = zbj_model_api::get('zbj_model_mk_tag');
		$mdl->setLimit(50);
		//$rslt = $mdl->select("UPPER(tag_name) LIKE '%{$search}%' AND is_channel=0 AND type=0 AND channel_id=0 AND catalog2id=0 AND industry_id=0", 'tag_id,tag_name')->items;
		$rslt = $mdl->select("UPPER(tag_name)='{$search}'", 'tag_id,tag_name')->items;
		return $rslt;
	}

	private function getChannelListByIndustryId($id){
		if ($id <= 0) return array();
		$mdl = zbj_model_api::get('zbj_model_mk_category');
		$rslt = $mdl->select("parent_id={$id} AND level=2", 'category_id as value, category_name as text')->items;
		return $rslt;
	}

	private function getCatalogListByChannelId($id){
		if ($id <= 0) return array();
		$mdl = zbj_model_api::get('zbj_model_mk_category');
		$rslt = $mdl->select("parent_id={$id} AND level=3", 'category_id as value, category_name as text')->items;
		return $rslt;
	}

	/**
	 *
	 */
	public function pageModuleCategory($inPath) {
		$m_category = new zbj_model_mk_category();
		$m_module_category = new model_mk_modulecategory();
		$module_id = zbj_lib_BaseUtils::getStr($_GET['mid'], 'int', 0);
		if (!$module_id) return $this->printmsg('行业类目名称不合法，操作失败！', 2, null, $_SERVER['HTTP_REFERER']);

		$module_category_array = $m_module_category->select(array('module_id'=>$module_id), 'category_id')->items;//二维数组
		$module_category_not_in_array = $m_module_category->select("module_id !={$module_id}", 'category_id')->items;//二维数组
		$module_category = array();
		$module_category_not_in = array();
		if (is_array($module_category_array)) {
			foreach ($module_category_array as $v) {
				$module_category[] = $v['category_id'];
			}
		}
		if (is_array($module_category_not_in_array)) {
			foreach ($module_category_not_in_array as $v) {
				$module_category_not_in[] = $v['category_id'];
			}
		}
		$this->tplvar ['ids'] = implode ( ',', $module_category );
		if (zbj_lib_BaseUtils::isPostRequest()) {
			$ids = zbj_lib_BaseUtils::getStr ( $_POST ['ids'] );
            if ( !ctype_digit(str_replace(array(',', ' '), '', $ids))) {
                return $this->printmsg('选择的分类数据有误', 2, null, $_SERVER['HTTP_REFERER']);
            }
			$idsarr = explode (',', $ids );
			if ($idsarr) {
				$m_module_category->beginTransaction();
                $category_list = zbj_lib_BaseUtils::indexArray($m_category->select("category_id IN ({$ids}) AND level=3", 'category1id,category2id,category_id')->items, 'category_id');
				try {
					if ($m_module_category->delete(array('module_id'=>$module_id)) === false) throw new Exception("清除原有对应关系失败");
                    //取分类信息
					$cache = new zbj_lib_cache('memcache');
					foreach ($idsarr as $v) {
						//$category = $m_category->selectOne(array('category_id'=>$v, 'level'=>3), '*');
                        $category = $category_list[$v];
						if ($category) {
							//修改关联关系时清除客服链接memcache缓存
                          	$keys = 'task.zhuabjie.com.pubtask.contact.link.'.$v;
                          	$cache->del($keys);
							//只有是三级分类时，才往数据库插入值
                            $data_insert = array(
                              'module_id'=>$module_id,
                              'category1id' => $category['category1id'],
                              'category2id' => $category['category2id'],
                              'category_id'=>$v,
                            );
							if ($m_module_category->insert($data_insert) === false) {
                                throw new Exception("添加分类id{$v}失败");
                            }

						}
					}
					$m_module_category->commit();
				} catch (Exception $e) {
					$m_module_category->rollBack();
					$this->printmsg('系统出现故障，操作失败！', 2, null, $_SERVER['HTTP_REFERER']);
				}
			}
			return $this->printmsg ( "修改成功", 2, null, $_SERVER['HTTP_REFERER']);
		}

		$m_module = new model_mk_module();
		$module = $m_module->select()->items;
		$this->tplvar ['module'] = $module;

		$curModule = $m_module->selectOne(array('module_id'=>$module_id), 'module_name');
		$this->tplvar['curModule'] = $curModule;

		$m_category = new zbj_model_mk_category();
		$list = $m_category->select ()->items;
		$zNodes = array ();
		foreach ( $list as $k => $v ) {
			$zNodes [] = array (
					'id' => $v ['category_id'],
					'pid' => $v ['parent_id'],
					'name' => $v ['category_name'],
					'checked' =>in_array($v['category_id'], $module_category) ? true : false,
					'chkDisabled' =>in_array($v['category_id'], $module_category_not_in) ? true : false
			);
		}
		$this->tplvar ['zNodes'] = json_encode ( $zNodes );
		return $this->render ( 'misc/module/modulecategory.html', $this->tplvar );
	}

	public function pageModule ($inPath) {
		$m_module = new model_mk_module();
		$module = $m_module->select()->items;
		$m_allotConfig = new zbj_model_cp_allotconfig();
		if ($module) {
			foreach ($module as $k=>$v) {
				if ($v['allot_config_id']) {
					$allotConfig = $m_allotConfig->selectOne(array('id'=>$v['allot_config_id']), 'name');
					if ($allotConfig) $module[$k]['allot_config_name'] = $allotConfig['name'];
				}
				if ($v['task_process_allot_id']) {
					$taskProcessAllotConfig = $m_allotConfig->selectOne(array('id'=>$v['task_process_allot_id']), 'name');
					if ($taskProcessAllotConfig) $module[$k]['task_process_allot_config_name'] = $taskProcessAllotConfig['name'];
				}
			}
		}
		$this->tplvar['module'] = $module;
		return $this->render ( 'misc/module/module.html', $this->tplvar );
	}
	/**
	 *
	 * 行业类目添加编辑方法
	 */
	public function pageModuleAdd ($inPath) {
		$module_id = zbj_lib_BaseUtils::getStr($_GET['mid'], 'int', 0);
		$m_module = new model_mk_module();
		if ($module_id) {
			$module = $m_module->selectOne(array('module_id'=>$module_id));
			$this->tplvar['module'] = $module;
		}
		$m_allot_config = new zbj_model_cp_allotconfig();
		$task_process_allot = $m_allot_config->select("pid=1")->items;
		$this->tplvar['task_process_allot'] = $task_process_allot;
		var_dump($task_process_allot);
		$user_sign_allot = $m_allot_config->select("pid=7")->items;
		$this->tplvar['user_sign_allot'] = $user_sign_allot;

		if ($_POST) {
			$module_id = zbj_lib_BaseUtils::getStr($_POST['module_id'], 'int', 0);
			$module_name = zbj_lib_BaseUtils::getStr($_POST['module_name']);
			$allot_config_id = zbj_lib_BaseUtils::getStr($_POST['allot_config_id'], 'int' ,0);
			$task_process_allot_id = zbj_lib_BaseUtils::getStr($_POST['task_process_allot_id'], 'int' ,0);
			$user_sign_allot_id = zbj_lib_BaseUtils::getStr($_POST['user_sign_allot_id'], 'int' ,0);
			//20141119添加客服链接和统计链接
			$customurl = zbj_lib_BaseUtils::getStr($_POST['customurl']);
			$counturl = zbj_lib_BaseUtils::getStr($_POST['counturl']);
			//验证是否为正确的链接
			$pregmatch = '/http:\/\/[\w.]+[\w\/]*[\w.]*\??[\w=&\+\%]*/is';
			if(!preg_match($pregmatch,$customurl) && !empty($customurl)){
                return $this->printmsg('请输入正确的客服链接格式，如http://www.baidu.com！', 2, null, $_SERVER['HTTP_REFERER']);
            }
			
			if(!preg_match($pregmatch,$counturl) && !empty($counturl)){
                return $this->printmsg('请输入正确的统计链接格式，如http://www.baidu.com！', 2, null, $_SERVER['HTTP_REFERER']);
            }

			$data['module_name'] = $module_name;
			$data['allot_config_id'] = $allot_config_id;
			$data['task_process_allot_id'] = $task_process_allot_id;
			$data['user_sign_allot_id'] = $user_sign_allot_id;
            //20141119添加客服链接和统计链接
			$data['customurl'] = $customurl;
			$data['counturl'] = $counturl;

			if ($module_id) {
				//编辑
				if ($m_module->update(array('module_id'=>$module_id), $data) === false) {
					return $this->printmsg('系统故障，添加失败！', 2, null, $_SERVER['HTTP_REFERER']);
				}
			}else{
				//添加
				if (!$module_name) return $this->printmsg('名称不能为空！', 2, null, $_SERVER['HTTP_REFERER']);
				$checkModule = $m_module->selectOne(array('module_name'=>$module_name));
				if ($checkModule) {
					return $this->printmsg('该名称已存在，请重新填写！', 2, null, $_SERVER['HTTP_REFERER']);
				}
				if ($m_module->insert($data) === false) {
					return $this->printmsg('系统故障，添加失败！', 2, null, $_SERVER['HTTP_REFERER']);
				}
			}
            //修改客服链接后更新memcache
            $cache = new zbj_lib_cache('memcache');
    	    
            $m_module_category = zbj_model_api::get('model_mk_modulecategory');
            $m_category_id = $m_module_category->select(array('module_id'=>$module_id))->items;

            foreach($m_category_id as $k=>$v){
            	$key = 'task.zhuabjie.com.pubtask.contact.link.'.$v['category_id'];
            	$cache->del($key);
            }
      


			return $this->printmsg('操作成功！', 2, null, $_SERVER['HTTP_REFERER']);
		}
		return $this->render ( 'misc/module/add.dialog.html', $this->tplvar );
	}

    /**
     * 手动修改搜索加权数据
     */
    public function pageWeight($inPath){

        $method = strtolower($_SERVER['REQUEST_METHOD']);
        $mdlWeight = new model_mb_weight();
        if ($method == 'get'){
            $user_id = zbj_lib_BaseUtils::getStr($_GET['uid'], 'int', 0);
            $param = array();
            if ($user_id != 0){

                $result = $mdlWeight->select(array('userId' => $user_id))->items;
                $param['result'] = $result;
                $param['uid'] = $user_id;
            }
            return $this->render('misc/weight.html', $param);
        }else{

            //post 请求
            $user_id = zbj_lib_BaseUtils::getStr($_POST['uid'], 'int', 0);
            $param = array();
            if ($user_id){
                $param['uid'] = $user_id;
                $result = $mdlWeight->select(array('userId' => $user_id))->items;
                $param['result'] = $result;
            }
            //修改的数据
            $wids =  zbj_lib_BaseUtils::getStr($_POST['wid']);
            $types = zbj_lib_BaseUtils::getStr($_POST['type']);

            $result = $param['result'];
            $r_dict = array();
            //将数据库查询结果转换为字典
            foreach ($result as $row){
                $r_dict[$row['id']] = $row;
            }

            if (!empty($wids)){
                $mdlSerachasyn = new zbj_model_mb_serachasyn();
                foreach ($wids as $wid){
                    $type = $types[$wid];
                    $row = $r_dict[$wid];

                    if (strlen($wid) > 2 and !is_numeric($wid)){
                        $start = substr($wid, 0, 1);
                    }else{
                        $start = 'n';
                    }
                    switch ($start) {
                        //添加数据
                        case 'a':
                            $_wid = substr($wid, 2);
                            if (is_numeric($_wid) and is_numeric($type) and !empty($user_id)){
                                $mdlWeight->insert(array('type'=>(int)$type, 'userId'=>(int)$user_id));
                                $mdlSerachasyn->insert(array('pk_id'=>(int)$user_id,'type'=>1,'updType'=>'U'));
                            }
                            break;
                        //删除数据
                        case 'd':
                            $_wid = substr($wid, 2);
                            if (is_numeric($_wid)){
                                $mdlWeight->delete(array("id"=>(int)$_wid));
                                $mdlSerachasyn->insert(array('pk_id'=>(int)$user_id,'type'=>1,'updType'=>'U'));
                            }
                            break;
                        //修改数据
                        default:
                            if (is_numeric($wid)){
                                if (!empty($row) and $row['type'] != $type){
                                    $mdlWeight->update(array("id"=>(int)$wid), array('type'=>(int)$type));
                                    $mdlSerachasyn->insert(array('pk_id'=>(int)$user_id,'type'=>1,'updType'=>'U'));
                                }
                            }
                            break;
                    }
                }
                $this->redirect(zbj_lib_BaseUtils::getCurrentUrl()."?uid=$user_id");
            }
            return $this->render('misc/weight.html', $param);
        }
    }

    /**
     * NPS授权监控列表
     */
    public function pageNpsAccreditList($inPath) {

    	//设置缓存，目的为导出excel传递数据
    	$cacheName = "misc_npsAccredit_list_".$this->_userid;
    	$cache = new zbj_lib_cache('memcache');
//     	$cache = new zbj_lib_cache();
    	$timestamp = 60*60;  //设置缓存时间一小时
    	$cache->del($cacheName);
    	
    	
    	
    	//登录用户如果是财务或者主管、部门负责人则可以看到审核列表
    	lib_BaseUtils::apiInit();
    	$s_user = new com\zhubajie\boss\interfaces\userServiceClient(null);
    	lib_BaseUtils::apigetclient($s_user);
    	
    	//获取当前用户负责的组
    	$m_user_group = new zbj_model_cp_usergroups();
    	$user_group_gro = $m_user_group->select(array('manager'=>$this->_userid,'group_type'=>3), 'group_id')->items;
    	$user_group_dept = $m_user_group->select(array('manager'=>$this->_userid,'group_type'=>2), 'group_id')->items;
    	
    	$group_uid = $s_user->getManager($this->_userid, GroupType::GROUP);
    	$dep_uid = $s_user->getManager($this->_userid, GroupType::DEPARTMENT);
    	$group_id = $s_user->getGroupID($this->_userid, GroupType::DEPARTMENT);
    	
    	$limit = 20;
    	$urlparam = $this->getUrlParams($inPath);
    	$curpage = isset($urlparam ['page']) ? $urlparam ['page'] : 1;
    	$con = array();
    	
    	$check = 0;
    	$is_finance = 0;//是否是财务部门人员，0否，1是
    	$is_leader = 0;//是否为负责人，0否，3组负责人，2部门负责人，1板块负责人
    	$check_state = 0;//check_state审核状态，0未审核，1不需要审核，2组长审核，3部门经理审核，4财务审核
    	$get_is_agree = false; //
    	$is_agree = 3;
    	if (isset($_GET['is_agree'])) {
    		$is_agree = zbj_lib_BaseUtils::getStr($_GET['is_agree'], 'int');
    	}
    	
    	if ($is_agree == 1 || $is_agree == 2) {
    		$con['is_agree'] = $is_agree;
    	}
    	if ($is_agree == 4) {
    		$con['is_agree'] = 1;
    		$con['accredit_state'] = 4;
    	}
    	
//     	if ($is_agree == 3) {
//     		$con['is_agree'] = 0;
//     	}
    	if ($group_id == 366) {
    		$is_finance = 1;//财务部人员
    		$check_state = 3;
    		$check = isset($_GET['check']) ? zbj_lib_BaseUtils::getStr($_GET['check'], 'int') : 1;
    		if (in_array($is_agree, array(1,2,4))) $check_state = 4;
    		if ($is_agree == -1) $check_state = "3,4";
    		if ($is_agree == 3) {
    			$check_state = 3;
    			$con['is_agree'] = 1;
    		}
//     		$check = 1;
    	}else{
    		if (($this->_userid == $group_uid || count($user_group_gro)) && ($this->_userid == $dep_uid || count($user_group_dept))) {
    			$is_leader = 2;//部门负责人
    			if (in_array($is_agree, array(1,2,4))) $check_state = '2,3';
    			$check = isset($_GET['check']) ? zbj_lib_BaseUtils::getStr($_GET['check'], 'int') : 1;
    			if ($is_agree == 3 && $check == 1) {
    				$check_state = '0,2,3';
    				$con[] = '`accredit_state` != 3';
    				$con[] = '((is_agree =0 && check_state in (0,2,3)) or (is_agree=1  && check_state in (2)))';
    			}
    			if ($is_agree == -1) $check_state = "0,2,3";
    		}
    		else if ($this->_userid == $group_uid || count($user_group_gro)) {
//     			$group_id = $s_user->getGroupID($this->_userid, GroupType::GROUP);
    			$is_leader = 3;//组负责人
    			$check_state = 0;
    			if (in_array($is_agree, array(1,2,4))) $check_state = '2,3';
    			$check = isset($_GET['check']) ? zbj_lib_BaseUtils::getStr($_GET['check'], 'int') : 1;
    			if ($is_agree == 3 && $check == 1) {
    				$con['is_agree'] = 0;
    				$con[] = '`accredit_state` != 3';
    			}
    			if ($is_agree == -1) $check_state = "0,2,3";
    		}else if($this->_userid == $dep_uid || count($user_group_dept)) {
//     			$this->_usergroupid = 13;
    			$group_belong_dept = $m_user_group->selectOne(array('pid'=>$this->_usergroupid), 'count(1) as num');
    			$is_leader = 2;//部门负责人
    			if ($group_belong_dept['num']) {
    				$check_state = 2;
    				if (in_array($is_agree, array(1,2,4))) $check_state = 3;
    				$check = isset($_GET['check']) ? zbj_lib_BaseUtils::getStr($_GET['check'], 'int') : 1;
    				if ($is_agree == 3 && $check == 1) {
    					$con['is_agree'] = 1;
    					$con[] = '`accredit_state` != 3';
    				}
    				if ($is_agree == -1) $check_state = "2,3";
    			}else{
    				$check_state = 0;
    				if (in_array($is_agree, array(1,2,4))) $check_state = "0,3";
    				$check = isset($_GET['check']) ? zbj_lib_BaseUtils::getStr($_GET['check'], 'int') : 1;
    				if ($is_agree == 3 && $check == 1) {
    					$con['is_agree'] = 0;
    				}
    				if ($is_agree == -1) $check_state = "0,2,3";
    			}
    			
    		}
//     		if ($this->_userid == 330 || $this->_userid == 2728||$this->_userid == 560) {
    		if ($this->_userid == 330) {
//     			$group_id = $s_user->getGroupID($this->_userid, GroupType::PLATE);
    			$is_leader = 1;
    			$check_state = 3;
    			$check = isset($_GET['check']) ? zbj_lib_BaseUtils::getStr($_GET['check'], 'int') : 1;
    			if (in_array($is_agree, array(1,2,4))) $check_state = 4;
    			if ($is_agree == 3 && $check == 1) {
    				$con['is_agree'] = 1;
    				$con[] = '`accredit_state` != 3';
    			}
    			if ($is_agree == -1) $check_state = "3,4";
    		}
    	}
    	if ($check && ($is_finance>0 || $is_leader>0)) {
    		//审核列表条件 
//     		$con['check_state'] = $check_state;
    		$con[] = "check_state in ($check_state)";
    		$con[] = '`accredit_type` in (8,9,14,16,17)';
    		
    		if ($is_finance == 0) {
    			$user_group = $m_user_group->select(array('manager'=>$this->_userid), 'group_id')->items;
    			if (empty($user_group)) return $this->printmsg("你负责的小组不存在",2);
    			$s_group = new com\zhubajie\boss\interfaces\GroupServiceClient(null);
    			lib_BaseUtils::apigetclient($s_group);
    			$group_user_id_strs = "";
//     			print_r($user_group);exit;
    			foreach ($user_group as $v) {
    				$group_user_obj = $s_group->getMember($v['group_id']);
    				if ($group_user_obj->success !=1) return $this->printmsg("组成员接口调取失败", 2);
    				$group_user = json_decode($group_user_obj->data,true);
    				$group_user_id_array = array_keys($group_user);
    				$group_user_id_str = implode(',', $group_user_id_array);
    				$group_user_id_strs .="{$group_user_id_str},";
    			}
    			$group_user_id_strs = trim($group_user_id_strs, ',');
    			$con[] = "create_manager_id in({$group_user_id_strs})";
    		}
    	}
    	$this->tplvar['is_leader'] = $is_leader;//是否为负责人，0否，3组负责人，2部门负责人
    	$this->tplvar['is_finance'] = $is_finance;//是否是财务部门人员，0否，1是
    	$this->tplvar['is_agree'] = $is_agree;//是否是财务部门人员，0否，1是
    	$this->tplvar['check'] = $check;//是否是进入审核列表，0否，1是
    	
//     	$s_accredit = new service_npsaccredit();
    	$s_module = new service_module();
    	$this->tplvar['module_array'] = $s_module->getModule();
    	$this->tplvar['accredit_type_array'] = service_npsaccredit::$accredit_type_array;

    	$m_accredit = new model_mk_npsaccredit();
    	$m_accredit_cache = new model_mk_npsaccredit();

    	$m_accreditTableName=$m_accredit->tableName();
    	$m_task=new zbj_model_mk_task();
    	$m_taskTableName=$m_task->tableName();
    	$m_accredit->setLimit($limit);
    	$m_accredit->setCount(true);
    	$m_accredit->setPage($curpage);

    	$leftjoin = array(
    			'mk_task'=>'mk_task.task_id=mk_nps_accredit.task_id'
    			);
    	//
    	$accredit_state=zbj_lib_BaseUtils::getStr($_GET['accredit_state'],'int');
    	if ($accredit_state) {
    		$con[$m_accreditTableName.'.accredit_state']=$accredit_state;
    	}
    	//
    	$accredit_type=zbj_lib_BaseUtils::getStr($_GET['accredit_type'],'int');
    	if ($accredit_type) {
    		$con[$m_accreditTableName.'.accredit_type']=$accredit_type;
    	}
    	$module_id=zbj_lib_BaseUtils::getStr($_GET['module_id'],'int');

    	if ($module_id) {
    		$s_get_module = new service_module($module_id);
    		$category_ids = $s_get_module->getCategoryIdStrByModuleId();
    		$con[]="category_id in ({$category_ids})";
    	}
    	$pk_type=zbj_lib_BaseUtils::getStr($_GET['pk_type'],'int');
    	$pk_content=zbj_lib_BaseUtils::getStr($_GET['pk_content']);
    	if ($pk_type && $pk_content) {
    		switch ($pk_type){
    			case 1:
    				$con[$m_accreditTableName.'.task_id']=$pk_content;
    				break;
    			case 2:
    				$con[$m_accreditTableName.'.user_id']=$pk_content;
    				break;
    			case 3:
    				$con[$m_accreditTableName.'user_name']=$pk_content;
    				break;
    		}
    	}
    	$start=zbj_lib_BaseUtils::getStr($_GET['sct']);
    	$end=zbj_lib_BaseUtils::getStr($_GET['ect']);

    	//发起人
    	$create_manager_id=zbj_lib_BaseUtils::getStr($_GET['uid'],'int');
    	$group_id=zbj_lib_BaseUtils::getStr($_GET['gid'],'int');
    	if ($create_manager_id) {
    		$con[$m_accreditTableName.'.create_manager_id']=$create_manager_id;
    	}elseif ($group_id){
    		$cpuser = new zbj_model_cp_user();
    		$auids = $cpuser->selectOne(array('group_id' => $group_id), 'group_concat(user_id) as auids');
    		if ($auids['auids']) {
    			$con[] = $m_accreditTableName.".create_manager_id in ({$auids['auids']})";
    		}
    	}

    	//授权发起时间
    	if ($start) {
    		$con[]=$m_accreditTableName.'.createtime>='.strtotime($start);
    	}
    	if ($end) {
    		$con[]=$m_accreditTableName.'.createtime<='.strtotime($end);
    	}
    	//交易顾问
    	$manager_id=zbj_lib_BaseUtils::getStr($_GET['uid2']);
    	$group_id2=zbj_lib_BaseUtils::getStr($_GET['gid2'],'int');
    	if ($manager_id) {
    		$con[$m_taskTableName.'.manager_id']=$manager_id;
    	}elseif ($group_id2){
    		$cpuser = new zbj_model_cp_user();
    		$auids = $cpuser->selectOne(array('group_id' => $group_id2), 'group_concat(user_id) as auids');
    		if ($auids['auids']) {
    			$con[] = $m_taskTableName.".manager_id in ({$auids['auids']})";
    		}
    	}
    	$mode=zbj_lib_BaseUtils::getStr($_GET['mode'],'int');
    	if ($mode) {
    		switch ($mode){
    			case 1:
    				$con[]=$m_taskTableName.'.mode=10 and '.$m_taskTableName.'.allot in(1,2) ';
    				break;
    			case 2:
    				$con[]=$m_taskTableName.'.mode=10 and '.$m_taskTableName.'.allot=3 ';
    				break;
    			case 3:
    				$con[]=$m_taskTableName.'.mode=11 ';
    				break;
    			case 4:
    				$con[]=$m_taskTableName.'.mode=12 ';
    				break;
    			case 5:
    				$con[]=$m_taskTableName.'.mode=13 ';
    				break;
    		}
    	}
    	$amout=zbj_lib_BaseUtils::getStr($_GET['amount'],'int');
    	if ($amout) {
    		switch ($amout){
    			case 1:
    				$con[]=$m_accreditTableName.'.amount<100';
    				break;
    			case 2:
    				$con[]=$m_accreditTableName.".amount>=100 and ".$m_accreditTableName.".amount<500";
    				break;
    			case 3:
    				$con[]=$m_accreditTableName.".amount>=500 and ".$m_accreditTableName.".amount<1000";
    				break;
    			case 4:
    				$con[]=$m_accreditTableName.".amount>=1000 and ".$m_accreditTableName.".amount<2000";
    				break;
    			case 5:
    				$con[]=$m_accreditTableName.".amount>=2000 and ".$m_accreditTableName.".amount<3000";
    				break;
    			case 6:
    				$con[]=$m_accreditTableName.".amount>=3000 and ".$m_accreditTableName.".amount<5000";
    				break;
    			case 7:
    				$con[]=$m_accreditTableName.".amount>=5000 and ".$m_accreditTableName.".amount<10000";
    				break;
    			case 8:
    				$con[]=$m_accreditTableName.".amount>=10000 ";
    				break;
    		}
    	}
    	$user_type=zbj_lib_BaseUtils::getStr($_GET['user_type'],'int');
    	if ($user_type) {
    		$con[$m_accreditTableName.'.user_type']=$user_type;
    	}

    	//------------排序-------------
    	$o = $_GET['o']; //排序条件
    	$ud = (int) $_GET['ud']; //升降序
    	if ($o) {
    		switch ($o) {
    			default:
    				$orderby = "order by $o " . ($ud == 1 ? 'desc' : 'asc');
    				break;
    		}
    	}else{
    		$orderby = "order by {$recordTable}.record_id desc";
    	}


    	$item = 'mk_nps_accredit.*,'.$m_taskTableName.'.mode,'.$m_taskTableName.'.allot,'.$m_taskTableName.'.manager_name,'.$m_taskTableName.'.category_id,hosted_amount';
    	$accreditObj = $m_accredit->select($con, $item, null, 'order by accredit_id desc',$leftjoin);
    	$accredit_cache = $m_accredit_cache->select($con, $item, null, 'order by accredit_id desc',$leftjoin)->items;//将所有记录放到缓存中，供导出使用
    	$this->tplvar['accredit'] = $accreditObj->items;
    	$cache->set($cacheName, $accredit_cache, $timestamp);
    	$this->tplvar ['pagebar'] = $this->PageBar($accreditObj->totalSize, $limit, $curpage, $inPath, 'style4');


    	$sConfig = new service_config();
    	$sConfig = $sConfig->init(45);
    	$field = $_POST['field'];
    	if ($field) {
    		$hastitle=false;
    		foreach ($field as $value) {
    			if($value=='title'){
    				$hastitle=true;
    			}
    			$sConfig->setField($value);
    		}
    		$sConfig->addConfig($this->_userid);
    	}
    	$fieldsConfig = $sConfig->getFieldsByUser($this->_userid);
    	$fields = array_keys($fieldsConfig);
    	$this->tplvar['fields'] = $fieldsConfig;
    	$this->tplvar['fields_key'] = $fields;
    	$this->tplvar['allfields'] = $sConfig->getFields();
    	$this->tplvar['total'] = (int) $accreditObj->totalSize;
    	//小组、处理人
    	$usergroups = new zbj_model_cp_usergroups();
    	$group = zbj_lib_BaseUtils::apicall('cpuser', 'GetGroupList', array('pid'=>123));
    	if ($group['data']) {
    		foreach ($group['data'] as $gid){
    			$gid123[]=$gid['group_id'];
    		}
    	}
    	if ($gid123) {
    		$this->tplvar['groups123'] = $usergroups->select("group_id in (".implode(',', $gid123).")", '`group_id`,`name`')->items;
    	}
    	//小组、处理人
    	$group = zbj_lib_BaseUtils::apicall('cpuser', 'GetGroupList', array('pid'=>164));
    	if ($group['data']) {
    		foreach ($group['data'] as $gid){
    			$gid164[]=$gid['group_id'];
    		}
    	}
    	if ($gid164) {
 		   	$this->tplvar['groups164'] = $usergroups->select("group_id in (".implode(',', $gid164).")", '`group_id`,`name`')->items;
    	}
    	
    	if ($check == 1) return $this->render('misc/nps/accreditchecklist.html', $this->tplvar);
// 		if ($is_leader ==0 && $is_finance ==0) {
// 			return $this->render('misc/nps/accreditlist.html', $this->tplvar);
// 		}else{
// 			if ($check == 1) return $this->render('misc/nps/accreditchecklist.html', $this->tplvar);
// 		}

		$this->tplvar['user_id'] = $this->_userid;
    	return $this->render('misc/nps/accreditlist.html', $this->tplvar);
    }

    public function pageNpsAccreditListExcel(){
    	$cacheName = "misc_npsAccredit_list_".$this->_userid;
    	$cache = new zbj_lib_cache('memcache');
//     	$cache = new zbj_lib_cache();
    	$data = $cache->get($cacheName);
    	if (!$data) $this->printmsg("没有数据，请点击筛选后再执行导出操作！", 2);

    	include_once (dirname(__FILE__) . DIRECTORY_SEPARATOR . "../lib/excel/PHPExcel.php");
    	$objPHPExcel = new PHPExcel();
    	$objPHPExcel->getProperties()
    	->setCreator($this->_nickname)
    	->setLastModifiedBy($this->_nickname)
    	->setTitle("数据EXCEL导出")
    	->setSubject("数据EXCEL导出")
    	->setDescription("备份数据")
    	->setKeywords("excel")
    	->setCategory("result file");
    	$name = date("Y-m-d_H-i-s")."授权监控列表";
    	$objPHPExcel->setActiveSheetIndex(0);
    	$objActSheet1 = $objPHPExcel->getActiveSheet();
    	$objActSheet1->setTitle('自开');
    	$num = 1;
    	$objActSheet1->setCellValue('A'. $num , "发起人")
    	->setCellValue('B'. $num, "授权类型")
    	->setCellValue('C'. $num, "授权原因")
    	->setCellValue('D'. $num, "需求号")
    	->setCellValue('E'. $num, "交易顾问")
    	->setCellValue('F'. $num, "模式")
    	->setCellValue('G'. $num, "行业类目")
    	->setCellValue('H'. $num, "授权金额")
    	->setCellValue('I'. $num, "退回方式")
//     	->setCellValue('J'. $num, "银行卡号/支付宝账号")
//     	->setCellValue('K'. $num, "开户人姓名")
    	->setCellValue('J'. $num, "开户行地址")
    	->setCellValue('K'. $num, "用户属性")
    	->setCellValue('L'. $num, "用户ID")
    	->setCellValue('M'. $num, "处理状态")
    	->setCellValue('N'. $num, "授权发起时间")
    	->setCellValue('O'. $num, "处理完成时间")
    	->setCellValue('P'. $num, "用户反馈（NPS评分）");
    	foreach ($data as $k=>$v){
    		$num += 1;
    		$mode = '';
    		$remark = "";
    		if ($v['accredit_state'] == 4) {
    			$remark = "，备注：{$v['remark']}";
    		}
    		$remark = str_replace('=','',$remark);
    		if ($v['mode'] == 10 && in_array($v['allot'], array(1,2))) $mode = '比稿';
    		if ($v['mode'] == 10 && $v['allot'] == 3) $mode = '计件';
    		if ($v['mode'] == 11) $mode = '服务';
    		if ($v['mode'] == 12) $mode = '雇佣';
    		if ($v['mode'] == 13) $mode = '招标';
    		$user_id = $v['user_id'];
    		if($v['accredit_type'] == 17) {
    			$user_id = "扣款：{$v['user_id']}，充值：{$v['pay_user_id']}";
    		}
    		$objActSheet1->setCellValue('A'. $num, $v['create_manager_name'])
    		->setCellValue('B'. $num, service_npsaccredit::$accredit_type_array[$v['accredit_type']])
    		->setCellValue('C'. $num, str_replace('=','',$v['reason']))
    		->setCellValue('D'. $num, $v['task_id'])
    		->setCellValue('E'. $num, $v['manager_name'])
    		->setCellValue('F'. $num, $mode)
    		->setCellValue('G'. $num, service_npsaccredit::getModuleName($v['category_id']))
    		->setCellValue('H'. $num, $v['amount'])
    		->setCellValue('I'. $num, service_npsaccredit::$refund_way_array[$v['refund_way']])
//     		->setCellValue('J'. $num, $v['account'] . ' ')
//     		->setCellValue('K'. $num, $v['account_name'])
    		->setCellValue('J'. $num, $v['bank'])
    		->setCellValue('K'. $num, service_npsaccredit::$user_type_array[$v['user_type']])
    		->setCellValue('L'. $num, $v['user_id'])
    		->setCellValue('M'. $num, service_npsaccredit::$accredit_state_array[$v['accredit_state']].$remark)
    		->setCellValue('N'. $num, date('Y-m-d : H:i', $v['createtime']))
    		->setCellValue('O'. $num, $v['endtime']?date('Y-m-d : H:i', $v['endtime']):'')
    		->setCellValue('P'. $num, service_task::getNpsScore($v['task_id']))
    		;
    	}
    	$objPHPExcel->setActiveSheetIndex(0);
    	header('Content-Type: application/vnd.ms-excel');
    	header('Content-Disposition: attachment;filename="' . $name . '.xls"');
    	header('Cache-Control: max-age=0');
    	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
    	$objWriter->save('php://output');
    	exit;
    }

    /**
     * 提醒工单发起人评价工单
     *
     * @access public
     * @author yuan
     */
    public function pageRemindEvaluation() {
    	$order_id = zbj_lib_BaseUtils::getStr($_GET['id']);
    	$s_order = new service_order($order_id);

    	$s_manager = new service_manager($this->_userid);

    	lib_BaseUtils::apiInit();
    	$msg_service = new com\zhubajie\boss\interfaces\messageServiceClient(null);
    	lib_BaseUtils::apigetclient($msg_service);

    	$message_params=new com\zhubajie\boss\dataobject\message\SentMessageParamsDo();
    	$message_params->f_uid = $this->_userid;
    	$message_params->product_type = messageProduct::CPORDER;
    	$message_params->product_id = $order_id;
    	$message_params->range = messageRange::SELECT_USER;
    	$message_params->to_uids = array($s_order->get('f_uid'));
    	//站内信
    	$message_pack = new messagePack();
    	$message_pack->type = messageType::BOSSMESSAGE;
    	$message_pack->title = $s_manager->get('name') . '提醒你评价工单';
    	$message_pack->cont = $s_manager->get('name') . '提醒你评价工单。<br/>工单详情：' . $s_order->get('cont');
    	$message_params->messagePack[] = $message_pack;
    	//邮件
    	$message_pack = new messagePack();
    	$message_pack->type = messageType::MAIL;
    	$message_pack->title = $s_manager->get('name') . '提醒你评价工单';
    	$message_pack->cont = $s_manager->get('name') . '提醒你评价工单。<br/>工单详情：' . $s_order->get('cont');
    	$message_params->messagePack[] = $message_pack;

    	$msg_service->sentMessage($message_params);

    	return $this->printmsg('提醒完成', 2);
    }
    public function pageAccreditUpdateAgree() {
    	$ids = zbj_lib_BaseUtils::getStr($_GET['ids']);
    	if (!$ids) return $this->printmsg("请选择要同意的服务授权记录！", 0);
    	$ids = trim($ids, ',');
    	$ids_array = explode(',', $ids);
    	if ($ids_array) {
    		$total = count($ids_array);
    		$error_num = 0;
    		foreach ($ids_array as $v) {
    			$s_accredit = new service_npsaccredit($v);
    			if ($s_accredit->updateCheckState($this->_userid, $this->_nickname, 1) === false) {
    				$error_num += 1;
    			}
    		}
    		if ($total == $error_num) {
    			return $this->printmsg("批量同意操作全部失败！", 0);
    		}else if ($error_num) {
    			return $this->printmsg("批量同意操作部分失败！", 2, null, $_SERVER['HTTP_REFERER']);
    		}
    	}else{
    		return $this->printmsg("请选择要同意的服务授权记录！", 0);
    	}
    	return $this->printmsg("操作成功", 2, null, $_SERVER['HTTP_REFERER']);
    }
    /**
     * 导出获取各级类目及行业数据
     */
    function pageCategoryOutExcel(){
        //获取mk_module数据
        $mdlMkModule = new zbj_model_mk_module();
        $mk_module = $mdlMkModule->select('' , 'module_id,module_name' , '' , '')->items;
        $mk_module_id_name = zbj_lib_BaseUtils::indexArray($mk_module, 'module_id', 'module_name');

        //获取mk_module_category
        $mdlMkModuleCategory    = new zbj_model_mk_modulecategory();
        $mk_module_category = $mdlMkModuleCategory->select('' , 'category_id,module_id' , '' , '')->items;
        $cid_module = zbj_lib_BaseUtils::indexArray($mk_module_category, 'category_id', 'module_id');

        //获取三级分类数据
        $categoryService = new zbj_service_categoryvirtual();
        $resCategory     = $categoryService ->getEnabledTree();
        $output = array();
        $keys   =   0;
        foreach ($resCategory as $key1 => $category1) {
                if(!empty($category1['list'])) {
                    foreach ($category1['list'] as $key2 => $category2) {
                        if(!empty($category2['list'])) {
                            foreach ($category2['list'] as $key3 => $category3) {
                                $category_id = $category3['category_id'];
                                $output[$keys]['行业名称'] = $mk_module_id_name[$cid_module[$category_id]];
                                $output[$keys]['1级类目id'] = $resCategory[$key1]['virtual_id'];
                                $output[$keys]['1级类目名称'] = $resCategory[$key1]['virtual_name'];
                                $output[$keys]['1级类目域名'] = $resCategory[$key1]['cndir'];
                                $output[$keys]['2级类目id'] = $category1['list'][$key2]['virtual_id'];
                                $output[$keys]['2级类目名称'] = $category1['list'][$key2]['virtual_name'];
                                $output[$keys]['2级类目域名'] = $category1['list'][$key2]['cndir'];
                                $output[$keys]['3级类目id'] = $category2['list'][$key3]['virtual_id'];
                                $output[$keys]['3级类目名称'] = $category2['list'][$key3]['virtual_name'];
                                $output[$keys]['3级类目域名'] = $category2['list'][$key3]['cndir'];
                                $keys++;
                            }
                        }else{
                            $category_id = $category2['category_id'];
                            $output[$keys]['行业名称'] = $mk_module_id_name[$cid_module[$category_id]];
                            $output[$keys]['1级类目id'] = $resCategory[$key1]['virtual_id'];
                            $output[$keys]['1级类目名称'] = $resCategory[$key1]['virtual_name'];
                            $output[$keys]['1级类目域名'] = $resCategory[$key1]['cndir'];
                            $output[$keys]['2级类目id'] = $category1['list'][$key2]['virtual_id'];
                            $output[$keys]['2级类目名称'] = $category1['list'][$key2]['virtual_name'];
                            $output[$keys]['2级类目域名'] = $category1['list'][$key2]['cndir'];
                            $output[$keys]['3级类目id'] = null;
                            $output[$keys]['3级类目名称'] = null;
                            $output[$keys]['3级类目域名'] = null;
                            $keys++;
                        }
                    }
                }else{
                    $category_id = $category1['category_id'];
                    $output[$keys]['行业名称'] = $mk_module_id_name[$cid_module[$category_id]];
                    $output[$keys]['1级类目id'] = $resCategory[$key1]['virtual_id'];
                    $output[$keys]['1级类目名称'] = $resCategory[$key1]['virtual_name'];
                    $output[$keys]['1级类目域名'] = $resCategory[$key1]['cndir'];
                    $output[$keys]['2级类目id'] = null;
                    $output[$keys]['2级类目名称'] = null;
                    $output[$keys]['2级类目域名'] = null;
                    $output[$keys]['3级类目id'] = null;
                    $output[$keys]['3级类目名称'] = null;
                    $output[$keys]['3级类目域名'] = null;
                    $keys++;
                }
        }
        SExcel::simpleExport($output,'outFile');
    }
}
