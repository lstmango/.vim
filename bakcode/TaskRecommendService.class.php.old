<?php
use com\zhubajie\task\interfaces\TaskRecommendServiceIf;

use com\zhubajie\task\dataobject\taskrecommend\QueryResultDO;
use com\zhubajie\task\dataobject\taskrecommend\ResultDO;
use com\zhubajie\task\dataobject\taskrecommend\GetConditionList;
use com\zhubajie\task\dataobject\taskrecommend\ConditionDO;
use com\zhubajie\task\dataobject\taskrecommend\RecallParamsDO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendStatus;
use com\zhubajie\task\dataobject\taskrecommend\UpdateRecdParamsDO;
use com\zhubajie\task\dataobject\taskrecommend\ConditionParamsDO;
use com\zhubajie\task\dataobject\taskrecommend\SendResultDO;
use com\zhubajie\task\dataobject\taskrecommend\SendUserParamsDO;
use com\zhubajie\task\dataobject\taskrecommend\RecallResultDO;
use com\zhubajie\task\dataobject\taskrecommend\ReAbandonParamsDO;
use com\zhubajie\task\dataobject\taskrecommend\TaskCountResultDO;

use com\zhubajie\task\dataobject\taskrecommend\RecommendParamDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendCountParamDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendListResultDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendCountResultDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendCountDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendDTO;

/**
 * 派单抢单类
 */
class api_TaskRecommendService extends service_abstract implements TaskRecommendServiceIf {
	
	/**
	 * 保存抢单条件
	 * 
	 * @author songpengbo
	 * @date 2015-03-18
	 */
	public function saveCondition($task_id,$category_id,$search_type,array$condition) {
		$result = new ResultDO();
		try{
			$conditions = array();
			$task_id=intval($task_id);
			$category_id=intval($category_id);
			$search_type=intval($search_type);
			foreach($condition as $v){
				$type =intval($v->type);
				if(!in_array($type, array(0,1))) throw new Exception("传入类型参数错误",-1);
				if( $type === 0){
					$key=zbj_lib_BaseUtils::getStr($v->key);
					$arr1=explode("-",$key);
					$ext_id=intval($arr1[0]);
					$ext_name=zbj_lib_BaseUtils::getStr($arr1[1]);
					$value=zbj_lib_BaseUtils::getStr($v->value);
					$arr2=explode("|",$value);
					foreach ($arr2 as $va){
						$arr3 = explode("-",$va);
						$item = new ConditionDO();
						$item->task_id=$task_id;
						$item->category_id=$category_id;
						$item->type=$type;
						$item->ext_id=$ext_id;
						$item->ext_name=$ext_name;
						$item->val_id=intval($arr3[0]);
						$item->val_name=zbj_lib_BaseUtils::getStr($arr3[1]);
						$item->search_type=$search_type;
						$conditions[]=$item;
					}
				}else{
					$ext_id=0;
					$ext_name=zbj_lib_BaseUtils::getStr($v->key);
					$value=zbj_lib_BaseUtils::getStr($v->value);
					$item = new ConditionDO();
					$item->task_id=$task_id;
					$item->category_id=$category_id;
					$item->type=$type;
					$item->ext_id=$ext_id;
					$item->ext_name=$ext_name;
					$item->val_id=0;
					$item->val_name=$value;
					$item->search_type=$search_type;
					$conditions[]=$item;
				}
			}
			$s_recmd_con=new service_recommend_conditions();
			$results=$s_recmd_con->saveCon($conditions);
			if($results === false){
				throw new Exception("保存抢单条件失败".$s_recmd_con->getError(),-1); 
			}
			$result->success= true;
		}catch (Exception $e) {
			$result->success = false;
			$result->code =$e->getCode();
			$result->message =$e->getMessage();
		}
		return $result;
	}

	/**
	 * 获取抢单条件
     *
	 * @author songpengbo
	 * @date 2015-03-18
	 */
	public function getCondition($task_id,$search_type,$type=2) {

		$result=new GetConditionList();
		try{
			$type=intval($type);
			$search_type=intval($search_type);
			if(!in_array($type, array(1,2))) throw new Exception("类型参数错误",-1);
			if(!in_array($search_type, array(1,2,3))) throw new Exception("搜索参数错误",-1);
			$s_recmd_con=new service_recommend_conditions();
			$results=$s_recmd_con->getConList($task_id,$search_type);
			if($results === false){
				throw new Exception("获取抢单条件失败".$s_recmd_con->getError(),-2);
			}
			if(!empty($results->items)){
				$val = array();
				$category_id=intval($results->items[0]['category_id']);
				$result->category_id=$category_id;
				foreach($results->items as $value)
				{
					if (isset($val[$value['ext_id']]))
					{
						array_push($val[$value['ext_id']], $value);
					}
					else
					{
						$val[$value['ext_id']][0] = $value;
					}
				}
				foreach ($val as $k=>$v){
					if($k==0){
						foreach ($v as $g){
							$item=new ConditionParamsDO();
							$item->type=1;
							$item->key=$g['ext_name'];
							$item->value=$g['val_name'];
							$result->data[]=$item;
						}
					}else{
						foreach ($v as $g){
							if($type === 1){
								$values[$k].=$g['val_id'].'-'.$g['val_name'].'|';
							}elseif($type === 2){
								$values[$k].=$g['val_name'].',';
							}
						}
					}
				}
				foreach ($values as $key=>$vs){
						$item=new ConditionParamsDO();
						$item->type=0;
						$item->key=$key;
						if($type === 1){
							$item->value=rtrim($vs,'|');
						}elseif($type === 2){
							$item->value=rtrim($vs,',');
						}
						$result->data[]=$item;
				}
			}else{
				throw new Exception("未找到对应抢单条件",-3);
			}

			$result->success= true;
		}Catch (Exception $e){
			$result->success= false;
			$result->code=$e->getCode();
			$result->message=$e->getMessage();
		}
		return $result;
	}

	/**
	 * 计划任务派单
	 * @author songpengbo
	 * @date 2015-03-21
	 */
	public function autoRecommend($params) {

        $result=new ResultDO();
        try{

            $task_id = (int)$params['task_id'];
            $recdSrv = new service_recommend();
            $manage = new SendUserParamsDO();
			//系统派单
			$manage->type = 1;
            if(false === ( $total = $recdSrv->sendRecd($task_id,$manage,true)) ){

                throw new Exception($recdSrv->getError(),$recdSrv->getError("code"));
	}
            $result->success=true;

        }catch (Exception $e){
            $result->success= false;
            $result->code=$e->getCode();
            $result->message=$e->getMessage();
        }
        return $result;
	}

    /**
     * 派单接口
	 */
    public function sendRecd($task_id,SendUserParamsDO $manage){

		$result=new SendResultDO();

		try{

			if(!in_array($manage->type,array(1,2,3))){
				$manage->type =2;//默认人工派单
			}

            $recdSrv = new service_recommend();
            if(false === ( $total = $recdSrv->sendRecd($task_id,$manage)) ){
				throw new Exception($recdSrv->getError(),$recdSrv->getError("code"));
			}

			$result->total_wks=$total;
            $result->total=$total;
			$result->success=true;

		}catch (Exception $e){
			$result->success= false;
			$result->code=$e->getCode();
			$result->message=$e->getMessage();
		}

		return $result;
	}
    /**
     * 派单接口
     */
    public function sendRecdCustom($task_id,SendUserParamsDO $manage){
        return $this->sendRecd($task_id,$manage);
    }

	/**
	 * 抢单
	 * 
	 * @author songpengbo
	 * @date 2015-03-20
	 */
	public function recdRecall(RecallParamsDO $recall_params) {

		$result=new RecallResultDO();

		try{

			$task_id=intval($recall_params->task_id);
			$type=intval($recall_params->type);
			$operate_option=(array)$recall_params->operate_option;
			$user=$recall_params->data;
			$s_recommend=new service_recommend();

            //来源判定
            if(!in_array($type, array(1,2))){
                throw new Exception("请传入正确的来源类别",RecallResultCode::PARAM_ERROR);
            }

            //服务商抢单数据
            if(empty($user)) {
                throw new Exception("请传入威客抢单数据", RecallResultCode::PARAM_ERROR);
            }

            //验证接口 服务商动作一致
            $status = 0 ;
            foreach( $user as $val){
                $status == 0 && $status = intval($val->status);
                if($status != intval($val->status)){
                    throw new Exception("用户动作操作不一致！");
                }
            }

            //用户接受或拒绝抢单
            if(!in_array($status,array(RecommendStatus::USER_ACCEPT))){
                throw new Exception("非法操作，接口只允许抢单接受和拒绝！");
            }

			if( false === ($works=$s_recommend->recall($task_id,$type,$user,$operate_option))){
                throw new Exception($s_recommend->getError(),$s_recommend->getError("code"));
            }

			$result->success= true;
			$result->message= "抢标成功！";
			$result->works_ids=$works;

		}catch(Exception $e){

			$result->success= false;
			$result->code=$e->getCode();
			$result->message=$e->getMessage();

		}
		return $result;
	}
	
	/**
	 * 搜索服务商
	 * 
	 * @author songpengbo
	 * @date 2015-03-21
	 */
	public function searchWk($task_id){
		$result=new SendResultDO();
		try{
			$task_id=intval($task_id);
			$condition = $this->getCondition($task_id,2,2);
			$m_recmd=new model_mk_recommend();
			$user=$m_recmd->select(array('task_id'=>$task_id),'user_id');
			$users=$user->items;
			if(!empty($users)){
				foreach($users as $k=>$v){
					$userss[$v['user_id']] = $v['user_id']; 
				}
			}else{
				$userss = array();
			}
			foreach($condition->data as $v){
				$conditions[$v->key]=$v->value;
			}
			//雇主自己的ID必须过滤掉
			if($conditions['buyer_id']){
				$userss[$conditions['buyer_id']] = $conditions['buyer_id']; 
			}
			zbj_lib_ApiClient::init(APPID, SECRET,10,'zbj_alg_sdk');
			$api_jdy = new com\zhubajie\alg\interfaces\JdyServiceClient(null);
			zbj_lib_ApiClient::build($api_jdy);
			$wk=$api_jdy->userList($userss, $conditions);
			if($wk->success === false) throw new Exception("查找推荐服务商失败",-3);
			$total=intval($wk->total);
			$result->total=$total;
			$result->total_wks=$total;
			$result->users=$wk->users;
			$result->similarneeds = $wk->similarneeds;
			$result->similarservice = $wk->similarservice;
			$result->filteredTotal = $wk->filteredTotal;  //被过滤掉的总数
			$result->filtered = $wk->filtered;  //被过滤掉的ID
			$result->filterType = $wk->filterType;  //被过滤掉的类型
			$result->success=true;
		}Catch (Exception $e){
			$result->success= false;
			$result->code=$e->getCode();
			$result->message=$e->getMessage();
		}
		return $result;
	}
	
	
	/**
	 * 搜索可以邀请的服务商
	 * @author 
	 * @date 2015-04-3
	 */
	public function getInviteWk($task_id){
		$result=new SendResultDO();
		try{
			$task_id = intval($task_id);
			if($task_id <= 0){
				throw new Exception('传递的需求号异常',-3);
			}
			
			$condition = $this->getCondition($task_id,3,2);
			foreach($condition->data as $v){
				$conditions[$v->key]=$v->value;
			}
			
			$recmdModel = new model_mk_recommend();
			$recmd = $recmdModel->select(array('task_id'=>$task_id),'user_id');
			$users = $recmd->items;
			$users = (array)$users;
			
			$inviteModel = new model_mk_taskinvitation();
			$invite = $inviteModel->select(array('task_id'=>$task_id),'user_id');
			$users2 = $invite->items;
			$users2 = (array)$users2;
			
			!empty($users2) && $users = array_merge($users,$users2);
			if(!empty($users)){
				foreach($users as $k=>$v){
					$userss[$v['user_id']] = $v['user_id']; 
				}
			}else{
				$userss = array();
			}
			
			zbj_lib_ApiClient::init(APPID, SECRET,15,'zbj_alg_sdk');
			$jdyApi = new com\zhubajie\alg\interfaces\JdyServiceClient(null);
			zbj_lib_ApiClient::build($jdyApi);
			
			$wk = $jdyApi->userList($userss, $conditions);
			if($wk->success === false){
				throw new Exception("查找可以邀请服务商失败",-3);
			}
			
			$total = intval($wk->total);
			$result->total	= $total;
			$result->total_wks = $total;
			$result->users 	= $wk->users;
			$result->similarneeds = $wk->similarneeds;
			$result->similarservice = $wk->similarservice;
			$result->filteredTotal = $wk->filteredTotal;  //被过滤掉的总数
			$result->filtered = $wk->filtered;  //被过滤掉的ID
			$result->filterType = $wk->filterType;  //被过滤掉的类型
			$result->success=true;
		}Catch (Exception $e){
			$result->success = false;
			$result->code	= $e->getCode();
			$result->message=$e->getMessage();
		}
		return $result;
	}
	
	/**
	 * 抢单列表查询 
	 * 
	 * @author yuanzhuang
	 * @date 2015-03-18
	 */
	public function query(com\zhubajie\task\dataobject\taskrecommend\QueryParamsDO $query_params) {
		$result = new QueryResultDO();
		
		try {
			$m_task_recomment = new model_mk_recommend();

			//读取最新一条派单记录 读主库
			if(intval($query_params->status) ==1){
				$m_task_recomment->setDbEntry();
			}

			$condition = array();
			//排除 is_sys 3 定向派单的情况
			$condition[0] = 'is_sys between 1 and 2 ';
			if ($query_params->task_id) {
				$condition['mk_recommend.task_id'] = zbj_lib_BaseUtils::getStr($query_params->task_id);
			}
			if ($query_params->user_id) {
				$condition['mk_recommend.user_id'] = zbj_lib_BaseUtils::getStr($query_params->user_id);
			}
			if ($query_params->status) {
				$condition[] = 'mk_recommend.action_type IN (' . zbj_lib_BaseUtils::getStr($query_params->status) . ')';
			}
			if ($query_params->options) {
				if (is_array($query_params->options)) {
					foreach ($query_params->options as $key => $value) {
						switch ($key) {
							case 'is_sys':
								if(zbj_lib_BaseUtils::getStr($value)){
									unset($condition[0]);
								$condition[] = 'mk_recommend.is_sys IN (' . zbj_lib_BaseUtils::getStr($value) . ')';
								}
								break;
							case 'is_expired':
								if ($value) {
									$condition[] = 'sendtime < ' . (time() - 10 * 60);
								} else {
									$condition[] = 'sendtime > ' . (time() - 10 * 60);
								}
								break;
							case 'min_recommend_date':
								if ($value) {
									$condition[] = 'senddate >= "' . zbj_lib_BaseUtils::getStr($value) . '"';
								}
								break;
							case 'max_recommend_date':
								if ($value) {
									$condition[] = 'senddate <= "' . zbj_lib_BaseUtils::getStr($value) . '"';
								}
								break;
							default:
								break;
						}
					}
				} else {
					throw new Exception('扩展条件options参数错误', -1);
				}
			}
			
			$order_by = '';
			if ($query_params->order) {
				if (is_array($query_params->order)) {
					foreach ($query_params->order as $key => $value) {
						switch ($key) {
							case 'recommend_time':
								$order_by = 'ORDER BY sendtime ' . zbj_lib_BaseUtils::getStr($value);
								break;
							default:
								break;
						}
					}
				} else {
					throw new Exception('order参数不对', -1);
				}
			}
			
			$item = array(
				'mk_recommend.task_id',
				'title',
				'mk_task.amount',
				'mk_task.hosted',
				'mk_task.mode',
				'mk_task.user_id',//雇主
				'mk_task.nickname',
				'mk_recommend.user_id as recommend_user_id',//推荐服务商id
				'mk_recommend.sendtime',
				'mk_recommend.action_type as status',
				'mk_recommend.works_id',
			);
			$left_join = array('mk_task' => 'mk_task.task_id = mk_recommend.task_id');
			$limit = $query_params->limit? zbj_lib_BaseUtils::getStr($query_params->limit): 10;
			$page = $query_params->page? zbj_lib_BaseUtils::getStr($query_params->page): 1;
			
			$m_task_recomment->setLimit($limit);
			$m_task_recomment->setPage($page);
			$m_task_recomment->setCount(true);
			$recommend_list = $m_task_recomment->select($condition, $item, '', $order_by, $left_join);
			if (false !== $recommend_list) {
				$data = array();
				foreach ($recommend_list->items as $each_item) {
					$each_item['expired_time'] = $each_item['sendtime'] + 10 * 60;
					unset($each_item['sendtime']);
					
					$data[] = $each_item;
				}
			} else {
				throw new Exception('查询出错', -1);
			}
			
			$result->success = true;
			$result->total = $recommend_list->totalSize;
			$result->page = $recommend_list->page;
			$result->limit = $recommend_list->limit;
			$result->data = $data;
		} catch (Exception $e) {
			$result->success = false;
			$result->message = $e->getMessage();
			$result->code = $e->getCode();
		}
		
		return $result;
	}

	/**
     * TODO 废弃
	 * 派单10分钟服务商未作任何处理时则系统自动放弃
	 * @author merlin
	 */
	public function autoGiveUp($interval) {
		$result = new ResultDO();
		return $result;
	}

	/**
	 * 开启派单
	 * @param $task_id
	 * @return ResultDO
	 */
	public function openRecommend($task_id) {
		$result = new ResultDO();
		
		try {
			if (! ($task_id && is_numeric($task_id))) {
				throw new Exception('参数错误', -1);
			}

			$option_srv = new service_recommend_option($task_id);
			if(false === $option_srv->reopenRecmd()){
				throw new Exception($option_srv->getError());
			}
			$result->success = true;
		} catch (Exception $e) {
			$result->success = false;
			$result->message = $e->getMessage();
			$result->code = $e->getCode();
		}
		
		return $result;
	}

    /**
     * 批量更新派单状态接口
     * @author merlin
     * @date 2015-04-09
     */
    public function updateRecdActionType(UpdateRecdParamsDO $update_params) {

        $result=new RecallResultDO();

        try{

			$users 		= $update_params->data;
			$task_id 	= intval($update_params->task_id);
			$actionType = intval($update_params->actionType);
			$operate_option=(array)$update_params->operate_option;

            $s_recommend= new service_recommend();
            $work_ids = $s_recommend->updateRecdActionType($task_id,$actionType,$users,$operate_option);
            $result->success= true;
            $result->works_ids=(array)$work_ids;
            $result->code = 0;
            $result->message = "ok";
        }catch (Exception $e){

            $result->success= false;
            $result->code=$e->getCode();
            $result->message=$e->getMessage();

        }

        return $result;
    }

    /**
     * 被动放弃
     * @author songpengbo
     * @date 2015-04-7
     */
    public function reAbandon(ReAbandonParamsDO $reabandon_params){
        $result = new ResultDO();

        try {
            throw new Exception('接口已更改！', -1);
            $result->success = true;
        } catch (Exception $e) {
            $result->success = false;
            $result->message = $e->getMessage();
            $result->code = $e->getCode();
        }

        return $result;
    }

    /**
     * 获取需求派单抢单数据
     * @return TaskStatusDO
     */
    public function taskCount( $task_id){

        $result = new TaskCountResultDO();

        try {
            $result->success = true;
            $result->code = 0;
            $result->message = "success";

            $service = new service_recommend();
            if(false === ($taskCount = $service->getTaskCount($task_id))){
				throw new Exception($service->getError());
            }
			$result->count = $taskCount;
        } catch (Exception $e) {
            $result->success = false;
            $result->message = $e->getMessage();
            $result->code = $e->getCode();
        }

        return $result;
    }

    /**
	 * 获取历史派单数据
	 * Object $paramDTO
	 * @return array $result
	 */
	public function getHistoryList(RecommendParamDTO $paramDTO){

		$result = new RecommendListResultDTO();
		
		try{
			$recommend = new service_recommend();
			$list = $recommend->getHistoryList($paramDTO);
			if($list === false){
				throw new Exception('获取数据失败'.$recommend->getError(), Error::SYSTEM_ERROR);
			}

			$rList = array();
			foreach((array)$list->items as $val){
	        	$rList[] = new RecommendDTO($val);
	        }

	        $result->pageSize = (int)$paramDTO->pageSize;
	        $result->total = (int)$list->totalSize;

			$result->success = 1;
			$result->items = $rList;
		}catch(Exception $e){
			$result->success = 0;
			$result->code = $e->getCode();
			$result->message = $e->getMessage();
		}

		return $result;
	}


    /**
	 * 获取历史派单统计数据
	 * Object $paramDTO
	 */
	public function getCount(RecommendCountParamDTO $paramDTO){

		$result = new RecommendCountResultDTO();
		
		try{

			$recommend = new service_recommend();
			$count = $recommend->getCount($paramDTO);
			
			if($count === false){
				throw new Exception($recommend->getError());
			}

			
			$result->success = 1;
			$result->count = new RecommendCountDTO($count);
		}catch(Exception $e){
			$result->success = 0;
			$result->code = $e->getCode();
			$result->message = $e->getMessage();
		}
		return $result;
	}

	/**
	 * 系统放弃后 上班
	 * @param $user_id
	 * @return ResultDO
	 */
	public function onDuty($user_id){
		$result = new ResultDO();

		try {
			$recommend = new service_recommend();

			if($recommend->onDuty($user_id) === false){
				throw new Exception($recommend->getError());
			}
			$result->success = true;
			$result->message = "ok";
			$result->code = 1;
		} catch (Exception $e) {
			$result->success = false;
			$result->message = $e->getMessage();
			$result->code = $e->getCode();
		}

		return $result;
	}


	/**
	 * 增加需求可派单上限
	 * @param $task_id
	 * @param $number
	 * @return ResultDO
	 */
	public function addRecmdLimitNum($task_id,$number){

		$result = new ResultDO();

		try {

			if($number < 1){
				throw new Exception("增加上限值不小于1");
			}

			$taskSrv = service_task_factory::build($task_id);
			$recommend = new service_recommend();
			$v_num = $recommend->validNum($task_id);
			$limit_num = $number + $v_num;
			if($limit_num > $taskSrv->taskWorksLimitNumber()){
				throw new Exception("派单上限不能大于最大投标数！");
			}

			if($taskSrv->updateTaskExtends(array("recmd_limit_num"=>$limit_num)) === false){
				throw new Exception($taskSrv->getError());
			}

			//修改派单自动派单开关设置
			$recmdOptionSrv = new service_recommend_option($task_id);
			$recmdOptionSrv->changeEnableState(true);

			$result->success = true;
			$result->message = "ok";
			$result->code = 1;

		} catch (Exception $e) {

			$result->success = false;
			$result->message = $e->getMessage();
			$result->code = $e->getCode();
		}

		return $result;
	}

	/**
	 * 停止派单
	 * @param $task_id
	 * @return ResultDO
	 */
	public function stopRecmd($task_id){

		$result = new ResultDO();

		try {

			$recmdOptionSrv = new service_recommend_option($task_id);

			if($recmdOptionSrv->stopRecmd() === false){
				throw new Exception($recmdOptionSrv->getError());
			}

			$result->success = true;
			$result->message = "ok";
			$result->code = 1;

		} catch (Exception $e) {
			$result->success = false;
			$result->message = $e->getMessage();
			$result->code = $e->getCode();
		}

		return $result;
	}


}
