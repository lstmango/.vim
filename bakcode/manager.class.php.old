<?php

/**
 * 用户类
 */
class service_manager extends zbj_service_manager {
	
	// 当前业务ID
	
	// 当前对象主数据表
	public function __construct($id=0) {
		parent::__construct ($id);
	}
	public function del(){
		if($this->id<=0){
			$this->setError(0,"请设置用户ID");
			return false;
		}
		try{
			//删除rtx数据
			
			$this->_beginTransaction('cp');
			$this->_rtxDelUser();
			$this->model()->delete(array('user_id'=>$this->id));
			$this->model('info')->delete(array('user_id'=>$this->id));
			$m_cpaccess=new zbj_model_cp_roleuser();
			$m_cpaccess->delete(array('user_id'=>$this->id));
			$this->_commit('cp');
			return true;
		}catch (Exception $e){
			$this->setError("保存用户数据出错");
			$this->_rollBack('cp');
			return true;
		}
	}
	private function _rtxDelUser() {
		lib_BaseUtils::apiInit();
		$s_user=new com\zhubajie\rtx\interfaces\userServiceClient(null);
		lib_BaseUtils::apigetclient($s_user);
		$user=new com\zhubajie\rtx\dataobject\user\user();
		$user->userName=$this->get('name');
		return $s_user->delUser($user);
	}
	/**
	 * 
	 * 改写保存方法
	 * (non-PHPdoc)
	 * @see zbj_components_baseservice::save()
	 */
	public function save(){
		try{
			$this->_beginTransaction('cp');
			if($this->id==0){
				$this->id=$this->model($this->marter_table)->save();
				$this->set('info.user_id',$this->id);
				$this->set('info.slat',lib_BaseUtils::uuid());
				$this->set('biz.user_id',$this->id);
			}else{
				if($this->get('info.slat')==''){
					$this->set('info.slat',lib_BaseUtils::uuid());
				}
			}
			parent::save();
			$this->_commit('cp');
			return true;
		}catch (Exception $e){
			$this->setError("保存用户数据出错");
			$this->_rollBack('cp');
			return true;
		}
	}
	/**
	 * 用户组树形结构
	 *
	 * @param int $id
	 *        	只显示某树形之下的树形,0为显示所有
	 * @param int $nowid
	 *        	当前选择的结点
	 * @param string $abce
	 *        	分割
	 * @return string
	 */
	function getgrouptree($id = "0", $nowid = "0", $abce = "") {
		lib_BaseUtils::apiInit();
		$group_service = new com\zhubajie\boss\interfaces\GroupServiceClient(null);
		lib_BaseUtils::apigetclient($group_service);
		
		$params = array('is_tree' => 1, 'group_id' => 1);
		$group_list = $group_service->blockTree($params);
		$group_list= json_decode($group_list->data, true);
		$group_list['1']['child']['22'] = array('group_id' => 22, 'name' => '离职组', 'pid' => 1,'child' => array());
		
		$output = $this->_spread_tree($group_list[1], $nowid, '');
		
// 		$id = ( int ) $id;
// 		$m_usergroup = new zbj_model_cp_usergroups ();
// 		$cats = $m_usergroup->select ( "pid=$id", '*', '', ' order by sort asc' );
// 		$cat_1 = $cats->items;
// 		$l2_count = 0;
// 		$abce .= "&nbsp;&nbsp;";
// 		if ($cat_1) {
// 			foreach ( $cat_1 as $array ) {
// 				if ($nowid == $array [group_id]) {
// 					if (0 == $array [pid]) {
// 						$output .= "<OPTION value=\"" . $array [group_id] . "\" selected >≡" . $array [name] . "≡</OPTION>\n";
// 					} else
// 						$output .= "<OPTION value=\"" . $array [group_id] . "\" selected>" . $abce . ">&nbsp;" . $array [name] . "</OPTION>\n";
// 				} else {
// 					if (0 == $array [pid]) {
// 						$output .= "<OPTION value=\"" . $array [group_id] . "\" >≡" . $array [name] . "≡</OPTION>\n";
// 					} else
// 						$output .= "<OPTION value=\"" . $array [group_id] . "\">" . $abce . ">&nbsp;" . $array [name] . "</OPTION>\n";
// 				}
// 				$output .= self::getgrouptree ( $array [group_id], $nowid, $abce );
// 			}
// 		}
		return implode(' ', $output);
	}
	
	/**
	 * 树形结构按特定的结构平铺
	 */
	private function _spread_tree($data, $nowid, $sep = '') {
		$result = array();
	
		if ($data) {
			$child = $data['child'];
			unset($data['child']);
			
			if ($nowid == $data['group_id']) {
				if (0 == $data['pid']) {
					$result[] = "<OPTION value=\"" . $data['group_id'] . "\" selected >≡" . $data['name'] . "≡</OPTION>\n";
				} else {
					$result[] = "<OPTION value=\"" . $data['group_id'] . "\" selected>" . $sep . ">&nbsp;" . $data['name'] . "</OPTION>\n";
				}
			} else {
				if (0 == $data['pid']) {
					$result[] = "<OPTION value=\"" . $data['group_id'] . "\" >≡" . $data['name'] . "≡</OPTION>\n";
				} else
					$result[] = "<OPTION value=\"" . $data['group_id'] . "\">" . $sep . ">&nbsp;" . $data['name'] . "</OPTION>\n";
			}
			
			$sep .= '&nbsp;&nbsp;';
			foreach ($child as $each_item) {
				$result = array_merge($result, $this->_spread_tree($each_item, $nowid, $sep));
			}
		}
	
		return $result;
	}
	
	function getTree($id,$level=0) {
//		define('DEBUG', 1);
		$level++;
		$m_usergroup = new zbj_model_cp_usergroups ();
		$cats = $m_usergroup->select("pid=$id  and ishide = 0", '*', '', ' order by sort asc')->items;
		if ($cats) {
			foreach ($cats as $array) {
				$tmp= $this->getTree($array ['group_id'], $level);
				if(!$tmp){
					$output.= "<div lev=\"$level\" uid=\"{$array ['group_id']}\" > <a href=\"\">{$array ['name']}</a>$tmp</div>";
				}else{
					$output.= "<div lev=\"$level\" uid=\"{$array ['group_id']}\" > <a href=\"\">{$array ['name']}</a>";
					$output .= "$tmp";
					$output.= "</div>";
				}
			}
		}
		return $output;
	}
	public static function  genTree($id = "0", $nowid = "0", $abce = "",$newUserList,$groupUserList,$dework=0){
		$id = ( int ) $id;
		$m_usergroup = new zbj_model_cp_usergroups ();
		$cats = $m_usergroup->select ( "pid=$id", '*', '', ' order by sort asc' );
		$cat_1 = $cats->items;
		$l2_count = 0;
		$abce .= "&nbsp;&nbsp;&nbsp;&nbsp;";
		if ($cat_1) {
			foreach ( $cat_1 as $array ) {
				$userDivStr='';
				$users=$newUserList[$array [group_id]];
				if ($users) {
					$userDivStr="";
					foreach ($users as $k=> $user){
						$checked='';
						if ($groupUserList[$k]) {
							$checked='checked';
						}
						$userDivStr.=  "<input type='checkbox' name='groupUserId[]' $checked value='".$k."'/>".$user;
					}
				}
				if ($nowid == $array [group_id]) {
					if (0 == $array [pid]) {
						$output .= "<div class='group_name' id='groupids_".$array['group_id']."'  name='groupids_".$array['group_id']."' value=\"" . $array ['group_id'] . "\" >≡" . $array [name] . "</div>\n";
					} else{
						$output .= "<div  class='group_name' id='groupids_".$array['group_id']."' name='groupids_".$array['group_id']."' value=\"" . $array [group_id] . "\" >" . $abce . ">&nbsp;<span class='groupName'><input type='checkbox' value='".$array['group_id']."' name='checkAll' title='全选'/>&nbsp;&nbsp;" . $array [name].'</span><div class="group_name_user">'.$abce.'&nbsp;&nbsp;'.$userDivStr. "</div>";
					}
				} else {
					if (0 == $array [pid]) {
						$output .= "<div  class='group_name' id='groupids_".$array['group_id']."' name='groupids_".$array['group_id']."' value=\"" . $array [group_id] . "\" >≡<span class='groupName'><input type='checkbox' value='".$array['group_id']."' name='checkAll' title='全选'/>&nbsp;&nbsp;" . $array [name] .'</span><div class="group_name_user">'.$abce.'&nbsp;&nbsp;'.$userDivStr. "</div>";
					} else{
						$output .= "<div  class='group_name' id='groupids_".$array['group_id']."' name='groupids_".$array['group_id']."'  " . $array [group_id] . ">" . $abce . ">&nbsp;<span class='groupName'><input type='checkbox' value='".$array['group_id']."' name='checkAll' title='全选'/>&nbsp;&nbsp;" . $array [name] .'</span><div class="group_name_user">'.$abce.'&nbsp;&nbsp;'.$userDivStr. "</div>";
					}
				}
				$output .= self::genTree ( $array [group_id], $nowid, $abce,$newUserList,$groupUserList,$dework );
				$output.="</div>\n";
			}
		}
		
		return $output;
	}
	function getTreeGroupIdStr($id,$level=0) {
//		define('DEBUG', 1);
		$level++;
		$m_usergroup = new zbj_model_cp_usergroups ();
		$cats = $m_usergroup->select("pid=$id  and ishide = 0", '*', '', ' order by sort asc')->items;
		if ($cats) {
			foreach ($cats as $array) {
				$output.= $this->getTreeGroupIdStr($array ['group_id'], $level);
				$output.= $array ['group_id'].',';
			}
		}
		return trim($output, ',');
	}
	/**
	 * 取得分配信息
	 * @param unknown $config_id
	 */
	public function getallotinfo($config_id){
		$ret=array();
		switch ($config_id){
			case 7:
				$s_allot=new zbj_service_allot($config_id);
				$data=$s_allot->getuserinfo($this->get('user_id'));
				$ret['total']=$data['max'];
				$m_info=new zbj_model_mb_info();
				$condition=array();
				$condition[]='isfws!=0';
				$condition['saler_id']=$this->get('user_id');
				$condition['goldstarttime']=0;
				$data=$m_info->selectOne($condition,'count(1) as count');
				$ret['unsign_num']=$data['count']?$data['count']:0;//未签约
				unset($condition['goldstarttime']);
				$condition[]='goldstarttime!=0';
				$condition[]='goldtime<'.time();
				$data=$m_info->selectOne($condition,'count(1) as count');
				$ret['broken_num']=$data['count']?$data['count']:0;//断约
				break;
		}
		return $ret;
	}
	/**
	 * 根据行业取用户组
	 *
	 * @param unknown $industry
	 *        	0 返回所有 -1是大客服组 其它返回相应组
	 * @param int $pid
	 *        	1 交易顾问 7签约服务服务商
	 */
	static public function getallotuser($config_id = 0, $includechild = false, $onlychild = false)
    {
	    $return = array ();
	    $m_config = new zbj_model_cp_allotconfig ();
	    $condition = array ();
	    if($includechild && $onlychild){//只包有子级
	        $condition['pid']=$config_id;
	    }
	    if($includechild && !$onlychild){//子级和父级
	        $condition[]="id=$config_id or pid=$config_id";
	    }
	    if($includechild==false){//子级和父级
	        $condition['id']=$config_id;
	    }
	    $allotconfig = $m_config->select ( $condition, 'id as config_id ,name' );
	    if (! empty ( $allotconfig )) {
	        foreach ( $allotconfig->items as $config ) {
	            $return [$config ['config_id']] ['group_name'] = preg_replace("/-.+/", "", $config ['name']);
	            $return [$config ['config_id']] ['ids'] = $return [$config ['config_id']] ['users']=array();
	        }
	        $m_allot = new zbj_model_cp_allot ();
	        $condition = array ();
            $condition [] = "config_id in (" . implode ( ',', array_keys ( $return ) ) . ")";
	        $users = $m_allot->select ( $condition, 'manager_id,manager,config_id' );
	        if (! empty ( $users )) {
	            if ($users->items) {
	                foreach ( $users->items as $u ) {
	                    $return [$u ['config_id']] ['users'] [] = array (
	                        'user_id' => $u ['manager_id'],
	                        'name' => $u ['manager']
	                    );
	                    $return [$u ['config_id']] ['ids'] [] = $u ['manager_id'];
	                }
	            }
	        }
	    }
	    return $return;
	}
	/**
	 * 根据行业取用户组
	 * 
	 * @param unknown $industry
	 *        	0 返回所有 -1是大客服组 其它返回相应组
	 * @param int $pid
	 *        	1 交易顾问 7签约服务服务商
	 */
	public function getIndustryuser($industry = 0, $pid = 1) {
		$return = array ();
		$m_config = new zbj_model_cp_allotconfig ();
		$condition = array ();
		$condition ['pid'] = $pid;
		if ($industry) {
			$condition ['id'] = $industry;
		}
		$allotconfig = $m_config->select ( $condition, 'id as config_id ,name' );
		if (! empty ( $allotconfig )) {
			foreach ( $allotconfig->items as $config ) {
				$return [$config ['config_id']] ['group_name'] = preg_replace("/-.+/", "", $config ['name']);
			}
			$m_allot = new zbj_model_cp_allot ();
			$condition = array ();
			if ($industry) {
				$condition ['config_id'] = $industry;
			} else {
				$condition [] = "config_id in (" . implode ( ',', array_keys ( $return ) ) . ")";
			}
			$users = $m_allot->select ( $condition, 'manager_id,manager,config_id' );
			if (! empty ( $users )) {
				if ($users->items) {
					foreach ( $users->items as $u ) {
						if (is_array($return [- 1] ['ids'])) {
							if (in_array ( $u ['user_id'], $return [- 1] ['ids'] )) {
								continue;
							}
						}
						$return [$u ['config_id']] ['users'] [] = array (
								'user_id' => $u ['manager_id'],
								'name' => $u ['manager'] 
						);
						$return [$u ['config_id']] ['ids'] [] = $u ['manager_id'];
					}
				}
			}
		}
		return $return;
	}
	/**
	 * 取用显示名
	 * @return string
	 */
	public function getshowname() {
		if ($this->get ( 'nickname' )) {
			return $this->get ( 'nickname' ) . '/' . $this->get ( 'name' ) . '';
		} else {
			return $this->get ( 'name' );
		}
	}
	public function getJobGradeName($job_grade) {
		$array = array(
				'1'=>'团员',
				'2'=>'团长'
				);
		return $array[$job_grade];
	}

    /**
     * 是否是离职员工
     * @return bool
     */
    public function isLeaveUser() {
        if($this->id<=0) return $this->errorFalse('请设置用户id');
        if ( ! $this->get('user_id') ) return $this->errorFalse('用户不存在');
        return $this->get('group_id') == 22 || $this->get('isleave') == 1 ? true : $this->errorFalse('不是离职员工');
    }
    /**
     * 性别
     * @author tanqing
     * @date 2015-8-5
     * @param string $sex
     * @return Ambigous <string>|string|multitype:string
     */
    public static function getSex($sex = null){
    	lib_BaseUtils::apiInit();
    	$result = array(
    			com\zhubajie\boss\dataobject\userv2\Sex::MALE=>'男',
    			com\zhubajie\boss\dataobject\userv2\Sex::FEMALE=>'女',
    	);
    	if (!is_null($sex)) {
    		if ($result [$sex]) {
    			return $result [$sex];
    		}
    		return '';
    	}
    	return $result;
    }
    /**
     * 团队角色
     * @author tanqing
     * @date 2015-8-5
     * @param string $job_grade
     * @return Ambigous <string>|string|multitype:string
     */
    public static function getJobGrade($job_grade = null){
    	lib_BaseUtils::apiInit();
    	$result = array(
    			com\zhubajie\boss\dataobject\userv2\JobGrade::MEMBER=>'团员',
    			com\zhubajie\boss\dataobject\userv2\JobGrade::LEADER=>'团长',
    	);
    	if (!is_null($job_grade)) {
    
    		if ($result [$job_grade]) {
    			return $result [$job_grade];
    		}
    		return '';
    	}
    	return $result;
    }
    /**
     * 在职状态
     * @author tanqing
     * @date 2015-8-5
     * @param string $isleave
     */
    public static function getLeaveStatus($isleave = null){
    	lib_BaseUtils::apiInit();
    	$result = array(
    			com\zhubajie\boss\dataobject\userv2\LeaveStatus::JOB=>'在职',
    			com\zhubajie\boss\dataobject\userv2\LeaveStatus::LEAVE=>'离职',
    			com\zhubajie\boss\dataobject\userv2\LeaveStatus::TRANSFERS=>'调岗',
    			com\zhubajie\boss\dataobject\userv2\LeaveStatus::VACATION=>'休假',
    	);
    	if (!is_null($isleave)) {
    		if ($result [$isleave]) {
    			return $result [$isleave];
    		}
    		return '';
    	}
    	return $result;
    }
    /**
     * 业务职能
     * @author tanqing
     * @date 2015-8-5
     */
    public static function getLeaderStatus($isleader = null){
    	lib_BaseUtils::apiInit();
    	$result = array(
    			com\zhubajie\boss\dataobject\userv2\LeaderStatus::STAFF=>'职员',
    			com\zhubajie\boss\dataobject\userv2\LeaderStatus::LEADER=>'主管',
    			com\zhubajie\boss\dataobject\userv2\LeaderStatus::LEADER_ASSISTANT=>'主管助理',
    	);
    	if (!is_null($isleader)) {
    		if ($result [$isleader]) {
    			return $result [$isleader];
    		}
    		return '';
    	}
    	return $result;
    }
	//已下线
	public function getwtuser(){
		return array();
	}
}