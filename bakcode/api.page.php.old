<?php
/**
 * 异步请求处理的控制器
 * 控制器本身不处理业务
 * @author 继安
 */
class controller_api extends components_basepage{
	const WEBIM_AUTH_KEY = 'zhubajiewebimkey';
	/**
	 * 一个控制器的新结构demo
	 * 注意没有继承base
	 */
	function pageindex($inPath){
		exit;
	}

	/**
	 * 发布搜索标题
	 */
	function pagesearchtitle(){
		$pub = new controller_api_pub();
		lib_BaseUtils::jsonp($pub->searchTitle());
	}

	/**
	 * 搜索好友
	 */
	function pagesearchfriend(){
		$pub = new controller_api_pub();
		lib_BaseUtils::jsonp($pub->searchFriend());
	}

	/**
	 * 搜索标签
	 */
	function pagesearchtag(){
		$pub = new controller_api_pub();
		lib_BaseUtils::jsonp($pub->searchTag());
	}

	/**
	 * 添加标签
	 */
	function pageaddtag(){
		$pub = new controller_api_pub();
		$pub->addTag();
	}

	/**
	 * 添加标签
	 */
	function pageEditag($inPath){
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->editag($url);
	}
	
	/**
	 * 搜索分类
	 */
	function pagesearchCategory(){
		$pub = new controller_api_pub();
		lib_BaseUtils::jsonp($pub->searchCategory());
	}

	/**
	 * 评论
	 * @param array $inPath
	 */
	function pagePost($inPath) {
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->post($url, 1);
	}

	/**
	 * 获取更多评论
	 * @param array $inPath
	 */
	function pageMorecomment($inPath) {
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->morecomment($url);
	}

	/**
	 * 获取表态分类
	 * @param array $inPath
	 */
	function pageCommentCate($inPath) {
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->commentcate($url);
	}

	/**
	 * 回复
	 * @param array $inPath
	 */
	function pageReply($inPath) {
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->post($url, 2);
	}

	/**
	 * 补充详情
	 * @param array $inPath
	 */
	function pageAddAbout($inPath) {
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->addAbout($url);
	}

	/**
	 * 收藏 地址 /api/favorite?ftype=1&tid=xxxx
	 * ftype:0->店铺 ,1->商品,2->服务,3->任务,4->稿件,5用户
	 * xxxx:各种ID
	 * @param array $inPath
	 */
	function pagefavorite($inPath) {
		$api = new controller_api_api();
		$api->favorite();
	}

	/**
	 * 关注用户
	 * 使用get 传递id关注对象(type=1关注用户type=2关注标签)的ID
	 */
	function pagefollow($inPath){
		$api = new controller_api_api();
		$api->follow();
	}
	/**
	 * 邀请用户参与任务
	 * 使用get id任务号 ids要邀请的用户id集合多个用,分割
	 */
	function pageinviteFriend(){
		$api = new controller_api_api();
		$api->inviteFriend();
	}

	/**
	 * 邀请金牌威客参与任务
	 * 使用get id任务号 ids要邀请的用户id
	 */
	function pageinviteGoldUser(){
		$api = new controller_api_api();
		$api->inviteGoldUser();
	}
	
	/**
	 * 获取用户tips
	 */
	function pagegetusertips(){
		$api = new controller_api_api();
		$api->getUserTips();
	}

	/**
	 * 获取用户tips
	 */
	function pagegetinterest(){
		$api = new controller_api_api();
		$api->getInterest();
	}

	/**
	 * 快速登录
	 */
	function pagelogin(){
		//exit;
		if (preg_match('/zhubajie.com#/', $_SERVER['SERVER_NAME'].'#')) {
			exit();
		}
		//采用用户名登录
		if (isset($_GET['name']) && $_GET['name']) {
			$model = new zbj_model_mb_account();
			$nickname = zbj_lib_BaseUtils::getStr($_GET['name']);
			$result = $model->selectOne('nickname="'.$nickname.'"', 'user_id');
			$userid = (int)$result['user_id'];
		} else {
			$userid = (int)$_GET['uid'];
		}
		if($_GET['tid']){
			$model = new zbj_model_mk_task();
			$condi = array('task_id'=>intval($_GET['tid']));
			$result = $model->selectOne($condi, 'user_id');
			$userid = (int)$result['user_id'];
		}
		if($_GET['oid']){
			if (isset($_GET['e'])) $_GET['oid'] = $this->deOrderId($_GET['oid']);
			$model = new zbj_model_fn_order();
			$condi = array('order_id'=>intval($_GET['oid']));
			$result = $model->selectOne($condi, 'user_id');
			$userid = (int)$result['user_id'];
		}
		if($_GET['do'] == 'out'){
			zbj_lib_BaseUtils::clearLoginCookie($_COOKIE['user_id']);
			$this->redirect(zbj_lib_Constant::USERLOGIN);
			exit;
		}
		$srvUser = new zbj_service_user($userid);
		if(!$srvUser->get('nickname')){
			$this->ShowMsg("用户不存在");
		}
		$cookie = array();
		$cookie['isquick'] = 1;
		$cookie['userid'] = $userid;
		$cookie['nickname'] = $srvUser->get('nickname');
		$cookie['brandname'] = $srvUser->get('info.brandname') ? $srvUser->get('info.brandname') : $srvUser->get('nickname');
		zbj_lib_BaseUtils::ssetcookie($cookie, 0, '/', zbj_lib_Constant::COOKIE_DOMAIN);
		$cookie = array(
			'user_id'=>intval($userid),
			'nickname'=>$srvUser->get('nickname'),
			'logintime'=>$this->_time,
			'outtime'=>$this->_time,
			'ip'=>zbj_lib_BaseUtils::getIp(),
		);
		$userkey = $srvUser->createUserSessionId($userid);
		if(!$userkey) {
			$userkey = zbj_lib_BaseUtils::authcode(serialize($cookie),'ENCODE',zbj_lib_Constant::ZBJ_SYSUSERKEY);
		}
		zbj_lib_BaseUtils::ssetcookie(array('userkey'=>$userkey), 0, '/', zbj_lib_Constant::COOKIE_DOMAIN);
		$this->ShowMsg("登录成功（<b><span style='color:red;'>".$cookie['nickname']."</span></b>）。勒个方法别乱讲哟！哈哈", zbj_lib_Constant::MAIN_URL, 99999, 99999);
	}


	/**
	 * 雇主对评论或者回复进行谢谢操作
	 * @param array $inPath
	 */
	function pageThanks($inPath) {
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->thanks($url);
	}

	/**
	 * 雇主操作
	 * @param string $inPath tid-xxx-do-xxxx(wid-xxx,oid-xxx).html
	 */
	function pagecbh($inPath){

		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->freeBuyerHandle($url);
	}

	/**
	 * 雇主额外操作
	 * @param string $inPath tid-xxx-do.html
	 */
	function pagecah($inPath){
		
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"],$url)->commonBuyerHandle($url);
	}
	
	/**
	 * 处理购买增值服务
	 * 		1. 针对用户的增值服务
	 * 		2. 针对任务的增值服务
	 * 		上以两种增值服务，通过 sType进行区别，
	 * 		controller_api_upgrade->init()会 根据$inPath 初始化 sType
	 * 
	 * @param 	$inPath 路径信息，不包含 _GET,_POST的数据。伪静态url的路径数据
	 * @author  ranping 2013-05-29
	 */
	function pageUpgrade($inPath) {
		$url = $this->getUrlParams($inPath);
		$upgrade = new controller_api_upgrade();
		$upgrade->init($url);
		return $upgrade->upgradeHandler($url);
	}

	/**
	 * 雇主操作稿件 中标备选淘汰
	 * @param string $inPath tid-xxx-do-xxxx(wid-xxx,oid-xxx).html
	 */
	function pagecwh($inPath){
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->freeWorksHandle($url);
	}

	/**
	 * 服务商操作
	 * @param string $inPath tid-xxx-do-xxxx(wid-xxx,oid-xxx).html
	 */
	function pagecsh($inPath){
		$url = $this->getUrlParams($inPath);
		return $this->getPrivateController((int)$url ["tid"])->freeSellerHandle($url);
	}

	/**
	 * 购买服务，雇主操作
	 * @param string $inPath tid-xxx-t-xxx.html
	 */
	function pageBop($inPath){
		$url = $this->getUrlParams($inPath);
		$class = $this->getPrivateController((int)$url["tid"], $url);
		if(!method_exists($class,"buyerOp")){
			lib_BaseUtils::jsonp("错误操作！", 1, -1);
		}
		return $class->buyerOp($url);
	}

	/**
	 * 购买服务，威客操作
	 * @param string $inPath tid-xxx-t-xxx.html
	 */
	function pageSop($inPath){
		$url = $this->getUrlParams($inPath);
		$class = $this->getPrivateController((int)$url["tid"], $url);
		if(!method_exists($class,"buyerOp")){
			lib_BaseUtils::jsonp("错误操作", 1, -1);
		}
		return $class->sellerOp($url);
	}

	/**
	 * 稿件点评
	 * @param array $inPath wid-xxx.html ，如果是回复，需要加上pid的参数即：wid-xxx-pid-xxx.html
	 */
	function pageWorksComment($inPath) {
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_api();
		$api->worksComment($url);
	}
	

	/**
	 * 获取更多稿件点评,必须有分页参数$_GET['p']
	 * @param array $inPath wid-xxx.html
	 */
	function pageWorksCommentMore($inPath) {
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_api();
		$api->worksCommentMore($url);
	}
	
	/**
	 * 功能函数
	 */
	function pageTools($inPath){
		if($this->_userid!=18){exit('err');}
		$url = $this->getUrlParams($inPath);
		
		$cache = new zbj_lib_cache("memcache");
		if($url['do']=='cache'){
			echo $url['key'].'=';
			var_dump($cache->get($url['key'])); exit;
		}
	}
	
	/**
	 * 交易合同
	 */
	function pageAgreement($inPath){
		$url = $this->getUrlParams($inPath);
		$tid = isset($url['tid'])?$url['tid']:'';
		$tid = intval($tid);
		$agid = isset($url['agid'])?$url['agid']:'';
		$agid = intval($agid);

		if(empty($tid) && !empty($agid)){
			if(in_array(intval($url['do']),array(9,10))){ // 附加合同
				$agraddonsModel = zbj_model_api::get('zbj_model_mk_taskagreementaddons',$agid);
				$agraddons = $agraddonsModel->getData();
				$tid = intval($agraddons['task_id']);
			}else{ // 主合同
				$srvAgreement = new zbj_service_agreement($agid);
				$tid = intval($srvAgreement->get('task_id'));
			}
		}
		if(empty($tid)) {
			$this->ShowMsg('缺少必要的参数');
		}else{
			$srvTask = new zbj_service_task($tid);
			$srvTask = $srvTask->init();
			$mode = $srvTask->get('mode');
			if(in_array($mode, array(11,12))){
				$api = new controller_api_agreement_buy();
			}else if(in_array($mode, array(13))){
				$api = new controller_api_agreement_newbid();
			//}else if(in_array($mode, array(10)) && in_array($srvTask->get('allot'),array(1))){
			//	$api = new controller_api_agreement_free();
			}else{
				$this->ShowMsg('该交易不支持交易合同操作');
			}
		}	
		switch(intval($url['do'])){
			case 1: // 申请合同
				return $api->need($url);
			case 2: // 加载合同模版
				return $api->loadTpl($url);
			case 3: // 提交合同
				return $api->pub($url);
			case 4: // 提交合同附加协议
				return $api->pubAddons($url);
			case 5: // 雇主同意合同
				return $api->agree($url);
			case 6: // 同意合同附加协议
				return $api->agreeAddons($url);
			case 7: // 加载合同
				return $api->loadMaster($url);
			case 8: // 修改合同
				return $api->modifyMaster($url);
			case 9: // 加载附加协议
				return $api->loadAddons($url);
			case 10: // 修改合同附加协议
				return $api->modifyAddons($url);
			case 11: // 删除合同模版
				return $api->removeTpl($url);
			case 12: // 添加合同附加协议
				return $api->addonsTpl($url);
			case 13: // 附加条件的执行
				return $api->dealCond($url);
			case 14: //招标前端查看合同
				return $api->view($url);
            case 15: //设置交易合同状态
                return $api->setAgreementStatus($url);
			case 100: // boss后台查看合同内容
				return $api->viewAgreement($url);
			case 101: // 提醒雇主签署
				return $api->remind($url);
				
		}
	}

	private function getPrivateController($taskID, $url = array()){
		if(!$taskID){
			lib_BaseUtils::jsonp("参数错误err:1", 1, -1);
		}
		$srvTask  = new zbj_service_task($taskID);
		$srvTask = $srvTask->init();
		$task = $srvTask->get();
		if (in_array($task['mode'], array(0,1,6,10))) {
			$className = 'controller_api_taskfree';
		}elseif (in_array($task['mode'], array(13))) {
			$className = 'controller_api_tasknewbid';
		} else {
			$className = 'controller_api_taskbuy';
		}

		return new $className($taskID, $url);
	}

	/**
	 * 异步请求工作中的信息
	 */
	function pageworksloginfo(){
		$wid = intval($_GET['wid']);
		//$srvWork = new zbj_service_works($wid);
		$task = new controller_task_free();
		return $task->getHandle($wid, 1);
	}

	/**
	 * 获取投标条件
	 */
	function pageGetBidCondition() {
		$api = new controller_api_api();
		return $api->getBidCondition();
	}
	/**
	 *获取当前登录用户的帐户余额
	 */
	public function pageMyBalance($inPath) {
		if ( empty($this->_userid) ) {
			$this->jsonp_exit(array('state'=>-1, 'msg'=>'用户未登录'));
		}
		if(zbj_lib_BaseUtils::noticeServcieStop() === true){
			$this->jsonp_exit(array('state'=>1, 'msg'=>"查询失败"));
		}
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_api();
		$is_pic = isset($url['pic']) || isset($_GET['pic']);
		$msg = $api->getUserBalance($this->_userid, $is_pic);
		if ($is_pic) {
			$this->jsonp_exit(array('state'=>1, 'msg'=>$msg['img'], 'amount'=>$msg['balance']));
		} else {
			$this->jsonp_exit(array('state'=>1, 'msg'=>$msg));
		}
	}

	/**** 
	 * 上海团队使用的接口===api start==
	 */

	/**
	 *检查请求的内容是否包含敏感词或联系方式
	 *
	 */
	function pagefilter() {
		$str = $_REQUEST['str'];
		$isreplace = $_REQUEST['replace'] == 1 ? true : false;
		$obj = new service_api();
		$rtn = $obj->filter($str, $isreplace);
		if(get_magic_quotes_gpc()) {
			$str = stripslashes($str);
		}
		// $rtn['key'] = sha1("CGS7YweB9V" . rawurldecode($str) . "yTusKAu5TC");
		$rtn['key'] = zbj_lib_BaseUtils::authcode(time(),'ENCODE',self::WEBIM_AUTH_KEY);
		$rtn['key'] = urlencode($rtn['key']);
		$this->jsonp_exit($rtn);
	}

	/**
	 *根据请求的(需求｜稿件｜交易订单)id和类型返回url和title 
	 *
	 */
	function pageUrlTitle() {
		// error_reporting(E_ALL);
		$rid = $_REQUEST['rid'];
		// echo lib_BaseUtils::enOrderId($rid);
		$type = $_REQUEST['type'];
		$obj = new service_api();
		$rtn = $obj->getUrlTitle($rid, $type);
		if($rtn === false) {
			$rtn['pass'] = false;
			$rtn['error'] = $obj->getError();
		}else{
			$rtn['pass'] = true;
		}
		$this->jsonp_exit($rtn);
	}

	/**
	 *根据tagid查询tag信息
	 *
	 */
	function pageTagInfo() {
		$tagid = trim($_REQUEST['tagids'], ',');
		$rtn['pass'] = false;
		if ( empty($tagid) ) {
			$rtn['error'] = '无法获取tagid';
			$this->jsonp_exit($rtn);
		}
		if ($_REQUEST['token'] !== sha1('CxcbXGExvZ' . $tagid . '45fQ83CKRj')) {
			$rtn['error'] = 'incorrect token';
			$this->jsonp_exit($rtn);
		}
		if(! zbj_lib_BaseUtils::onlyNumAndComma($tagid)) {
			$rtn['error'] = 'tagid含非法字符';
			$this->jsonp_exit($rtn);
		}
		$tagids = explode(',', $tagid);
		$info = array();
		foreach ($tagids as $tid) {
			$srv = new zbj_service_tag($tid);
			$info[$tid] = (array) $srv->get();
			unset($srv);
		}
		$rtn['pass'] = true;
		$rtn['info'] = $info;
		$this->jsonp_exit($rtn);
	}

	/**
	 *发送手机短信给用户
	 *
	 */
	public function pageSendSms() {
		$userid = $_REQUEST['uid'];
		$cont = $_REQUEST['cont'];
		$key = $_REQUEST['key'];
		$from = $_REQUEST['from'];
		$check_isfws = in_array($from, array('webim'));
		$jsonp = zbj_lib_BaseUtils::getStr($_REQUEST['jsonp']);

		$key_good = sha1("CGS7YweB9V" . rawurldecode($userid) . '|' . rawurldecode($cont) . "yTusKAu5TC");
		if ($key != $key_good) {
			$rtn['pass'] = false;
			$rtn['error'] = 'incorrect key';
			if ($_REQUEST['yek'] == 'taken') {
				$rtn['key'] = $key_good;
			}
			$this->jsonp_exit($rtn);
		}
		$srv = new service_api();
		$rslt = $srv->sendsms($userid, $cont, $check_isfws);
		if($rslt === false) {
			$rtn['pass'] = false;
			$rtn['error'] = $srv->getError();
		}else{
			$rtn['pass'] = true;
			if ($_REQUEST['mb'] == 1) {
				$rtn['mobile'] = $srv->getSmsMobile();
			}
		}
		$this->jsonp_exit($rtn);
	}
	
	/**
	 *判断发送手机短信给用户
	 */
	public function pageCheckSendSms() {
		$userid = (int)$_REQUEST['uid'];
		$setup = new zbj_model_mb_noticesetup($userid);
		$option = $setup->getData('t5options');
		if ($option) {
			$option = unserialize($option);
			if ($option[113]['mobile'] === 0) {
				$rtn['pass'] = false;
			} else {
				$rtn['pass'] = true;
			}
		} else {
			$rtn['pass'] = true;
		}
		$this->jsonp_exit($rtn);
	}

	private function jsonp_exit($arr) {
		$jsonp = zbj_lib_BaseUtils::getStr($_REQUEST['jsonp']);
		if($jsonp) {
			exit($jsonp . '(' . json_encode($arr) . ')');
		}else{
			exit(json_encode($arr));
		}
	}
	/***
	 * 接口结束 ===api end== 
	 */

	//用户是否允许参与快印名片频道的投标
	public function pageIsAllowVcardBid($inPath) {
		$url = $this->getUrlParams($inPath);
		if ($url['yek'] != '8e0da0a613bb4e3824e05e539096b040519386f5') $this->jsonp_exit(array('code'=> '500', 'msg'=> '非法请求')); //sha1('zbjkuaiyinvcardallowbidkey')
		if (!ctype_digit((string)$url['tid']) || !ctype_digit((string)$url['uid'])) $this->jsonp_exit(array('code'=> '500', 'msg'=> '缺少参数'));
		$srvTaskNewBid = new controller_api_tasknewbid();
		$srvTask = new zbj_service_task($url['tid']);
		$srvTask = $srvTask->init();
		if ($srvTask->get('mode') != 13) $this->jsonp_exit(array('code'=> '500', 'msg'=> '不是招标需求'));
		$srvTaskNewBid->srvTask = $srvTask;
		$is_disallow = $srvTaskNewBid->isInKuaiYinVcardUserList($url['uid']) === false && $srvTaskNewBid->kuaiYinReplicationNotResponsed() === false;
		$this->jsonp_exit(array('code'=> '200', 'msg'=> !$is_disallow));
	}
    
    //判断快印频道白名单 - 移动端用
    public function pageIsAllowKuaiYinBid($inPath){
        $url = $this->getUrlParams($inPath);
		if ($url['yek'] != '8e0da0a613bb4e3824e05e539096b040519386f5') $this->jsonp_exit(array('code'=> '500', 'msg'=> '非法请求')); //sha1('zbjkuaiyinvcardallowbidkey')
		if (!ctype_digit((string)$url['tid']) || !ctype_digit((string)$url['uid'])) $this->jsonp_exit(array('code'=> '500', 'msg'=> '缺少参数'));
		$srvTaskNewBid = new controller_api_tasknewbid();
		$srvTask = new zbj_service_task($url['tid']);
		$srvTask = $srvTask->init();
		if ($srvTask->get('mode') != 13) $this->jsonp_exit(array('code'=> '500', 'msg'=> '不是招标需求'));
		$srvTaskNewBid->srvTask = $srvTask;
        $opis_ht = (int)$srvTaskNewBid->srvTask->get('task_opis.ht');
        $no_bid_msg = '参与此套餐需求，服务商需具备较高设计水平以及印刷基础知识并且已通过我们官方审核。';
        if ($opis_ht == zbj_service_task_base::TASK_OPIS_HT_VCARD) {
            if ($srvTaskNewBid->isInKuaiYinVcardUserList($url['uid']) === false && $srvTaskNewBid->kuaiYinReplicationNotResponsed() === false) {
                $this->jsonp_exit(array('code'=> '500', 'msg'=> $no_bid_msg));
            }
        } else {
            if ($srvTaskNewBid->isInKuaiYinChannelUserList($opis_ht,$url['uid'])=== false && $srvTaskNewBid->kuaiYinReplicationNotResponsed() === false) {
                $this->jsonp_exit(array('code'=> '500', 'msg'=> $no_bid_msg));
            }
        }
		$this->jsonp_exit(array('code'=> '200', 'msg'=> '提交成功'));
    }

	/***
	 *返回at用户关注的列表 
	 *
	 */
	function pageAtFollow() {
		if(!$this->_userid) {
			$rtn = array('state'=>0, 'data'=>'您还未登录');
			$this->jsonOrJsonpExit($rtn);
		}
		$key = zbj_lib_BaseUtils::getStr($_GET['key']);
		$num = zbj_lib_BaseUtils::getStr($_GET['num']);
		$key = $key ? $key : '';
		$num = ctype_digit($num) ? $num : 10;
		$srv = new zbj_service_user($this->_userid);
		$list = $srv->getFollowerUserList($num, $key);
		if($list) {
			foreach($list as $v) {
				$data[] = $v['brandname'];
			}
		}else{
			$data = array();
		}
		$rtn = array(
			'state' => 1,
			'data' => $data
		);
		$this->jsonOrJsonpExit($rtn);
	}

	/**
	 *退出执行并返回json或jsonp数据
	 *@param array $arr 
	 */
	private function jsonOrJsonpExit($arr) {
		$jsonp = preg_match('/^[a-z0-9_]{4,}$/',$_GET['jsonp']) ? $_GET['jsonp'] : 'jsoncallback';
		if($jsonp) {
			exit($jsonp . '(' . json_encode($arr) . ')');
		}else{
			exit(json_encode($arr));
		}
	}

	/**
	 *获取稿件喜欢不喜欢数
	 */
	function pageGetWorksUpDown($inPath) {
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_api();
		$api->getWorksUpDown($url);
	}
	/**
	 *喜欢或不喜欢稿件
	 */
	function pageWorksUpDown($inPath) {
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_api();
		$api->worksUpDown($url);
	}

	/**
	 * 屏蔽任务评论
	 * @param array $inPath
	 */
	function pageShieldComment($inPath) {
		$api = new controller_api_api();
		$api->shieldComment($inPath);
	}

	/**
	 * 屏蔽稿件点评（管理员操作）
	 */
	function pageShieldWorksComment($inPath) {
		$api = new controller_api_api();
		$api->shieldWorksComment();
	}

	/**
	 * 屏蔽稿件
	 * @param array $inPath
	 */
	function pageShieldWorks($inPath) {
		$api = new controller_api_api();
		$api->shieldWorks($inPath);
	}

	/**
	 * 屏蔽操作
	 */
	function pageShield($inPath) {
		$api = new controller_api_api();
		$api->shield($inPath);
	}
	
	/**
	 * 恢复屏蔽
	 */
	function pageUnshield($inPath) {
		$api = new controller_api_api();
		$api->unshield($inPath);
	}

	/**
	 * 购买隐藏交稿
	 * @param unknown_type $inPath
	 * @return Ambigous <multitype:number string , multitype:number unknown >
	 */
	public function pageHideWorks($inPath){
		exit;//隐藏交稿新版本 停止使用老版本
		$api = new controller_api_upgrade();
		$arr = $api->hideWorks($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state']);
	}

	public function pageAllowHideWorks($inPath){
		$api = new controller_api_upgrade();
		$arr = $api->allowHideWorks($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state']);
	}
	
	/**
	 * 置顶需求
	 * @param unknown_type $inPath
	 */
	public function pagePaidListing($inPath){
		$api = new controller_api_upgrade();
		$arr = $api->newpaidListing($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state'],$arr['other']);
	}
	
	/**
	 * 需求刷新
	 */
	public function pageTaskRefresh($inPath){
		$api = new controller_api_upgrade();
		$arr = $api->taskRefresh($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state'],$arr['other']);
	}
	
	/**
	 * 需求隐藏
	 */
	public function pageHideTask($inPath) {
		$api = new controller_api_upgrade();
		$arr = $api->hideTask($inPath);
		return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
	}
	
	/**
	 * 版权保护与商标注册
	 */
	function pagecopyrightTrademark($inPath){
		$url = $this->getUrlParams($inPath);
		$stype = $url['s'];
		$task_id = $url['tid'];
		$api = new controller_api_upgrade();
		if ( $_POST ) {
			$arr = $api->addCopyrightTrademark( $task_id, lib_BaseUtils::saddslashes($_POST), $stype);
			return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
		}
		$arr = $api->copyright_trademark($task_id, $stype);
		return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
	}
	
	/**
	 * 商标和版权
	 * 
	 */
	function pageCopyMark($inPath) {
		$data = zbj_lib_BaseUtils::getStr($_REQUEST['data']);
		$string = zbj_lib_BaseUtils::authcode($data, 'DECODE', zbj_lib_Constant::SYSUSERKEY);
		$copyMark = json_decode($string, true);
		$adddata = array(
			'cr_name' => $copyMark['name'],
			'cr_tel' => $copyMark['tel'],
			'cr_email' => $copyMark['qqemail'] ? $copyMark['qqemail'] : '',
			'comefrom' => $copyMark['comf'],
			'type' => $copyMark['type'] ? $copyMark['type'] : 2,
			'stype' => $copyMark['stype'] ? $copyMark['stype'] : 101,
			'options' => $copyMark['options'] ? $copyMark['options'] : ''
		);
		$srv_vas = new zbj_service_vas();
		$rs = $srv_vas->addCopyright_Mark($adddata);
		$id = array('id' => (int)$rs);
		$return_data = zbj_lib_BaseUtils::authcode(json_encode($id), 'ENCODE', zbj_lib_Constant::SYSUSERKEY);
		echo $return_data;
	}
	

	/**
     * mock 名片印刷表单填写
     */
    function pagecardForm($inPath){
        $url = $this->getUrlParams($inPath);

        if ( $_POST ) {
            return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
        }

        return lib_BaseUtils::jsonp($this->render('task/ajax/ajax_fillcard.html', $params));
    }
	
	
	/**
	 * 服务商置顶
	 */
	function pageUserTop($inPath){
		$api = new controller_api_upgrade();
		$arr = $api->userTopListing($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state'],$arr['other']);
	}
	
	/**
	 * 服务置顶
	 */
	function pagefwTop($inPath){
		$api = new controller_api_upgrade();
		$arr = $api->fwtoplisting($inPath);
		return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
	}
	
	/**
	 * 增值服务购买的弹框
	 */
	function pageVasBuy($inPath){
		$api = new controller_api_upgrade();
		$arr = $api->vasPaidListing($inPath);
		return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
	}
	
	function pageSearchVasCategory($inPath) {
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_upgrade();
		return lib_BaseUtils::jsonp($api->SearchVasCategory());
	}
	
	/**
	 * 批量的任务的置顶需求
	 * @param string $inPath
	 */
	public function pagePaidsListing($inPath) {
		$api = new controller_api_upgrade();
		$arr = $api -> newpaidsListing($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state'],$arr['other']);
	}
	
	/**
	 * 获取一二级虚拟分类
	 * {/zbj_lib_Constant::TASK_URL/}/api/getlevelcategory-p-id-l-id
	 */
	public function pagegetlevelcategory($inPath) {
		$api = new controller_api_upgrade();
		$arr = $api->getLevelCategory( $inPath );
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state'],$arr['other']);
	}

	/**
	 * 生成手机号图片
	 */
	public function pagenum2pic(){
		$phone = zbj_lib_BaseUtils::authcode(base64_decode($_GET['phone']),"DECODE",zbj_lib_Constant::ZBJ_SYSUSERKEY);
		if($phone){
			header("Content-type: image/png");
			$im = imagecreate(120, 30);
			$bcolor = imagecolorallocate($im, 255, 255, 255);
			$tcolor = imagecolorallocate($im, 0, 0, 0);
			imagestring($im, 5, 10, 8, $phone, $tcolor);
			imagepng($im);
			imagedestroy($im);
		}else{
			//return false;
		}
	}

	/**
	 * 获取用户可以投标的微博帐号
	 */
	public function pageweibo($inPath){
		$url = $this->getUrlParams($inPath);
		$tid = intval($url['tid']);
		$type = intval($url['t']);
		if(in_array($type, array(1,2))){
			$condi = "and type={$type}";
		}
		$oWeibo = new zbj_model_mb_weibo();
		//获得当前用户的微博认证记录
		$aMyWeibo = $oWeibo->select("status=1 and user_id={$this->_userid} $condi")->items;
		$bidStr[] = array('weibo_id'=>-1,'screen_name'=>"去绑定微博帐号",'disable'=>0);
		if(!$aMyWeibo){
			return json_encode(array('state'=>1,'msg'=>$bidStr));
		}
		$oWorksWeibo = new zbj_model_mk_worksweibo();
		$aWorks = $oWorksWeibo->select("task_id={$tid} and user_id={$this->_userid}", 'weibo_id')->items;
		$hasBid = array();
		if($aWorks){
			foreach ($aWorks as $w){
				$hasBid[]=$w['weibo_id'];
			}
		}
		foreach ($aMyWeibo as $w){
			$i=0;
			if(!in_array($w['weibo_id'], $hasBid)){
				$bidStr[$i]['disable']= 0;
				$bidStr[$i]['weibo_id']= $w['weibo_id'];
				$bidStr[$i]['screen_name']= $w['type'] == 1 ? "新浪微博-".$w['screen_name'] : "腾讯微博-".$w['screen_name'];
			}else{
				$bidStr[$i]['weibo_id']= $w['weibo_id'];
				$bidStr[$i]['disable']= 1;
				$bidStr[$i]['screen_name']= $w['type'] == 1 ? "(已投标)新浪微博-".$w['screen_name'] : "腾讯微博-".$w['screen_name'];
			}
			$i++;
		}
		$bidStr[$i] = array('weibo_id'=>-1,'screen_name'=>"去绑定微博帐号",'disable'=>0);
		return $bidStr ? json_encode(array('state'=>1,'msg'=>$bidStr)) : json_encode(array('state'=>1,'msg'=>$bidStr));
	}

	/**
	 * 设置常用收货地址
	 */
	public function pageSetDefaultAddr($inPath) {
		$url = $this->getUrlParams($inPath);
		$srv = new controller_api_api();
		$srv->setDefaultBillAddr($url);
	}

	/**
	 * 生成验证码图片
	 */
	public function pageCatcha() {
		$seed = zbj_lib_BaseUtils::getStr($_GET["seed"]);
		$captcha = new SCaptchalu();
		$t = $this->_time%2 == 0 ? 0 : 3;
		$captcha->conf->type = $t; //0为英文 1为汉字 2为问题 3为算术题
		$captcha->conf->scale = intval(rand(3,5));
		$imageResource = $captcha->getImageResource($seed);
		header("Content-type: image/png");
		imagepng($imageResource);
	}
	
	/**
	 * 生成验证码图片
	 */
	public function pageCatcha2() {
		$seed = zbj_lib_BaseUtils::getStr($_GET["seed"]);
		$seed .= md5('zbj'.$_SERVER['HTTP_USER_AGENT']);
		$captcha = new SCaptchalu();
		$t = $this->_time%2 == 0 ? 0 : 3;
		$captcha->conf->type = $t; //0为英文 1为汉字 2为问题 3为算术题
		$captcha->conf->scale = intval(rand(3,5));
		$imageResource = $captcha->getImageResource($seed);
		header("Content-type: image/png");
		imagepng($imageResource);
	}
	
	/**
	 * 是否需求验证码
	 * state 1 不需要 2 需要
	 */
	public function pageNeedCatcha() {
		$need = false;
		if($this->_userid) {
			$srv_usr = new zbj_service_user($this->_userid);
			if($srv_usr->getPubCount() > 2) {
				$need = true;
			}
		}
		
		$this->response('', $need ? 2 : 1, 2);
	}


	/**
	 * 转帐 活动使用接口（请勿在其它场合中使用）
	 *
	 */
	public function pagetransfer() {
		$_GET = zbj_lib_BaseUtils::saddslashes($_GET);
		$to_uid = $_GET['payto'];
		$from_uid = $_GET['mid'];
		$amount = $_GET['amount'];
		$token = $_GET['key'];
		$tradeno = $_GET['sn'];

		$api = new service_transferauth(); 
		if($_GET['yek'] !== 'a5a3ce9d1b9b0d81a6058613e49360a38843ee1eb3c136b3d374411800a02886') {  //由hash('sha256', 'zhubajietransferkey')生成
			$api->setCheckIp(false);
		}else{
			$api->setCheckIp(false);
			$rtn = $api->checkToken($to_uid, $from_uid, $amount, $token, $tradeno, true);
			$rtn = $rtn === false ? $api->getError() : $rtn;
			exit('<div style="display:none">' . $rtn . '</div>');
		}
		if($api->checkToken($to_uid, $from_uid, $amount, $token, $tradeno) === false) {
			exit(json_encode(array('status'=>'fail', 'error'=>$api->getError()))); 
		}
		$payer = new zbj_service_user($from_uid); //转出用户                 
		$payee = new zbj_service_user($to_uid);  //收入用户
		if($payer->transferAmount($payee, $amount, array('trade_no'=>"{$tradeno}")) === false) {
			exit(json_encode(array('status'=>'fail', 'error'=>$payer->getError()))); 
		}else{
			exit(json_encode(array('status'=>'success')));
		}   
		exit();    
	}

	//获取手机通道的余额
	function pageMobileBalance($inPath){
		$mBalance = new SSms();
		$balance = $mBalance->getBalance();
		$rs = $balance > 10000 ? $balance." \n0 \nOk": $balance;

		if($balance <= 10000) {
			$msg = '[Warning]短信通道剩余金额为:'. $balance . '，请尽快充值';
			SSms::send(array('18680880865', '13368265676'), $msg);
		}

		return  $rs;
	}	

	/**
	 *检查队列状态
	 *执行一次
	 */
	function pagecheckQueue(){

		try {
			$YijifuQueue = new SQueue('yijifu_asyn');
			$state = $YijifuQueue->getQueueNum();

			$msg = '';
			if($state === false) {
				$msg = '[Error]易极付队列连接失败';
			} elseif($state > 350) {
				$msg = "[Warning]易极付队列中数据超过350条记录,当前有{$state}条记录";
			}

		}catch(Exception $e) {
			$msg = '[Error]队列服务器连接失败';
		}

		$msg = $msg ? $msg."ip:{$_SERVER['SERVER_ADDR']}" : "";
		if($msg) {
			echo $msg;
			SSms::send(array('13368265676'), $msg. 'wxh');
			SSms::send(array('15909368700'), $msg. 'cja');
			SSms::send(array('18680880865'), $msg. 'zt');
		}else {
			echo 'OK';
		}
	}
	
	/**
	 * 发送验证码到邮箱
	 */
	function pagesend2email($inPath){
		if(!$this->_userid){
			$this->redirect(zbj_lib_Constant::LOGIN_URL);
		}
		$srvUser = new zbj_service_user($this->_userid);
		$email = $srvUser->getAuthEmail();
		if(!$email){
			$this->ShowMsg("您还没有认证手机无法使用此功能。");
		}
		$model = new zbj_model_mb_certlog();
		$condi = array('user_id'=>$this->_userid,'dateymd'=>date('Y-m-d'),'state'=>0,'error_times'=>0);
		$rs = $model->selectOne($condi,"*","","order by clg_id desc");
		if($this->_time - $rs['datetime'] < 600){
			$emailArr = explode('@', $email);
			$emailStr = substr($emailArr[0], 0, 2).'****@'.$emailArr[1];
			$emailTit = "猪八戒网支付验证码";
			$emailTxt = "您于".date('Y-m-d H:i:s',$rs['datetime'])."发起支付申请，手机验证码为：{$rs['code']}";
			$SSmsg = new SSendmsg();
			$data=array('type'=>'1','email'=>$email,'title'=>$emailTit,'cont'=>$emailTxt,'userid'=>$this->_userid,'nickname'=>$this->_nickname);
			$SSmsg->sendMsg($data);
			$this->ShowMsg("验证码已经成功发送到您的{$emailStr}邮箱中。请注意查收。");
		}else{
			$this->ShowMsg("验证码可能已经过期。请重新获取一次再使用此功能。");
		}
	}
	
	/**
	 * 标签匹配
	 */
	function pagetagsuggest($inPath){
		$title = zbj_lib_BaseUtils::getStr($_REQUEST['key']);
		$intro = zbj_lib_BaseUtils::getStr($_REQUEST['textarea']);
		$params = array(
			'cat' => 'search',
			'content' => $title.$intro
		);
		$str = '';
		$sse = new Sse('113.31.20.202', zbj_lib_Constant::SEARCH_API_PORT);
		$result = $sse->suggest($params);
		if($result){
			foreach ($result as $v){
				$str .= '<a href="javascript:;" action-type="rcmdlabel" data-tid="'.$v['tag_id'].'">'.$v['tag_name'].'</a>';
			}
		}
		lib_BaseUtils::jsonp($str);
	}
	
	/**
	 * 获取推荐威客列表
	 */
	function pageRecommendUser($inPath) {
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_user();
		$api->getTaskRecomUser($url);
	}
	
	/**
	*推广员推广
	*/
	function pageUnionShare($inPath) {
		$url = $this->getUrlParams($inPath);
		if ($url['t'] == 1) { //免费任务推广 
			$api = new controller_api_taskfree();
		} else {
			$api = new controller_api_api();
		}
		$api->unionShare($url);
	}

	/**
	 * 推荐任务
	 */
	function pagerecommendTask(){
		header('Content-Type:application/json; charset=utf-8');
		$api = new controller_api_upgrade();
		$api->recommendTask();
	}
		
	/**
	*对外公开的 敏感关键词过滤测试
	*/
	function pageKeywordFilter($inPath) {
		$manager = empty($_GET['manager'])?$_POST['manager']:$_GET['manager'];
		if(intval($this->_userid) != 8896401 && $manager!='u-8896401'){
			$this->ShowMsg("您没有本接口“敏感关键词过滤测试”的使用权限");
		}
		$params = array('manager'=>$manager);
		if($_POST['cont']){
			$type = zbj_lib_BaseUtils::getStr($_POST['type'],'int');
			$cont = htmlspecialchars(zbj_lib_BaseUtils::getStr($_POST['cont']));
			$params['cont'] = $cont;
			$params['type'] = in_array($type,array(1,2))?$type:2;
			$after = SFilter::replace(str_replace("\r\n",'<br>',$params['cont']),$params['type']);
			$params['filterafter'] = str_replace('**',"<font style=\"color:red;\">**</font>",$after);
		}
		$params['footer_item']['notrade'] 	= 1;
		$params['footer_item']['no_ad'] 	= 1;
		return $this->render('api/keywordfilter.html', $params);
	}
	/**
	 * 生成二维码
	 */
	function pageqrcode(){
		$tid = intval($_GET['tid']);
		if($tid){
			SQrCode::renderPng("http://i.api.zhubajie.com/html/requestssys?task_id={$tid}",5);
		}
	}
	
	/**
	 * 推荐威客,购买入口
	 * @param string $inPath
	 * 		路径信息，不包含 _GET,_POST的数据。伪静态url的路径数据
	 * 
	 * @author  ranping 2013-05-29
	 */
	public function pageRecommendWitkeyListing($inPath) {
		$api = new controller_api_upgrade();
		$arr = $api->RecommendWitkeyListing($inPath);
		return lib_BaseUtils::jsonp($arr['msg'],1,$arr['state'],$arr['other']);
	}
	
	/**
	 * 得到推荐威客列表，
	 * 
	 * @param 	string $inPath 
	 * 		路径信息，不包含 _GET,_POST的数据。伪静态url的路径数据
	 * @author  ranping 2013-05-29
	 */
	public function pageGetRecommendList($inPath) {
		header('Content-Type:application/json; charset=utf-8');
		$url = $this->getUrlParams($inPath);
		$api = new controller_api_upgrade();
		$arr = $api->recommentWikey($url);
		return lib_BaseUtils::jsonp($arr['msg'], 1, $arr['state'], $arr['other']);
	}

	//任务健康度
	function pageTaskHealth() {
		$tid = (int) $_GET['tid'];
		if (!$this->_userid || !$tid)
			exit;
		$api = new controller_api_taskhealth($tid);
	}
	
	function pageGetHealthPoint() {
		$tid = (int) $_GET['tid'];
		if (!$this->_userid || !$tid)
			exit;
		$api = new controller_api_taskhealth($tid);
		$api->getPoint();
	}

	function pageGetHealthDetail() {
		$tid = (int) $_GET['tid'];
		if (!$this->_userid || !$tid)
			exit;
		$api = new controller_api_taskhealth($tid);
		$api->getHealthDetail();
	}

	function pageRecheckHealth() {  
		$tid = (int) $_GET['tid'];
		if (!$this->_userid || !$tid)
			exit;
		$api = new controller_api_taskhealth($tid);
		$api->recheck();
	}
	
	function pageCheckHealth() {
		$tid = (int) $_GET['tid'];
		$cid = (int) $_GET['cid'];
		if (!$this->_userid || !$tid || !$cid)
			exit;
		$api = new controller_api_taskhealth($tid);
		$api->isPass($cid);
	}
	
	/**
	 * 雇主分享
	 */
	function pageUserShare(){
		$tid = intval($_GET['tid']);
		if(!$tid) exit;
		$srvTask = new zbj_service_task($tid, 'free');
		$srvTask = $srvTask->init();
		if($this->_userid != $srvTask->get('user_id')){
			exit;
		}
		if($srvTask->get('open_state') == 0){
			$option = $srvTask->get('task_info.option');
			$option = unserialize($option);
			$option['usershare'] += 1;
			$srvTask->set('task_info.option', serialize($option));
			$srvTask->save();
		}
	}

	/**
	 * 获取任务标题金额
	 */
	public function pageEmployTaskInfo($inPath) {
		$api = new controller_api_api();
		$api->getEmployTaskInfo();
	}
	
	/**
	 * 返回用户未托管赏金的任务数量
	 */
	public function pageGetCount() {
		$type = 1;
		$state = -1;
		$result = array();
		
		if($this->_userid) {
			// 没有托管赏金
			$mdl_task = new zbj_model_mk_task();
			$date = date('Y-m-d');
			$cond = "user_id = {$this->_userid} AND amount > 0 AND
				hosted = 0 AND isfrozen = 0 AND endymd >= '{$date}'";
			$item = 'COUNT(1) cnt';
			$count = $mdl_task->selectOne($cond, $item);
			$result['unhosted'] = $count['cnt'];
			
			$state = 1;
		}
		
		lib_BaseUtils::jsonp($result, $type, $state);
	}
	
	function pageclearjshash(){
		$a = new zbj_service_common();
		$t = $_GET['ver'] ? "t6" : "t5";
		var_dump($a->getJsHash(intval($_GET['c']),$t));
	}
	
	function pageTaskSlide() {
		$api = new controller_api_slide();
		$virtual_id = $_GET['vid'] ? (int)$_GET['vid'] : false;
		if (!$virtual_id)
			exit;
		$srvCate = new zbj_service_categoryvirtual();
		$info = $srvCate->getVirtualById($virtual_id);
		if (!$info)
			exit;
		$api->getSlide($virtual_id, $info['virtual1id']);
	}
	
	/**
	 *设置任务已经经过新版google统计处理 返回图片（因为请求是通过native js修改img的src实现的 需返回图片资源 否则浏览器会报错）
	 */
	function pageSetGoogleAnalyticsSent() {
		header('Content-Type: image/gif');
		$img_str = base64_decode('R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw==');
		$task_id = intval($_GET['tid']);
		if ($task_id <= 0) return $img_str;
		$srv = new zbj_service_task($task_id);
		$srv = $srv->init();
		if (!is_object($srv) || !$srv->get('user_id')) return $img_str; 
		if ($srv->isGoogleAnalyticsSent(true)) return $img_str; 
		$srv->setGoogleAnalyticsSent(true);
		return $img_str;
	}

	/**
	 *设置用户已经发送ga用户注册事件 返回图片（因为请求是通过native js修改img的src实现的 需返回图片资源 否则浏览器会报错）
	 */
	function pageSetGaSignUpEventSent() {
		header('Content-Type: image/gif');
		$img_str = base64_decode('R0lGODlhAQABAJAAAP8AAAAAACH5BAUQAAAALAAAAAABAAEAAAICBAEAOw==');
		if (!$this->_userid) return $img_str;
		$srvUser = new zbj_service_user($this->_userid);
		if ($srvUser->isGaSignUpEventSent()) return $img_str; 
		$srvUser->setGaSignUpEventSent();
		return $img_str;
	}

	/**
	 * 获取相似任务 2013-11-01 
	 **/
	function pageGetRecommendTask($inPath) {

		//因为服务器压力暂停,需要优化 2013.12.3 zhutao
		return false;

		$limit = 10;
		$tid = zbj_lib_BaseUtils::getStr($_GET['tid'], 'int');
		if (!$tid) {
			return '';
		}
		$mdl_task = new zbj_model_mk_task($tid);
		$mdl_work = new zbj_model_mk_works();
		$aTask = $mdl_task->get();
		if (empty($aTask)) {
			return '';
		}
		$cache = new zbj_lib_cache('memcache');
		$category_id = $aTask['category_id'];
		$category2id = $aTask['cateogry2id'];
		$category1id = $aTask['category1id'];
		if ($aTask['allot'] == 3) {
			$allot = 3;
		} else {
			$allot = 1;
		}
		
		$date = date('Y-m-d', $this->_time - 3*30*24*3600);
		//妈妈说名字起的太长的话站在大树后面容易被敌人发现
		$cache_page = 'task.controller.free.recommend.task.category_id.'.$category_id.'.allot.'.$allot.'page';
		$coundition = array(
			'state'=>4,
			'hosted'=>1,
			'a.open_state'=>0,
			'a.mode'=>10,
			'category_id'=>$category_id,
			'category2id'=>$category2id,
			'category1id'=>$category1id,
			"startymd>='{$date}'",
		);
		$leftjoin = array('mk_task_info AS b'=>'a.task_id = b.task_id');
		if ($aTask['allot'] == 3) {
			$coundition[] = "amount > 50";
			$coundition[] = "succeed_num > 24";
		} else {
			$coundition['b.refund_type'] = 0;
			$coundition[] = "amount > 100";
			$coundition[] = "sign_num > 15";
		}
		$totalpage = (int)$cache->get($cache_page);
		if (!$totalpage) {
			$count = $mdl_task->_db->selectOne("mk_task AS a",$coundition, "count(0) as n", "", "", $leftjoin);
			$total = $count['n'];
			$totalpage = ceil($total/$limit);
			$cache->set($cache_page, $totalpage,24*3600);
		}
		$mdl_task->setLimit($limit);
                $mdl_task->setCount(FALSE);
		$cache_name = 'task.controller.free.recommend.task.category_id.'.$category_id.'.allot.'.$allot.'.page.'.$page.'task_list';
		$aRecTask = $cache->get($cache_name);
		if (empty($aRecTask)) {
			$aRecTask = $mdl_task->_db->select("mk_task AS a",$coundition, "a.task_id,title, user_id,nickname,sign_num,works_num,allot,amount", "", "order by task_id desc", $leftjoin)->items;	
			$cache->set($cache_name, $aRecTask, 24*3600);
		}
		//works
		if (count($aRecTask) <= 4) {
			foreach (@$aRecTask as $key => $value) {
				$aRandTask[] = $key;
			}
		} else {
			$aRandTask = array_rand($aRecTask, 4);
		}
		if (!empty($aRandTask)) {
			$aTemp = array();
			foreach ($aRecTask as $key => $value) {
				if (in_array($key, $aRandTask)) {
					$aRecWork = $mdl_work->selectOne("task_id = {$value['task_id']} and open_state=0 and issuccess=1", "works_id,task_id,user_id,nickname,files,hasimgfile", "", "order by issuccess desc,class asc");
					if ($aRecWork) {
						if ($aRecWork['works_num'] > $aRecWork['sign_num']) {
							$aRecWork['sign_num'] = $aRecWork['works_num'];
						}
						if ($value['allot'] == 3) {
							$aRecWork['ft_show_type'] = 3;  //jjian showuser
						}elseif ($aRecWork['hasimgfile'] == 1) {
							$aRecWork['files'] = unserialize($aRecWork['files']);
							$aRecWork['ft_show_type'] = 2;   //show work
						} else {
							$aRecWork['ft_show_type'] = 1;   //show user
						}
						$value['works'] = $aRecWork;
						$aTemp[] = $value;
					}
				}
			}
			$html = '';
			$params = array();
			$params['task_list'] = $aTemp;
			$html = $this->render('task/tasksummary_bottom.html', $params);
			return $html;
		}
	}
	
	/**
	 * 返回当前用户配额
	 * 
	 */
	public function pageGetMemberQuota($inPath) {
		if($this->_userid < 1) {
			lib_BaseUtils::jsonp('请先登录', 1, -1);
		}
		
		$params = array();
		$url_params = $this->getUrlParams($inPath);
		if(isset($url_params['taskid'])){
		    $srvTask = new zbj_service_task($url_params['taskid']);
		    $srvTask = $srvTask->init();
		    $params['task'] = $srvTask->get();
		}
		switch($url_params['node']) {
            case 24:// 官方推荐
                if(isset($url_params['taskid'])){
                    $srvTask = new zbj_service_task($url_params['taskid']);
                    $srvTask = $srvTask->init();
                    $category1id = $srvTask->get('category1id');
                    if($srvTask->getIsBidLimitCategory($category1id)){
                        $srvCategory = new zbj_service_category($category1id);
                        $categoryName = $srvCategory->get('category_name');
                        lib_BaseUtils::jsonp('<div class="alert">'.$categoryName.'类目下，暂不支持使用官方推荐资格特权</div>', 1, -1);
                    }
                }
                $params['node'] = $node_id = (int)$url_params['node'];
                break;
			case 21:// 优质订单
			case 23:// 投标次数
			case 25:// 投标置顶
			case 26:// 投标隐藏
			case 27:// 插入名片
			case 28:// 插入案例
				$params['node'] = $node_id = (int)$url_params['node'];
				break;
			default:
				lib_BaseUtils::jsonp('没有找到相关的配额业务', 1, -1);
		}
		
		$srv_user = new zbj_service_user($this->_userid);
		$srv_pac = new zbj_service_sellerpac($this->_userid);
		
		$params['user_id'] = $this->_userid;
		
		// 用户等级
		$params['user_level'] = $srv_user->getUserLevel();
		$level = $params['user_level']['level'];
		
		// 会员过期
		$params['user_vip_expire'] = $srv_user->getUserVipExpire();
		
		// 剩余配额
		$reset_quota = $srv_pac->getLimitsList($node_id);
		$params['reset_quota'] = $reset_quota['nid_' . $node_id];
		
		// 预定义配额
		$def_quota = $srv_pac->getInfoByNodeId($node_id, $level);
		$params['def_quota'] = array(
			'unit' => $params['reset_quota']['unit']);
		if($def_quota) {
			foreach($def_quota as $quota) {
				$params['def_quota'] = $quota['node'][$node_id];
				break;
			}
		}
		
		// 可购买配额
		$quota_list = $srv_pac->getInfoByNodeId($node_id, -1);
		$params['buyable_list'] = array();
		if($quota_list) {
			foreach($quota_list as $quota) {
				$quota += $quota['node'][$node_id];
				if(!empty($quota['extra'])){
					$extra =json_decode($quota['extra'],true);
					$quota['title'] = $extra['title'];
				}
				$type = $quota['valid_days'] == 0 ? 'by_count' : 'by_time';
				unset($quota['node']);
				$quota['extra'] = json_decode($quota['extra'], TRUE);
				$quota['title'] = $quota['extra']['sub_title'];
				//begin 2014-10-13 修改
				if ($quota['price']>0){
					$params['buyable_list'][$type][] = $quota;
				}	
				//end			
			}
			if(isset($params['buyable_list']['by_time'])) {
				function sort_call($q1, $q2) {
					return $q1['price'] > $q2['price'];
				}
				
				usort($params['buyable_list']['by_time'], sort_call);
			}
		}
		$params['win'] = $url_params['w'];
		$response = $this->render('task/bid_quota.html', $params);
		
		lib_BaseUtils::jsonp($response);
	}
	
	/**
	 * 用户直接购买配额
	 */
	public function pageBuyMemberQuota() {
		
		if(zbj_lib_BaseUtils::checkCsrfToken() == false) {
			lib_BaseUtils::jsonp('参数无效', 1, -1);
		}
		
		if($this->_userid < 1) {
			lib_BaseUtils::jsonp('请先登录', 1, -1);
		}
		
		$srv_user = new zbj_service_user($this->_userid);
		$srv_pac = new zbj_service_sellerpac($this->_userid);
		
		// 创建购买订单
		if($_REQUEST['pac_id'] == NULL) {
			lib_BaseUtils::jsonp('没有找到业务ID', 1, -1);
		}
		
		$pac_id = (int)$_REQUEST['pac_id'];
		$pac = $srv_pac->getInfoById(array($pac_id));
			
		if($pac == NULL) {
			lib_BaseUtils::jsonp('购买的业务不存在', 1, -1);
		}
	
		$pac = $pac[$pac_id];
		$num = (int)$_REQUEST['num'];
		if($num < 1) {
			$num = 1;
		}
		
		$order_id = $srv_pac->createOrder(
			$pac['sale_price'], $pac['stype'], $pac['title'] . 'x' . $num,
			$num, $pac_id, (string)$_SERVER['HTTP_REFERER']);
			
		if($order_id > 0) {
			$url = zbj_lib_Constant::PAY_URL .
			SlightPHP::createUrl('/payorder/order', array(
				'oid' => zbj_lib_BaseUtils::enOrderId($order_id)
			));
			
			zbj_lib_BaseUtils::delCsrfToken();
			
			lib_BaseUtils::jsonp($url, 1, 1);
		} else {
			lib_BaseUtils::jsonp('订单创建失败，请重试', 1, -1);
		}
	}
	/**
	 * 短信上行接口
	 */
	function pagegetMobileCode(){
		if(!$this->_userid) return false;
		$user = new zbj_service_user($this->_userid);
		$content = intval($_GET['content']) ? intval($_GET['content']) : '';
		$ssms = new SSms();
		$moResult = $ssms->getSendMsg();
		$model = new zbj_model_lg_sendfromusermsg();
		$issucc = 0;
		$umobile = $user->getAuthMobile();
		foreach($moResult as $mo){
			$res = array();
			$res['serial'] = $mo->getAddSerial();
			$res['serialrev'] = $mo->getAddSerialRev();
			$res['channelnumber'] = $mo->getChannelnumber();
			$res['mobile'] = $mo->getMobileNumber();
			$res['sendtime'] = $mo->getSentTime();
			$res['content'] = $mo->getSmsContent();//iconv("UTF-8","GBK",$mo->getSmsContent());
			$res['gettime'] = $this->_time;
			if($content && $content == intval($res['content']) && $res['mobile'] == $umobile){
				$issucc = 1;
				$res['state'] = 1;
			}
			$model->insert($res);
		}
		if($issucc == 0){
			$oldRs = $model->selectOne(array('mobile'=>$umobile,'content'=>$content,'state'=>0),'*','','order by id desc');
			if($oldRs){
				$issucc = 1;
			}
		}
		if($issucc == 1){
			$certmodel = new zbj_model_mb_certlog();
			$condi = array('user_id'=>$this->_userid,'dateymd'=>date('Y-m-d'),'state'=>0);
			$rs = $certmodel->selectOne($condi,"*","","order by clg_id desc");
			if($rs){
				//有的情况保证不过期
				$certmodel->update(array('clg_id'=>$rs['clg_id']),array('datetime'=>$this->_time,'error_times'=>0));
			}else{
				//没有 重新生成一次验证码
				$rs = array(
					'bs_key'=> date('ymdHis', $this->_time).zbj_lib_BaseUtils::random(6),
					'phone'=> $umobile,
					'user_id'=> $this->_userid,
					'code'=> zbj_lib_BaseUtils::random(6, 1),
					'state'=> 0,
					'error_times' => 0,
					'datetime'=> $this->_time,
					'dateymd'=> date('Y-m-d', $this->_time)
				);
				$certmodel->insert($rs);
			}
			$model->update(array('id'=>$oldRs['id']),array('state'=>1));
			lib_BaseUtils::jsonp($rs['code'],1,1,array('key'=>$rs['bs_key']));
		}
		lib_BaseUtils::jsonp('Try Again',1,-1);
	}
	
	public function pagePurgeUserUnsolveCount() {
		$uid = (int)$_GET['uid'];
		
		if($uid > 0) {
			$srv_rcmd = new zbj_service_recommend($uid);
			$srv_rcmd->clearUnsloveCache();
		}
		
		return 'cache clear successed';
	}
	
	/**
	 * 快印名片印刷
	 * 
	 * @param string $inPath
	 * @return string
	 */
	public function pageCardPrint($inPath) {
		$url_param = $this->getUrlParams($inPath);
		switch($url_param['action']) {
			case 'print':
			case 'query':
			case 'sign':
				return call_user_func(array(
					new controller_api_cardprint($inPath),
					'page' . ucfirst($url_param['action'])
					));
			default:
				lib_BaseUtils::jsonp('param error', 1, -1);
		}
	}

	/**
	 *快印接口 签名验证
	 */
	public function pageKuaiYin($inPath) {
		$url = $this->getUrlParams($inPath);
		$method = strtolower($url['action']);
		if (!$method) lib_BaseUtils::jsonp('req not allowed', 1, -1);
		$srv = new controller_api_kuaiyin($inPath);
		if (method_exists($srv, $method)) {
			return $srv->$method($url);
		} else {
			lib_BaseUtils::jsonp('req not allowed', 1, -1);
		}
	}
	
	/**
	 * 获取结束需求的中标信息
	 */
	function pagegetTaskBidInfo(){
		$api = new controller_api_api();
		$api->getTaskBidInfo();
	}
	
	/**
	 * 需求支付中转
	 */
	function pagepayorder($inPath){
		$url = $this->getUrlParams($inPath);
		$tid = intval($url['task']);
		if($this->_userid && $tid > 0){
			$srvTask = new zbj_service_task($tid);
			$srvTask = $srvTask->init();
			if($this->_userid == $srvTask->get('user_id') 
			&& $srvTask->get('hosted')==0 
			&& $srvTask->get('isfrozen')==0 
			&& $srvTask->get('state')<=2 
			&& $srvTask->get('open_state')==0){
				$order = $srvTask->getPubOrder();
				if(!$order){
					$url = SlightPHP::createUrl('/pub/step3',array('task'=>$tid),'task');
				}else{
					$oid = zbj_lib_BaseUtils::enOrderId($order['order_id']);
					$url = SlightPHP::createUrl('/payorder/order',array('oid'=>$oid),'task');
				}
				$this->redirect($url);
			}
		}
		return false;
	}
	//源文件下载
	function pagedownFile(){
		if(!$this->_userid) return false;
		if(zbj_lib_BaseUtils::isRefererMyDomain() === false){
			lib_BaseUtils::jsonp('请求来源错误', 1, -1);
		}
		$sid = intval($_GET['sid']);
		$model = new zbj_model_mk_workssourcefile($sid);
		if($model->getData('user_id') > 0 && ($this->_userid == $model->getData('user_id') || $_GET['key'] == md5($sid.$this->_userid.$model->getData('task_id').$model->getData('filename')))){
			$logmodel = new zbj_model_mk_workssourcefiledownlog();
			$arr = array(
				'sid'=>$sid,
				'user_id'=>$model->getData('user_id'),
				'down_userid'=>$this->_userid
			);
			$logmodel->addLog($arr);
			$model->set('downloadnum',$model->getData('downloadnum')+1);
			$model->save();
			if($model->getData('file_id') > 0){
				$token = md5($model->getData('file_id').'zuuXNVHz3eZrryrDsb2D6tRqrVwvJeY6');
				$this->redirect("http://upload.zhubajie.com/main/getfile?token={$token}&fid=".$model->getData('file_id'));
			}else{
				$this->redirect("http://p6.zbjimg.com/".$model->getData('filename'));
			}
		}else{
			return false;
		}
	}
	//源文件下载日志
	function pagedownFileLog(){
		if(!$this->_userid) return false;
		if(zbj_lib_BaseUtils::isRefererMyDomain() === false){
			lib_BaseUtils::jsonp('请求来源错误', 1, -1);
		}
		$sid = intval($_GET['sid']);
		$model = new zbj_model_mk_workssourcefiledownlog();
		$model->setLimit(10);
		//@todo 这里暂时不判断权限 and (down_userid={$this->_userid} or user_id={$this->_userid})
		$rs = $model->select("sid={$sid}","","order by lid desc")->items;
		if($rs){
			$fileModel = new zbj_model_mk_workssourcefile($sid);
			$arr = array();
			foreach($rs as $k=>$v){
				$arr[$k]['user_id'] = $v['down_userid'];
				$srvUser = new zbj_service_user($v['down_userid']);
				$arr[$k]['nickname'] = $srvUser->getBrand();
				$arr[$k]['note'] = $v['note'];
				$arr[$k]['createtime'] = date('Y-m-d H:i:s',$v['createtime']);
			}
			lib_BaseUtils::jsonp(array('file'=>array($fileModel->getData('oldname'),$fileModel->getData('filesize')),'log'=>$arr));
		}else{
			lib_BaseUtils::jsonp('暂无下载记录', 1, -1);
		}
	}
	
	//获取需求稿件接口
	function pagegetworks(){
		//if(zbj_lib_BaseUtils::isRefererMyDomain() === false){
		//	lib_BaseUtils::jsonp('请求来源错误', 1, -1);
		//}
		$tid = intval($_GET['tid']);
		$limit = intval($_GET['limit']) ? intval($_GET['limit']) : 20;
		$page = intval($_GET['page']) ? intval($_GET['page']) : 1;
		if($_GET['key'] == md5($tid.$limit.$page.'as!dfwe#uhchu*ryt=d+f')){
			$srvTask = new zbj_service_task($tid);
			$srvTask = $srvTask->init();
			$res = array('work_num'=>$srvTask->get('works_num'),'works'=>array());
			if(in_array($srvTask->get('mode'),array(10,13)) && 
				$srvTask->get('open_state')==0 && 
				$srvTask->get('state')>=2 && 
				$srvTask->get('isfrozen') == 0){
				if($srvTask->get('works_num')>0){
					$params = array(
						'condition' => "task_id={$tid} and open_state=0",
						'orderby' => "order by issuccess desc,works_id asc",
						'limit' => $limit,
						'page' => $page
					);
					$works = $srvTask->getWorkList($params);
					if($works){
						$was_showorks = $srvTask->get('was_showorks');
						$srvUser = new zbj_service_user();
						foreach($works as $k=>$v){
							$res['works'][$k]['works_id']=$v['works_id'];
							$res['works'][$k]['user_id']=$v['user_id'];
							$res['works'][$k]['nickname']=$srvUser->getBrand($v['user_id']);
							$res['works'][$k]['ability']=$v['ability'];
							$res['works'][$k]['createtime']=$v['createtime'];
							$res['works'][$k]['appraise']=$v['appraise'];
							$res['works'][$k]['class']=$v['class'];
							$res['works'][$k]['isallow']=$was_showorks == 1 ? 1 : $v['isallow'];
							$res['works'][$k]['files']=$v['files'];
							$res['works'][$k]['isview']=$v['isview'];
							$res['works'][$k]['select_time']=$v['select_time'];
							$res['works'][$k]['issuccess']=$v['issuccess'];
							$res['works'][$k]['iseliminate']=$v['iseliminate'];
							$res['works'][$k]['isalternative']=$v['isalternative'];
							$res['works'][$k]['quote']=$v['quote'];
							$res['works'][$k]['hasimgfile']=$v['hasimgfile'];
							$res['works'][$k]['is_sysselect']=$v['is_sysselect'];
							$res['works'][$k]['works_source']=$v['works_source'];
							$res['works'][$k]['is_tks']=$v['is_tks'];
							$res['works'][$k]['tks_time']=$v['tks_time'];
							$res['works'][$k]['content']=$v['content'];
						}
					}
				}
				lib_BaseUtils::jsonp($res);
			}
		}
		lib_BaseUtils::jsonp('key error', 1, -1);
	}
	//检查用户是否具有使用im权限
	function pageIsUseWebim(){
		$fid = intval($_GET['fid']);
		$tid = intval($_GET['tid']);
		if(!$fid or !$tid){
			return json_encode(array('msg'=>"用户ID错误",'state'=>0));
		}
		$cache = new zbj_lib_cache('memcache');
		$key = 'www.zhubajie.com.webim.cache.fid.'.$fid;
		$users = $cache->get($key);
		if(!$users) $users = array();
		if(count($users) > 10) {
			return json_encode(array('msg'=>"发送人数超限",'state'=>0));
		}
		if(!in_array($tid,$users)) {
			$users[] = $tid;
			$now = time();
			$expireTime = strtotime(date("Y-m-d H:00:00",$now+3600)) - $now;
			$cache->set($key,$users,$expireTime);
		}
		if(false === zbj_lib_BaseUtils::webIm_contactable($fid, $tid)){
			return json_encode(array('msg'=>zbj_lib_BaseUtils::getStaticError(),'state'=>0));
		}
		return json_encode(array('state'=>1));
	}
	//判断用户是否锁定并且认证了手机号
	function pageIsAuthUser() {
		$uid = intval($_GET['uid']);
		$userkey = zbj_lib_BaseUtils::authcode($_GET['userkey'],'DECODE',zbj_lib_Constant::ZBJ_SYSUSERKEY);
		$cookie = unserialize($userkey);
		$stime = zbj_lib_BaseUtils::authcode($_GET['key'],'DECODE',self::WEBIM_AUTH_KEY);
		$now = time();
		$flag = true;
		if($now - $stime > 10) {
			$flag = false;
		}
		$ret = 0;
		if($uid != 0 && $uid == $cookie['user_id'] && $flag) {
			$user = new zbj_service_user($uid);
			// $mobile = $user->getAuthMobile(); //取消手机认证检查
			$isLock = $user->isLock(); //检查当前用户是否被锁定
			if(!$isLock)
				$ret = 1;
		}
		return lib_BaseUtils::jsonp('',1,$ret);
	}

	//判断用户是否被锁定
	function pageIsLock() {
		$ret = 0;
		$uids = $_GET['uids'];
		$uarr = explode(",",$uids);
		$uarr = empty($uarr) ? array() : $uarr;
		$ret = array();

		$mb = new zbj_model_mb_account();
		if(!empty($uarr)) {
			$uids = array();
			foreach($uarr as $id) {
				$id = intval($id);
				if($id != 0 && !in_array($id,$uids)) {
					$uids[] = $id;
				}
			}
			if(!empty($uids)) {
				$condition = "user_id in (".implode(",",$uids).")";
				$result = $mb->select($condition,'user_id,locks,lockstime');
				$result = $result->items;
				foreach($result as $user) {
					$islock = 0;
					if($user['locks'] == 1) {
						if($user['lockstime'] == 0 || $user['lockstime'] > time()) {
							$islock = 1;
						}
					}
					$ret[$user['user_id']] = $islock;
				}
			}
		}
		zbj_lib_BaseUtils::jsonpRs(true,$ret);
	}
	//手动添加用户之间IM权限
	function pageaddUseWebim(){
		if($this->_userid != '18'){
			exit('access denied');
		}
		
		$fid = intval($_GET['fid']);
		$tid = intval($_GET['tid']);
		$cacheName = "webim_fid_{$fid}_tid_{$tid}";
		$cache = new zbj_lib_cache("memcache");
		var_dump($cache->set($cacheName,time(),2592000));
	}
	
	/*
	 * 分类  vid 
	 * 排序 s 
	 * 价格 最大 最小 map mip
	 * 赏金	
	 * 需求时间 t 
	 * 交易模式 m
	 * 查询个数 l 默认10
	 * 返回格式 r 0 为html 其他为json
	 * @return 价格 标题 是否托管  参与数 交易模式  缩略内容 
	 */
	public function pageGetTaskByCon($inPath) {
		$virtual_id = zbj_lib_BaseUtils::getStr($_GET['vid'], 'int');
		$sort = zbj_lib_BaseUtils::getStr($_GET['s'], 'int');
		$minprice = zbj_lib_BaseUtils::getStr($_GET['mip'], 'float');
		$maxprice = zbj_lib_BaseUtils::getStr($_GET['map'], 'float');
		$c = zbj_lib_BaseUtils::getStr($_GET['c'], 'int');
		$t = zbj_lib_BaseUtils::getStr($_GET['t'], 'int');
		$m = zbj_lib_BaseUtils::getStr($_GET['m'], 'int');
		$h = zbj_lib_BaseUtils::getStr($_GET['h'], 'int');
		$l = zbj_lib_BaseUtils::getStr($_GET['l'], 'int') ? zbj_lib_BaseUtils::getStr($_GET['l'], 'int') : 10;//查询个数
		$r = zbj_lib_BaseUtils::getStr($_GET['r'], 'int') ? zbj_lib_BaseUtils::getStr($_GET['r'], 'int') : 1;
		
		$httpHeader=array('call-user-id:'.$this->_userid,'call-sessionid: '.$this->_uniqid,'call-cookieid: '.$_COOKIE['_uq'],'call-ip: '.zbj_lib_BaseUtils::getIp(),'call-source: mainsite','call-version: t5s');
		$oSe = new Sse(zbj_lib_Constant::SEARCH_API_HOST, zbj_lib_Constant::SEARCH_API_PORT,$httpHeader);
		
		
		$params = array(
				'cat' => 'req',
				'size' => $l,
				'page' => 0,
				'sort'=>array('!updatetime'),
				'hideSearchfilter' => 0,
				'sourcefilter4lis' => 0
		);
		if ( $virtual_id ) {
			$params['catalogidtreefilter'] = array($virtual_id);
		}
		if ( $minprice ) {
			$params['minprice'] = $minprice;
		}
		
		if ( $maxprice ) {
			$params['maxprice'] = $maxprice;
		}
		
		switch ($sort) {	
			case 1: $params['sort'] = array('!endtime'); break;//结束时间降序	
			case 2: $params['sort'] = array('endtime'); break;		//结束时间升序				
			case 3: $params['sort'] = array('!bids'); break;			//投标数量降序
			case 4: $params['sort'] = array('bids'); break;			//投标数量升序
			case 5:	$params['sort'] = array('!price'); break;		//赏金降序
			case 6:	$params['sort'] = array('price'); break;			//赏金升序
			case 7:	$params['sort'] = array('!starttime'); break;	//发布时间降序
			case 8:	$params['sort'] = array('starttime'); break;	 //发布时间升序
			case 13:$params['sort'] = array('!updatetime');break; //加价任务															
		}
		switch ($c){
			case 2: 
				$params['electionfilter'] = 1;
				$params['trustfilter'] = 'trusted';
				break;
			case 3:
				$params['electionfilter']= 0;
				break;
		}
		
		switch ($m) { //交易模式
			case 2:// 比稿
				$params['modefilter'] = 10;
				$params['assignfilterList'] = array('single', 'contest');
				break;
			case 3:// 招标
				$params['modefilter'] = 13;
				break;
			case 4:// 计件
				$params['modefilter'] = 10;
				$params['assignfilter'] = 'allot';
				break;
		}
		
		switch ($h) {
			case 2:// 暂未定价
				$params['maxprice'] = 0;
				break;
			case 3:// 已托管
				$params['trustfilter'] = 'trusted';
				break;
			case 4:// 未托管
				$params['trustfilter'] = 'none';
				$params['minprice'] = 1;
				break;
		}			//发布时间
		$now = $this->_time;
		switch ($t) {
			case 2:				//近3天发布的任务
				$lastyestoday = $now - (86400*3);
				$params['earlieststarttime']=$lastyestoday;
				$params['lateststarttime']=$now;
				break;
			case 3:			//3天内到期
				$endTime = $now + (86400*3);
				$params['earliestendtime'] = $now;
				$params['latestendtime']	= $endTime;
				break;
			case 4:			//24小时内到期
				$endTime = $now + 86400 ;
				$params['earliestendtime'] = $now;
				$params['latestendtime']=$endTime;
				break;
			case 5:			//今天发布
				$datetoday = date('Y-m-d');
				$today = strtotime($datetoday);
				$params['earlieststarttime']=$today;
				$params['lateststarttime']=$now;
				break;
			case 6:			//昨天发布
				$yestoday = date('Y-m-d',$this->_time - 86400);
				$yestoday = strtotime($yestoday);
				$today = date('Y-m-d');
				$today = strtotime($today);
				$params['earlieststarttime']=$yestoday;
				$params['lateststarttime']=$today;
				break;
			case 7:			//2天内到期
				$endTime = $now + (86400*2);
				$params['earliestendtime'] = $now;
				$params['latestendtime']	= $endTime;
				break;
			case 8: //近7天发布
				$lastyestoday = $now - (86400*7);
				$params['earlieststarttime']=$lastyestoday;
				$params['lateststarttime']=$now;
				break;
			case 9:// 近15天发布
				$lastyestoday = $now - (86400*15);
				$params['earlieststarttime']=$lastyestoday;
				$params['lateststarttime']=$now;
				break;
			case 999: // 加急任务
				$params['urgentfilter'] = array(2, 3);
				break;
		}
		$result = $oSe->search($params);
		if ( $result['items'] ) {
			foreach ( $result['items'] as $k=>$v ) {
				$task[$k]['task_id'] = $v['taskId'];
				$task[$k]['title'] = $v['title'];
				$task[$k]['content'] = $v['content'];
				$task[$k]['bountyAmount'] = $v['bountyAmount'];
				$task[$k]['hideWorks'] = $v['hideWorks'];
				$task[$k]['mode'] = $v['mode'];
				$task[$k]['workCount'] = $v['workCount'];
				$task[$k]['bountyAssign'] = $v['bountyAssign'];
			}
			switch ($r) {
				case 2:
					$str = "<p>";
					foreach ($task as $key => $val) {
						$str .= "<p>";
						$str .= "<em>¥&nbsp;{$val['bountyAmount']}</em>";
						$str .= "&nbsp;&nbsp;<a href='".zbj_lib_Constant::HOME_URL."/".$val['task_id']."/'>{$val['title']}</a>";
						$str .= "</p>";
						$str .= "<p>".zbj_lib_BaseUtils::cutstr($val['content'],50)."</p>";
						if ( $val['mode'] == 1 ) {
							$trust_str = "已部分托管";
						} else {
							$trust_str = "已托管";
						}
						$str .= "<p><em>{$trust_str}</em></p>";
						if ( $val['mode'] == 13 ) {
							$mode_str = "招标";
						} elseif ( $val['bountyAssign'] == 3 ) {
							$mode_str = "计件";
						} else {
							$mode_str = "比稿";
						}
						$str .= "<p><a href='".zbj_lib_Constant::TASK_URL."/".$val['task_id']."/#bid-area'>{$val['workCount']}</a><span>参与</span><span>|</span>{$mode_str}<span></span></p>";
					}
					$str .= "</p>";
					return lib_BaseUtils::jsonp($str, 0, 1);
					break;
				default:
					return lib_BaseUtils::jsonp($task);
			}
		} else {
			return lib_BaseUtils::jsonp("木有数据", 1, -1);
		}
	}
	
		
	/**
	 * 交易付款
	 */
	function pageTaskPay($inPath){
		$url = $this->getUrlParams($inPath);
		
		$tid = intval($url['tid']);
		if($tid<=0){
			$this->ShowMsg('传递的参数异常'); exit;
		}
		$gourl = zbj_lib_Constant::TASK_URL.'/'.$tid;
		
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();
		if(in_array($srvTask->get('mode'),array(11,12))){ // 雇佣
			@header('Location:'.$gourl); exit;
		}
		
		$condition=array('product_pkid'=>$tid,'stype'=>16,'state'=>0,'ptype'=>$srvTask->getTaskToOrderMode());

		$orderModel = zbj_model_api::get('zbj_model_fn_order');
		$order = $orderModel->selectOne($condition,'*',null,'order by order_id asc');
		$oid = intval($order['order_id']);
		
		if($oid>0){
			unset($condition);
			$condition = array('order_id'=>$oid,'stype'=>16,'ptype'=>$srvTask->getTaskToOrderMode());
			$orderdataModel = zbj_model_api::get('zbj_model_fn_orderdata');
			$orderdata = $orderdataModel->selectOne($condition,'*',null,'order by data_id asc');
			$workid = intval($orderdata['product_pkid']);
			if($workid>0){
				$gourl = zbj_lib_Constant::TASK_URL.'/'.$tid.'/'.$workid.'.html#gopay';
			}
		}
		@header('Location:'.$gourl); exit;
	}


    /**
     * 雇主抢标
     */
    public function pageGetBid($inPath) {
        $urlparams = $this->getUrlParams ( $inPath );
        $taskID = ( int )$urlparams["tid"];

        return $this->getPrivateController($taskID)->GetBid($urlparams);
    }
    //得到机会的统计参数
    protected function getChanceStatObj() {
    	$obj = new com\zhubajie\union\dataobject\ChanceStat\ChanceStatInsertDTO();
    	$obj->way_type = com\zhubajie\union\dataobject\WayType\WAY_TYPE::WEB;
    	$obj->referer 			= lib_BaseUtils::getStr($_GET['referer']);
    	$obj->first_page 		= lib_BaseUtils::getStr($_GET['first_page']);
    	$obj->uncode 			= lib_BaseUtils::getStr($_GET['uncode']);
    	$obj->uncode_extid 		= lib_BaseUtils::getStr($_GET['uncode_extid']);
    	$obj->adunion_lead_id 	= lib_BaseUtils::getStr($_GET['adunion_lead_id']);
    	$obj->stt 				= lib_BaseUtils::getStr($_GET['stt']);
    	$obj->pmcode            = lib_BaseUtils::getStr($_GET['pmcode']);
    	$obj->post_page         = lib_baseUtils::getStr($_GET['post_page']);
    	return $obj;
    }

    /**
     * 发布类目异步查询接口
     * 
     */
    public function pagepubcategory() {
    	$pubSrv = new zbj_service_categorypub();
        $data = $pubSrv->getRightPubTree();
        $ret = array();
        foreach($data as $val) {
        	$ret[] = $val;
        }
        $data = $ret;
        lib_BaseUtils::jsonp($data,1);
    }

    /**
     * 发布机会
     * @add by yangliangliang
     */
    public function pagepubchance() {
    	$res = $this->submitchance();
    	if($res['success']) $res['data'] = $res['code'];
    	lib_BaseUtils::jsonp($res['data'],1,$res['success']);	
    }

    /**
     * 得到机会数量
     */
    public function pagegetchancenum() {
    	$cache = new zbj_lib_cache('memcache');
		$key = 'zhubajie.com.pc.chance.num';
		$num = $cache->get($key);
		if(!$num) $num = 3221;
		lib_BaseUtils::jsonp($num,1);
    }

    /**
     * 发布机会2.0
     * @add by yangliangliang
     */
    public function pageupchance() {
    	$params = $this->submitchance();
    	if($params['success']) {
    		$cache = new zbj_lib_cache('memcache');
    		$key = 'zhubajie.com.pc.chance.num';
    		$num = $cache->get($key);
    		$cache->set($key,$num+1,86400*30);
	    	$srvUser = new zbj_service_user($this->_userid);
	    	$params['_userid'] = $this->_userid;
	    	$params['phone'] = lib_BaseUtils::getStr($_GET['ct_mobile']);
	    	$params['certed_phone'] = $srvUser->getAuthMobile();
	    	$region = new zbj_service_region();
	    	if($this->_userid && $region->checkIpIsChina() && $params['phone'] == $params['certed_phone']) {
	    		$params['cert'] = 1;
	    	}else {
	    		$params['cert'] = 0;
	    	}
	    }
    	$html = $this->render("../base/inc/list/fuwubao_complete_info.tpl",$params,'%');
    	lib_baseUtils::jsonp($html,1);
    }

    protected function submitchance() {
    	$res = array("success"=>0,"data"=>"");
    	if($_GET) {
    		$ct_name = lib_BaseUtils::getStr($_GET['ct_name']);
    		$ct_mobile = lib_BaseUtils::getStr($_GET['ct_mobile']);
    		$ct_note = lib_BaseUtils::getStr($_GET['ct_note']);
    		$ct_source = lib_BaseUtils::getStr($_GET['ct_source'],'int');//默认子来源为列表
    		$ct_source = $ct_source == 0 ? 3 : $ct_source;
    	    $ct_cat1 = intval($_GET['cat1']); //一级类目id 可选
    	    $ct_cat2 = intval($_GET['cat2']); //二级类目id 可选
    	    $ct_cat3 = intval($_GET['cat3']); //三级类目id 可选
    	    $ct_bid  = intval($_GET['ct_bid']); //三级基础类目id
    		if(!$ct_name) {
    			$res['data'] = '用户名不能为空!';
    		}else if(!$ct_mobile) {
    			$res['data'] = '手机号不能为空!';
    			if(!lib_BaseUtils::IsMobile($ct_mobile)) {
    				$res['data'] = '手机号格式有误!';
    			}
    		}else {
    			try {
	    			$sdk_lib = array('zbj_sdk','zbj_boss_sdk');
	    			$timeout = 10;
	    			zbj_lib_ApiClient::init (zbj_lib_Constant::ZBJAPI_APPID, zbj_lib_Constant::ZBJAPI_APPSECRET,$timeout,$sdk_lib);
	    			$client = new com\zhubajie\boss\interfaces\bschanceServiceClient(null);
	    			zbj_lib_ApiClient::build ($client);
	    			$contactorDO  = new \com\zhubajie\boss\dataobject\bschance\ContactorDO();
	    			$contactorDO->ct_mobile = $ct_mobile;
	    			$contactorDO->ct_name = $ct_name;
	    			$contactorDO->ip   = zbj_lib_BaseUtils::getIp(1);//IP地址
	    			$contactorDO->note = $ct_note;
	    			$contactorDO->cat1 = $ct_cat1;
	    			$contactorDO->cat2 = $ct_cat2;
	    			$contactorDO->cat3 = $ct_cat3;
	    			$contactorDO->base_cat3 = $ct_bid;  //三级基础类目
	    			$contactorDO->ct_sex = com\zhubajie\boss\dataobject\bschance\SEX::SEX_DEFAULT;
	    			$contactorDO->source = $ct_source;
	    			$statobj = $this->getChanceStatObj();
					if(intval($_GET['way_type'])>0){
						$statobj->way_type=intval($_GET['way_type']);
						$contactorDO->source = 0;
					}
	    			$ret = $client->CreateBusinessContactor($contactorDO,$statobj);
	    			if($ret->success) {
	    				$res['success'] = 1;
	    				$res['data'] = $ret->message;
	    				$res['code'] = $ret->code;
	    			}else {
	    				$res['data'] = $ret->message;
	    			}
    			}catch(Exception $e) {
    				$res['data'] = '机会提交内部接口错误！';
    			}
    		}
    	}else {
    		$res['data'] = '请填写姓名、手机号';
    	}
    	return $res;
    }

    /**
     *
     * 根据发布类目得到基础类目及对应的导购类目
     */
    public function pagegetCatByWords() {
    	header('Content-Type:application/json; charset=utf-8');
    	$kw = lib_BaseUtils::getStr($_GET['kw']);
    	$ret = array();
    	$cats = $this->getBaseCat();
    	if($kw) {
    		$pub = $this->getCatByKw($kw);
    		foreach($cats as &$val) {
    			$level2ids = explode(",",$val['level2']);
    			if($level2ids != null && in_array($pub['base2id'],$level2ids) && $pub['base3id']) {
    				$val['current'] = 1;
    				$val['default_id'] = $pub['base3id'];
    				$val['default_name'] = $pub['base3name'];
    			}
    		}
    	}
    	$ret = $cats;
    	lib_BaseUtils::jsonpRs(true,$ret);
    }
	/**
     *
     * 根据发布类目得到基础类目及对应的导购类目(商机框专用)
     */
    public function pagegetCatByWordss() {
    	header('Content-Type:application/json; charset=utf-8');
    	$kw = lib_BaseUtils::getStr($_GET['kw']);
    	$ret['commonData'] = $this->getBaseCat();
    	if ($kw) {
    		$mdlBussinessBox = new zbj_model_mk_categorybusinessbox();
    		$aGuide=$mdlBussinessBox->selectOne(array("guide_name"=>$kw),"category_id,category_name,guide_id,guide_name");
    		if ($aGuide['guide_name']){
    			$currentData = array(
    							"current"           =>  1,   				
					    		"default_id"		=>	$aGuide['category_id'],
					    		"default_name"		=>	$aGuide['category_name'],
    							"holder"            =>	"我需要".$aGuide['guide_name'],
    							"title"				=>	$aGuide['guide_name'],
    							"name"				=>	$aGuide['guide_name'],		    		
					    	    );	
    		}else{
    			$mdlKeyWords = new zbj_model_mk_categorykeywords();
	    		$baseCategory = $mdlKeyWords->selectOne(array('kname'=>$kw),"kname,category3_id,category3_name,chance_text");
	    		if ($baseCategory['kname']){
	    			$currentData = array(
	    							"current"           =>  1,   				
						    		"default_id"		=>	$baseCategory['category3_id'],
						    		"default_name"		=>	$baseCategory['category3_name'],
	    							"holder"            =>	$baseCategory['chance_text'],		    		
						    	    );				
					$aGuide = $mdlBussinessBox->selectOne(array('category_id'=>$baseCategory['category3_id']),"guide_id,guide_name");
					if ($aGuide['guide_id']){
						$currentData['title'] = $aGuide['guide_name'];
						$currentData['name'] = $aGuide['guide_name'];						
					}		    	    
	    		}     		
    		}    		   		
    	}
    	$ret['currentData'] = $currentData;     		
    	lib_BaseUtils::jsonpRs(true,$ret);
    }

    //得到默认配置数据
    protected function getBaseCat() {
    	$ret = array();
    	$ret[] = array("name"	=>	"LOGO设计",
    		"level2"			=>	"1240",
    		"default_id"		=>	1448,
    		"default_name"		=>	"LOGO设计",
    		"title"				=>	"LOGO设计",
    		"holder"			=>	"我需要LOGO设计"
    	);
    	$ret[] = array("name"	=>	"VI设计",
    		"level2"			=>	"1242",
    		"default_id"		=>	1363,
    		"default_name"		=>	"VI系统设计",
    		"title"				=>	"VI设计",
    		"holder"			=>	"我需要VI设计"
    	);
    	$ret[] = array("name"	=>	"包装设计",
    		"level2"			=>	"3",
    		"default_id"		=>	1212,
    		"default_name"		=>	"包装设计",
    		"title"				=>	"包装设计",
    		"holder"			=>	"我需要包装设计"
    	);
    	$ret[] = array("name"	=>	"宣传品设计",
    		"level2"			=>	"87",
    		"default_id"		=>	170,
    		"default_name"		=>	"海报设计",
    		"title"				=>	"宣传品设计",
    		"holder"			=>	"我需要宣传品设计"
    	);
    	$ret[] = array("name"	=>	"产品外观设计",
    		"level2"			=>	"1214",
    		"default_id"		=>	1262,
    		"default_name"		=>	"产品外观设计",
    		"title"				=>	"产品外观设计",
    		"holder"			=>	"我需要产品外观设计"
    	);
    	$ret[] = array("name"	=>	"营销推广",
    		"level2"			=>	"1543,1216,1217,1218,1219,1220,1221",
    		"default_id"		=>	1225,
    		"default_name"		=>	"网络推广",
    		"title"				=>	"营销推广",
    		"holder"			=>	"我需要营销推广"
    	);
    	$ret[] = array("name"	=>	"网店服务",
    		"level2"			=>	"1267,1283,1289",
    		"default_id"		=>	319,
    		"default_name"		=>	"店铺收藏",
    		"title"				=>	"网店服务",
    		"holder"			=>	"我需要网店服务"
    	);
    	$ret[] = array("name"	=>	"起名取名",
    		"level2"			=>	"1235",
    		"default_id"		=>	1243,
    		"default_name"		=>	"品牌取名",
    		"title"				=>	"起名取名",
    		"holder"			=>	"我需要起名取名"
    	);
    	$ret[] = array("name"	=>	"文案策划",
    		"level2"			=>	"1236,1237,1238,1239,1241",
    		"default_id"		=>	1245,
    		"default_name"		=>	"品牌策划",
    		"title"				=>	"文案策划",
    		"holder"			=>	"我需要文案策划"
    	);
    	$ret[] = array("name"	=>	"网站建设",
    		"level2"			=>	"1257,1258,1259,1260,1261",
    		"default_id"		=>	1330,
    		"default_name"		=>	"模板建站",
    		"title"				=>	"网站建设",
    		"holder"			=>	"我需要网站建设"
    	);
    	$ret[] = array("name"	=>	"UI设计",
    		"level2"			=>	"130,158,166",
    		"default_id"		=>	1375,
    		"default_name"		=>	"网站UI设计",
    		"title"				=>	"UI设计",
    		"holder"			=>	"我需要UI设计"
    	);
    	$ret[] = array("name"	=>	"移动应用开发",
    		"level2"			=>	"1343,1344",
    		"default_id"		=>	1347,
    		"default_name"		=>	"APP开发",
    		"title"				=>	"APP和微信开发",
    		"holder"			=>	"我需要APP和微信开发"
    	);
    	$ret[] = array("name"	=>	"软件开发",
    		"level2"			=>	"1304,1306,1307,1309,1311",
    		"default_id"		=>	1337,
    		"default_name"		=>	"软件定制开发",
    		"title"				=>	"软件开发",
    		"holder"			=>	"我需要软件开发"
    	);
    	$ret[] = array("name"	=>	"动画动漫",
    		"level2"			=>	"1255,1256,683",
    		"default_id"		=>	1278,
    		"default_name"		=>	"卡通形象",
    		"title"				=>	"动画动漫制作",
    		"holder"			=>	"我需要动画动漫制作"
    	);
    	$ret[] = array("name"	=>	"影视制作",
    		"level2"			=>	"1252,1253,1254",
    		"default_id"		=>	1287,
    		"default_name"		=>	"脚本",
    		"title"				=>	"影视制作",
    		"holder"			=>	"我需要影视制作"
    	);
    	$ret[] = array("name"	=>	"其他",
    		"level2"			=>	"",
    		"default_id"		=>	1420,
    		"default_name"		=>	"环保监测",
    		"title"				=>	"其他服务",
    		"holder"			=>	"我需要其他服务"
    	);
    	return $ret;
    }

    //得到关键字匹配的发布类目
    protected function getCatByKw($kw) {
    	$result = array();
    	$httpHeader = array(
			'call-user-id:'.$this->_userid,
			'call-sessionid: '.$_COOKIE['uniqid'],
			'call-cookieid: '.$_COOKIE['_uq'],
			'call-ip: '.zbj_lib_BaseUtils::getIp(),
			'call-source: mainsite');
		$se = new Sse(
			zbj_lib_Constant::SOLR_CACHE_HOST, 
			zbj_lib_Constant::SOLR_CACHE_PORT, 
			$httpHeader);
		
		$params = array(
			'cattypefilter'=>'pub',
			'cat' => 'category',
			'size' => 1,
			'query' => $kw
			);
		
		$result = array();
		$data = $se->search($params);
		if($data['total_size'] > 0) {
			foreach($data['items'] as $item) {
				$result = array(
					'pub_name' => $item['vCatalog3Name'],
					'pub1id' => $item['vCatalogId'],
					'pub2id' => $item['vCatalog2Id'],
					'pub3id' => $item['vCatalog3Id'],
					'base2id'=> $item['catalog2Id'],
					'base3id'=> $item['catalog3Id'],
					'base3name'=> $item['catalog3Name'],
					);
			}
		}
		return $result;
    }

	function pageCloseWebimNotice($url){

		if(!$this->_userid){
			lib_BaseUtils::jsonp("非法用户访问！", 1, -1);
		}

		try{

			$pushRes = zbj_lib_BaseUtils::webim_sendOfficeMsg((int)$this->_userid, '[cbx123654Notifier:paidan]{"status":"close","type":"miss","user_id":"'.$this->_userid.'"}', 9, '', 'on');

			if(!$pushRes){
				throw new Exception('推送派单信息至IM系统失败');
			}
			lib_BaseUtils::jsonp("success", 1, 1);

		}catch (Exception $e){
			lib_BaseUtils::jsonp($e->getMessage(), 1, -1);
		}

	}

	/**
	 * 获取服务商 好评率和纠纷率
	 * @param $inPath
	 * @return mixed
	 */
	public function pageUserRateInfo($inPath) {

		$url = $this->getUrlParams($inPath);

		if(!$this->_userid){
			lib_BaseUtils::jsonp("未登录状态，禁止访问！", 1, -1);
		}

		$srv = new controller_api_user();
		return $srv->rateInfo($url);
	}

	/**
	 * 公共获取表单接口
	 * @param $inPath
	 */
	public function pageGetFormById($inPath){
		
		if(!$this->_userid){
			lib_BaseUtils::jsonp("非法用户访问！", 1, -1);
		}

		$inPath = $this->getUrlParams($inPath);
		$dataId = zbj_lib_BaseUtils::getStr($inPath['dataId'],'int');
		
		if(empty($dataId)){
			lib_BaseUtils::jsonp("非法用户访问！", 1, -1);
		}

		$param['data'] = $dataId;

		$data['appid']='trade';
		$data['service']='WtCommonService';
		$data['method']='getFormById';

		$data['param']=json_encode($param);

		//定义一个cache对象
		$cache = new zbj_lib_cache('memcache');
		$cache_key = 'com.zhubajie.task.getformbyid'.$dataId;

		if(false !== ($info = $cache->get($cache_key))){
			lib_BaseUtils::jsonp("success", 1, 1,$info);
		}

		try{

			$c = new zbj_lib_ApiHttpClient($data);

			$result = $c->execute();

			$result = json_decode($result,1);

			if(!is_array($result) || !$result['success']){
				throw new Exception("接口请求失败！", 1);
			}

			$other = array("data"=>$result['data']);

			$cache->set($cache_key,$other,86400);
			lib_BaseUtils::jsonp("success", 1, 1,$other);

		}catch (Exception $e){

			lib_BaseUtils::jsonp($e->getMessage(), 1, -1);

		}

	}

	/*
	 *获取原因的统计
	 *@param tid 任务id
	 *@param debug=1 测试模拟数据
	 */
	public function pageGetReasonTotal($inPath){
		$url = $this->getUrlParams($inPath);
		//$data['_d']=1;
		$taskId=zbj_lib_BaseUtils::getStr($url['tid'],'int');
		$data['appid']='trade';
		$data['service']='ReasonService';
		$data['method']='getReasonStatByTaskId';
		$data['param']='{"data":'.$taskId.'}';
		if($url['debug']==1){
			$data['param']='{"data":20}';
		}
		$apiHttp=new zbj_lib_ApiHttpClient($data);
		$jsonList=$apiHttp->execute();

		$result = json_decode($jsonList,1);
		if(!is_array($result) || !$result['success']){
			lib_BaseUtils::jsonp("接口请求失败！", 1, -1);
		}
		if($url['pc']==1){
			$format=json_decode($jsonList,true);
			foreach($format['data'] as $fValue){
				if( in_array($fValue['itemId'],array(2,3,10)) ){
					$resultData['data'][]=$fValue;
				}
			}
			$resultData['success']=true;
			$jsonList=json_encode($resultData);
		}
		return $jsonList;
	}

}

