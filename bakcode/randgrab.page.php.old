<?php
/*
 *抢订单
 *@author lsTMango
 *@date 2015-09-07
 */
class controller_randgrab extends components_basepage {
	private $userId;
	//选标率
	private $selectRate=0.5;//test
	//盲抢池任务
	private $taskArray=array();
	//待检测任务
	private $checkTask=array();
	//防御式code
	private $totalCycleNum=30;
	private $cycleNum=0;

	/*
	 *构造函数
	 */
	public function __construct() {
		$this->_getUserId();
	}

	private function _getUserId(){
		#$userId= zbj_lib_BaseUtils::getStr($this->_userid,'int');
		$userId = 90; //del
		$this->userId=$userId;
	}

	/*
	 *盲抢
	 */
	public function pageGrabtask(){
		//判断是否ajax请求
	    if (!zbj_lib_BaseUtils::isAjax()) {
			#return 'no ajax';
		}
		//验证是否交易顾问
		$this->checkIdentity();
		//检测选标率
		$this->checkSelectRate();
		//检测当前交易顾问是否有跟进订单
		$this->checkFollowTask();
		//获取盲抢池订单
		$this->getRandGrabPoolTask();
	}

	private function getRandGrabPoolTask(){
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
		$condi[] = 'allotstate = 0 and needallot = 2';
		//获取盲抢池30天数据
		$condi[] = "next_chktime > '" . (time()-30*24*3600) . "'";
		$grabTaskArray = $taskAllotPoolModule->select($condi, 'task_id')->items;
		//var_dump($grabTaskArray);
		//var_dump($taskAllotPoolModule);
		//die();
		if(!$grabTaskArray){
			return $this->printmsg("暂时没有合适的订单哦，稍后再来试试吧！(●'◡'●)", 0);
		}
		//var_dump($grabTaskArray);
		//var_dump($taskAllotPoolModule);
		$taskIdArray = array();
		foreach($grabTaskArray as $tValue){
			$tid = intval($tValue['task_id']);
			$tid>0 && $taskIdArray[] = $tid;
		}
		//$taskIdArray=array_pop($taskIdArray);
		//var_dump($taskIdArray);
		$this->taskIdArray=$taskIdArray;
		//$taskId=$this->getRandCycleTask();
		$this->getRandCycleTask();
		//echo 33333333333333;
		//var_dump($taskId);
		//var_dump($this->returnTaskId);
		$this->doGrabTask();
		
	}

	private function doGrabTask(){
		$taskId=$this->returnTaskId;
		//echo '1111111111111111111';
		//var_dump($taskId);
		$srvTask = new zbj_service_task($taskId);
		$srvTask = $srvTask->init();
		//var_dump($srvTask);
		//die();
		$toManager['filter']= 'grab';
		$toManager['manager']['manager_id']= $this->userId;
		//var_dump($toManager);
		//die();
		//-----------------------------------------加入验证转审核
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
		$condi[] = 'task_id='.$taskId;
		$lastCheckPoolType = $taskAllotPoolModule->selectOne($condi, 'needallot');
		//再循环
		if($lastCheckPoolType['needallot']==-1){
		//if($lastCheckPoolType['needallot']==2){//del
			//echo 'XXXXXXXXXXXXXXXXXXXXXXXXXXX';
			//var_dump($this->randKey);
			//var_dump($this->taskIdArray);
			//var_dump($this->taskArray);
			$this->unsetPublcVar();
			$this->getRandCycleTask();
		}
		//var_dump($lastCheckPoolType);
		//die();
		//-----------------------------------------加入验证转审核
		$srvAlloter = new zbj_service_taskalloter();
		$allot_back=$srvAlloter->doAllot($srvTask,$toManager);
		$rError=$srvAlloter->getError();
		//echo 'do';
		var_dump($allot_back);
		var_dump($rError);
		//die();
		if($allot_back==true){
			/*
			 *$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
			 *$condition['task_id']=$taskId;
			 *$updateData['allotstate']=1;
			 *$saveResult = $taskAllotPoolModule->update($condition,$updateData);//加事物
			 *if ($saveResult === false){
			 *    $taskAllotLog=new zbj_service_taskallotlog();
			 *    $taskAllotLog->addTaskAllotLog($taskId,array("标记任务成功认领失败状态「主动认领」:".$taskAllotPoolModule->getError()));
			 *}
			 */

			return $this->printmsg("需求认领成功!", 2, null, $_SERVER ['HTTP_REFERER']);
		}
		else{
			return $this->printmsg("需求认领失败!", 0);
		}
	}
	
	private function getRandCycleTask(){
		$taskIdArray=$this->taskIdArray;
		//var_dump ( array_keys($taskIdArray,'6045040') );
		//var_dump($taskIdArray);
		//var_dump($this->taskArray);
		//die();
		if(!$this->taskArray && $taskIdArray){
			$taskModule = zbj_model_api::get('zbj_model_mk_task');
			if( count($taskIdArray)>1 ){
				$taskIds=implode($taskIdArray,',');
				$condi[] = 't.task_id in ('.$taskIds.')';
				//var_dump( $condi);
			}
			else{
				$condi[] = 't.task_id = '.$taskIdArray[0];
			}
			$leftjoin = array(
				'mk_task_info as ti'=>'ti.task_id = t.task_id',
			);
			$item='t.task_id,t.mode,t.state,t.open_state,ti.refund_type,ti.refund_state,t.hosted';
			$taskArray = $taskModule->_db->select('mk_task as t',$condi,$item,null,null,$leftjoin)->items;
			//var_dump($taskIdArray);
			//var_dump($taskModule);
			if(!$taskArray) return $this->printmsg("数据获取失败！请稍后再试～(●'◡'●)", 0);
			$this->taskArray=$taskArray;
		}
		else{
			$taskArray=$this->taskArray;
		}

		if(count($taskArray)<=0){
			return $this->printmsg("暂时没有合适的订单哦，稍后再来试试吧！(●'◡'●)", 0);
		}
		//var_dump($taskArray);
		$randKey=array_rand($taskArray);
		$this->randKey=$randKey;
		//$randKey=2;//del
		$randTask=$taskArray[$randKey];
		$this->checkTask=$randTask;
		//var_dump($randTask);
		//var_dump($taskModule);
		$checkResult=$this->checkTaskGrabRule();
		//$a=array('a','b','c','d');
		//unset($a[2]);
		//var_dump($a);
		$cycleNum=$this->cycleNum;
		$cycleNum++;
		$this->cycleNum=$cycleNum;
		if($checkResult===true){
			var_dump('true');
			var_dump($randTask['task_id']);
			//echo $this->cycleNum;
			$this->returnTaskId=$randTask['task_id'];
			//echo 22222222222222;	
			//var_dump($randTask);
			//var_dump($randTask['task_id']);
			return true;
		}
		else{
			$this->removeGrabPool($randTask['task_id']);
			var_dump('false');
			var_dump($randTask['task_id']);
			//echo $this->cycleNum;
			//
			$this->unsetPublcVar($randTask['task_id']);
			
			
			
			/*
			 *$delKey = array_keys($taskIdArray,$randTask['task_id']);
			 *unset($taskIdArray[$delKey[0]]);
			 *$this->taskIdArray=$taskIdArray;
			 *var_dump($taskIdArray);
			 *unset($taskArray[$randKey]);
			 *$this->taskArray=$taskArray;
			 */
			//var_dump(count($taskArray));
			if($cycleNum>=$this->totalCycleNum){
				return $this->printmsg("当前抢单人数太多，请稍后再试～(●'◡'●)", 0);
			}
			//var_dump($cycleNum);
			//var_dump($this->totalCycleNum);
			$this->cycleNum=$cycleNum;
			$this->getRandCycleTask();
		}
	}

	private function unsetPublcVar(){
		$taskIdArray=$this->taskIdArray;
		$taskArray=$this->taskArray;
		$randKey=$this->randKey;
		$randTask=$taskArray[$randKey];

			//var_dump($this->taskIdArray);
			$delKey = array_keys($taskIdArray,$randTask['task_id']);
			unset($taskIdArray[$delKey[0]]);
			$this->taskIdArray=$taskIdArray;
			//var_dump($this->taskIdArray);

			//var_dump($this->taskArray);
			unset($taskArray[$randKey]);
			$this->taskArray=$taskArray;
			//var_dump($this->taskArray);
		if( count($taskArray)<=0 ){
			return $this->printmsg("暂时没有合适的订单哦，稍后再来试试吧～(●'◡'●)", 0);
		}
	}

	/*
	 *移除盲抢池
	 */
	private function removeGrabPool($taskId){
		
		//var_dump ( 'del' );
		//var_dump($taskId);
		//return;
		//die();
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_taskallotpool');
		/*
		 *$taskPool=$taskAllotPoolModule->get($taskId);
		 *var_dump($taskAllotPoolModule);
		 *var_dump($taskPool);
		 */
		//echo $taskId;
		//$taskAllotPoolModule->set('task_id', $taskId);
		//$taskAllotPoolModule->set('allotstate', 2);//移除盲抢池
		//$saveResult = $taskAllotPoolModule->save();
		$condition['task_id']=$taskId;
		$updateData['allotstate']=2;
		$saveResult = $taskAllotPoolModule->update($condition,$updateData);
		//var_dump($taskAllotPoolModule);
		//var_dump($taskAllotPoolModule->getError());
		if ($saveResult === false){
			$taskAllotLog=new zbj_service_taskallotlog();
			$taskAllotLog->addTaskAllotLog($taskId,array("从盲抢池中移除失败「主动认领」:".$taskAllotPoolModule->getError()));
		}
	}

	private function checkTaskGrabRule(){
		$checkTask=$this->checkTask;
		if(!$checkTask) return $this->printmsg("待检测任务获取失败！请稍后再试～(●'◡'●)", 0);
		if($checkTask['mode']==13 && ($checkTask['state']>=3 || $checkTask['open_state']==1
			//|| ($checkTask['refund_type']>0 && $checkTask['refund_state']>0))
			) ){
			//echo 0;
			return false;
		}
		if( ($checkTask['mode']==11 || $checkTask['mode']==12) && ($checkTask['hosted']==1 || $checkTask['state']==4 || $checkTask['open_state']==1) ){
			//echo 1;
			return false;
		}
		if($checkTask['mode']==10){
			//echo 2;
			return false;
		}
		//echo 123;
		return true;
	}

	/*
	 *检测是否有待跟进订单
	 */
	private function checkFollowTask(){
		$taskAllotRoleModule = zbj_model_api::get('zbj_model_mk_taskallotrole');
		$condi[] = 'manager_id ='.$this->userId;
		$allotRole = $taskAllotRoleModule->selectOne($condi, 'need_follow_num');
		if(!$allotRole){
			return $this->printmsg("获取待受理订单数量失败～(●'◡'●)", 0);
		}
		#$need_follow_num=$allotRole['need_follow_num'];
		$need_follow_num=0;//del
		if($need_follow_num>0){
			return $this->printmsg("您当前有待受理订单，请先处理已分配给你的订单再来认领哦！(●'◡'●)", 0);
		}
		//var_dump($need_follow_num);
		return true;
	}

	/*
	 *验证是否交易顾问
	 */
	private function checkIdentity(){
		$userId=$this->userId;
		//var_dump($userId);
		$allot=new zbj_service_taskalloter();
		$allManager=$allot->getAllManager(false);
		$manages = array();
		foreach($allManager as $manage){
			$mid = intval($manage['manager_id']);
			$mid>0 && $manages[] = $mid;
		}
		if(!in_array($userId,$manages)){
			return $this->printmsg("您不是交易顾问，无法认领订单～(●'◡'●)", 0);
		}
		return true;
	}

	/*
	 *检测选标率
	 */
	private function checkSelectRate(){
		$selectCount=$this->_getSelectedSummary($this->userId);
		$allotCount=$this->_getAllotSummary($this->userId);
		$selectCount['count']=22;//del
		$allotCount['count']=33;//del
		if($allotCount['count']<=0){
			return $this->printmsg("您当前选标率过低，无法认领订单～(●'◡'●)", 0);
		}
		$selectRate=round( $selectCount['count']/$allotCount['count'],2 );
		if($selectRate<$this->selectRate){
			return $this->printmsg("您当前选标率过低，无法认领订单～(●'◡'●)", 0);
		}
		//var_dump($selectCount);
		//var_dump($allotCount);
		//var_dump($selectRate);
		//var_dump($this->selectRate);
		return true;

		/*
		 *$allot=new zbj_service_taskalloter();
		 *$allManager=$allot->getAllManager(false);
		 *$manages = array();
		 *foreach($allManager as $manage){
		 *    $mid = intval($manage['manager_id']);
		 *    $mid>0 && $manages[] = $mid;
		 *}
		 *foreach($manages as $uid){
		 *    $selectRate=$this->_getSelectedSummary($uid);
		 *    var_dump($selectRate);
		 *}
		 */
	}

    private function _getUids($uid, $gid){
        if(empty($gid) && empty($uid)){
            return false;
        }
        if(empty($uid) && $gid){
            $uid = $this->_getUserIdBygid($gid, true);
        }
        if(!is_array($uid)){
            $uid = array($uid);
        }
        $uid = array_filter($uid);
        if(empty($uid)) {
            return false;
        }
        return $uid;
    }

    private function _optManagerId($fields, $uids)
    {
        if(empty($uids)){
            return "1 ("; //排除所有直接跑错
        }
        if(count($uids) == 1){
            return "{$fields} = '{$uids[0]}'";
        }
        return sprintf("{$fields} in (%s)", join(',', $uids));
    }

	/*
     *已选标
	 */
    private function _getSelectedSummary($uid = '', $gid = '', $list = array())
    {
        $uid = $this->_getUids($uid, $gid);

        $mWork = new zbj_model_mk_works();
        $mTask = new zbj_model_mk_task();
        $join = array(
            'mk_task'=>'mk_task.task_id=mk_works.task_id',
            'mk_task_extends'=>'mk_task_extends.task_id=mk_task.task_id'
        );

        $condi = array();
        $condi[] = $this->_optManagerId('mk_task.manager_id', $uid);
        $condi[] = 'mk_task.state >= 3';
        $condi[8] = 'case when mk_task_extends.giveuptime > 0 then mk_task_extends.giveuptime >= 10800 + mk_task_extends.first_effect_follow_time else mk_task.state >= 3 end and mk_task_extends.giveuptype != 1';
        
		$count  = 0;
		$amount = 0;
		$distinct = 'DISTINCT';

		$condi[4] = "mk_works.select_ymd >= '{$this->stime}'";
		$condi[5] = "mk_works.select_ymd <= '{$this->etime}'";
		$condi[3] = 'mk_task.mode = 13';

		$data = $mWork->selectOne($condi, "count({$distinct} mk_task.task_id) as count,sum(mk_task.hosted_amount) as amount",'', '', $join, array('dbinfo'=>$this->dbinfo));
		$count += $data['count'];
		$amount += $data['amount'];

		$condi[4] = "mk_task.hosted_date >= '{$this->stime}'";
		$condi[5] = "mk_task.hosted_date <= '{$this->etime}'";
		$condi[3] = 'mk_task.mode in (11,12)';
		$condi[6] = "mk_task.hosted_amount > 0";

		$data = $mTask->selectOne($condi, 'count(1) as count,sum(mk_task.hosted_amount) as amount','', '', array('mk_task_extends'=>'mk_task_extends.task_id=mk_task.task_id'), array('dbinfo'=>$this->dbinfo));

		$count += $data['count'];
		$amount += $data['amount'];

		$condi[4] = "mk_works.select_ymd >= '{$this->stime}'";
		$condi[5] = "mk_works.select_ymd <= '{$this->etime}'";
		$condi[3] = 'mk_task.mode = 10';
		unset($condi[6]);

		$mWork->setCount(false);
		$data = $mWork->select($condi, 'mk_task.task_id,mk_task.hosted_amount','', '', $join, array('dbinfo'=>$this->dbinfo))->items;            

		if($data){
			$task_ids = array();
			foreach($data as $val){
				if($val['task_id'] && !in_array($val['task_id'], $task_ids)) {
					$task_ids[] = $val['task_id'];
					$amount += $val['hosted_amount'];
					$count += 1;
				}
			}
		}
		return array('count'=>$count, 'amount'=>$amount);
    }

	/*
     *查分配 
	 */
    private function _getAllotSummary($uid = '', $gid = '', $list = array())
    {
        $uid = $this->_getUids($uid, $gid);

        $mTask = new zbj_model_mk_task();
        $condi = array();
        $condi[] = $this->_optManagerId('mk_task.manager_id', $uid);
        $condi[] = "mk_task.open_state = 0";
        $condi[] = "mk_task.createymd >= '{$this->stime}'";
        $condi[] = "mk_task.createymd <= '{$this->etime}'";

		$data = $mTask->selectOne($condi, 'count(1) as count,sum(mk_task.amount) as amount','','','',array('dbinfo'=>$this->dbinfo));
        return $data;
    }
}
