<?php
/*{{{LICENSE
+-----------------------------------------------------------------------+
| SlightPHP Framework                                                   |
+-----------------------------------------------------------------------+
| This program is free software; you can redistribute it and/or modify  |
| it under the terms of the GNU General Public License as published by  |
| the Free Software Foundation. You should have received a copy of the  |
| GNU General Public License along with this program.  If not, see      |
| http://www.gnu.org/licenses/.                                         |
| Copyright (C) 2008-2009. All Rights Reserved.                         |
+-----------------------------------------------------------------------+
| Supports: http://www.slightphp.com                                    |
+-----------------------------------------------------------------------+
}}}*/
/**
 * @package SlightPHP
 */
 final class SlightPHP{
	/**
	 * @var string
	 */
	public static $appDir=".";

	/**
	 * @var string
	 */
	public static $xhprof_on=false;

	/**
	 * @var string
	 */
	public static $script_start_time='';

	/**
	 * current zone
	 * @var string
	 */
	public static $zone;
	/**
	 * @var string
	 */
	public static $defaultZone="zone";
	
	/**
	 * current page
	 * @var string
	 */
	public static $page;
	/**
	 * @var string
	 */
	public static $defaultPage="page";
	/**
	 * current entry
	 * @var string
	 */
	public static $entry;
	/**
	 * @var string
	 */
	public static $defaultEntry="entry";
	/**
	 * split flag of zone,classs,method
	 *
	 * @var string
	 */
	public static $splitFlag="/";
	
	public static $urlFormat="-";
	
	public static $urlSuffix=".html";

	/**
	 * zoneAlias
	 *
	 * @var array
	 */
	public static $zoneAlias;

	/**
	 * @param string $zone
	 * @param string $alias
	 * @return boolean
	 */
	public static function setZoneAlias($zone,$alias){
		SlightPHP::$zoneAlias[$zone]=$alias;
		return true;
	}
	
	public static function setUrlFormat($value){
		SlightPHP::$urlFormat=$value;
		return true;
	}
	
	public static function getUrlFormat(){
		return SlightPHP::$urlFormat;
	}
	
	public static function setUrlSuffix($value){
		SlightPHP::$urlSuffix=$value;
		return true;
	}
	
	public static function getUrlSuffix(){
		return SlightPHP::$urlSuffix;
	}
	
	/**
	 * @param string $zone
	 * @return string | boolean
	 */
	public static function getZoneAlias($zone){
		return isset(SlightPHP::$zoneAlias[$zone]) ? SlightPHP::$zoneAlias[$zone] : false;
	}
	
	/**
	 * defaultZone set
	 * 
	 * @param string $zone
	 * @return boolean
	 */

	public static function setDefaultZone($zone){
		SlightPHP::$defaultZone = $zone;
		return true;
	}

	/**
	 * xhprof_on set
	 * 
	 * @param string $zone
	 * @return boolean
	 */
	public static function setXhprofOn($zone){
		SlightPHP::$xhprof_on = $zone;
		return true;
	}

	/**
	 * set script time
	 * 
	 * @param string $zone
	 * @return boolean
	 */
	public static function setScriptTime(){
		list($usec, $sec) = explode(" ", microtime());
        SlightPHP::$script_start_time = ((float) $usec + (float) $sec);
		return true;
	}

	/**
	 * defaultZone get
	 * 
	 * @return string
	 */
	public static function getDefaultZone(){
		return SlightPHP::$defaultZone;
	}
	/**
	 * defaultClass set
	 * 
	 * @param string $page
	 * @return boolean
	 */
	public static function setDefaultPage($page){
		SlightPHP::$defaultPage = $page;
		return true;
	}
	/**
	 * getDefaultClass get
	 * 
	 * @return string
	 */
	public static function getDefaultPage(){
		return SlightPHP::$defaultPage;
	}
	/**
	 * defaultMethod set
	 * 
	 * @param string $entry
	 * @return boolean
	 */
	public static function setDefaultEntry($entry){
		SlightPHP::$defaultEntry = $entry;
		return true;
	}
	/**
	 * defaultMethod get
	 * 
	 * @return string $method
	 */
	public static function getDefaultEntry(){
		return SlightPHP::$defaultEntry;
	}
	/**
	 * splitFlag set
	 * 
	 * @param string $flag
	 * @return boolean
	 */
	public static function setSplitFlag($flag){
		SlightPHP::$splitFlag = $flag;
		return true;
	}
	/**
	 * defaultMethod get
	 * 
	 * @return string
	 */
	public static function getSplitFlag(){
		return SlightPHP::$splitFlag;
	}
	/**
	 * appDir set && get
	 * IMPORTANT: you must set absolute path if you use extension mode(extension=SlightPHP.so)
	 *
	 * @param string $dir
	 * @return boolean
	 */

	public static function setAppDir($dir){
		SlightPHP::$appDir = $dir;
		return true;
	}
	/**
	 * appDir get
	 * 
	 * @return string
	 */
	public static function getAppDir(){
		return SlightPHP::$appDir;
	}
	/**
	 * debug status set
	 *
	 * @param boolean $debug
	 * @return boolean
	 */
	public static function setDebug($debug){
		SlightPHP::$_debug = false;
		return true;
	}
	/**
	 * debug status get
	 * 
	 * @return boolean 
	 */
	public static function getDebug(){
		return SlightPHP::$_debug;
	}
	
	public static function createUrl($route,$params=array(),$domain="") {
		$uf = SlightPHP::$urlFormat;
		$url=rtrim($route,SlightPHP::$urlFormat);
		if(!empty($params)) {			
			$sux = '.'.SlightPHP::$urlSuffix;
			foreach($params as $key=>$value) {
				if (trim($value) != '') {
					$tmp.= $key.$uf.$value.$uf;
				}
			}
			$tmp = rtrim($tmp,$uf);
			$url=rtrim($url.SlightPHP::$urlFormat.$tmp,SlightPHP::$urlFormat);
		}
		if (substr($url, -1) != '/'){//以'/'结束的url不加$sux;
			$url = $route==='' ? $url : $url.$sux;
		}
		if ($domain == "task"){
			$rule = trim(rtrim($route,$uf),"/");
			if (substr($route,0,1) === "/"){
				$prefix = "/";
			} else {
				$prefix = "";
			}
			if (in_array($rule,array("task/view","task-view","task.view")) ){
				$url = $prefix.$params["tid"]."/";
				unset($params["tid"]);
				if (!empty($params)){
					$sux = '.'.SlightPHP::$urlSuffix;
					$tmp = "";
					foreach ($params as $key=>$value){
						$tmp.= $key.$value;
					}
					$tmp = rtrim($tmp,$uf);
					$url=rtrim($url.$tmp,SlightPHP::$urlFormat).$sux;
				}
			}
			if (in_array($rule,array("works/view","works-view","works.view"))){
				$sux = '.'.SlightPHP::$urlSuffix;
				$url = $prefix.$params["tid"]."/".$params["wid"];
				unset($params["tid"]);
				unset($params["wid"]);
				if (!empty($params)) {
					$tmp = "/";
					foreach ($params as $key=>$value){
						$tmp.= $key.$value;
					}
					$tmp = rtrim($tmp,$uf);
					$url=rtrim($url.$tmp,SlightPHP::$urlFormat).$sux;
				} else {
					$url = $url.$sux;
				}
			}
			if (in_array($rule,array("sign/index","sign-index","sign.index"))){
				$url = $prefix.$params["tid"]."/sign".(isset($params["p"])?"-".$params["p"]:"").$sux;
			}
			//$url = preg_replace('/\/task[\/|\-|\.]view[\/|\-|\.]tid[\/|\-|\.]([\d]+)[\.html]{1}/i','/$1',$url);
			//if (preg_match('/task[\/|\-|\.]view[\/|\-|\.]tid[\/|\-|\.]([\d]+)[\.html]{1}/i',$url,$match));
			//$url = '/'.$match[1].'/';
			//if ()
			//if (preg_match('/task[\/|\-|\.]view[\/|\-|\.]tid[\/|\-|\.][\d]+()*/i'))
		}
         if ($domain == "quan"){
			$rule = trim(rtrim($route,$uf),"/");
			if (substr($route,0,1) === "/"){
				$prefix = "/";
			} else {
				$prefix = "";
			}
            //猪圈个人主页
			if (in_array($rule,array("space/main","space-main","space.main")) ){
				$url = $prefix.$params["uid"];
				unset($params["uid"]);
				if (!empty($params)){
					$sux = '.'.SlightPHP::$urlSuffix;
					$tmp = "";
					foreach ($params as $key=>$value){
						$tmp.= $key.$value;
					}
					$tmp = rtrim($tmp,$uf);
					$url=rtrim($url.$tmp,SlightPHP::$urlFormat).$sux;
				}
			}
                        //个人主页日志
            if (in_array($rule,array("space/blog","space-blog","space.blog"))){
				$url = $prefix.$params["uid"]."/blog".(isset($params["p"])?"-".$params["p"]:"");
			}
                        
            if (in_array($rule,array("space/bloginfo","space-bloginfo","space.bloginfo"))){
				$url = $prefix.$params["id"].$sux;
			}

            //个人主页相册
            if (in_array($rule,array("space/album","space-album","space.album"))){
				$url = $prefix.$params["uid"]."/album".(isset($params["p"])?"-".$params["p"]:"");
			}
            //个人主页好友
            if (in_array($rule,array("space/friend","space-friend","space.friend"))){
				$url = $prefix.$params["uid"]."/friend".(isset($params["view"])?"-".$params["view"]:"").(isset($params["p"])?"-".$params["p"]:"").(isset($params["view"])?$sux:"");
			}
            //个人主页圈子
            if (in_array($rule,array("space/group","space-group","space.group"))){
				$url = $prefix.$params["uid"]."/group".(isset($params["op"])?"-".$params["op"]:"").(isset($params["p"])?"-".$params["p"]:"").(isset($params["op"])?$sux:"");
			}
            //个人主页向前冲
            if (in_array($rule,array("space/aim","space-aim","space.aim"))){
				$url = $prefix.$params["uid"]."/aim";
			}
            if (in_array($rule,array("space/aimlist","space-aimlist","space.aimlist"))){
				$url = $prefix.$params["uid"]."/aim".(isset($params["view"])?"-".$params["view"]:"").(isset($params["state"])?"-".$params["state"]:"").(isset($params["p"])?"-".$params["p"]:"").$sux;
			}
            if (in_array($rule,array("space/aimview","space-aimview","space.aimview"))){
				$url = $prefix."aim-".$params["id"].$sux;
			}
            //个人主页任分享
            if (in_array($rule,array("space/share","space-share","space.share"))){
				$url = $prefix.$params["uid"]."/share";
			}
            if (in_array($rule,array("space/shareview","space-shareview","space.shareview"))){
				$url = $prefix."share-".$params['shareid'].$sux;
			}
            //个人主页PK台
            if (in_array($rule,array("space/pk","space-pk","space.pk"))){
				$url = $prefix.$params["uid"]."/pk".(isset($params["view"])?"-".$params["view"]:"").(isset($params["state"])?"-".$params["state"]:"").(isset($params["p"])?"-".$params["p"]:"").(isset($params["view"])?$sux:"");
			}
            if (in_array($rule,array("space/pkinfo","space-pkinfo","space.pkinfo"))){
				$url = $prefix."pk-".$params["id"].$sux;
			}
            //圈子最终页
            if (in_array($rule,array("mtag/index","mtag-index","mtag.index"))){
				$url = $prefix."q".$params["tagid"].(isset($params["stagid"])?"-".$params["stagid"]:"").(isset($params["type"])?"-".$params["type"]:"").(isset($params["p"])?"-".$params["p"]:"").$sux;
			}
            //贴子最终页
            if (in_array($rule,array("thread/index","thread-index","thread.index"))){
				$url = $prefix."t".$params["threadid"].(isset($params["userid"])?"-".$params["userid"]:"").(isset($params["postid"])?"-".$params["postid"]:"").(isset($params["p"])?"/p".$params["p"]:"").$sux;
			}
            //助威
            if (in_array($rule,array("cheer/cheerlist","cheer-cheerlist","cheer.cheerlist"))){
				$url = $prefix."c".$params["threadid"]."-".$params["tagid"].(isset($params["p"])?"/p".$params["p"]:"").$sux;
			}
            //个人主页信息
            if (in_array($rule,array("space/message","space-message","space.message"))){
				$url = $prefix.$params["uid"]."/msg";
			}
		}
        if ($domain == "help"){
			$rule = trim(rtrim($route,$uf),"/");
			if (substr($route,0,1) === "/"){
				$prefix = "/";
			} else {
				$prefix = "";
			}
            //帮助中心--自助服务
            if (in_array($rule,array("main/self","main-self","main.self"))){
				$url = $prefix."self";
			}
            //帮助中心--新手学堂
            if (in_array($rule,array("main/study","main-study","main.study"))){
				$url = $prefix."study";
			}
            //帮助中心--找回密码
            if (in_array($rule,array("main/findpass","main-findpass","main.findpass"))){
				$url = $prefix."findpass";
			}
            //帮助中心--找回安全密码
            if (in_array($rule,array("main/sfindpass","main-sfindpass","main.sfindpass"))){
				$url = $prefix."sfindpass";
			}
            //帮助中心--找回登录名
            if (in_array($rule,array("main/findname","main-findname","main.findname"))){
				$url = $prefix."findname";
			}
            //帮助中心--账号申诉
            if (in_array($rule,array("main/complaint","main-complaint","main.complaint"))){
				$url = $prefix."complaint";
			}
            //帮助中心--申诉查询
            if (in_array($rule,array("main/complaintstatus","main-complaintstatus","main.complaintstatus"))){
				$url = $prefix."complaintstatus".(isset($params["type"])?"-".$params["type"]:"");
			}
            //分类列表
            if (in_array($rule,array("main/superlist","main-superlist","main.superlist"))){
				$url = $prefix."s".$params["typeid"].$sux;
			}
            //文章列表
            if (in_array($rule,array("main/list","main-list","main.list"))){
				$url = $prefix."t".$params["typeid"].(isset($params["p"])?"-".$params["p"]:"").$sux;
			}
            //文章最终页
            if (in_array($rule,array("main/view","main-view","main.view"))){
				$url = $prefix.$params["id"].$sux;
			}
            //一起帮文章列表
            if (in_array($rule,array("ask/list","ask-list","ask.list"))){
				$url = $prefix."ask/t".$params["tid"].(isset($params["p"])?"-".$params["p"]:"").$sux;
			}
            if (in_array($rule,array("ask/list","ask-list","ask.list"))){
				$url = $prefix.'ask/t'.$params["tid"].(isset($params["type"])?"-".$params["type"]:"").$sux;
			}
            //一起帮最终页
            if (in_array($rule,array("ask/askview","ask-askview","ask.askview"))){
				$url = $prefix.'ask/'.$params["id"].$sux;
			}
            //一起帮他的问题
            if (in_array($rule,array("ask/hisask","ask-hisask","ask.hisask"))){
				$url = $prefix.'hisask/'.$params["uid"];
			}
            if (in_array($rule,array("ask/hisanswer","ask-hisanswer","ask.hisanswer"))){
				$url = $prefix.'hisanswer/'.$params["uid"];
			}
            if (in_array($rule,array("ask/adoption","ask-adoption","ask.adoption"))){
				$url = $prefix.'adoption/'.$params["uid"];
			}
            //客服中心
            if (in_array($rule,array("service/report","service-report","service.report"))){
				$url = $prefix."report";
			}
            if (in_array($rule,array("service/punish","service-punish","service.punish"))){
				$url = $prefix."punish";
			}
            if (in_array($rule,array("service/check","service-check","service.check"))){
				$url = $prefix."check";
			}
		}
        if ($domain == "s"){
			$rule = trim(rtrim($route,$uf),"/");
			if (substr($route,0,1) === "/"){
				$prefix = "/";
			} else {
				$prefix = "";
			}
            //帮助中心--自助服务
            if (in_array($rule,array("index/list","index-list","index.list"))){
				$url = $prefix.'s'.$params["fid"].(isset($params["order"])?"-".$params["order"]:"").$sux;
			}
		}
		$url = preg_replace('/([\/\-\.]{1})[\/\-\.]+/', "$1", $url); //去除多余的分隔符，保留第一个
		return $url;
	}
	
	 /**
	 * main method!
	 *
	 * @param string $path
	 * @return boolean
	 */

	final public static function run($path=""){
		//{{{
		$splitFlag = preg_quote(SlightPHP::$splitFlag,"/");
		$path_array = array();
		if(!empty($path)){
			$isPart = true;
			$path_array = preg_split("/[$splitFlag\/]/",$path,-1,PREG_SPLIT_NO_EMPTY);
		}else{
			$isPart = false;
			if(!empty($_SERVER["PATH_INFO"]))$path_array = preg_split("/[$splitFlag\/]/",$_SERVER["PATH_INFO"],-1,PREG_SPLIT_NO_EMPTY);
		}
		$zone	= !empty($path_array[0]) ? $path_array[0] : SlightPHP::$defaultZone ;
		$page	= !empty($path_array[1]) ? $path_array[1] : SlightPHP::$defaultPage ;
		$entry	= !empty($path_array[2]) ? $path_array[2] : SlightPHP::$defaultEntry ;

		if(SlightPHP::$zoneAlias && ($key = array_search($zone,SlightPHP::$zoneAlias))!==false) {
			$zone = $key;
		}
		if(!$isPart){
			SlightPHP::$zone	= $zone;
			SlightPHP::$page	= $page;
			SlightPHP::$entry	= $entry;
		}else{
			if($zone == SlightPHP::$zone && $page == SlightPHP::$page && $entry == SlightPHP::$entry){
				SlightPHP::debug("part ignored [$path]");
				return;
			}
		}

		$app_file = SlightPHP::$appDir . DIRECTORY_SEPARATOR . $zone . DIRECTORY_SEPARATOR . $page . ".page.php";

		if(!file_exists($app_file)){
			SlightPHP::debug("file[$app_file] not exists");
			return false;
		}else{
			require_once(realpath($app_file));
		}
		$method = "Page".$entry;
		$classname = $zone ."_". $page;

		if(!class_exists($classname)){
			SlightPHP::debug("class[$classname] not exists");
			return false;
		}

		$classInstance = new $classname;
		if(!method_exists($classInstance,$method)){
			SlightPHP::debug("method[$method] not exists in class[$classname]");
			return false;
		}
		$path_array[0] = $zone;
		$path_array[1] = $page;
		$path_array[2] = $entry;
		return call_user_func(array(&$classInstance,$method),$path_array);

	}

	/**
	 * @var boolean
	 */
	public static $_debug=0;

	/*private*/
	private function debug($debugmsg){
		if(SlightPHP::$_debug){
			error_log($debugmsg);
			echo "<!--slightphp debug: ".$debugmsg."-->";
		}
	}


	/**
	* 任务大厅，人才列表，搜索专用
	*/
	public static function createUrlv2($route,$params=array()) {
        $uf = SlightPHP::$urlFormat;
        $url=rtrim($route,'-');
        //$url=$route;
        if(!empty($params)) {
            //$sux = '.'.SlightPHP::$urlSuffix;
            $sux = '/';
            foreach($params as $key=>$value) {
                $tmp.= $key.$value;
            }
            $tmp = rtrim($tmp,$uf);
            $url=rtrim($url.'/'.$tmp,'/');
        }
        return $route==='' ? $url : $url.$sux;
    }
    
    /**
     * 新任务大厅用
     * @param <stirng> 频道目录名
     * @param <string> 分类目录名
     * @param <integer> 1:任务列表 2:人才列表 3:服务列表
     * @param <array|string> 参数字符串
     * @param <string> 域
     * @return <string>
     */
    public static function createUrlForFilter($chdir='',$cadir='',$indir='',$mode=1,$params='',$domain='',$dmode='') {
		$domain = empty($domain) ? 'http://'.$_SERVER['SERVER_NAME'] : $domain;
		$uf = self::$urlFormat;
		$sux = '.'.self::$urlSuffix;
		$url = '/';
		
		switch ($mode) {
			case 1:
				$modeStr = 't';
				break;
			case 2:
				$modeStr = 'p';
				break;
			case 3:
				$modeStr = 's';
				break;
			default:
				$modeStr = 't';
		}
 	
		if (!empty($params)) {
			if (is_array($params)) {
				foreach ($params as $key => $val) {
					$tmp.= $key.$val;
				}
			} else {
				$tmp.= $params;
			}
			$tmp = trim($tmp,$uf);
		}
		if (!empty($indir)) { 
			$url.= '/i-'.$indir;
		} else if (!empty($chdir)) {
			$url.= '/'.$chdir;
			if (!empty($cadir)) {
				$url.= '/'.$cadir;
			}
		}
		
		if (!empty($params) || $mode != $dmode) {
			$url.= '/'.$modeStr;
			if (!empty($params)) $url.= '-'.$tmp;
			$url.= $sux;
		} else {
			$url.= '/';
		}		
		return $domain.$url;
    }
}
?>
