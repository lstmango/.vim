<?php
namespace com\zhubajie\boss\dataobject\bosslog;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class logProduct {
  const task = 1;
  const works = 3;
  const user = 6;
  const services = 8;
  const chance = 12;
  const tools = 13;
  const demand = 21;
  const USHOP = 22;
  const WXAD = 23;
  const WXCHANNEL = 24;
  const WXACTIVITY = 25;
  const CPUSER = 26;
  const FUND = 27;
  const BIAOJU_DECLARE = 28;
  const OKR = 29;
  const BSCHANCE = 30;
  static public $__names = array(
    1 => 'task',
    3 => 'works',
    6 => 'user',
    8 => 'services',
    12 => 'chance',
    13 => 'tools',
    21 => 'demand',
    22 => 'USHOP',
    23 => 'WXAD',
    24 => 'WXCHANNEL',
    25 => 'WXACTIVITY',
    26 => 'CPUSER',
    27 => 'FUND',
    28 => 'BIAOJU_DECLARE',
    29 => 'OKR',
    30 => 'BSCHANCE',
  );
}

class logDo {
  static $_TSPEC;

  public $remark_id = null;
  public $product_type = null;
  public $cp_user_id = null;
  public $cp_user_name = null;
  public $create_time = null;
  public $create_ymd = null;
  public $content = null;
  public $product_status = null;
  public $option = null;
  public $product_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'remark_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'product_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cp_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cp_user_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'create_ymd',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'product_status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'option',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'product_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['remark_id'])) {
        $this->remark_id = $vals['remark_id'];
      }
      if (isset($vals['product_type'])) {
        $this->product_type = $vals['product_type'];
      }
      if (isset($vals['cp_user_id'])) {
        $this->cp_user_id = $vals['cp_user_id'];
      }
      if (isset($vals['cp_user_name'])) {
        $this->cp_user_name = $vals['cp_user_name'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['create_ymd'])) {
        $this->create_ymd = $vals['create_ymd'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['product_status'])) {
        $this->product_status = $vals['product_status'];
      }
      if (isset($vals['option'])) {
        $this->option = $vals['option'];
      }
      if (isset($vals['product_id'])) {
        $this->product_id = $vals['product_id'];
      }
    }
  }

  public function getName() {
    return 'logDo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remark_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cp_user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cp_user_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_ymd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->option);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('logDo');
    if ($this->remark_id !== null) {
      $xfer += $output->writeFieldBegin('remark_id', TType::I32, 1);
      $xfer += $output->writeI32($this->remark_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_type !== null) {
      $xfer += $output->writeFieldBegin('product_type', TType::I32, 2);
      $xfer += $output->writeI32($this->product_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cp_user_id !== null) {
      $xfer += $output->writeFieldBegin('cp_user_id', TType::I32, 3);
      $xfer += $output->writeI32($this->cp_user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cp_user_name !== null) {
      $xfer += $output->writeFieldBegin('cp_user_name', TType::STRING, 4);
      $xfer += $output->writeString($this->cp_user_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 5);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_ymd !== null) {
      $xfer += $output->writeFieldBegin('create_ymd', TType::STRING, 6);
      $xfer += $output->writeString($this->create_ymd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 7);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_status !== null) {
      $xfer += $output->writeFieldBegin('product_status', TType::I32, 8);
      $xfer += $output->writeI32($this->product_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->option !== null) {
      $xfer += $output->writeFieldBegin('option', TType::STRING, 9);
      $xfer += $output->writeString($this->option);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_id !== null) {
      $xfer += $output->writeFieldBegin('product_id', TType::I32, 10);
      $xfer += $output->writeI32($this->product_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class logList {
  static $_TSPEC;

  public $items = null;
  public $page = null;
  public $limit = null;
  public $total = null;
  public $success = null;
  public $codestr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\zhubajie\boss\dataobject\bosslog\logDo',
            ),
          ),
        2 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'codestr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['codestr'])) {
        $this->codestr = $vals['codestr'];
      }
    }
  }

  public function getName() {
    return 'logList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \com\zhubajie\boss\dataobject\bosslog\logDo();
              $xfer += $elem5->read($input);
              $this->items []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codestr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('logList');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 2);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 5);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codestr !== null) {
      $xfer += $output->writeFieldBegin('codestr', TType::STRING, 6);
      $xfer += $output->writeString($this->codestr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class addLogResult {
  static $_TSPEC;

  public $success = null;
  public $codestr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'codestr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['codestr'])) {
        $this->codestr = $vals['codestr'];
      }
    }
  }

  public function getName() {
    return 'addLogResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->codestr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('addLogResult');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 1);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->codestr !== null) {
      $xfer += $output->writeFieldBegin('codestr', TType::STRING, 2);
      $xfer += $output->writeString($this->codestr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class searchInput {
  static $_TSPEC;

  public $product_id = null;
  public $product_type = null;
  public $product_status = null;
  public $page = null;
  public $limit = null;
  public $remark_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'product_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'product_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'product_status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'remark_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['product_id'])) {
        $this->product_id = $vals['product_id'];
      }
      if (isset($vals['product_type'])) {
        $this->product_type = $vals['product_type'];
      }
      if (isset($vals['product_status'])) {
        $this->product_status = $vals['product_status'];
      }
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['remark_id'])) {
        $this->remark_id = $vals['remark_id'];
      }
    }
  }

  public function getName() {
    return 'searchInput';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remark_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('searchInput');
    if ($this->product_id !== null) {
      $xfer += $output->writeFieldBegin('product_id', TType::I32, 1);
      $xfer += $output->writeI32($this->product_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_type !== null) {
      $xfer += $output->writeFieldBegin('product_type', TType::I32, 2);
      $xfer += $output->writeI32($this->product_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_status !== null) {
      $xfer += $output->writeFieldBegin('product_status', TType::I32, 3);
      $xfer += $output->writeI32($this->product_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 4);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 5);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark_id !== null) {
      $xfer += $output->writeFieldBegin('remark_id', TType::I32, 6);
      $xfer += $output->writeI32($this->remark_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


