<?php
/**
 * 处理“分配”相关的控制器
 * @auther
 * @date 2013.1.5
 */

@require_once('./app/lib/excel/PHPExcel/IOFactory.php');
@require_once('./app/lib/excel/PHPExcel.php');

use com\zhubajie\boss\dataobject\message\messageType;
use com\zhubajie\boss\dataobject\message\messageProduct;
use com\zhubajie\boss\dataobject\message\messageRange;
use com\zhubajie\boss\dataobject\message\messagePack;
use com\zhubajie\boss\dataobject\topic\QueryParamsDO;
use com\zhubajie\boss\dataobject\group\GroupType;
use com\zhubajie\order\dataobject\orderoperate\OperateType;
use com\zhubajie\boss\interfaces\ArchivesServiceClient;
use com\zhubajie\boss\interfaces\userServiceClient;
use com\zhubajie\boss\dataobject\user\userNicknamesDO;
use com\zhubajie\boss\interfaces\GroupServiceClient;
class controller_crontab extends components_basepage{

	public function __construct() {
		$this->_time = time();
		$this->_ymd = date('Y-m-d', $this->_time);
	}
	/**
	 * 处理用户回复的内容
	 *
	 * @param unknown $inPath
	 */
	public function pagesmsdispatch($inPath) {
		if ($_REQUEST ['debug']) {
			define ( 'DEBUG', 1 );
		}
		$m_smsrecv = new zbj_model_bc_smsrecv ();
		$condition = array ();
		$condition ['platform'] = 1;
		$condition ['direct'] = "recv";
		$condition ['isprocess'] = 0;
		$condition ['isprocess'] = 0;
		$condition [] = "createymd>='" . date ( 'Y-m-d', time () - 86400 * 2 ) . "'";
		$m_smsrecv->setLimit ( 4 );
		$data = $m_smsrecv->select ( $condition );
		if (! empty ( $data )) {
			if (is_array ( $data->items ) && count ( $data->items )) {
				$s_sms = new zbj_service_smsdispatch ();
				foreach ( $data->items as $d ) {
					echo "处理接收记录{$d['recv_id']}";
					if ($s_sms->dispatch ( $d ['recv_id'] )) {
						echo "成功";
					} else {
						echo "处理出错" . $s_sms->getError ();
					}
				}
			} else {
				echo "无有效记录";
			}
		} else {
			echo "没有接收的记录";
		}
	}
	/**
	 * 服务记录用户评价回调
	 *
	 * @param unknown $inPath
	 */
	public function pagerecordeval($inPath) {
		$rid = zbj_lib_BaseUtils::getStr ( $_REQUEST ['rid'] );
		if ($rid == 0) {
			echo json_encode ( array (
					"state" => 3,
					"str" => "出错" . var_export ( $_REQUEST, true )
			) );
			exit ();
		}
		$m_record = new zbj_model_mk_record();
		$evaluate = zbj_lib_BaseUtils::getStr ( $_REQUEST ['value'] );
		$evaluate_mean = zbj_lib_BaseUtils::getStr ( $_REQUEST ['mean'] );
		if ($m_record->update(array('record_id'=>$rid), array('evaluate'=>$evaluate, 'evaluate_mean'=>$evaluate_mean)) === false) {
			echo json_encode ( array (
					"state" => 2,
					"str" => "失败" . $m_record->getError ()
			) );
		} else {
			echo json_encode ( array (
					"state" => 1,
					"str" => "成功"
			) );

		}
// 		$m_order = new zbj_model_cp_order();
// 		if ($m_order->update(array('rid'=>$rid, 'type'=>10), array('uservote'=>zbj_lib_BaseUtils::getStr ( $_REQUEST ['value'] ))) === false) {
// 			echo json_encode ( array (
// 					"state" => 2,
// 					"str" => "失败" . $m_order->getError ()
// 			) );
// 		} else {
// 			echo json_encode ( array (
// 					"state" => 1,
// 					"str" => "成功"
// 			) );

// 		}
	}
	/**
	 * 任务记录用户回评
	 *
	 * @param unknown $inPath
	 */
	public function pagetaskfeedback($inPath) {
		$rid = zbj_lib_BaseUtils::getStr ( $_REQUEST ['rid'] );
		if ($rid == 0) {
			echo json_encode ( array (
					"state" => 3,
					"str" => "出错" . var_export ( $_REQUEST, true )
			) );
			exit ();
		}
		$m_task = new zbj_model_mk_task();
		$task = $m_task->selectOne(array('task_id'=>$rid), 'category_id,category2id,category1id,manager_id');
		$m_tasksurey=new zbj_model_cp_tasksurvey($rid);
		$m_tasksurey->set ( 'mean', zbj_lib_BaseUtils::getStr ( $_REQUEST ['mean'] ) );
		$m_tasksurey->set ( 'value', zbj_lib_BaseUtils::getStr ( $_REQUEST ['value'] ) );
		$m_tasksurey->set ( 'feedback', 3 );
		$m_tasksurey->set ( 'category_id', $task['category_id'] );
		$m_tasksurey->set ( 'category2id', $task['category2id'] );
		$m_tasksurey->set ( 'category1id', $task['category1id'] );
		$m_tasksurey->set ( 'manager_id', $task['manager_id'] );
		if ($m_tasksurey->save()==false) {
			echo json_encode ( array (
					"state" => 2,
					"str" => "失败" . $m_tasksurey->getError ()
			) );
		} else {
			echo json_encode ( array (
					"state" => 1,
					"str" => "成功"
			) );
		}
	}
	/**
	 * 发送任务回评短信
	 *
	 * @param unknown $inPath
	 */
	public function pagesenttaskfeedback($inPath) {
		header ( 'Content-Type:text/plain;charset=utf-8' );
		if ($_REQUEST ['debug']) {
			define ( 'DEBUG', 1 );
		}
		$m_tasksurey=new zbj_model_cp_tasksurvey();
		$m_tasksurey->setLimit(20);
		$condition=array();
		$condition['state']=0;
		$condition['addymd']>=date('Y-m-d',time()-86400*3);
		if (zbj_lib_BaseUtils::getStr ( $_REQUEST ['task_id'] )) {
			$condition ['task_id'] = zbj_lib_BaseUtils::getStr ( $_REQUEST ['task_id'] );
		}
		$tasksurey=$m_tasksurey->select($condition)->items;
		if(count($tasksurey)==0){
			return "没有需要发送短信的记录";
		}
		$s_smsdispatch=new zbj_service_smsdispatch(4);
		foreach ($tasksurey as $t){
			echo "给任务{$t['task_id']}发送短信回评";
			$s_task=new zbj_service_task($t['task_id']);
			$s_task=$s_task->init();
			$s_user=new zbj_service_user($s_task->get('user_id'));
			$res=$s_smsdispatch->sendmsg($s_user->getAuthMobile(), "您的交易已付款结束。请问您有多大可能将猪八戒网推荐给您的朋友同事。请在0-10之间进行打分。请直接回复数字，如：9。",$t['task_id'],0,0);
			if ($res!==false) {
				$m_tasksurey->update(array('task_id'=>$t['task_id']),array('state'=>1,'feedback'=>1));
			}else{
				$m_tasksurey->update(array('task_id'=>$t['task_id']),array('state'=>1,'feedback'=>2));
			}
		}
	}
	/**
	 * 批量冻结
	 * @param unknown $inPath
	 */
	public function pagefrozentask($inPath){
	    define('CURL_NUM', 5);
	    $currentpage=intval($_GET['page'])?intval($_GET['page']):0;
	    $tasks=array(336059,
5112555);
	    $tasks=array_slice($tasks, ($currentpage-1)*CURL_NUM,CURL_NUM);
		foreach($tasks as $task_id){
			echo "处理需求{$task_id}";
			$s_task=new zbj_service_task($task_id);
			$s_task=$s_task->init();
			$data = array(
				'isfrozen' => 1,
			);
			//冻结
			$fl = $s_task->edit($data);
			$this->addLog($task_id,"用户要求冻结");
			$mdlTask = zbj_model_api::get('zbj_model_mk_task');
			$mdlTask->upTaskSearch($task_id, 'U');
		}
		$uppage=$currentpage-1;
		$downpage=$currentpage+1;
		echo <<<EOT
<a href="/crontab/frozentask?page=$downpage">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/frozentask?page=$downpage'
	},3000);
</script>
EOT;
	}
	/**
	 * 根据关键字搜索任务
	 * @param unknown $inPath
	 */
	public function pagecutsearchtask($inPath){
		$s_sse=new Sse(zbj_lib_Constant::SEARCH_API_HOST,zbj_lib_Constant::SEARCH_API_PORT);
// 		$s_sse->setDebug(true);
		$data=array();
		$data['query']=$_GET['query'];
		$data['cat']='req';
		$data['size']=10;
		$currentpage=intval($_GET['page'])?intval($_GET['page']):0;
		$data['page']=$currentpage;
		$data['sort']=array('starttime');
		$data['judge']='false';//不过滤关键词
		if($_GET['step']==1){
			die("OK") ;
		}
		$list=$s_sse->search($data);
		if($_GET['step']==2){
			die(var_dump($list)) ;
		}
		foreach($list['items'] as $item){
			echo "处理需求{$item['taskId']}";
			$s_task=new zbj_service_task($item['taskId']);
			$s_task=$s_task->init();
			if($_GET['step']==3){
				die("INIT task") ;
			}
			if($s_task->get('state')==4){//结束的需求冻结
				if($_GET['step']==4){
					die("冻结 task") ;
				}
				$data = array(
					'isfrozen' => 1,
				);
				//冻结
				$fl = $s_task->edit($data);
				$this->addLog($item['taskId'],"论文类需求批量冻结");
// 				$s_task->addTaskActionLog("论文类需求批量冻结", false);
				$mdlTask = zbj_model_api::get('zbj_model_mk_task');
				$mdlTask->upTaskSearch($item['taskId'], 'U');
				echo "已经结束的需求直接隐藏","<br />";
				continue;
			}
			if($s_task->get('hosted')==0){//未托管关闭
				if($_GET['step']==5){
					die("冻结 task") ;
				}
				$s_task=new service_task($s_task->get('task_id'));
				$s_task->close(176, "违法（反党反社会、宗教、政治、黄赌毒、开发票、器官买卖...）");
				$this->addLog($item['taskId'],"论文类未托管需求批量关闭");
				$s_task=new zbj_service_task($item['taskId']);
				$s_task=$s_task->init();
				$s_task->addTaskActionLog("论文类需求批量关闭", false);
				$mdlTask = zbj_model_api::get('zbj_model_mk_task');
				$mdlTask->upTaskSearch($item['taskId'], 'U');
				echo "论文类需求批量关闭","<br />";
			}
			if($s_task->get('hosted')==1){//已托管
				if($_GET['step']==6){
					die("冻结 task") ;
				}
				if(in_array($s_task->get('mode'), array(11,12))){
					$data = array('cpo_ishide'=>0);
					$s_task->edit($data);
					$this->addLog($item['taskId'],"论文类需求批量隐藏");
// 					$s_task->addTaskActionLog("论文类需求批量冻结", false);
					$mdlTask = zbj_model_api::get('zbj_model_mk_task');
					$mdlTask->upTaskSearch($item['taskId'], 'U');
					echo "雇佣购买服务需求批量隐藏","<br />";
				}else{
					if($_GET['step']==7){
						var_dump($s_task);
						die("选稿 task") ;
					}
					$order=$s_task->getOneWinOrder();
					if($order){//已选稿件
						if($_GET['step']==8){
							die("选稿 task") ;
						}
						$data = array('cpo_ishide'=>1);
						$s_task->edit($data);
						$this->addLog($item['taskId'],"论文类需求批量隐藏");
						//$s_task->addTaskActionLog("论文类需求批量冻结", false);
						$mdlTask = zbj_model_api::get('zbj_model_mk_task');
						$mdlTask->upTaskSearch($item['taskId'], 'U');
						echo "已选稿需求批量隐藏","<br />";
					}else{
						if($_GET['step']==9){
							die("未选稿 task") ;
						}
						$s_task=new service_task($s_task->get('task_id'));
						$s_task->close(176, "违法（反党反社会、宗教、政治、黄赌毒、开发票、器官买卖...）");
						$this->addLog($item['taskId'],"论文类未托管需求批量关闭");
						//$s_task->addTaskActionLog("论文类需求批量冻结", false);
						$mdlTask = zbj_model_api::get('zbj_model_mk_task');
						$mdlTask->upTaskSearch($item['taskId'], 'U');
						echo "未选稿需求批量隐藏","<br />";
					}
				}
			}
		}
// 		echo "<table border=1><tr><td>任务号</td><td>标题</td><td>状态</td><td>已关闭</td><td>价格</td><td>公示</td><td>托管</td></tr>";
// 		foreach($list['items'] as $item){
// 	echo<<<TABLE
// 		<tr>
// 			<td>{$item['taskId']}</td>
// 			<td>{$item['title']}</td>
// 			<td>{$item['state']}</td>
// 			<td>{$item['openState']}</td>
// 			<td>{$item['price']}</td>
// 			<td>{$item['publicity']}</td>
// 			<td>{$item['bountyHost']}</td>
// 		</tr>
// TABLE;
// 		}
// 		echo "</table>"	;
		$uppage=$currentpage-1;
		$downpage=$currentpage+1;
		echo <<<EOT
<a href="/crontab/cutsearchtask?query={$_GET['query']}&step={$_GET['step']}&page=$downpage">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/cutsearchtask?query={$_GET['query']}&step={$_GET['step']}&page=$downpage'
	},3000);
</script>
EOT;
//		echo "<a href=\"/crontab/cutsearchtask?query={$_GET['query]}&page={$uppage}\">上一页</a>";
//		echo "<a href=\"/crontab/cutsearchtask?page={$downpage}\">下一页</a>";
 		echo $list['total_size'];
	}
	/**
	 * 商标版权新分配
	 * @param unknown $inPath
	 */
	public function pageallotcopyrightnew($inPath){
		header ( 'Content-Type:text/plain;charset=utf-8' );
		//law
		$this->pageAllotLawChance();
		$this->pageAllotCopyrightOtherNew($inPath);
		if (time() > strtotime(date('2015-08-27 09:58:00'))){
		    echo '分配暂停';
		    return ;
		}
		//exit;//法律服务要计划分配 其它不分配
		$allotType=array();
		//$allotType[18]="商标版权-专题";
		$allotType[79]="商标版权-客户提交";
		$allotType[19]="商标版权-人工";
		$allotType[20]="商标版权-需求未托管";
		$allotType[50]="商标版权-需求已托管";
		//$allotType[64]="商标版权-猪标局";
		//$allotType[66]="商标版权-猪八戒手机客户端";
		//$allotType[67]="商标版权-微信";
		//$allotType[68]="商标版权-需求发布";
		$allotType[69]="商标版权-渠道";
		//$allotType[70]="商标版权-高级搜索";
		$allotType[78]="商标版权-品牌梦想秀1580";
		$allotType[80]="商标版权-梦想秀快速报名";
		$allotType[95]="商标版权-大渝网1580";
		$allotType[103]="商标版权-交易区";
		
		$allotType[102]="商标版权-八戒老客户";
		$sourceType=array();
		//$sourceType[18]=1;
		$sourceType[19]=5;
		$sourceType[20]=6;
		$sourceType[50]=7;
		//$sourceType[64]=8;
		//$sourceType[66]=9;
		//$sourceType[67]=10;
		//$sourceType[68]=11;
		$sourceType[69]=12;
		$sourceType[78]=15;
		$sourceType[80]=16;
		$sourceType[95]=17;
		$allotType [102]=18;
		$allotType [103]=19;
		//$sourceType[70]=13;
		$allotnum=20;
		//在特殊时段自动减少分配
		if(date('H:i:s')<'09:30:00'){
			$allotnum=0;
			return "不在分配时段不进行分配,";
		}
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=5;
		}
		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
			$allotnum=15;
		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=10;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		$m_chance = new zbj_model_mk_chance();
		$m_follow = new model_mk_chanceFollow();
		$m_copyright = new zbj_model_mk_copyright();
		$m_copyright_order = new zbj_model_mk_copyrightorder();
		
		$chance_table = $m_chance->tableName();
		$follow_table = $m_follow->tableName();
		$copyright_table = $m_copyright->tableName();
		$copyright_order_table = $m_copyright_order->tableName();
		//>
		$maxallotnum = 1000;
		$oCache      = new zbj_lib_cache('memcache');
		$result = $oCache->get('boss.copyright.allot.new.totalManagerAllot');
		if ($result['date'] < time()) {
			$items = 'count('.$chance_table . '.chance_id) as totalSize,'.$chance_table.'.manager_id';
			$where = array();
			$where[$follow_table . '.is_sys'] = 0;
			$where[$follow_table . '.is_sea'] = 0;
			$where[$follow_table . '.is_giveup'] = 0;
			$where[] = $chance_table.'.lastest_paid_time = 0';
			//$where[] = '(' . $copyright_order_table . '.status = 0 OR ' . $copyright_order_table . '.status IS NULL )';
			//$where[] = '(' . $copyright_order_table . '.amount != 0 OR ' . $copyright_order_table . '.amount IS NULL )';
			//$where[] = $chance_table . '.manager_id!=0';
			$where[$chance_table . '.create_manager_id'] = 0;
			
			$left_join = array(
					$follow_table => "{$follow_table}.chance_id = {$chance_table}.chance_id",
			);
			
			$group_by = "GROUP BY {$chance_table}.manager_id";
			$list = $m_chance->select($where, $items, $group_by, null, $left_join);
			
			$totalManagerAllot = array();
			if ($list) {
				foreach ($list->items as $v){
					$totalManagerAllot[$v['manager_id']]=$v['totalSize'];
				}
			}
			
			$where2 = array();
			$where2[$follow_table . '.is_sys'] = 1;
			$where2[$follow_table . '.is_sea'] = 0;
			//$where2[] = $chance_table . '.manager_id!=0';
			$where2[$chance_table . '.create_manager_id'] = 0;
			$where2[]= $chance_table.'.lastest_paid_time = 0';
			//$where2[] = '(' . $copyright_order_table . '.status = 0 OR ' . $copyright_order_table . '.status IS NULL )';
			$list2 = $m_chance->select($where2, $items, $group_by, null, $left_join);
			if ($list2) {
				foreach ($list2 as $v){
					$totalManagerAllot[$v['manager_id']]+=$v['totalSize'];
				}
			}
			echo 'all:totalManagerAllot';
			print_r($totalManagerAllot);
			if ($totalManagerAllot) {
				foreach ($totalManagerAllot as $_user_id => $_total){
					if ($_total<$maxallotnum) {
						unset($totalManagerAllot[$_user_id]);
					}
				}
			}
			$totalManagerAllot = array_keys($totalManagerAllot);
			$result = array();
			$result['date'] = time()+180;
			$result['data'] = $totalManagerAllot;
			$oCache->set('boss.copyright.allot.new.totalManagerAllot', $result,180);
		}else{
			$totalManagerAllot = $result['data'];
		}
		echo 'totalManagerAllot:';
		print_r($totalManagerAllot);
		$agent_config_id = 72;                                //案件代理人
		$s_agent_allot = new zbj_service_allot ( $agent_config_id );//案件代理人分配人员配置
		$agentUsers = $s_agent_allot->getusers();
		
		$m_chance = new zbj_model_mk_chance();
		$m_chance->setLimit ( $allotnum );
		$allotKeys = array_keys($allotType);
		
		/****************/
		//主动提交机会
		$s_chance_zhudong = new service_mkchance();
		$sourceArray = service_mkchance::getNewSource();
		$sourceArray = array_merge($sourceArray); 
	//$yestoday_18uhr  = strtotime(date("Y-m-d",strtotime("-1 days")).' 18:00:00');
		$yestoday_18uhr  = strtotime(date("Y-m-d"));
		$yestoday_24uhr  = strtotime(date("Y-m-d").' 08:00:00');
		echo $yestoday_18uhr.PHP_EOL;
		echo $yestoday_24uhr.PHP_EOL;
		foreach ($allotKeys  as $config_id){
			echo "分配类型:".$allotType[$config_id].PHP_EOL;
			$s_allot = new zbj_service_allot ( $config_id );//商标版权-专题
			if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
				echo '没有在线客服'.PHP_EOL;
				continue;
			}
			$condition = array ();
			$condition ['manager_id'] = 0;
			$condition [] = "chance_id>8191";
			$condition [] = "create_ymd>='2014-09-01'";
			//$condition [] = "chance_id>14281";
			$condition [] = "chance_id>17394";
			$condition [] = 'chance_type_group in (1,2,5)';
			//$condition ['pid'] = 0 ;
			if ($config_id == 79) {
				$condition [] = 'source in ('.implode(',', $sourceArray).')';
				/*
				if (date("H:i:s")<'14:00:00') {
					$condition [] = '(create_time < '.strtotime(date("Y-m-d")) .' or create_time>'.strtotime(date("Y-m-d 07:00:00")).')';
				}
				*/
			}else{
				$condition ['source'] = $sourceType[$config_id];
			}
			$chances = $m_chance->select ( $condition,"*",null,'order by chance_id desc')->items;
			if(!is_array($chances) or count($chances)==0){
				echo '没有找到要分配的机会'.PHP_EOL;
				continue;
			}
			$usermap=array();
			$allusers=$s_allot->getusers();
			echo 'alluser'.PHP_EOL;
			print_r($allusers);
			echo 'alluser'.PHP_EOL;
			foreach ($chances as $val){
				echo '开始分配机会ID:', $val ['chance_id'].PHP_EOL;
				//客户主动提交机会
				if (in_array($val['source'], $sourceArray)) {
					if(date('H:i:s') > '00:00:00' && date('H:i:s')<'08:00:00'){
						echo '客户提交0-8点不参与分配'.PHP_EOL;
						continue;
					}
					//14点以前
					/*
					if (date("H:i:s")<'14:00:00') {
						if ($val['create_time']>= $yestoday_18uhr && $val['create_time']<=$yestoday_24uhr) {
							echo date("Y-m-d H:i:s",$val['create_time']).'14点后开始分配昨天0-8未分配出去的机会'.PHP_EOL;
							continue;
						}
					}
					*/
				}
				$follow_data = $m_follow->selectOne(array('chance_id'=>$val['chance_id']));
				if ($follow_data['is_giveup'] ==1 || $follow_data['is_sea'] ==1) {
					echo '机会在公海或已放弃', PHP_EOL;
					continue;
				}
				$s_chance=new service_mkchance($val ['chance_id']);
				if ($s_chance->get ( 'manage_id' ) != 0) {
					echo '已有处理客服跳过处理。', PHP_EOL;
					continue;
				}
				// 			if ($s_allot->isprocessed($s_chance->get('chance_id'))){
				// 				echo '已有处理客服跳过处理。', PHP_EOL;
				// 				continue;
				// 			}
				$user=0;
				$log="";
				$needlock=false;
				$check = true;
				if($val['user_id']>0){
					if($usermap[$val['user_id']]['user_id']){
						$user=$usermap[$val['user_id']]['user_id'];
						$log.="此需求和{$usermap[$val['user_id']]['chance_id']}机会同一时间分配，";
					}
				}
				//案件代理人处理规则
				if ($val['chance_type_group'] == 2 ) {
					$s_agent_allot = new zbj_service_allot ( $agent_config_id );//案件代理人分配人员配置
					echo "<br/>后期业务:".PHP_EOL;
					//锁定
					if (!$user) {
						$tmp_user_id = $s_chance->get('user_id');
						//$tmp_user_id = 14035898;
						if ($tmp_user_id) {
							$s_user=new service_customer($tmp_user_id);
							$agent_manager_id = $s_user->get('info.agent_manager_id');
							if($agent_manager_id && in_array($agent_manager_id, $agentUsers)){
								echo '用户被锁定直接分配给';
								$user = $agent_manager_id;
								$log.="用户被锁定直接分配给";
								$check = false;
							}else{
								$needlock=true;
							}
						}
					}
					//电话判断
					if(!$user){
						$phone=$s_chance->get('phone');
						if($phone){
							$condition=array();
							$condition['phone']=$phone;
							$condition[]="create_ymd>'".date("Y-m-d",time()-86400*7)."'";
							$condition[]="manager_id>0";
							$condition[]='chance_type_group in (1,2)';
							$alloted=$m_chance->selectOne($condition);
							if($alloted && in_array($alloted['manager_id'], $agentUsers)){
								$user=$alloted['manager_id'];
								$log.="相同电话号码发布";
								echo '相同电话号码发布';
							}
						}
					}
					//创建人员分配
					if(!$user){
						$create_manager_id=$s_chance->get('create_manager_id');
						//前期不可以处理后期
						//后期可以处理前期
						if(in_array($create_manager_id, $agentUsers)){
							$user=$create_manager_id;
							$log.="分配给创建人员";
							echo '分配给创建人员';
						}
					}
					if (!$user) {
						$user = $s_agent_allot->getnextuser ( 1, 1, 1 ,0,null,array(),$totalManagerAllot); // 分配交易使用了时间字段1，这里使用字段2
						$log.="分配给在线用户";
						echo '分配给在线用户';
					}
					if (! $user) {
						echo '没有到到客服。', PHP_EOL;
						continue;
					}
				}
				if(!$user){
					if ($s_chance->get ( 'user_id' )) {
						$s_user=new service_customer($s_chance->get ( 'user_id' ));
						if($s_user->get('info.manager_id') && in_array($s_user->get('info.manager_id'), $allusers)){
							echo '用户被锁定直接分配给';
							$user=$s_user->get('info.manager_id');
							$log.="用户被锁定直接分配给";
							$check = false;
							
						}else{
							$needlock=true;
						}
					}
				}
				//电话判断
				if(!$user){
					$phone=$s_chance->get('phone');
					if($phone){
						$condition=array();
						$condition['phone']=$phone;
						$condition[]="create_ymd>'".date("Y-m-d",time()-86400*7)."'";
						$condition[]="manager_id>0";
						$condition[]='chance_type_group in (1,2)';
						$alloted=$m_chance->selectOne($condition);
						if($alloted){
							$user=$alloted['manager_id'];
							$log.="相同电话号码发布";
							echo '相同电话号码发布';
						}
					}
				}
				//创建人员分配
				if(!$user){
					$create_manager_id=$s_chance->get('create_manager_id');
					if(in_array($create_manager_id, $allusers)){
						$user=$create_manager_id;
						$log.="分配给创建人员";
						echo '分配给创建人员';
					}
				}
				if(!$user){
					$user = $s_allot->getnextuser ( 1, 1, 1 ,0,null,array(),$totalManagerAllot); // 分配交易使用了时间字段1，这里使用字段2
					$log.="分配给在线用户";
					echo '分配给在线用户';
				}
				if (! $user) {
					echo '没有到到客服。', PHP_EOL;
					continue;
				}
				$s_manager=new service_manager($user);
				if($s_chance->changemanager($user)){
					$usermap[$val['user_id']]['user_id']=$user;
					$usermap[$val['user_id']]['chance_id']=$val ['chance_id'];
					if ($needlock) {
						if ($val['chance_type_group'] == 2) {
							//后期业务锁定案件代理人
							$s_user->changeLockAgent( $user );
						}else{
							$s_user->changeLockSeller ( $user );
						}
					}
					$data=array();
					$data['is_sys']=1;
					$data['manager_id']=$s_manager->get('user_id');
					$s_chance->follow($data);
					if ($val['chance_type_group'] == 2) {
						$s_agent_allot->createlog ( $s_chance->get ( 'chance_id' ), $user, 1, 0 );
					}else{
						$s_allot->createlog ( $s_chance->get ( 'chance_id' ), $user, 1, 0 );
					}
					echo '分配客服ID',$s_manager->get('name').PHP_EOL;
					$log.=":".$s_manager->get('name');
					$this->addLog($s_chance->get('chance_id'),$log,'chance');
				}else{
					echo "分配失败".PHP_EOL;
				}
			}
		}
	}

	/**
	 * 商标版权其它新分配
	 * @param unknown $inPath
	 */
	public function pageAllotCopyrightOtherNew($inPath){
		header ( 'Content-Type:text/plain;charset=utf-8' );

		//exit;//法律服务要计划分配 其它不分配
		$allotType=array();
		$allotType[131]="商标-其它";

		$sourceType=array();//机会来源
		$sourceType[131] = 22;

		$allotnum=20;
		//在特殊时段自动减少分配
		if(date('H:i:s')<'09:30:00'){
			$allotnum=0;
			return "不在分配时段不进行分配,";
		}
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=5;
		}
		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
			$allotnum=15;
		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=10;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}

		$m_chance = new zbj_model_mk_chance();
		$m_copyright = new zbj_model_mk_copyright();
		$m_copyright_order = new zbj_model_mk_copyrightorder();

		$chance_table = $m_chance->tableName();
		$copyright_table = $m_copyright->tableName();
		$copyright_order_table = $m_copyright_order->tableName();
		//>
		$maxallotnum = 1000;
		$oCache      = new zbj_lib_cache('memcache');
		$result = $oCache->get('boss.copyright.allot.new.totalManagerAllot');
		echo "<pre>";
		var_dump($result);
		echo "</pre>";
		if ($result['date'] < time()) {
			$items = 'count(chance_id) as totalSize,manager_id';
			$where = array();
			$where['is_sys'] = 0;
			$where['is_sea'] = 0;
			$where['is_giveup'] = 0;
			$where[] = 'lastest_paid_time = 0';
			$where['create_manager_id'] = 0;
			$group_by = "GROUP BY manager_id";
			$list = $m_chance->select($where, $items, $group_by);
			$totalManagerAllot = array();
			if ($list) {
				foreach ($list->items as $v){
					if ($v['manager_id'] > 0) {
						$totalManagerAllot[$v['manager_id']]=$v['totalSize'];
					}
				}
			}
			echo 'all:totalManagerAllot1'.PHP_EOL;
			echo "<pre>";
			var_dump($totalManagerAllot);
			echo "</pre>";
			$where2 = array();
			$where2['is_sys'] = 1;
			$where2['is_sea'] = 0;
			$where2['create_manager_id'] = 0;
			$where2[]= $chance_table.'.lastest_paid_time = 0';
			$list2 = $m_chance->select($where2, $items, $group_by);
			if ($list2) {
				foreach ($list2 as $v){
					if ($v['manager_id'] > 0) {
						$totalManagerAllot[$v['manager_id']]+=$v['totalSize'];
					}
				}
			}
			echo 'all:totalManagerAllot2'.PHP_EOL;
			echo "<pre>";
			var_dump($totalManagerAllot);
			echo "</pre>";
			if ($totalManagerAllot) {
				foreach ($totalManagerAllot as $_user_id => $_total){
					if ($_total<$maxallotnum) {
						unset($totalManagerAllot[$_user_id]);
					}
				}
			}
			$totalManagerAllot = array_keys($totalManagerAllot);
			$result = array();
			$result['date'] = time()+180;
			$result['data'] = $totalManagerAllot;
			$oCache->set('boss.copyright.allot.new.totalManagerAllot', $result, 180);
		}else{
			$totalManagerAllot = $result['data'];
		}
		echo 'totalManagerAllot:'.PHP_EOL;
		echo '<pre>';
		print_r($totalManagerAllot);
		echo '</pre>'.PHP_EOL;

		$m_chance = new zbj_model_mk_chance();
		$m_chance->setLimit ( $allotnum );
		$allotKeys = array_keys($allotType);

		foreach ($allotKeys  as $config_id){
			echo "分配类型:".$allotType[$config_id].PHP_EOL;
			$s_allot = new zbj_service_allot ( $config_id );//商标版权-专题
			if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
				echo '没有在线客服'.PHP_EOL;
				continue;
			}

			$condition = array ();
			$condition ['manager_id'] = 0;
            $condition['is_giveup'] = 0;
            $condition['is_sea'] = 0;
			$condition [] = "create_ymd>='2015-10-24'";
			$condition [] = "chance_id>354138";
			$condition [] = 'chance_type_group in (1,5)';
			$condition ['source'] = $sourceType[$config_id];

			$chances = $m_chance->select ( $condition, "*", null, 'order by chance_id desc')->items;
			echo '待分配数组chances:'.PHP_EOL;
			echo '<pre>';
			print_r($chances);
			echo '</pre>'.PHP_EOL;
			if(!is_array($chances) or count($chances)==0){
				echo '没有找到要分配的机会'.PHP_EOL;
				continue;
			}

			$usermap=array();
			$allusers=$s_allot->getusers();
			echo 'alluser'.PHP_EOL;
			print_r($allusers);
			echo 'alluser'.PHP_EOL;
			foreach ($chances as $val){
				echo '开始分配机会ID:', $val ['chance_id'].PHP_EOL;
				if ($val['is_giveup'] ==1 || $val['is_sea'] ==1) {
					echo '机会在公海或已放弃', PHP_EOL;
					continue;
				}
				$s_chance=new service_mkchance($val ['chance_id']);
				if ($s_chance->get ( 'manage_id' ) != 0) {
					echo '已有处理客服跳过处理。', PHP_EOL;
					continue;
				}

				$user=0;
				$log="";
				$needlock=false;
				$check = true;
				if($val['user_id']>0){
					if($usermap[$val['user_id']]['user_id']){
						$user=$usermap[$val['user_id']]['user_id'];
						$log.="此需求和{$usermap[$val['user_id']]['chance_id']}机会同一时间分配，";
					}
				}

				if(!$user){
					if ($s_chance->get ( 'user_id' )) {//有用户ID 绑定给用户
						$s_user=new service_customer($s_chance->get ( 'user_id' ));
						if($s_user->get('info.manager_id') && in_array($s_user->get('info.manager_id'), $allusers)){
							echo '用户被锁定直接分配给';
							$user=$s_user->get('info.manager_id');
							$log.="用户被锁定直接分配给";
							$check = false;
						}else{
							$needlock=true;
						}
					}
				}
				//电话判断
				if(!$user){
					$phone=$s_chance->get('phone');
					if($phone){
						$condition=array();
						$condition['phone']=$phone;
						$condition[]="create_ymd>'".date("Y-m-d",time()-86400*7)."'";
						$condition[]="manager_id>0";
						$condition[]='chance_type_group in (1,2,5)';
						$alloted=$m_chance->selectOne($condition);
						if($alloted){
							$user=$alloted['manager_id'];
							$log.="相同电话号码发布";
							echo '相同电话号码发布';
						}
					}
				}
				//创建人员分配
				if(!$user){
					$create_manager_id = $s_chance->get('create_manager_id');
					if(in_array($create_manager_id, $allusers)){
						$user=$create_manager_id;
						$log.="分配给创建人员";
						echo '分配给创建人员';
					}
				}
				
				if(!$user){
					$user = $s_allot->getnextuser ( 1, 1, 1 ,0, null, array(), $totalManagerAllot); // 分配交易使用了时间字段1，这里使用字段2 这里有问题，需要处理
					$log.="分配给在线用户";
					echo '分配给在线用户';
				}
				if (! $user) {
					echo '没有到客服。', PHP_EOL;
					continue;
				}
				
				$s_manager=new service_manager($user);
				if($s_chance->changemanager($user)){
					$usermap[$val['user_id']]['user_id']=$user;
					$usermap[$val['user_id']]['chance_id']=$val ['chance_id'];
				if ($needlock)
					$s_user->changeLockSeller ( $user );

					$data=array();
					$data['is_sys']=1;
					$data['manager_id']=$s_manager->get('user_id');
					$s_chance->follow($data);
					$s_allot->createlog ( $s_chance->get ( 'chance_id' ), $user, 1, 0 );
					echo '分配客服ID',$s_manager->get('name').PHP_EOL;
					$log.=":".$s_manager->get('name');
					$this->addLog($s_chance->get('chance_id'),$log,'chance');
				}else{
					echo "分配失败".PHP_EOL;
				}
			}
		}
	}

	/**
	 * 分配法律顾问
	 * @author tanqing
	 * @date 2015-4-9
	 */
	public function pageAllotLawChance(){
		$allotType=array();
		$allotType[76]="法律顾问分配";
		$sourceType=array();
		//$sourceType[76]=1;
		$allotnum=20;
		//在特殊时段自动减少分配
		/*
		if(date('H:i:s')<'09:00:00'){
			$allotnum=0;
			return "不在分配时段不进行分配,";
		}
		*/
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=5;
		}
		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
			$allotnum=15;
		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=10;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		
		$allotKeys = array_keys($allotType);
		$m_chance  = new zbj_model_mk_chance();
		$m_follow = new zbj_model_mk_follow();
		foreach ($allotKeys  as $config_id){
			echo "分配类型:".$allotType[$config_id].PHP_EOL;
			$s_allot = new zbj_service_allot ( $config_id );//商标版权-专题
			if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
				echo '没有在线客服'.PHP_EOL;
				continue;
			}
			$condition = array ();
			$condition ['manager_id'] = 0;
			$condition [] = "chance_id>8191";
			$condition [] = "create_ymd>='2014-09-01'";
			//$condition [] = "chance_id>14281";
			$condition [] = "chance_id>17394";
			$condition [] = 'chance_type_group =3';
			//$condition ['pid'] = 0 ;
			//$condition ['source'] = $sourceType[$config_id];
			$chances = $m_chance->select ( $condition,"*",null,'order by chance_id desc')->items;
			if(!is_array($chances) or count($chances)==0){
				echo '没有找到要分配的机会'.PHP_EOL;
				continue;
			}
			$usermap=array();
			$allusers=$s_allot->getusers();
			echo 'alluser'.PHP_EOL;
			print_r($allusers);
			echo 'alluser'.PHP_EOL;
			foreach ($chances as $val){
				echo '开始分配机会ID', $val ['chance_id'];
				$s_chance=new service_mkchance($val ['chance_id']);
				if ($s_chance->get ( 'manage_id' ) != 0) {
					echo '已有处理客服跳过处理。', PHP_EOL;
					continue;
				}
				$user=0;
				$log="";
				$needlock=false;
				$check = true;
				if($val['user_id']>0){
					if($usermap[$val['user_id']]['user_id']){
						$user=$usermap[$val['user_id']]['user_id'];
						$log.="此需求和{$usermap[$val['user_id']]['chance_id']}机会同一时间分配，";
					}
				}
				if(!$user){
					if ($s_chance->get ( 'user_id' )) {
						$user_id = $s_chance->get('user_id');
						lib_BaseUtils::apiInit(10,array('ub-client'));
						$ubUserCient = new com\zhubajie\ub\interfaces\UserBizAttrServiceIfClient(null);
						lib_BaseUtils::apigetclient($ubUserCient);
						$userBiz = $ubUserCient->getUserAttr ($user_id, array (
								'EXPAND'
						) );
						$expand = unserialize ( $userBiz->usersFields [$user_id] ['EXPAND'] );
						if ($expand['law_manager_id'] && in_array($expand['law_manager_id'], $allusers)) {
							echo '用户被锁定直接分配给';
							$user = $expand['law_manager_id'];
							$log.="用户被锁定直接分配给";
							$check = false;
						}else{
							$needlock=true;
						}
					}
				}
				//电话判断
				if(!$user){
					$phone=$s_chance->get('phone');
					if($phone){
						$condition=array();
						$condition['phone']=$phone;
						$condition[]="create_ymd>'".date("Y-m-d",time()-86400*7)."'";
						$condition[]="manager_id>0";
						$condition[]='chance_type_group = 3';
						$alloted=$m_chance->selectOne($condition);
						if($alloted){
							$user=$alloted['manager_id'];
							$log.="相同电话号码发布";
							echo '相同电话号码发布';
						}
					}
				}
				//创建人员分配
				if(!$user){
					$create_manager_id=$s_chance->get('create_manager_id');
					if(in_array($create_manager_id, $allusers)){
						$user=$create_manager_id;
						$log.="分配给创建人员";
						echo '分配给创建人员';
					}
				}
				if(!$user){
					$user = $s_allot->getnextuser ( 1, 0); // 分配交易使用了时间字段1，这里使用字段2
					$log.="分配给在线用户";
					echo '分配给在线用户';
				}
				if (! $user) {
					echo '没有到到客服。', PHP_EOL;
					continue;
				}
				$s_manager=new service_manager($user);
				if($s_chance->changemanager($user)){
					$usermap[$val['user_id']]['user_id']=$user;
					$usermap[$val['user_id']]['chance_id']=$val ['chance_id'];
					if ($needlock && $user_id) {
						lib_BaseUtils::apiInit(10,array('ub-client'));
						$ubUserCient = new com\zhubajie\ub\interfaces\UserBizAttrServiceIfClient(null);
						lib_BaseUtils::apigetclient($ubUserCient);
						$userBiz = $ubUserCient->getUserAttr ( $user_id, array (
								'EXPAND'
						) );
						$expand = unserialize ( $userBiz->usersFields [$user_id] ['EXPAND'] );
						if (!$expand ['law_manager_id'] ) {
							$expand['law_manager_id'] = $user;
							$userBizDTO = new com\zhubajie\ub\dataobject\userbiz\UserBizAttrDTO ();
							$userBizDTO->value = serialize ( $expand );
							$userBizDTO->field = 'EXPAND';
							$userBizDTO->option = com\zhubajie\ub\dataobject\userbiz\OptionType::SET;
							$res = $ubUserCient->setUserAttr ( $user_id, array (
									$userBizDTO
							) );
						}
					}
					$data=array();
					$data['is_sys']=1;
					$data['manager_id']=$user;
					$s_chance->followLaw($data);
					if ($val['chance_type_group'] == 2) {
						$s_agent_allot->createlog ( $s_chance->get ( 'chance_id' ), $user, 1, 0 );
					}else{
						$s_allot->createlog ( $s_chance->get ( 'chance_id' ), $user, 1, 0 );
					}
					echo '分配客服ID',$s_manager->get('name').PHP_EOL;
					$log.=":".$s_manager->get('name');
					$this->addLog($s_chance->get('chance_id'),$log,'chance');
				}else{
					echo "分配失败".PHP_EOL;
				}
			}
		}
	}
	/**
	 * 待受理和跟进中超期的机会投入公海
	 * @author tanqing
	 * @date 2015-1-28
	 */
	public function pageChanceInSea(){
        exit;
		if (date('Y-m-d') < '2015-02-10') {
			return true;
		}
		$m_chance = new zbj_model_mk_chance();
		$m_follow = new model_mk_chanceFollow();
		$m_copyright = new zbj_model_mk_copyright();
		$m_copyright_order = new zbj_model_mk_copyrightorder();
	
		$chance_table = $m_chance->tableName();
		$follow_table = $m_follow->tableName();
		$copyright_table = $m_copyright->tableName();
		$copyright_order_table = $m_copyright_order->tableName();
		
		$left_join = array(
			$follow_table => "{$follow_table}.chance_id = {$chance_table}.chance_id",
			$copyright_table => "{$copyright_table}.chance_id = {$chance_table}.chance_id",
			$copyright_order_table => "{$copyright_order_table}.copyright_id = {$copyright_table}.copyright_id"
		);
		
		$group_by = "GROUP BY {$chance_table}.chance_id";
	
		$items = array(
			$chance_table . '.chance_id',
			$chance_table . '.user_id',
			$chance_table . '.user_name as nickname',
			$chance_table . '.manager_id',
			$follow_table . '.expire_time',
			$copyright_table . '.copyright_id',
		);
	
		//待受理
		$condition = array();
		$condition[$follow_table . '.is_sys'] = 1;
		$condition[$follow_table . '.is_sea'] = 0;
		$condition[$follow_table . '.is_giveup'] = 0;
		$condition[] = $chance_table . '.manager_id > 0';
		$condition[] = $chance_table . '.chance_type_group in (1,2)';
		$condition[] = $chance_table . '.create_ymd >= "2015-02-02"';
		$condition[] = $follow_table . '.expire_time < ' . time();
		$condition[] = $chance_table.'.lastest_paid_time = 0';
		//$condition[] = '(' . $copyright_order_table . '.status = 0 OR ' . $copyright_order_table . '.status IS NULL )';
		
		$limit = 20;
		$m_chance->setLimit($limit);
		$m_chance->setPage(1);
		$chance_list = $m_chance->select($condition, $items, $group_by, '', $left_join)->items;
		$this->_chance_in_sea($chance_list);
		
		return  ;
		
		//跟进中
		$condition = array();
		$chance_list = array();
		$condition[$follow_table . '.is_sys'] = 0;
		$condition[$follow_table . '.is_sea'] = 0;
		$condition[$follow_table . '.is_giveup'] = 0;
		$condition[] = $chance_table . '.manager_id > 0';
		$condition[] = $chance_table . '.chance_type_group in (1,2)';
		$condition[] = $chance_table . '.create_ymd >= "2015-02-02"';
		$condition[] = $follow_table . '.expire_time < ' . time();
		$condition[] = $chance_table.'.lastest_paid_time = 0';
		//$condition[] = '(' . $copyright_order_table . '.status = 0 OR ' . $copyright_order_table . '.status IS NULL )';
		//$condition[] = '(' . $copyright_order_table . '.amount != 0 OR ' . $copyright_order_table . '.amount IS NULL )';
		
		$limit = 20;
		$m_chance->setLimit($limit);
		$m_chance->setPage(1);
		$chance_list = $m_chance->select($condition, $items, $group_by, '', $left_join)->items;
		$this->_chance_in_sea($chance_list);
	}
	
	/**
	 * 进公海
	 * @access private
	 * @author yuanzhuang
	 */
	private function _chance_in_sea($chance_list) {
		if ($chance_list) {
			$s_chance = new service_mkchance();
			foreach ($chance_list as $each_item) {
				$s_chance->setId($each_item['chance_id']);
		
				$follow_data = array(
					'is_sys' => 0,
					'chance_id' => $each_item['chance_id'],
					'is_sea' => 1,
					'sea_time' => time(),
					'sea_date' => date('Y-m-d'),
					'manager_id' => 0,
					'remark' => '跟进超期进入公海',
				);
		
				if ($s_chance->follow($follow_data)) {
					$s_chance->processed();
					
					$m_chance = new zbj_model_mk_chance();
					$m_copyright = new zbj_model_mk_copyright();
					
					$m_chance->update(array('chance_id' => $each_item['chance_id']), array('manager_id' => 0));
					$m_copyright->update(array('chance_id' => $each_item['chance_id']), array('manager_id' => 0));
					//进公海 不解锁用户最终页
					/*
					if ($each_item['user_id']) {
						$s_customer  = new service_customer($each_item['user_id']);
						if ($s_customer->changeLockSeller(0)) {
							$this->addLog($each_item['user_id'], '用户被解锁', 'user');
							$this->addLog($each_item['copyright_id'], '超期解锁' , 'copyright');
						}
					}
					*/
				}
			}
		}
	}
	
	
	/**
	 * 自动开发上线,服务商分配,服务审核上线
	 */
	public function pageautoallotup() {
		$m_allotconfig = new zbj_model_cp_allotconfig ();
		$pid = $m_allotconfig->select ( 'pid in(7,13)' );
		if (empty ( $pid )) {
			return '没有查询到数据';
		}
		$config_ids = array ();
		foreach ( $pid->items as $config ) {
			array_push ( $config_ids, $config ['id'] );
		}
		$m_allot = new zbj_model_cp_allot ();
		$condition = array ();
		$condition [] = "config_id in (" . implode ( ',', $config_ids ) . ")";
		if($_GET['debug']){
			define('DEBUG', 1);
		}
		$m_allot->update ( $condition ,array('isonline'=>1));
	}
	/**
	 * 不和交易挂钩的举报分配
	 * @param unknown $inPath
	 */
	public function pageallotreport($inPath) {
		header ( 'Content-Type:text/plain;charset=utf-8' );
		if ($_REQUEST ['debug']) {
			define ( 'DEBUG', 1 );
		}
		$s_allot = new zbj_service_allot ( 15 );
		// if (count ( $s_allot->getusers ( 0, 0 ) ) == 0) {
		// return '没有在线客服';
		// }
		// 分配数量
		$allotnum = 20;
		// 在特殊时段自动减少分配
		if (date ( 'H:i:s' ) > '09:00:00' && date ( 'H:i:s' ) < '09:05:00') {
			$allotnum = 5;
		}
		// if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
		// $allotnum=5;
		// }
		if (date ( 'H:i:s' ) > '18:00:00' && date ( 'H:i:s' ) < '19:05:00') {
			$allotnum = 5;
		}
		if ($_GET ['allotnum']) {
			$allotnum = intval ( $_GET ['allotnum'] );
		}
		$m_report = new zbj_model_mb_report ();
		$m_report->setLimit ( $allotnum );
		$condition = array ();
		$condition [] = "mb_report.manage_id between 0 and 1";
		$condition ['mb_report.old_report'] = 0;
		$condition [] = "mb_report.state<3";
// 		$condition [] = "mb_report.type IN ( 25, 26, 27, 28, 29, 30, 31, 32 ) ";
		$reports = $m_report->select ( $condition,"mb_report.report_id",null,null,array('mb_council_report'=>'mb_council_report.report_id=mb_report.report_id') )->items;
		if (is_array ( $reports )) {
			foreach ( $reports as $rep ) {
				echo '开始分配举报ID', $rep ['report_id'];
				$s_report = new zbj_service_report ( $rep ['report_id'] );
				$s_report->setDbEntry ();
				if ($s_report->get ( 'manage_id' ) > 1) {
					echo '已有处理客服跳过处理。', PHP_EOL;
					continue;
				}
				$user = $s_allot->getnextuser ( 0, 0, 2 ); // 分配交易使用了时间字段1，这里使用字段2
				if (! $user) {
					echo '没有到到客服。', PHP_EOL;
					continue;
				}
				echo '分配客服ID',$user;
				$s_report->set ( 'manage_id', $user );
				if ($s_report->save ()) {
					$s_allot->createlog ( $s_report->get ( 'report_id' ), $user, 2, 0 );
					echo '分配成功';
				}
			}
		} else {
			echo '没有举报需要进行分配';
		}
	}
	/**
	 * 计件任务自动默认合格
	 * @param unknown $inPath
	 */
	public function pageselectworks4allot3($inPath){
		header ( 'Content-Type:text/plain;charset=utf-8' );
		$m_crontabselect = new model_mk_taskcrontabselect ();
		$crondata = $m_crontabselect->selectOne ( array ('state' => 1) );
		if(!$crondata){
			$crondata = $m_crontabselect->selectOne ( array ('state' => 0) );
		}
		if(!$crondata){
			return '没有任务需要执行。';
		}
		$m_works= new zbj_model_mk_works();
		$m_works->setLimit ( 20+$crondata['failnum'] );
		$works = $m_works->select(array('task_id'=>$crondata['task_id'],'open_state'=>0,'issuccess'=>0,'iseliminate'=>0,'type'=>10),'works_id','','order by works_id asc')->items;
		if(!$works){
			$crondata['state']=2;
			$m_crontabselect->update(array('task_id'=>$crondata['task_id']),$crondata);
		}
		$srvTask = new zbj_service_task($crondata['task_id'],'free');
		$srvTask = $srvTask->init();
		$s_w = array();
		$f_w = array();
		foreach($works as $w){
			$srvWorks = new zbj_service_works($w['works_id']);
			if($srvTask->selectWorks($srvWorks) === false) {
				$f_w[] = $w['works_id'];
			}else{
				$s_w[] = $w['works_id'];
			}
		}
		$this->addLog($srvTask->get ( 'task_id' ),'计划任务执行批量设置了稿件:'.join(',', $s_w).' 合格。');
		$srvTask->addTaskActionLog(' 批量设置了稿件: '.join(',', $s_w).' 合格', false);
		$crondata['failnum']=count($f_w);
		if(count($works)< (20+$crondata['failnum']) ){
			if($crondata['failnum']){
				$crondata['state']=3;
			}else{
				$crondata['state']=2;
			}
		}
		$m_crontabselect->update(array('task_id'=>$crondata['task_id']),$crondata);
	}

    /**
     * 服务审核通用检查
     * @return string
     */
	private function CommonServiceAllotChecker() {
 		header ('Content-Type: text/html; charset=utf-8');
		if ($_GET ['debug'] == 'sqlDebug') define ('DEBUG', true);
		if(date ( 'H:i:s', $this->_time) <= '09:00:00') return '没有到分配时间';
		if(date ( 'H:i:s', $this->_time) >= '23:00:00') return '没有到分配时间';
		$this->allot_num = abs(intval ($_GET ['allotnum'])) ? : 50;
	}

    /**
     * 橱窗服务申请审核分配
     * @param $inPath
     * @return string
     */
	public function pageWindowServiceAuditAllot($inPath) {
		$this->CommonServiceAllotChecker();
		$mdl = new zbj_model_sp_servicerecommend();
		$condition = array(
			'sp_service_recommend.state' => 0,
            'sp_service_recommend.allot_manager_id IS NULL',
            'sp_service.allot_manager_id>0',
		);
		$mdl->setLimit($this->allot_num);
		$left_join = array('sp_service' => 'sp_service_recommend.service_id=sp_service.service_id');
		$list = $mdl->select($condition, 'sp_service_recommend.service_id,sp_service.allot_manager_id', '', 'ORDER BY sp_service_recommend.add_ymd DESC', $left_join)->items;
		if ($list) {
			foreach ($list as $val){
				$ALLOT_CONFIG_ID_WINDOW_SERVICE_AUDIT = 75;
				$service_id = intval($val['service_id']);
				$srvAllot = new zbj_service_allot ( $ALLOT_CONFIG_ID_WINDOW_SERVICE_AUDIT );
                $primary_allot_uid = intval($val['allot_manager_id']);
				$srvManagerOld = new service_manager($primary_allot_uid);
				if ($srvManagerOld->isLeaveUser()) {
					$online_only = true;
					$check_max = true;
					$suggest_allot_uid = array();
				} else {
					$online_only = false;
					$check_max = false;
					$suggest_allot_uid = array($primary_allot_uid);
				}
				$alloted_user_id = $srvAllot->getnextuser($online_only, $check_max, 1, 0, $this->_ymd, $suggest_allot_uid);
				$srvManagerNew = new service_manager($alloted_user_id);
				$msg = "service_id:{$service_id}";
				if ($alloted_user_id) {
					$msg .= " alloted_user:{$alloted_user_id}";
					$condition = array('service_id' => $val['service_id']);
					$data_update = array(
						'allot_manager_id' => $alloted_user_id,
						'allot_manager_name' => $srvManagerNew->get('name'),
					);
					if( ! $mdl->update($condition, $data_update)){
						$msg .= 'update record failed';
					} else {
						$srvAllot->createlog($service_id, $alloted_user_id, 1);
					}
					$srvManagerOld = $srvManagerNew = NULL;
				} else {
					$msg .= " no User Alloted " . $srvAllot->getError();
				}
				echo $msg . '<br />' . PHP_EOL;
			}
		} else {
			return 'no Window Service to Audit.';
		}
	}

 	/**
	 * 服务分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageAllotSpService($inPath){
		$this->CommonServiceAllotChecker();
		$model=new zbj_model_sp_service();
		$condition['allot_manager_id']=0;
		$condition[]='ischeck=1 and (state =1 or state =4)';
		$items="service_id as rid,category_id,user_id,allot_manager_id";

		$model->setLimit($this->allot_num);
		$data=$model->select($condition,$items);
		if(is_array($data->items) && count($data->items)){
			foreach ($data->items as $val){
				$msg = "开始分配ID{$val['rid']} ";
				if($val['rid']<=0){
					continue;
				}
				if($val['allot_manager_id']>0){
					$srvManager = new service_manager($val['allot_manager_id']);
					if ($srvManager->isLeaveUser() === false) continue;
				}
				$s_module=new service_module();
				$module=$s_module->getModuleByCategoryId($val['category_id']);
				if($module){
					if($module['allot_config_id']){
						$msg .= "使用行业 {$module['module_name']} 服务审核队列进行分配 ";
						$s_allot=new zbj_service_allot ( $module['allot_config_id'] );
					}else{
						$msg .= '使用普通服务审核队列进行分配 ';
						$s_allot=new zbj_service_allot ( 13 );
					}
				}else{
					$msg .= '使用普通服务审核队列进行分配 ';
					$s_allot=new zbj_service_allot ( 13 );
				}
				$user_id = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
				if(!$user_id){
					$msg .= "没有找到合适的用户 " . $s_allot->getError();
				} else {
					$msg .= "通过平均分配给用户ID {$user_id} ";
				}
				$condition = array( 'service_id' => $val['rid'] );
				$data = array( 'allot_manager_id' => $user_id );
				if ($model->update($condition, $data)) {
					$s_allot->createlog($val['rid'],$user_id,1);
				}
				echo trim($msg) . '<br />' . PHP_EOL;
			}
		}else{
			echo '没有需要分配的东西。';
		}
	}

	/**
	 * 通用分配规则
	 * @param unknown $inPath
	 */
	public function pagegeneralallot($inPath){
		$config_id=zbj_lib_BaseUtils::getStr($_REQUEST['config_id'],'int',0);
		header ( 'Content-Type:text/html;charset=utf-8' );
		if(date ( 'H:i:s' ) <= '09:10:00'){
			return '没有到分配时间';
		}
/* 		if(!in_array($config_id, array(3,8,9,10,11,13,14,16))){//服务审核分配 已经有allotspservice进行分配 */
		if(!in_array($config_id, array(3,8,9,10,11,14,16))){
			return '此分配规则不适用';
		}
		if ($_REQUEST ['debug']) {
			define ( 'DEBUG', 1 );
		}
		$s_allot = new zbj_service_allot ( $config_id );
		if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return '没有在线客服';
		}
		$allotnum = 50;
		if($config_id==3){
			$allotnum = 300;
		}
		if ($_GET ['allotnum']) {
			$allotnum = intval ( $_GET ['allotnum'] );
		}
		$condition=array();
		switch ($config_id){
			case 3://稿件
				$condition['accept_user_id']=0;
				$condition['status']=0;
				$model=new model_mk_check();
				$items="check_id as rid";
				break;
			case 8://云客服
				$condition['origin']=2;
				$condition['audit_status']=1;
				$condition['audit_managerid']=0;
				$model=new zbj_model_mk_record();
				$items="record_id as rid";
				break;
			case 9://企业实名
				$condition['allot_manager_id']=0;
// 				$condition['realtype']=2;
				$condition['status']=0;
				$condition [] = "addtimeymd>='2014-12-02'";
				$model=new zbj_model_mb_real();
				$items="check_id as rid";
				break;
			case 10://提现审核
				$condition['allot_manager_id']=0;
				$condition['state']=0;
				$model=new zbj_model_fn_withdraw();
				$items="withdraw_id as rid";
				break;
			case 11://服务入驻审核
				$condition['allot_manager_id']=0;
				$condition['status']=0;
				$condition[]="type IN (30,31)";
				$model=new zbj_model_mb_usercert();
				$items="verify_id as rid";
				break;
			case 13://服务审核
				$condition['allot_manager_id']=0;
				$condition[]="addtime>1388505600";
				$condition[]='( (state =1 and info_percent=0.8) or (state =4 and info_percent >= 1) )';
				$model=new zbj_model_sp_service();
				$items="service_id as rid";
				break;
			case 14://用户资料审核
				$condition['allot_manager_id']=0;
				$condition['status']=0;
				$condition[]="type IN (1,16,17,20)";
				$model=new zbj_model_mb_usercert();
				$items="verify_id as rid";
				break;
			case 16://用户申诉审核
				$condition['allot_manager_id']=0;
				$condition['state']=0;
				$model=new zbj_model_mb_appeal();
				$items="app_id as rid";
				break;
		}
// 		define('DEBUG', $value);
		$model->setLimit($allotnum);
		$data=$model->select($condition,$items);
		if(is_array($data->items) && count($data->items)){
			$s_manager=new service_manager();
			$timeout=0;
			foreach ($data->items as $val){
				echo '开始分配ID',$val['rid'];
				if($val['rid']<=0){
					continue;
				}
// 				print_r($s_allot->getriduser($val['rid']));
				if(in_array($config_id, array(13))){//
// 					if($s_allot->getriduser($val['rid'])){
// 						if(!$s_allot->isprocessed($val['rid'])){
// 							echo '已经分配直接跳过。','<br />';
// 							continue;
// 						}
// 					}
				}else{
// 					if($s_allot->isprocessed($val['rid'])){
// 						echo '已经处理过直接跳过','<br />';
// 						continue;
// 					}
// 					if($s_allot->getriduser($val['rid'])){
// 						echo '已经分配有用户直接跳过','<br />';
// 						continue;
// 					}
				}

				$s_manager->setId($user);
				switch ($config_id){
					case 3://稿件
						$user = $s_allot->getnextuser (1,0,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['check_id']=$val['rid'];
						$data=array();
						$data['accept_user_id']=$s_manager->get('user_id');
						$data['accept_name']=$s_manager->get('name');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 8://云客服
						$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['record_id']=$val['rid'];
						$data=array();
						$data['audit_managerid']=$s_manager->get('user_id');
						$data['audit_managername']=$s_manager->get('name');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 9://企业实名
						$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['check_id']=$val['rid'];
						$data=array();
						$data['allot_manager_id']=$s_manager->get('user_id');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 10://提现审核
						$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['withdraw_id']=$val['rid'];
						$data=array();
						$data['allot_manager_id']=$s_manager->get('user_id');
						$data['allot_manager_name']=$s_manager->get('name');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 11://服务商入驻审核
						$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['verify_id']=$val['rid'];
						$data=array();
						$data['allot_manager_id']=$s_manager->get('user_id');
// 						$data['allot_manager_name']=$s_manager->get('name');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 13://服务审核
						if($val['rid']<422141){
							$s_allot->processed($val['rid']);
							break;
						}
						$condition=array();
						$condition['service_id']=$val['rid'];
						$data=array();
						$data['allot_manager_id']=$s_manager->get('user_id');
// 						$data['manager_name']=$s_manager->get('name');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 14://用户资料审核
						$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['verify_id']=$val['rid'];
						$data=array();
						$data['allot_manager_id']=$s_manager->get('user_id');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					case 16://用户申诉审核
						$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
						if (! $user) {
							echo '没有取到分配的用户跳过。','<br />';
							continue;
						}
						$condition=array();
						$condition['app_id']=$val['rid'];
						$data=array();
						$data['allot_manager_id']=$s_manager->get('user_id');
						if($model->update($condition,$data)){
						}
						$s_allot->createlog($val['rid'],$user,1);
						break;
					default:
						echo '不合法的分配跳过','<br />';
				}
			}
		}else{
			echo '没有需要分配的东西。';
		}
	}
	/**
	 * 通用重新分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageregeneralallot($inPath){
		$config_id=zbj_lib_BaseUtils::getStr($_REQUEST['config_id'],'int',0);
		header ( 'Content-Type:text/html;charset=utf-8' );
		if(date ( 'H:i:s' ) <= '09:10:00'){
			return '没有到分配时间';
		}
		if(!in_array($config_id, array(3,8,9,10,11,13,14,16))){
			return '此分配规则不适用';
		}
		if ($_REQUEST ['debug']) {
			define ( 'DEBUG', 1 );
		}
		$s_allot = new zbj_service_allot ( $config_id );
		if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return '没有在线客服';
		}
		switch ($config_id){
			case 3://稿件
				$model=new model_mk_check();
				break;
			case 8://云客服
				$model=new zbj_model_mk_record();
				break;
			case 9://企业实名
				$model=new zbj_model_mb_real();
				break;
			case 10://提现审核
				$model=new zbj_model_fn_withdraw();
				break;
			case 11://服务商入驻审核
				$model=new zbj_model_mb_usercert();
				break;
			case 13://服务审核
				$model=new zbj_model_sp_service();
				break;
			case 14://用户资料审核
				$model=new zbj_model_mb_usercert();
				break;
			case 16://用户申诉审核
				$model=new zbj_model_mb_appeal();
				break;
		}
		$allots=$s_allot->getreallotrid(20,1);
		$s_manager=new service_manager();
		foreach ($allots as $val){
			echo '开始分配业务ID',$val['rid'];
			if($val['rid']<=0){
				continue;
			}
			$user = $s_allot->getnextuser (1,1,1,0,date('Y-m-d'));
			if (! $user) {
				echo '没有取到分配的用户跳过。','<br />';
				continue;
			}
			echo '给用户ID',$user,'<br />';
			$s_manager->setId($user);
			switch ($config_id){
				case 3://稿件
					$condition=array();
					$condition['check_id']=$val['rid'];
					$data=array();
					$data['accept_user_id']=$s_manager->get('user_id');
					$data['accept_name']=$s_manager->get('name');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 8://在线客服
					$condition=array();
					$condition['record_id']=$val['rid'];
					$data=array();
					$data['audit_managerid']=$s_manager->get('user_id');
					$data['audit_managername']=$s_manager->get('name');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 9://企业实名
					$condition=array();
					$condition['check_id']=$val['rid'];
					$data=array();
					$data['allot_manager_id']=$s_manager->get('user_id');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 10://提现审核
					$condition=array();
					$condition['withdraw_id']=$val['rid'];
					$data=array();
					$data['allot_manager_id']=$s_manager->get('user_id');
					$data['allot_manager_name']=$s_manager->get('name');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 11://服务商入驻审核
					$condition=array();
					$condition['verify_id']=$val['rid'];
					$data=array();
					$data['allot_manager_id']=$s_manager->get('user_id');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 13://服务审核
					$condition=array();
					$condition['service_id']=$val['rid'];
					$data=array();
					$data['allot_manager_id']=$s_manager->get('user_id');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 14://用户资料
					$condition=array();
					$condition['verify_id']=$val['rid'];
					$data=array();
					$data['allot_manager_id']=$s_manager->get('user_id');
// 					$data['cp_user']=$s_manager->get('name');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				case 16://用户资料
					$condition=array();
					$condition['app_id']=$val['rid'];
					$data=array();
					$data['allot_manager_id']=$s_manager->get('user_id');
// 					$data['cp_user']=$s_manager->get('name');
					if($model->update($condition,$data)){
					}
					$s_allot->createlog($val['rid'],$user,1,1);
					break;
				default:
					echo '不合法的分配跳过','<br />';
			}
		}
	}
	/**
	 * 已经签约的服务商分配服务人员
	 * 签约服务商分配
	 */
	public function pageallotmember($inPath) {
		header ( 'Content-Type:text/plain;charset=utf-8' );
		if(date ( 'H:i:s' ) <= '09:30:00'){
			return '没有到分配时间';
		}
		if ($_REQUEST ['debug']) {
			define ( 'DEBUG', 1 );
		}
		$s_allot = new zbj_service_allot ( 7 );
		$s_allot2= new zbj_service_allot ( 6 );
		if (count ( $s_allot->getusers (0, 0 ) ) == 0) {
			return '没有在线客服';
		}
		//分配数量
		$allotnum=5;
		//在特殊时段自动减少分配
		if(date('H:i:s')<'09:30:00'){
			return "不在分配时段不进行分配,";
		}
		if(date('H:i:s') > '09:30:00' && date('H:i:s')<'09:35:00'){
			$allotnum=5;
		}
		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
			$allotnum=10;
		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=10;
		}
		if ($_GET ['allotnum']) {
			$allotnum = intval ( $_GET ['allotnum'] );
		}

        $floll_model=zbj_model_api::get('model_mb_sellerlimitsV2breakfollowlog',1);
        $folldata=$floll_model->get();
        $log_model=zbj_model_api::get('model_mb_sellerlimitsV2paclogbuy');
        $log_model->setLimit($allotnum);
        $log_model->setPage(1);
        $condition=array();
        $condition[]="log_id>{$folldata['details_id']}";
        $data=$log_model->select($condition);
        var_dump($data);
        
		if (empty($data) or count($data->items)==0) {
			echo '访问用户接口出错，或没有数据。';
			exit ();
		}
		if (is_array ( $data->items )) {
			foreach ( $data->items as $val ) {
			    $folldata['details_id']=$val['log_id'];
			    if ($val['user_id'] == 0) {
                    continue;
                }
			    lib_BaseUtils::apiInit(5,array('membership_sdk'));
			    $s_user=new com\zhubajie\membership\interfaces\UserServiceClient(null);
			    lib_BaseUtils::apigetclient($s_user);
			    $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
			    lib_BaseUtils::apigetclient($follow_service);
			    $oldfollowinfo=$s_user->getfollowuser($val['user_id']);
			    if($oldfollowinfo->manager_id){
			        echo '已经分配的用户自动跳过。';
			        continue;
			    }
// 				$s_user = new service_user ( $val ['user_id'] );
				//按用户类目分配
// 				$category=$s_user->getUserCategory();
// 				$s_module=new service_module();
// 				$modconfig=$s_module->getModuleByCategoryId($category);//传三级分类
// 				$config_id=$modconfig['user_sign_allot_id'];
// 				if($config_id==0){
// 					echo '用户ID'.$val ['id'].'没有找到分配队列';
// 					continue;
// 				}
// 				$s_allot = new zbj_service_allot ( $config_id );

				$user = $s_allot->getnextuser (0,0,1);
				if (! $user) {
					echo '没有取到分配的用户跳过。';
					continue;
				}
				$result=$s_user->updateFollowManager((int)$val ['user_id'], (int)$user);
				$params = array(
				    'user_id' => (int)$val ['user_id'], //项目内调用时可不传
				    'source' => 0, //0系统分配；1机会分配；2自主认领；3主管锁定；
				    'expire_time' => time()+86400, //下次跟进时间戳，根据具体业务选择是否传递
				);
				$follow_service->follow($params);
				$s_allot->createlog($val['user_id'],$user,1);
				$s_allot->processed($val['user_id']);
				$s_allot2->processed($val['user_id']);
				$s_allotuser = new zbj_service_manager($user);
				$this->addLog ( $val ['user_id'], '签约服务商分配服务顾问分配给'.$s_allotuser->get('name'), 'user' );
			}
			var_dump($folldata);
			$floll_model->update(array('log_id'=>1),$folldata);
		}


	}
	/**
	 * 机会分配
	 */
	public function pageallotchance($inPath){
	    exit;
		header('Content-Type:text/html;charset=utf-8');
		if(date ( 'H:i:s' ) <= '09:30:00'){
			return '没有到分配时间';
		}
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$s_allot = new zbj_service_allot ( 6 );
		if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return '没有在线客服';
		}
		//分配数量
		$allotnum=5;
		//在特殊时段自动减少分配
// 		if(date('H:i:s') > '07:00:00' && date('H:i:s')<'09:05:00'){
// 			$allotnum=5;
// 		}
		// 		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
		// 			$allotnum=5;
		// 		}
// 		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
// 			$allotnum=5;
// 		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		//取要分配的任务
		$m_chance=new zbj_model_mb_chance();
		$m_chance->setLimit($allotnum);
		$condition=array();
		$condition ['saler_id'] = 0;
		$chance = $m_chance->select ( $condition, 'chance_id,user_id,possible_user_id,tel,saler_id' )->items;
		//排除不分配的人员。
		$timeoutuser=array();//超期机会
		$condition=array();
		$condition [] = 'saler_id!=0';
		$condition [] = "possible_user_id!=0";
		$condition [] = 'follow_time<'.time();
		$condition [] = 'status=1';
		$timeoutchance = $m_chance->select ( $condition, 'distinct saler_id')->items;
		if(is_array($timeoutchance)){
			foreach ($timeoutchance as $val){
				array_push($timeoutuser, $val['saler_id']);
			}
		}
		echo '超期的用户ID'.implode(',', $timeoutuser).'<br>';
		$noprocessgt5user=array();//超额机会没有处理大于 5个。
		$condition=array();
		$condition [] = 'saler_id!=0';
		$condition ['status'] = 1;
		$condition ['possible_user_id'] = 0;
		$noprocessgt5chance = $m_chance->select ( $condition, 'saler_id','group by saler_id having count(1)>=5')->items;
		if(is_array($noprocessgt5chance)){
			foreach ($noprocessgt5chance as $val){
				array_push($noprocessgt5user, $val['saler_id']);
			}
		}
		echo '超额5个的的用户ID'.implode(',', $noprocessgt5user).'<br>';
		if (is_array ( $chance ) && count($chance)) {
			foreach($chance as $item){
				echo "开始分配机会{$item['chance_id']}给销售顾问";
				if($s_allot->isprocessed($item['chance_id'])){//已经处理跳过
					echo ",需求已处理直接跳过<br />";
				}
				$log='机会分配';
				$s_chance=new service_chance($item['chance_id']);
				$user=0;
				if(!$user){
					if($s_chance->get('possible_user_id')){//是否有用户信息
						$s_user=new zbj_service_user($s_chance->get('possible_user_id'));
						$user=$s_user->get('info.saler_id');
						if($user){
							$log.='锁定销售分配，';
						}
					}
				}
				if(!$user){//三天内同一电话分配
					$condition=array();
					$condition[]="saler_id!=0";
					$condition['tel']=$s_chance->get('tel');
					$condition [] = 'create_time>='.intval( $s_chance->get('create_time'))-259200;
					$oldchance=$m_chance->selectOne($condition,'saler_id',null,'order by chance_id desc');
					if($oldchance['saler_id']){
						if(in_array($oldchance['saler_id'], $s_allot->getusers(1))){
							$user=$oldchance['saler_id'];
							$log.='三天内重复来自同一电话机会分配，';
						}else{
							$log.='三天内重复来自同一电话机会但是销售不在线，';
						}
					}
				}
				if(!$user){//三天内同一可能用户分配
					if($s_chance->get('possible_user_id')){
						$condition=array();
						$condition[]="saler_id!=0";
						$condition['possible_user_id']=$s_chance->get('possible_user_id');
						$condition [] = 'create_time>='.intval( $s_chance->get('create_time'))-259200;
					}
					$oldchance=$m_chance->selectOne($condition,'saler_id',null,'order by chance_id desc');
					if($oldchance['saler_id']){
						if(in_array($oldchance['saler_id'], $s_allot->getusers(1))){
							$user=$oldchance['saler_id'];
							$log.='三天内重复来自同一可能用户机会分配，';
						}else{
							$log.='三天内重复来自同一可能用户机会但是销售不在线，';
						}
					}
				}
				if(!$user){
					$user=$s_allot->getnextuser(1,0,1,0,null,null,array_merge($timeoutuser));
					$log.='平均分配：';
				}
				if(!$user){
					echo '目前没有适合的在线客服，下一次重新分配<br />';
					continue;
				}
				if($s_chance->allot($user, time()+14400)){
					$s_allot->createlog ( $s_chance->get ( 'chance_id' ), $user, true );
					$s_allot->processed ( $s_chance->get ( 'chance_id' ) );
// 					$this->addLog($s_chance->get('chance_id'),$log,0,time());
					echo "<font color=red>分配成功", $s_chance->get('chance_id'), '分配给用户ID ',$user,"</font>";
				}else{
					echo "<font color=red>分配失败", $s_chance->get('chance_id'), '原因:',$s_chance->getError()."</font>";
				}
			}
		}else{
			echo '没有任务进行分配<br />';
		}
	}
	/**
	 * 下线所有的客服
	 *
	 * @param unknown $inPath
	 */
	public function pageallofflineglz($inPath) {
		header('Content-Type:text/pain;charset=utf-8');
// 		exit;
		$m_allot = new zbj_model_cp_allot ();
		$aallot=$m_allot->select(array('state'=>1,'isonline'=>1))->items;
		if($aallot){
			$s_cpallot=new service_cpallot();
			foreach ($aallot as $allot){
				$s_cpallot->off($allot['manager_id']);
			}
			echo "完成\r\nfsd";
		}else{
			echo '没有用户';
		}
// 		$m_allot->update ( 'state=1', 'isonline=0' );
	}
	/**
	 * 清理用户在线每5分钟执行一次。
	 * @param unknown_type $inPath
	 */
	public function pagecleanonlinenew($inPath){
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$m_cpuser=new zbj_model_cp_user();
		$condition=array();
		$condition[]="group_id !=22";
		$m_cpuser->select();
		$m_cpuser->update($condition,array('isonline'=>0));
		$cache = new zbj_lib_cache('memcache');
// 		$name = $_GET['name'];
		$cache->del("cp_onjobusers");
		return true;
	}
	/**
	 * 获取网建开发的基础3级分类id
	 * */
	private function getSpecialWBCategoryid(){
		$moduleCategoryModel = new model_mk_modulecategory();
        $caterorycfg = $moduleCategoryModel->select('module_id=2','distinct category_id')->items;
        $caterorycfg = (array)$caterorycfg;
        
        $cateroryids = array();
        foreach($caterorycfg as $cat){
            //排除软件开发类的单子。
            if(!in_array($cat['category_id'], array(1337,1331,381,382))){
        		$cateroryids[] = $cat['category_id'];
            }
        }
        return $cateroryids;
	}
	public function pageallottaskmanager2($inPath){
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		if(date('H:i:s') > '23:00:00'){
			return '不在分配时间内';
		}
		if(date('H:i:s') < '09:00:00'){
			return '不在分配时间内';
		}
		//分配数量
		$allotnum=80;
		//在特殊时段自动减少分配
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=20;
		}
// 		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
// 			$allotnum=5;
// 		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=20;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		$m_task = new zbj_model_mk_task ();
		$m_task->setDbEntry(true);
		$m_task->setLimit($allotnum);
		$condition=array();
		$condition[]="state<=2";
		$condition[]="mode in (10,13)";
		$condition ['manager_id2'] = 0;
		$condition['open_state']=0;
		$day15 = date('Y-m-d',strtotime('-15 day'));
		$condition [] = "createymd>='{$day15}'";
// 		$condition [] = "createtime<" . (time() -300);
		$condition ['nopass'] = 0;
		$condition [] = 'isaudit in(0,1)';
		$condition ['audit_state'] = 0;
		$condition[] = 'manager_id=0';
       
		$allotUserMode = zbj_model_api::get('zbj_model_mk_allotuser');
		$condi[]="isonline=1";
		$condi[]="status=1";
		$allManager=$allotUserMode->select($condi,'manager_id')->items;
		$cache = new zbj_lib_cache('memcache');
		$cacheKey = 'task.zhubajie.newbid.toverify.manager_total_num.date='.date('Y-m-d',time());

		$task = $m_task->select ( $condition, 'mk_task.task_id,mk_task.mode,user_id,manager_id2,createtime,mk_task.category_id',null,null,array('mk_task_opis'=>'mk_task_opis.task_id=mk_task.task_id') )->items;
		if (is_array ( $task ) && count($task)) {
			foreach($task as $item){
				#2015929
				$checkVerify=$this->checkTaskNeedVerify($item['task_id']);
				if($checkVerify==false){
					continue;
				}

				echo "开始分配需求{$item['task_id']}给客服2";
// 				if($s_allot->isprocessed($item['task_id'])){//已经处理跳过
// 					echo ",需求已处理直接跳过<br />";
// 					continue;
// 				}
				$s_task=new zbj_service_task($item['task_id']);
				$s_task=$s_task->init();
				if($s_task->get('task_opis.nopass')==381){
					echo "已购搜索引擎直接跳过<br />";
					continue;
				}
// 				$condition=array();
// 				$condition['mode']=10;
// 				$condition ['user_id'] = $s_task->get('user_id');
// 				$condition [] = 'manager_id2!=0';
// 				$condition [] = 'createtime>='.intval( $s_task->get('user_id'))-7200;
// 				$oldtask=$m_task->selectOne($condition,'manager_id2',null,'order by task_id desc');
				$log='审核专员分配';
// 				if($oldtask['manager_id2'] && in_array($oldtask['manager_id2'], $s_allot->getusers(1))){
// 					$user_id=$oldtask['manager_id2'];
// 					$log.='两小时内重复发布分配给客服:';
// 				}else{
// 					$user_id=$s_allot->getnextuser(1,1);
// 					$log.='分配给新客服:';
// 				}
                if($s_task->get('mode')==13){//招标
                    $config_id=127;
					$managerVerifyNum = $cache->get($cacheKey);
					$minArray=array();
					if($managerVerifyNum){
						foreach($managerVerifyNum as $mid=>$mValue){
							if(!$minArray){
								$minArray['num']=$mValue['num'];
								$minArray['manager_id']=$mid;
							}
							else{
								if($minArray['num']>$mValue['num']){
									$minArray['num']=$mValue['num'];
									$minArray['manager_id']=$mid;
								}
							}
						}
					}
					if($allManager){
						foreach($allManager as $managerValue){
							if(!$managerVerifyNum[$managerValue['manager_id']]){
								$user_id=$managerValue['manager_id'];
								break;
							}
							else{
								if($managerVerifyNum[$managerValue['manager_id']]['num']<=(int)$minArray['num']){
									$user_id=$managerValue['manager_id'];
								}
							}
						}
					}
                }
                else if($s_task->get('mode')==10){//比稿
                    if($s_task->get('allot')==3){//计件
                        $config_id=129;
                    }else{
                        $config_id=128;
                    }
					$s_allot=new zbj_service_allot($config_id);
					$user_id=$s_allot->getnextuser(1,0);
                }
				$log.='分配审核专员:';
				if(!$user_id){
					echo '目前没有适合的在线客服，下一次重新分配<br />';
					continue;
				}
				$s_manager = new zbj_service_manager ( $user_id );
				$log.=$s_manager->get('name');
				$s_task->set ( 'manager_id2', $s_manager->get ( 'user_id' ) );
				$s_task->set ( 'manager_name2', $s_manager->get ( 'name' ) );
				if($s_task->save()){
					//更新需求分配审核时间
					if($s_task->get('mode')==13){
						$managerVerifyNum[$user_id]['num']=(int)$managerVerifyNum[$user_id]['num']+1;
						$managerVerifyNum[$user_id]['taskIdArray'][]=$item['task_id'];
						$cache->set($cacheKey, $managerVerifyNum, 86400);
					}
                    $s_task->updateTaskExtends(array("allot_audit_time"=>time()));

					$s_allot->createlog ( $s_task->get('task_id'), $s_manager->get ( 'user_id' ), true );
					$sLog = new service_log();
					$sLog->addLog(0, $s_task->get('task_id'), $log);
					echo $log;
				}else{
					echo "<font color=red>分配失败", $item ['task_id'], '原因:',$s_task->getError()."</font>";
				}
			}
		}else{
			echo '没有需求要进行分配 。<br />';
		}
	}
	public function pagereallottaskmanager2($inPath){
		if($_REQUEST['debug']){
		    define('DEBUG', 1);
		}
		if(date('H:i:s') > '23:00:00'){
		    return '不在分配时间内';
		}
		if(date('H:i:s') < '09:00:00'){
		    return '不在分配时间内';
		}
		//分配数量
		$allotnum=80;
		//在特殊时段自动减少分配
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=20;
		}
// 		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
// 			$allotnum=5;
// 		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=20;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		$m_task = new zbj_model_mk_task ();
		$m_task->setLimit($allotnum);
		$condition=array();
		$day15 = date('Y-m-d',strtotime('-15 day'));
		$condition[] = 'state<=2';
		$condition[] = "createymd>='{$day15}'";
		$condition[]="mode in (10,13)";
		$condition[] = 'isaudit in(0,1)';
		$condition['audit_state'] = '3';
		$condition['nopass'] = 0;
		$condition['manager_id2'] = 0;
		$condition[] = 'manager_id=0';
		$leftjoin =array('mk_task_opis'=>'mk_task_opis.task_id=mk_task.task_id');
		$task = $m_task->select ( $condition, 'mk_task.task_id,user_id,manager_id2,createtime,category_id',null,null,$leftjoin )->items;
		if (is_array ( $task ) && count($task)) {
			$nowdate = date('Y-m-d');
			foreach ( $task as $item ) {
				#2015929
				$checkVerify=$this->checkTaskNeedVerify($item['task_id']);
				if($checkVerify==false){
					continue;
				}

				echo "需求被修改后重新分配或提醒分配需求{$item['task_id']}给客服2";
				$s_task=new zbj_service_task($item['task_id']);
				$s_task=$s_task->init();
				if($s_task->get('mode')==13){//招标
				    $config_id=127;
				}
				if($s_task->get('mode')==10){//比稿
				    if($s_task->get('allot')==3){//计件
				        $config_id=129;
				    }else{
				        $config_id=128;
				    }
				}
				$s_allot=new zbj_service_allot($config_id);
				if($s_task->get('task_opis.nopass')==381){
					$s_task->set ( 'manager_id2', 0 );
					$s_task->set ( 'manager_name2', '' );
					$s_allot->delridlog($item ['task_id']);
					$s_task->save();
					echo "已购搜索引擎直接跳过<br />";
					continue;
				}
// 				if(!$s_allot4->isprocessed($item ['task_id'])){
// 					echo '需求未处理，不用重新分配。<br />';
// 					continue;
// 				}
// 				$s_allot4->reprocess($item ['task_id']);
				$user_id=$s_allot->getnextuser(1,0);
				$s_allot->delridlog($item ['task_id']);
// 				$user_id=$s_allot4->getriduser ( $item ['task_id'] );
				$log='';
// 				if($user_id){
// 					if(in_array($user_id, $s_allot4->getusers(1,0))){
// 						$log.='原客服在线';
// 					}
// 					if(in_array($user_id, $s_allot4->getusers(1,1))){
// 						$log .= '未超出阀值直接分配给原客服:';
// 					}else{
// 						$log .= '超出阀值分配给新客服:';
// 						$user_id=$s_allot4->getnextuser(1,1);
// 					}
// 				}else{
// 					$user_id=$s_allot4->getnextuser(1,1);
// 					$log .= '分配新客服:';
// 				}
				$user_id=$s_allot->getnextuser(1,0);
				$log .= '分配新客服:';
				$s_manager = new zbj_service_manager ( $user_id );
				$log .= $s_manager->get('name');
				if($s_allot->getriduser($item ['task_id'])!=$user_id){
					$s_allot->createlog($item ['task_id'],$user_id,true);
					$s_task->set ( 'manager_id2', $s_manager->get ( 'user_id' ) );
					$s_task->set ( 'manager_name2', $s_manager->get ( 'name' ) );
					$s_task->save();
					$sLog = new service_log();
					$sLog->addLog(0, $s_task->get('task_id'), $log);
				}
				echo $log.'<br />';
			}
		} else {
			echo '没有需求要进行分配 。<br />';
		}
	}
	/**
	 * 订单审核重新分配
	 * @param unknown $inPath
	 */
	public function pageallottaskmanager2timeout($inPath){
		if($_REQUEST['debug']){
		    define('DEBUG', 1);
		}
		if(date('H:i:s') > '23:00:00'){
		    return '不在分配时间内';
		}
		if(date('H:i:s') < '09:00:00'){
		    return '不在分配时间内';
		}
		$s_allot4 = new zbj_service_allot ( 0,4 );
// 		$onlineuser=$s_allot4->getusers ( 1, 0 );
// 		if (count ( $onlineuser ) == 0) {
// 			return '没有在线客服';
// 		}
		$allots=$s_allot4->getreallotrid(80,1);
		$s_manager=new service_manager();
		foreach($allots as $val){
			echo "需求超时后重新分配或提醒分配需求{$val['rid']}给客服2";
			$s_task=new zbj_service_task($val['rid']);
			$s_task=$s_task->init();
			if($s_task->get('mode')==13){//招标
			    $config_id=127;
			}
			if($s_task->get('mode')==10){//比稿
			    if($s_task->get('allot')==3){//计件
			        $config_id=129;
			    }else{
			        $config_id=128;
			    }
			}
			$s_allot=new zbj_service_allot($config_id);
			if($s_allot->isprocessed($val['rid'])){
				echo '需求未处理，不用重新分配。<br />';
			}
			//测是否已经真正处理过
			if($val['rid']<=3288289){
				$s_allot->processed($val['rid']);
				echo '小于3288289需求直接标记已处理<br />';
				continue;
			}
			
			if($s_task->get('task_info.pub_type')==9){
				$s_allot->processed($val['rid']);
				echo '新撮合订单标记已处理。<br />';
				continue;
			}
			if($s_task->get('task_opis.nopass')==381){
				$s_task->set ( 'manager_id2', 0 );
				$s_task->set ( 'manager_name2', '' );
				$s_allot->delridlog($val['rid']);
				$s_task->save();
				echo "已购搜索引擎直接跳过<br />";
				continue;
			}
			if(in_array($s_task->get('audit_state'),array(1,2,4,5))){ // 1审核通过,2关闭,4新跟进,5撮合 的直接跳过，不分配 lidacheng
				$s_allot->processed($val['rid']);
				echo '任务已审核标记已处理<br />';
				continue;
			}
			if($s_task->get('state')==4){
				$s_allot->processed($val['rid']);
				echo '任务已结束标记已处理。<br />';
				continue;
			}
			if($s_task->get('open_state')==1){
				$s_allot->processed($val['rid']);
				echo '任务已关闭标记已处理<br />';
				continue;
			}

			$user=$s_allot->getriduser($val['rid']);
// 			if(in_array($user, $onlineuser)){
// 				$s_allot4->reprocess($val['rid']);
// 			}else{
// 				$user=0;
// 			}
			if(!$user){
				$user=$s_allot->getnextuser(1,1,1,0,date('Y-m-d'));
			}
			$s_manager->setId($user);
			$s_task->set ( 'manager_id2', $s_manager->get ( 'user_id' ) );
			$s_task->set ( 'manager_name2', $s_manager->get ( 'name' ) );
			if($s_task->save()){
				$sLog = new service_log();
				$sLog->addLog(0, $s_task->get('task_id'), "超期未审核重新进行分配审核专员：".$s_manager->get ( 'name' ));
				$s_allot->createlog($val['rid'],$user,1,1);
				echo '分配成功新客服ID',$user,'帐号',$s_manager->get ( 'name' ),'。<br />';
				continue;
			}else{
				echo "<font color=red>分配失败", $val ['task_id'], '原因:',$s_task->getError()."</font>";
			}
		}

	}
	/**
	 * 雇佣与服务订单分配，2015-01-14停止分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageallottaskforbuymanager2($inPath){
		return '功能下线';
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		if(date('H:i:s') > '23:00:00'){
			return '不在分配时间内';
		}
		if(date('H:i:s') < '09:00:00'){
			return '不在分配时间内';
		}
		$s_allot = new zbj_service_allot ( 17 );
		if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return '没有在线客服';
		}
		//分配数量
		$allotnum=80;
		//在特殊时段自动减少分配
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=20;
		}
		// 		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
		// 			$allotnum=5;
		// 		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=20;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		$m_task = new zbj_model_mk_task ();
		$m_task->setLimit($allotnum);
		$condition=array();
		$condition[]="mode in (11,12)";
		$condition ['manager_id2'] = 0;
		$condition['open_state']=0;
		$condition [] = "createymd>='2014-04-08'";
// 		$condition [] = 'createtime<' . time()-300;
		$task = $m_task->select ( $condition, 'task_id,user_id,manager_id2,createtime' )->items;
		if (is_array ( $task ) && count($task)) {
			foreach($task as $item){
				echo "开始分配需求{$item['task_id']}给客服2";
// 				if($s_allot->isprocessed($item['task_id'])){//已经处理跳过
// 					echo ",需求已处理直接跳过<br />";
// 				}
				$s_task=new zbj_service_task($item['task_id']);
				$s_task=$s_task->init();
				if($s_task->get('task_opis.nopass')==381){
					$s_task->set ( 'manager_id2', 0 );
					$s_task->set ( 'manager_name2', '' );
					$s_allot->delridlog($item['task_id']);
					$s_task->save();
					echo "已购搜索引擎直接跳过<br />";
					continue;
				}
// 				$condition=array();
// 				$condition['mode']=10;
// 				$condition ['user_id'] = $s_task->get('user_id');
// 				$condition [] = 'manager_id2!=0';
// 				$condition [] = 'createtime>='.intval( $s_task->get('user_id'))-7200;
// 				$oldtask=$m_task->selectOne($condition,'manager_id2',null,'order by task_id desc');
				$log='审核专员分配';
// 				if($oldtask['manager_id2'] && in_array($oldtask['manager_id2'], $s_allot->getusers(1))){
// 					$user_id=$oldtask['manager_id2'];
// 					$log.='两小时内重复发布分配给客服:';
// 				}else{
// 					$user_id=$s_allot->getnextuser(1,1);
// 					$log.='分配给新客服:';
// 				}
				$user_id=$s_allot->getnextuser(1,1);
				$log.='分配给新客服:';
				if(!$user_id){
					echo '目前没有适合的在线客服，下一次重新分配<br />';
					continue;
				}
				$s_manager = new zbj_service_manager ( $user_id );
				$log.=$s_manager->get('name');
				$s_task->set ( 'manager_id2', $s_manager->get ( 'user_id' ) );
				$s_task->set ( 'manager_name2', $s_manager->get ( 'name' ) );
				if($s_task->save()){
					$s_allot->createlog ( $s_task->get('task_id'), $s_manager->get ( 'user_id' ), true );
					$sLog = new service_log();
					$sLog->addLog(0, $s_task->get('task_id'), $log);
					echo $log;
				}else{
					echo "<font color=red>分配失败", $item ['task_id'], '原因:',$s_task->getError()."</font>";
				}
			}
		}else{
			echo '没有需求要进行分配 。<br />';
		}
	}
	/**
	 * 雇佣与服务订单分配，2015-01-14停止分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pagereallottaskforbuymanager2($inPath){
		return '功能下线';
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$s_allot4 = new zbj_service_allot ( 17 );
		$onlineuser=$s_allot4->getusers ( 1, 0 );
		if (count ( $onlineuser ) == 0) {
			return '没有在线客服';
		}
		//分配数量
		$allotnum=80;
		//在特殊时段自动减少分配
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=200;
		}
	// 		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
	// 			$allotnum=5;
// 		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=5;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}
		$m_task = new zbj_model_mk_task ();
		$m_task->setLimit($allotnum);
		$condition=array();
		$condition[]="mode in (11,12)";
		$condition [] = "createymd>='2013-12-31'";
		$condition ['audit_state'] = '3';
		$condition ['manager_id2'] = 0;
		$task = $m_task->select ( $condition, 'task_id,user_id,manager_id2,createtime' )->items;
		if (is_array ( $task ) && count($task)) {
			foreach ( $task as $item ) {
				echo "需求被修改后重新分配或提醒分配需求{$item['task_id']}给客服2";
// 				if(!$s_allot4->isprocessed($item ['task_id'])){
// 					echo '需求未处理，不用重新分配。<br />';
// 					continue;
// 				}
				$s_allot4->delridlog($item ['task_id']);
// 				$user_id=$s_allot4->getriduser ( $item ['task_id'] );
				$log='审核分配';
// 				if($user_id){
// 					if(in_array($user_id, $s_allot4->getusers(1,0))){
// 						$log.='原客服在线';
// 					}
// 					if(in_array($user_id, $s_allot4->getusers(1,1))){
// 						$log .= '未超出阀值直接分配给原客服:';
// 					}else{
// 						$log .= '超出阀值分配给新客服:';
// 						$user_id=$s_allot4->getnextuser(1,1);
// 					}
// 				}else{
// 					$user_id=$s_allot4->getnextuser(1,1);
// 					$log .= '分配新客服:';
// 				}
				$user_id=$s_allot4->getnextuser(1,1);
				$log .= '分配新客服:';
				$s_manager = new zbj_service_manager ( $user_id );
				$log .= $s_manager->get('name');
				if($s_allot4->getriduser($item ['task_id'])!=$user_id){
					$s_allot4->createlog($item ['task_id'],$user_id,true);
					$s_task = new zbj_service_task ( $item ['task_id'] );
					$s_task = $s_task->init ();
					if($s_task->get('task_opis.nopass')==381){
						$s_task->set ( 'manager_id2', 0 );
						$s_task->set ( 'manager_name2', '' );
						$s_allot4->delridlog($item['task_id']);
						$s_task->save();
						echo "已购搜索引擎直接跳过<br />";
						continue;
					}
					$s_task->set ( 'manager_id2', $s_manager->get ( 'user_id' ) );
					$s_task->set ( 'manager_name2', $s_manager->get ( 'name' ) );
					$s_task->save();
					$sLog = new service_log();
					$sLog->addLog(0, $s_task->get('task_id'), $log);
				}
				echo $log.'<br />';
			}
		} else {
			echo '没有需求要进行分配 。<br />';
		}
	}
	/**
	* 订单审核重新分配
	* @param unknown $inPath
	*/
	public function pageallottaskforbuymanager2timeout($inPath){
		return "计划任务已中止";
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$s_allot4 = new zbj_service_allot ( 17 );
		$onlineuser=$s_allot4->getusers ( 1, 0 );
		if (count ( $onlineuser ) == 0) {
			return '没有在线客服';
		}
		$allots=$s_allot4->getreallotrid(20,1);
		$s_manager=new service_manager();
		foreach($allots as $val){
			echo "需求超时后重新分配或提醒分配需求{$val['rid']}给客服2";
			if($s_allot4->isprocessed($val['rid'])){
				echo '需求未处理，不用重新分配。<br />';
			}
			if($val['rid']<=3288289){
				$s_allot4->processed($val['rid']);
				echo '小于3288289需求直接标记已处理<br />';
				continue;
			}
			$s_task=new zbj_service_task($val['rid']);
			$s_task=$s_task->init();
			if($s_task->get('task_info.pub_type')==9){
				$s_allot4->processed($val['rid']);
				echo '新撮合订单标记已处理。<br />';
				continue;
			}
			if($s_task->get('task_opis.nopass')==381){
				$s_task->set ( 'manager_id2', 0 );
				$s_task->set ( 'manager_name2', '' );
				$s_allot4->delridlog($val['rid']);
				$s_task->save();
				echo "已购搜索引擎直接跳过<br />";
				continue;
			}
			if(in_array($s_task->get('audit_state'),array(1,2))){	// 排除4，禁止查看 lidacheng
				$s_allot4->processed($val['rid']);
				echo '任务已审核标记已处理<br />';
				continue;
			}
			if($s_task->get('state')==4){
				$s_allot4->processed($val['rid']);
				echo '任务已结束标记已处理。<br />';
				continue;
			}
			if($s_task->get('open_state')==1){
				$s_allot4->processed($val['rid']);
				echo '任务已关闭标记已处理<br />';
				continue;
			}

			$user=$s_allot4->getriduser($val['rid']);
			if(in_array($user, $onlineuser)){
				$s_allot4->reprocess($val['rid']);
			}else{
				$user=0;
			}
			if(!$user){
				$user=$s_allot4->getnextuser(1,1,1,0,date('Y-m-d'));
			}
			$s_manager->setId($user);
			$s_task->set ( 'manager_id2', $s_manager->get ( 'user_id' ) );
			$s_task->set ( 'manager_name2', $s_manager->get ( 'name' ) );
			if($s_task->save()){
				$sLog = new service_log();
				$sLog->addLog(0, $s_task->get('task_id'), "超期未审核重新进行分配新客服名".$s_manager->get ( 'name' ));
				$s_allot4->createlog($val['rid'],$user,1,1);
				echo '分配成功新客服ID',$user,'帐号',$s_manager->get ( 'name' ),'。<br />';
				continue;
			}else{
				echo "<font color=red>分配失败", $val ['task_id'], '原因:',$s_task->getError()."</font>";
			}
		}
	}
	/**
	 * 新网建订单分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageallotwebdev($inPath){
	   return '功能已转移';
	}
	/**
	 * 订单新规则分配
	 * 
	 */
	public function pagepreallottask($inPath)
    {
        // 优化分配新网建
        // 功能已转移
      //  $crontabObj = new controller_crontab_allotwebdev();
      //  $crontabObj->allottask();
        self::pageallottaskmanager2($inPath);
    }
	/**
	 * 交易客服3分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageallottaskmanager3($inPath){
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}

		//分配数量
		$allotnum=80;
		//在特殊时段自动减少分配
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=20;
		}		
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=20;
		}

		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}

		if($allotnum>100){
			echo "批量处理的数据不能超过100条记录";
			exit();
		}

		$condition=array();
		$condition['mk_task_opis.manager_id3'] = 0;
		$condition['open_state']=0;
		$day30 = date('Y-m-d',strtotime('-30 day'));
		$condition[] = "createymd>='{$day30}'";		 
		$condition[] = 'createtime<' . (time()-300);
		$condition[] = 'mk_task.state>1';
		$condition[] = 'mk_task.works_num>0';
		$leftjoin=array('mk_task_opis'=>'mk_task.task_id=mk_task_opis.task_id');

		$m_task = new zbj_model_mk_task ();
		$m_task->setLimit($allotnum);		
		$task = $m_task->select ( $condition, 'mk_task.task_id,user_id,manager_id3,createtime',null,null,$leftjoin )->items;
		if (is_array ( $task ) && count($task)) {
			
			$s_manager = new zbj_service_manager( );	
			$sLog = new service_log();
			$modelreport = new zbj_model_mb_report();

			foreach($task as $item){
				echo "开始分配需求{$item['task_id']}给客服3";
				
				$s_task = new zbj_service_task($item['task_id']);
				$s_task = $s_task->init();	
				$manager_id3 = $s_task->get('task_opis.manager_id3');
				if(!empty($manager_id3)){
					echo '已经分配有用户直接跳过<br />';
					continue;
				}

				$user_id = $this->getThriftUser($s_task);				
				if(!$user_id){
					echo '目前没有适合的在线客服，下一次重新分配<br />';
					continue;
				}	

				$s_manager->setId($user_id);
				$manager_id3 = $s_manager->get ( 'user_id' );			
				$s_task->set ( 'task_opis.manager_id3',  $manager_id3);

				if($s_task->save()){
					$log='分配售后客服:';
					$log.=$s_manager->get('name');
					$sLog->addLog(0, $item['task_id'], $log);					
					
					$reportNum1 = $modelreport->selectOne("o_type=1 and o_bel_id = {$item['task_id']}","count(1) as num");
					if($reportNum1['num']>0){
					    $modelreport->update("o_type=1 and o_bel_id = {$item['task_id']}",array('manage_id'=>$manager_id3));
					}
					$reportNum2 = $modelreport->selectOne("(o_type=2 and o_id = {$item['task_id']})","count(1) as num");
					if($reportNum2['num']>0){
					    $modelreport->update("o_type=2 and o_id = {$item['task_id']}",array('manage_id'=>$manager_id3));
					}
					echo $log."<br/>";
				}else{
					echo "<font color=red>分配失败", $item ['task_id'], '原因:',$s_task->getError()."</font>";
				}
			}
		}else{
			echo '没有需求要进行分配 。<br />';
		}
	}
	/**
	* 通过服务化接口获取争议客服
	*/
	private function getThriftUser($srvTask){
		if(!is_object($srvTask)){
			return 0;
		}
		$taskdata = $srvTask->get();
		if(empty($taskdata)){
			return 0;
		}
		$works_user_id = 0;
		if($taskdata['state'] == 3){
			if(in_array($taskdata['mode'],array(11,12))){
				$order = $srvTask->getOneWinOrder();
			}else{
				$ptype = $srvTask->getTaskToOrderMode();
				$condition = array(
					'fn_order_data.stype'		=>16,
					'fn_order_data.ptype'		=>$ptype,
					'fn_order.product_pkid'		=>$taskdata['task_id'],
				);
				$condition[] = "fn_order.state in(0,1)";				
				$item = array('fn_order.*');
				$leftjoin = array(
					'fn_order'=>'fn_order.order_id = fn_order_data.order_id',
				);
				$model = zbj_model_api::get('zbj_model_fn_orderdata');				
				$order = $model->selectOne($condition, $item, '', 'order by fn_order.order_id', $leftjoin);
			}
			if(!empty($order)){
				$works_user_id = $order['sl_user_id'];
			}	
		}

		try{
			zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,30);
			$instance = new com\zhubajie\user\interfaces\ReportGroupServiceClient(null);
			zbj_lib_ApiClient::build($instance);

			$userparamDO = new com\zhubajie\user\dataobject\reportgroup\GetUserParamDO();
			$userparamDO->category1id = $taskdata['category1id'];
			$userparamDO->category2id = $taskdata['category2id'];
			$userparamDO->category_id = $taskdata['category_id'];
			$userparamDO->amount = $taskdata['amount'];
			if($works_user_id>0){
				$userparamDO->user_id = $works_user_id;	
			}

			$cp_user_id = $instance->getUserByGroup($userparamDO);

			return empty($cp_user_id)?0:$cp_user_id;

		}catch(Exception $e){
			return 0;
		}	


	}
	/**
	 * 八戒画像分配
	 */
	public function pageallotbajiehua($inPath){
	    $conditon=array();
	    $condition[]= 'mode in(11,12)';
	    $condition['mk_task_info.succeed_user_id']=10340497;
	    $condition['createymd']=date('Y-m-d');
	    $condition['state']=3;
	    $condition['open_state']=0;
	    $condition['manager_id']=0;
	    $m_task=new zbj_model_mk_task();
	    $m_task->setLimit(5);
	    $leftjoin = array(
            'mk_task_info' => 'mk_task_info.task_id=mk_task.task_id'
        );
// 	    define('DEBUG',0);
	    $tasks=$m_task->select($condition,'mk_task.task_id','','',$leftjoin)->items;
	    if(is_array($tasks)){
	        //程媛圆
	        $s_manager=new service_manager(944);
	        $data=array();
	        $data['manager_id']=$s_manager->get('user_id');
	        $data['manager_name']=$s_manager->get('truename');
	        $data['manager_teamid']=$s_manager->get('group_id');
	        foreach ($tasks as $task){
	            $back = $m_task->update(array('task_id'=>$task['task_id']),$data);
	            var_dump($back);
	        }
	    }
	}
	/**
	 * 新板分配计划
	 * 输入 参数 config_id 20-31
	 * @param unknown_type $inPath
	 * @return string
	 */
	public function pageallottaskid1($inPath) {
		header('Content-type:text/plain');
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$m_category=new zbj_model_mk_category();
		$category_id=zbj_lib_BaseUtils::getStr($_REQUEST['category_id'],'int');//三级分类ID
		$category=$m_category->selectOne(array('category_id'=>$category_id));
		$category2_id=$category['category2id'];
		$category1_id=$category['category1id'];
		if($category2_id<=0){
			return '分类2出错';
		}
		if($category1_id<=0){
			return '分类1出错';
		}
		$s_module=new service_module();
		$modconfig=$s_module->getModuleByCategoryId($category_id);//传三级分类
// 		$config_id=$modconfig['task_process_allot_id'];

// 		$config_id=zbj_lib_BaseUtils::getStr($_REQUEST['config_id'],'int');
// 		if (! in_array ( $config_id, array (22,23,24,25,26,27,28,29,30,31) )) {
// 			return "config_id分配参数不合法,";
// 		}
// 		$s_allot = new zbj_service_allot ( $config_id );
// 		if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
// 			return "没有在线用户";
// 		}
		$urlparams = $this->getUrlParams ( $inPath );
		$m_task = new zbj_model_mk_task ();
//$cache = new zbj_lib_cache('memcache');
//$basenum=$cache->get('cp.allottasknum')?$cache->get('cp.allottasknum'):0;
		//分配数量
		$allotnum=20;
		//在特殊时段自动减少分配
		if(date('H:i:s')<'09:00:00'){
			$allotnum=0;
			return "不在分配时段不进行分配,";
		}
		if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
			$allotnum=5;
		}
		if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
			$allotnum=15;
		}
		if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
			$allotnum=10;
		}
		if($_GET['allotnum']){
			$allotnum=intval($_GET['allotnum']);
		}

		$s_category=new service_category($category_id);
		$did=zbj_lib_BaseUtils::getStr($_REQUEST['did'],'int');
		if($did<=0){
			return "did为0了。";
		}
		$conditions=$s_category->getAllotCondition($did);
		$m_task->setLimit ( $allotnum );
		$allotmap=array();
		$allotmap[375]='立即分配';
		$allotmap[376]='暂不分配';
		$allotmap[377]='进入资源库';
		$allotmap[378]='延迟分配';
		foreach ($conditions as $val){
			var_dump($val);
			echo '分配类型:'.$allotmap[$val['allot_type']],',维度:'.$val['wedu'],'config_id:',$val['allot_config_id'];
			$config_id=intval($val['allot_config_id']);
			if($config_id<=0){
				echo '分配队列不存在'.PHP_EOL;
				continue;
			}
			$s_allot = new zbj_service_allot ( $config_id );
			if($s_allot->get('pid')!=1){
				echo '队列出错，指定的队列不是订单分配队列。',PHP_EOL;
				continue;
			}
			if (count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
				echo '队列没有在线用户'.PHP_EOL;
				continue;
			}
			if($val['allot_type']==376){
				echo "暂时不分配队列，直接跳过。".PHP_EOL;
				continue;
			}
			switch ($val['allot_type']){
				case 375://立即分配 包含调配库
				case 377://进入资源库
				case 378://延迟分配  包含调配库
					$condition=$val['condition'];
					$condition [] = "createymd>='2015-01-07'";
					$condition [] = "createtime<".(time()-900);
					$condition['manager_id']=0;
					$condition[]="state<4";
					$condition['open_state']=0;
					if($val['allot_type']==377){
						$condition['m_is_at']=0;//0未分配 ，1，已分配客服  2 是在调配库，3云客服
					}else{
						$condition[]="m_is_at in (0,2)";//0未分配 ，1，已分配客服  2 是在调配库，3云客服
					}
					$condition['category_id']=$category_id;//需要分配的三级ID
					$condition['category2id']=$category2_id;//需要分配的二级ID
					$condition['category1id']=$category1_id;//需要分配的一级ID
					if($did==6){//开发建站新版分配
					    if(!in_array($condition['category_id'], array(1337,1331,381,382))){
					        if(date('H:i:s')<'13:30:00'){
					            $condition['mode']=10;
					        }
					    }
					}
					break;
				default:
					return '';
					break;
			}
			if (defined ( 'DEBUG' ) && DEBUG) {
				echo '<br />分配条件' . var_export ( $condition, true );
			}
			$leftjoin=array();
			$leftjoin['mk_task_opis']='mk_task.task_id=mk_task_opis.task_id';
			$leftjoin['mk_task_info']='mk_task_info.task_id=mk_task.task_id';
			if($condition['mk_task.allot']==3){
			    $leftjoin['mk_task_allot']='mk_task_allot.task_id=mk_task.task_id';
			}
			$task = $m_task->select ( $condition, 'mk_task.task_id,mode,allot,user_id,createtime,ht,task_source,cpo_ishide,amount', null,null,$leftjoin)->items;
			if (is_array ( $task ) && count($task)) {
				$q_free = new SQueue ( "cp_task_manager_config_id_{$config_id}_free" );//普通需求队列
				$q_buy = new SQueue ( "cp_task_manager_config_id_{$config_id}_buy" );//一对一队列
				$q_newbid = new SQueue ( "cp_task_manager_config_id_{$config_id}_newbid" );//一对一队列
// 				if($did==6){//开发建站新版分配
// 				    //查找符合条件的
// 				    $s_allot=new zbj_service_allot(65);
// 				    $netallotuser=$s_allot->getusers(1);
// 				    if(count($netallotuser)>0){
// 				        //查询需要分配的用户
// 				        $m_allotconfig = new model_mk_allotconfig();
// 				        $condition=array();
// 				        $condition['year']=date('Y');
// 				        $condition['month']=date('m');
// 				        $condition[] = "`totalnum`>`allotednum`";
// 				        $condition[] = "`manager_id` in (".implode(',', $netallotuser).")";
// 				        $netallotconfig=$m_allotconfig->select($condition)->items;
// 				        if(count($netallotconfig)==0){
// 				            unset($netallotconfig);
// 				        }
// 				    }
// 				}
				// 					$basenum=0;
				foreach ( $task as $k => $v ) {
// 				    if($v ['mode']==13 && $did==6 && $netallotconfig){//做分配
// 				        //查找合适的单子。
// 				        if(is_array($netallotconfig)){
// 				            foreach ($netallotconfig as $netconfig){
// 				                if($v['amount']>=$netconfig['minamount'] && $v['amount']<=$netconfig['maxamount']){//符合分配金额
// 				                    $s_task=new zbj_service_task($v['task_id']);
// 				                    $s_task=$s_task->init();
// 				                    $s_manager=new service_manager($netconfig['manager_id']);
// 				                    $s_task->set('manager_id',$s_manager->get('user_id'));
// 				                    $s_task->set('manager_name',$s_manager->get('name'));
// 				                    $s_task->set('manager_teamid',$s_manager->get('group_id'));
// 				                    $s_task->set('task_info.pub_type',9);
// 				                    $s_task->set('audit_state',4);
// 				                    $s_task->set('cpo_ishide',1);
// 				                    $option = $s_task->getTaskInfoOption();
// 				                    $option = (array)$option;
// 				                    $option['recmtBidOnly'] = 1;
// 				                    $s_task->set("task_info.option", serialize($option));
// 				                    if($s_task->save()!==false){
// 				                    	$mdlTask = zbj_model_api::get('zbj_model_mk_task');
// 				                    	$mdlTask->upTaskSearch($v['task_id'],'U');
// 				                        $s_follow=new service_follow();
// 				                        $s_follow->updateSysLevel($s_task->get('task_id'), $chance_id=0,0);
// 			                            $s_allot->createlog ( $v['task_id'], $s_manager->get('user_id'), 1 );
// 		                                $s_allot->processed($v['task_id']);
// 				                        $this->addLog( $v['task_id'], '网建新规则分配');
// 				                        //分配给网建的单子不在分配给其它人员
// 				                        $crontabObj = new controller_crontab_allotwebdev();
// 				                        $crontabObj->flashtaskum(0);
// 				                        continue 2;
// 				                    }
// 				                }
// 				            }
// 				        }
// 				    }
					$from_mo=0;
					if(in_array($v['task_source'], array(1,6,7,8))){
						$from_mo=1;
					}
					if($from_mo==1){
						if(in_array($v ['mode'],array(11,12)) && $v['task_source']==7){//触屏版本的雇佣悬赏自动分配到移动队列。
							$m_is_at=1;
						}else{
							if($val['allot_type']==377){
								$from_mo=1;
								$m_is_at=1;
							}else{
								$from_mo=0;
								$m_is_at=1;
							}
						}
					}else{
						if($val['allot_type']==377){
							$m_is_at=2;
						}else{
							$m_is_at=1;
						}
					}
					if($from_mo){
						echo "分配任务".$v['task_id']."进入移动队列<br />";
					}
					if($v['mode']==10){
						$q_free->push ( serialize ( array (
								'task_id' => $v ['task_id'],
								'point' => 1,
								'm_is_at'=>$m_is_at,//是否进入调配库
								'from_mo'=>$from_mo,
								'msg'=>$val['msg']
						) ) );
						echo "分配任务".$v['task_id']."进入队列普通<br />";
						continue;
					}
					if(in_array($v['mode'], array(11,12))){
						$q_buy->push ( serialize ( array (
								'task_id' => $v ['task_id'],
								'point' => 1,
								'm_is_at'=>$m_is_at,//是否进入调配库
								'from_mo'=>$from_mo,
								'msg'=>$val['msg']
						) ) );
						echo "分配任务".$v['task_id']."进入队列一对一<br />";
						continue;
					}
					if(in_array($v['mode'], array(13))){
						$q_newbid->push ( serialize ( array (
								'task_id' => $v ['task_id'],
								'point' => 1,
								'm_is_at'=>$m_is_at,//是否进入调配库
								'from_mo'=>$from_mo,
								'msg'=>$val['msg']
						) ) );
						echo "分配任务".$v['task_id']."进入队列招标<br />";
						continue;
					}
					echo '任务不合法';
				}
			}else{
				echo  "没有任务分配".PHP_EOL;
			}
		}
	}
	/**
	 * 雇佣新分配队列
	 * @param unknown_type $inPath
	 * @return string
	 */
	public function pageAllottaskid1buyamqp($inPath) {
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$config_id=zbj_lib_BaseUtils::getStr($_REQUEST['config_id'],'int');
		$igonline=zbj_lib_BaseUtils::getStr($_REQUEST['igonline'],'int');
// 		if (! in_array ( $config_id, array (22,23,24,25,26,27,28,29,30,31) )) {
// 			return "config_id分配参数不合法,";
// 		}
		$s_allot = new zbj_service_allot ( $config_id );
		if ($s_allot->get ( 'pid' ) != 1) {
			return "此队列不是订单分配队列";
		}
		$s_allot_mo = new zbj_service_allot ( 2 );//移动团队
		if (!$igonline && count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return "没有在线用户";
		}
		if($_REQUEST['task_id']<=0){
			$q_buy = new SQueue ( "cp_task_manager_config_id_{$config_id}_buy" );//一对一队列
			//分配数量
			$allotnum=80;
			//在特殊时段自动减少分配
			if(date('H:i:s')<'09:00:00'){
				return "不在分配时段不进行分配,";
			}
			if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
				$allotnum=5;
			}
			if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
				$allotnum=15;
			}
			if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
				$allotnum=10;
			}
		}else{
			$allotnum=1;
		}
		$m_task=zbj_model_api::get('zbj_model_mk_task');
		//满足跟进未分配任务的用户
		$followcondition=array();
		$followcondition['is_followtimeout']=1;
		$followcondition['open_state']=0;
		$followcondition['hosted']=0;
		$followcondition[]="createymd>='".date('Y-m-d',time()-86400*30)."'";
		$followcondition[]="manager_id!=0";
		// 		define('DEBUG', $value);
// 		$followtimeoutuser=$m_task->select($followcondition,"manager_id,count(1) as num",'group by manager_id','having num>=1',array('mk_task_opis'=>'mk_task.task_id=mk_task_opis.task_id'))->items;
		$followtimeoutusers=array();
// 		if(count($followtimeoutuser)){
// 			foreach ($followtimeoutuser as $v){
// 				if($v['manager_id']!=204){//204的不存在超期的情况
// 					array_push($followtimeoutusers, $v['manager_id']);
// 				}
// 			}
// 		}
		if($igonline){
			$onlineuser=$s_allot->getusers(0);
		}else{
			$onlineuser=$s_allot->getusers(1);
			//204用户永远在线
// 			array_push($onlineuser, 204);
		}
		//行业类目
		$s_model=new service_module();
		//$category=$s_model->getCategoryIdStrByTaskProcessAllotId($config_id);
		//if($category==''){
		//	return "没有找到相应的分配类目ID";
		//}

		for($i = 0; $i < $allotnum; $i ++) {
			if($_REQUEST['task_id']<=0){
				$result = $q_buy->get ();
			}else{
				$result=serialize(array('task_id'=>$_REQUEST['task_id'],'point'=>9));
			}
			if (! $result) {
				echo "没有任务";
				break;
			}
			$data = unserialize ( $result );
			$s_log = new service_log();
			if ($data ['task_id'] && $data ['point']) {
				echo $data ['task_id'].'开始分配';
				$s_task=new zbj_service_task($data ['task_id']);
				$s_task=$s_task->init();
				if(count($s_task->get())==0){
					echo '任务不合法<br />';
					continue;
				}
				if($s_task->get("state")==4){
					echo '任务已结束<br />';
					continue;
				}
				if($s_task->get("open_state")==1){
					echo '任务已关闭<br />';
					continue;
				}
				$manager_id = $s_task->get('manager_id');
				if ($manager_id) {
					echo '任务已经分配，直接跳过<br />';
					continue;
				}
				$islockuser=false;
				$user=0;
				$mustend=false;
				//分配时间规划
				//$time_id=0;//分配后不重新排序
				//$time_id=1;//默认
				//$time_id=2;//无使用
				//$time_id=3;//平均分配
				$time_id=1;
				$from_mo=false;
				//是否被锁定
				$allottype='需求分配';
				if(!$user){
					if($data['from_mo']==1){
						$user=$s_allot_mo->getnextuser(1,0,$time_id);
						if($user){
							$from_mo=true;
							$allottype.="移动端任务分配";
						}else{
							$allottype.="移动端任务，但是是客服不在线";
						}
					}
				}
				if(!$user){
					if($data['m_is_at']==2){
						if($s_task->get('m_is_at')!=2){
							$s_log->addLog(0, $s_task->get('task_id'), '任务金额金额不符合进入资源库');
// 							$s_log->addLog(0, $s_task->get('task_id'), '任务金额金额不符合进入资源库'.var_export($data,true));
							$s_task->set('m_is_at',2);//进入调配库
							$s_task->save();
						}
						continue;
					}
				}
				if(!$user){
					$s_customer=new service_customer($s_task->get('user_id'));
					$user=$s_customer->checklock();
					if($user){
						$s_task->set('task_opis.islock',1);
						$mustend=true;
						$islockuser=true;
						$allottype.="锁定客户分配";
						$time_id=0;
// 						if(in_array($user,$onlineuser)){
// 							$s_task->set('task_opis.islock',1);
// 							$mustend=true;
// 							$islockuser=true;
// 							$allottype.="锁定客户分配";
// 							$time_id=0;
// 						}else{
// 							$user=0;
// 							$allottype.='锁定客户分配但是客服不在线，';
// 						}
					}
				}
				//重复发布分配同一人
				if(!$user){
					$condition=array();
					$condition ['user_id'] = $s_task->get('user_id');
					$condition [] = 'manager_id!=0';
					$condition [] = 'createtime>='.(intval( $s_task->get('createtime'))-259200);
					$condition[]="category_id in (".$s_task->get('category_id').")";//需要分配的三级ID
					$oldtask=$m_task->selectOne($condition,'manager_id,manager_name',null,'order by task_id desc');
					if($oldtask['manager_id']){
						if(in_array($oldtask['manager_id'],$onlineuser)){
							$user=$oldtask['manager_id'];
							$allottype.="雇主三天内再次发布的需求自动分配，";
							$s_task->set('task_opis.islock',0);
							$time_id=0;
						}else{
							$user=0;
							$allottype.='雇主三天内再次发布但是客服不在线，';
						}
					}
				}
// 				if(!$user){
// 					$condition=array();
// 					$condition['level']=3;
// 					$condition['is_pre']=1;
// 					$condition['is_delete']=0;
// 					$m_recordcat=new zbj_model_mk_recordcategory();
// 					$tmpcats=$m_recordcat->select($condition,'category_id')->items;
// 					if($tmpcats){
// 						$ids=lib_BaseUtils::array2Single($tmpcats, 'category_id');
// 						$m_record=new zbj_model_mk_record();
// 						$records=$m_record->selectOne(array("category_id in ({$ids})",'user_id'=>$s_task->get('user_id'),"create_date>='".date('Y-m-d',$this->_time-86400)."'","allotask_id=0"),'manager_id,manager_name,sign,record_id');
// 						if($records['manager_id']){
// 							if(in_array($records['manager_id'],$onlineuser)){
// 								$user=$records['manager_id'];
// 								$allottype.="根据{$records['record_id']}售前记录分配.";
// 								$time_id=0;
// 							}else{
// 								$user=0;
// 								$allottype.="根据{$records['record_id']}售前记录但是客服不在线.";
// 							}
// 						}
// 					}
// 				}
				if(!$user){
					if($igonline){
						$user=$s_allot->getnextuser(0,0,3,0,date('Y-m-d'),array(),$followtimeoutusers);//检查当天任务量没有超出阀值 的用户。
					}else{
						$user=$s_allot->getnextuser(1,0,3,0,date('Y-m-d'),array(),$followtimeoutusers);//检查当天任务量没有超出阀值 的用户。
					}
					if($user){
						$time_id=3;
						$allottype.="雇佣平均分配";
					}
				}
				if(!$user){//没有找到找老客服和下一个客服
					echo '没有合适的在线用户，下次重新分配。<br />';
					continue;
				}
				if($s_task->get("hosted")==1){//任务平均分配
					$mustend=true;
				}
				if($igonline){
					$mustend=true;
				}
				if(in_array($user, $s_allot->getusers(0)) && !in_array($user, $onlineuser)){
					$s_task->set('task_opis.is_offline_allot',1);
				}

				$s_manager = new zbj_service_manager ( $user );
				$s_task->set ( 'manager_id', $s_manager->get ( 'user_id' ) );
				$s_task->set ( 'manager_name', $s_manager->get ( 'name' ) );
				$s_task->set ( 'manager_teamid', $s_manager->get ( 'group_id' ) );
				$s_task->set('m_is_at',1);//从调配库移除
				//处理去客服
				$s_record=new service_record();
				$s_record->upTaskCloud($s_task->get('task_id'));
//判断是否老用户分配
// 				$s_user=new zbj_service_user($s_task->get('user_id'));
// 				$isnew=0;
// 				if($s_user->get('count.newbid_buy_amount')+$s_user->get('count.free_buy_amount')){
// 					$s_task->set('task_opis.showtime',intval($s_task->get('createtime'))+1800);//
// 					$isnew=2;
// 				}else{
// 					$s_task->set('task_opis.showtime',intval($s_task->get('createtime'))+900);//
// 					$isnew=1;
// 				}
				if($s_task->save()){
					$s_cptask=new service_task($data ['task_id']);
					$s_cptask->addmanagerchangelog($user);
					if($from_mo){
						$s_allot_mo->createlog ( $data ['task_id'], $user, $time_id );
					}else{
						$s_allot->createlog ( $data ['task_id'], $user, $time_id );
						if($mustend){
							$s_allot->processed($data['task_id']);
						}
					}
					$log='新行业运营一对一交易顾问分配,分配维度:'.$data['msg']. $data ['task_id']. '，'.$allottype.'客服'.$s_manager->get('name').'客服ID'.$user;
					$sLog = new service_log();
					$sLog->addLog(0, $s_task->get('task_id'), $log);
					//更新跟进数据
					if($_REQUEST['nofollow']==1){

					}else{
						$s_follow=new service_follow();
						$s_follow->updateSysLevel($s_task->get('task_id'), $chance_id=0,$islockuser);
					}
					echo "<font color=red>分配任务", $data ['task_id'], '在', $data ['point'], '点',$allottype,'客服',$s_manager->get('name'),'客服ID'.$user.'</font><br />';
				}else{
					echo "<font color=red>分配失败", $data ['task_id'], '在', $data ['point'], '点,原因:',$s_task->getError()."</font>";
				}
			}
		}
	}
	/**
	 * 新招标任务分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageAllottaskid1newbidamqp($inPath) {
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$config_id=zbj_lib_BaseUtils::getStr($_REQUEST['config_id'],'int');
		$igonline=zbj_lib_BaseUtils::getStr($_REQUEST['igonline'],'int');
// 		if (! in_array ( $config_id, array (22,23,24,25,26,27,28,29,30,31) )) {
// 			return "config_id分配参数不合法,";
// 		}
		$s_allot = new zbj_service_allot ( $config_id );
		if ($s_allot->get ( 'pid' ) != 1) {
			return "此队列不是订单分配队列";
		}
		$s_allot_mo = new zbj_service_allot ( 2 );//移动团队
		if (!$igonline  && count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return "没有在线用户";
		}
		if($_REQUEST['task_id']<=0){
			$q_newbid = new SQueue ( "cp_task_manager_config_id_{$config_id}_newbid" );//一对一队列
			//分配数量
			$allotnum=80;
			//在特殊时段自动减少分配
			if(date('H:i:s')<'09:00:00'){
				return "不在分配时段不进行分配,";
			}
			if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
				$allotnum=5;
			}
			if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
				$allotnum=15;
			}
			if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
				$allotnum=10;
			}
		}else{
			$allotnum=1;
		}
		/**
		 * 是否工作日
		 * @var bool
		 */
		$isweekday=in_array(date('w'), array(1,2,3,4,5))?1:0;
		/**
		 * 不参与分配 的用户
		 *
		 * @var Array
			*/
		$notallotuser=array();

//		$m_cpgroup=new zbj_model_cp_user();
// 		$group_72users=$m_cpgroup->select(array('group_id'=>72),'user_id')->items;
// 		if(is_array($group_72users) && count($group_72users)){
// 			foreach ($group_72users as $v){
// 				array_push($notallotuser, $v['user_id']);
// 			}
// 		}
		$m_task=new zbj_model_mk_task();
		//满足跟进未分配任务的用户
		$followcondition=array();
		$followcondition['is_followtimeout']=1;
		$followcondition['open_state']=0;
		$followcondition['hosted']=0;
		$followcondition[]="createymd>='".date('Y-m-d',time()-86400*30)."'";
		$followcondition[]="manager_id!=0";
		// 		define('DEBUG', $value);
// 		$followtimeoutuser=$m_task->select($followcondition,"manager_id,count(1) as num",'group by manager_id','having num>=1',array('mk_task_opis'=>'mk_task.task_id=mk_task_opis.task_id'))->items;
// 		//var_dump($followtimeoutuser);
		$followtimeoutusers=array();
// 		if(count($followtimeoutuser)){
// 			foreach ($followtimeoutuser as $v){
// 				if($v['manager_id']!=204){//204的不存在超期的情况
// 					array_push($followtimeoutusers, $v['manager_id']);
// 				}
// 			}
// 		}
		// 		print_r($followtimeoutusers);
		// 		exit;
		if($igonline){
			$onlineuser=$s_allot->getusers(0);
		}else{
			$onlineuser=$s_allot->getusers(1);
			//204用户永远在线
// 			array_push($onlineuser, 204);
		}
		//行业类目
		$s_model=new service_module();
		//$category=$s_model->getCategoryIdStrByTaskProcessAllotId($config_id);
		//if($category==''){
		//	return "没有找到相应的分配类目ID";
		//}

		for($i = 0; $i < $allotnum; $i ++) {
			if($_REQUEST['task_id']<=0){
				$result = $q_newbid->get ();
			}else{
				$result=serialize(array('task_id'=>$_REQUEST['task_id'],'point'=>8));
			}
			if (! $result) {
				echo "没有任务";
				break;
			}
			$data = unserialize ( $result );
			$s_log = new service_log();
			if(!$data['task_id'] or !$data['point']){
				echo '取得的数据'.var_export($data,true).'不合法直接跳过。<br />';
			}elseif ($data ['task_id'] && $data ['point']) {
				echo '开始分配任务',$data['task_id'];
				$writelog='新行业运营招标需求分配';
				$s_task=new zbj_service_task($data ['task_id']);
				$s_task=$s_task->init();
				if(count($s_task->get())==0){
					echo '任务不合法<br />';
					continue;
				}
				if($s_task->get("state")==4){
					echo '任务已结束<br />';
					continue;
				}
				if($s_task->get("open_state")==1){
					echo '任务已关闭<br />';
					continue;
				}
				$manager_id = $s_task->get('manager_id');
				if ($manager_id) {//只是提醒
					echo '已有客服直接跳过<br />';
					continue;
				}
				if(in_array($s_task->get("m_is_at"),array(1))){//0未分配 ，1，已分配客服  2 是在调配库，3云客服
					echo '任务已分配客服<br />';
					$s_log->addLog(0, $s_task->get('task_id'), '任务已分配客服');
					continue;
				}
// 				if(in_array($s_task->get("m_is_at"),array(3))){//0未分配 ，1，已分配客服  2 是在调配库，3云客服
// 					echo '任务已有云客服<br />';
// 					$s_log->addLog(0, $s_task->get('task_id'), '任务已有云客服');
// 					continue;
// 				}
				$islockuser=false;//是否是锁定的用户
				$user=0;
				$mustend=false;
				//分配时间规划
				//$time_id=0;//分配后不重新排序
				//$time_id=1;//有金额的任务
				//$time_id=2;//无金额的任务分配
				//$time_id=3;//平均分配
				$time_id = $s_task->get ( 'amount' ) ? 1 : 2;
				$from_mo=false;
				if(!$user){
					if($data['from_mo']==1){
						$user=$s_allot_mo->getnextuser(1,0,$time_id);
						if($user){
							$from_mo=true;
							$allottype.="移动端任务分配";
						}else{
							$allottype.="移动端任务，但是是客服不在线";
						}
					}
				}
				if(!$user){
					if($data['m_is_at']==2){
						if($s_task->get('m_is_at')!=2){
							$s_log->addLog(0, $s_task->get('task_id'), '任务金额金额不符合进入资源库');
// 						$s_log->addLog(0, $s_task->get('task_id'), '任务金额金额不符合进入资源库'.var_export($data,true));
							$s_task->set('m_is_at',2);//进入调配库
							$s_task->save();
						}
						continue;
					}
				}
				//优先分配给名片印刷人员
// 				if(!$user){
// 					if ($s_task->get('task_opis.ht')==3){
// 						$user=$s_allot->getnextuser(1,0,1,0,null,$allottBussinessCardPrinter,array_merge($notallotuser));
// 						if($user){
// 							$writelog.='名片印刷类需求平均分配给名片需求客服'.$user.',';
// 							$time_id=1;
// 						}else {
// 							$writelog.='名片印刷类需求但是名片需求客服不在线，';
// 						}
// 					}
// 				}
				if (!$user){
					if ($s_task->get('task_opis.from_manager_id')){
						if(in_array($s_task->get('task_opis.from_manager_id'),$onlineuser)){
							$user=$s_task->get('task_opis.from_manager_id');
							$writelog.='后台客服代发订单分配到代发客服，';
							$time_id=0;
						}else{
							$user=0;
							$writelog.='后台客服代发订单分配但是客服不在线，';
						}
					}
				}
				if(!$user){
					//锁定雇主
					$s_customer=new service_customer($s_task->get('user_id'));
					$user=$s_customer->checklock();
					if($user){
						$mustend=true;
						$islockuser=true;
						$s_task->set('task_opis.islock',1);
						$writelog.='用户被客服锁定直接分配，';
						$time_id=0;
// 						if(is_array($onlineuser) && count($onlineuser) && in_array($user,$onlineuser)){
// 							$mustend=true;
// 							$islockuser=true;
// 							$s_task->set('task_opis.islock',1);
// 							$writelog.='用户被客服锁定直接分配，';
// 							$time_id=0;
// 						}else{
// 							$user=0;
// 							$writelog.='用户被客服锁定但是客服不在线，';
// 						}
					}
				}
				if(!$user){
					$condition=array();
					$condition ['user_id'] = $s_task->get('user_id');
					$condition [] = 'manager_id!=0';
					$condition [] = 'createtime>='.(intval( $s_task->get('createtime'))-259200);
					$condition[]="category_id in (".$s_task->get('category_id').")";//需要分配的三级ID
					$oldtask=$m_task->selectOne($condition,'manager_id,manager_name',null,'order by task_id desc');
					if($oldtask['manager_id']){
						if(in_array($oldtask['manager_id'],$onlineuser)){
							$user=$oldtask['manager_id'];
							$writelog.="雇主三天内再次发布的需求自动分配，";
							$s_task->set('task_opis.islock',0);
							$time_id=0;
						}else{
							$user=0;
							$writelog.='雇主三天内再次发布但是客服不在线';
						}
					}
				}
// 				if(!$user){
// 					$condition=array();
// 					$condition['level']=3;
// 					$condition['is_pre']=1;
// 					$condition['is_delete']=0;
// 					$m_recordcat=new zbj_model_mk_recordcategory();
// 					$tmpcats=$m_recordcat->select($condition,'category_id')->items;
// 					if($tmpcats){
// 						$ids=lib_BaseUtils::array2Single($tmpcats, 'category_id');
// 						$m_record=new zbj_model_mk_record();
// 						$records=$m_record->selectOne(array("category_id in ({$ids})",'user_id'=>$s_task->get('user_id'),"create_date>='".date('Y-m-d',$this->_time-86400)."'","allotask_id=0"),'manager_id,manager_name,sign,record_id');
// 						if($records['manager_id']){
// 							if(in_array($records['manager_id'],$onlineuser)){
// 								$user=$records['manager_id'];
// 								$writelog="根据{$records['record_id']}售前记录分配.";
// 								$time_id=0;
// 							}else{
// 								$user=0;
// 								$writelog.="根据{$records['record_id']}售前记录但是客服不在线，";
// 							}
// 						}
// 					}
// 				}
				if(!$user){
					if($s_task->get("hosted")==1){//任务平均分配
						if($igonline){
							$user=$s_allot->getnextuser(0,0,3,0,null,null,array_merge($notallotuser));
						}else{
							$user=$s_allot->getnextuser(1,0,3,0,null,null,array_merge($notallotuser));
						}
						if($user){
							$writelog.='招标任务已托管平均分配并直接标记已处理，';
							$time_id=3;
							$mustend=true;
						}
					}
				}
// 				if(!$user){
// 					if(!in_array($s_task->get("task_info.task_source"), array(0,5))){//小于100元并且未托管
// 						if($igonline){
// 							$user=$s_allot->getnextuser(0,0,3,0,date('Y-m-d'),null,array_merge($notallotuser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
// 						}else{
// 							$user=$s_allot->getnextuser(1,1,3,0,date('Y-m-d'),null,array_merge($notallotuser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
// 						}
// 						if($user){
// 							echo '移动端提交任务平均分配<br />';
// 							$time_id=3;
// 							$writelog.='招标移动端提交任务平均分配';
// 						}
// 					}
// 				}
// 				if(!$user){
// 					if($s_task->get("amount")<100 && $s_task->get("amount")!=0){//小于100元并且未托管
// 						echo '任务金额小于100元暂时不进行分配<br />';
// 						$s_log->addLog(0, $s_task->get('task_id'), '任务金额小于100元暂时不进行分配，进入资源库');
// 						$s_task->set('m_is_at',2);//进入调配库
// 						$s_task->save();
// 						continue;
// 					}
// 				}
				if(!$user){
					if($igonline){
						$user=$s_allot->getnextuser(0,0,3,0,date('Y-m-d'),null,array_merge($notallotuser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
					}else{
						$user=$s_allot->getnextuser(1,0,3,0,date('Y-m-d'),null,array_merge($notallotuser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
					}
					if($user){
						$time_id=3;
						$writelog.='招标任务未托管平均分配';
					}
				}
				if(!$user){
					echo '没有合适的用户进行分配,下次再执行分配。<br />';
					continue;
				}
				if($s_task->get("hosted")==1){//托管自动阀值
					$mustend=true;
				}
				if($igonline){
					$mustend=true;
				}
// 				if($isweekday){//LOGO工作日专场地
// 				}


				if($user){
					$s_manager = new zbj_service_manager ( $user );
					$s_task->set ( 'manager_id', $s_manager->get ( 'user_id' ) );
					$s_task->set('m_is_at',1);//从调配库移除
					$s_task->set ( 'manager_name', $s_manager->get ( 'name' ) );
					$s_task->set ( 'manager_teamid', $s_manager->get ( 'group_id' ) );
					if(in_array($user, $s_allot->getusers(0)) && !in_array($user, $onlineuser)){
						$s_task->set('task_opis.is_offline_allot',1);
					}
					$s_record=new service_record();
					$s_record->upTaskCloud($s_task->get('task_id'));
					$followtimeout=0;
					if($s_task->get('task_opis.is_followtimeout')){
						$followtimeout=1;
					}
					$writelog.="客服:".$s_manager->get('name').'客服ID：'.$s_manager->get('user_id');
					//判断是否老用户分配
					// 					$s_user=new zbj_service_user($s_task->get('user_id'));
					// 					$isnew=0;
					// 					if($s_user->get('count.newbid_buy_amount')+$s_user->get('count.free_buy_amount')){
					// 						$s_task->set('task_opis.showtime',intval($s_task->get('createtime'))+1800);//
					// 						$isnew=2;
					// 					}else{
					// 						$s_task->set('task_opis.showtime',intval($s_task->get('createtime'))+900);//
					// 						$isnew=1;
					// 					}
					if($s_task->save()){
						$s_cptask=new service_task($data ['task_id']);
						$s_cptask->addmanagerchangelog($user);
// 						if($records['manager_id']){
// 							$min=$records['record_id']-100;
// 							$max=$records['record_id']+100;
// 							$m_record->update(array('sign'=>$records['sign'],"record_id between {$min} and {$max}"),array('allotask_id'=>$data ['task_id']));
// 							unset($records);
// 						}
						if($from_mo){
							$s_allot_mo->createlog ( $data ['task_id'], $user, $time_id );
						}else{
							$s_allot->createlog ( $data ['task_id'], $user, $time_id );
							if($mustend){
								$s_allot->processed($data['task_id']);
							}
						}
						$s_log->addLog(0, $s_task->get('task_id'), '分配维度:'.$data['msg'].$writelog);
						//更新跟进数据
						if($_REQUEST['nofollow']==1){

						}else{
							$s_follow=new service_follow();
							$s_follow->updateSysLevel($s_task->get('task_id'), $chance_id=0,$islockuser);
						}
						echo "<font color=red>分配任务", $data ['task_id'], '在', $data ['point'], '点',$writelog,'客服',$s_manager->get('name'),'客服ID'.$user.'</font><br />';
					}else{
						echo "<font color=red>分配失败", $data ['task_id'], '在', $data ['point'], '点,原因:',$s_task->getError()."</font>";
					}
				}else{
					echo '没有客服','<br />';
				}
			}
		}
	}
	/**
	 * 新悬赏计划分配
	 * @param unknown $inPath
	 * @return string
	 */
	public function pageAllottaskid1amqp($inPath) {
		if($_REQUEST['debug']){
			define('DEBUG', 1);
		}
		$config_id=zbj_lib_BaseUtils::getStr($_REQUEST['config_id'],'int');
		$igonline=zbj_lib_BaseUtils::getStr($_REQUEST['igonline'],'int');
// 		if (! in_array ( $config_id, array (22,23,24,25,26,27,28,29,30,31) )) {
// 			return "config_id分配参数不合法,";
// 		}
		$s_allot = new zbj_service_allot ( $config_id );
		if ($s_allot->get ( 'pid' ) != 1) {
			return "此队列不是订单分配队列";
		}
		$s_allot_mo = new zbj_service_allot ( 2 );//移动团队
		if (!$igonline && count ( $s_allot->getusers ( 1, 0 ) ) == 0) {
			return "没有在线用户".$s_allot->get ( 'pid' );
		}
		if($_REQUEST['task_id']<=0){
			$q_free = new SQueue ( "cp_task_manager_config_id_{$config_id}_free" );//普通需求队列
			//分配数量
			$allotnum=80;
			//在特殊时段自动减少分配
			if(date('H:i:s')<'09:00:00'){
				return "不在分配时段不进行分配,";
			}
			if(date('H:i:s') > '09:00:00' && date('H:i:s')<'09:05:00'){
				$allotnum=5;
			}
			if(date('H:i:s') > '11:30:00' && date('H:i:s')<'13:35:00'){
				$allotnum=15;
			}
			if(date('H:i:s') > '18:00:00' && date('H:i:s')<'19:05:00'){
				$allotnum=10;
			}
		}else{
			$allotnum=1;
		}
		/**
		 * 是否工作日
		 * @var bool
		 */
		$isweekday=in_array(date('w'), array(1,2,3,4,5))?1:0;
		/**
		 * 分配logo任务的客服
		 *
		 * @var array
		 */
		$allotlogouser=array();
		/**
		 * 不参与分配 的用户
		 *
		 * @var Array
		*/
		$notallotuser=array();
// 		$m_cpgroup=new zbj_model_cp_user();
// 		$group_72users=$m_cpgroup->select(array('group_id'=>72),'user_id')->items;
// 		if(is_array($group_72users) && count($group_72users)){
// 			foreach ($group_72users as $v){
// 				array_push($notallotuser, $v['user_id']);
// 			}
// 		}
		$m_task=new zbj_model_mk_task();
		//满足跟进未分配任务的用户
		$followcondition=array();
		$followcondition['is_followtimeout']=1;
		$followcondition['open_state']=0;
		$followcondition['hosted']=0;
		$followcondition[]="createymd>='".date('Y-m-d',time()-86400*30)."'";
		$followcondition[]="manager_id!=0";
		// 		define('DEBUG', $value);
// 		$followtimeoutuser=$m_task->select($followcondition,"manager_id,count(1) as num",'group by manager_id','having num>=1',array('mk_task_opis'=>'mk_task.task_id=mk_task_opis.task_id'))->items;
// 		// 		var_dump($followtimeoutuser);
		$followtimeoutusers=array();
// 		if(count($followtimeoutuser)){
// 			foreach ($followtimeoutuser as $v){
// 				if($v['manager_id']!=204){//204的不存在超期的情况
// 					array_push($followtimeoutusers, $v['manager_id']);
// 				}
// 			}
// 		}
		// 		print_r($followtimeoutusers);
		// 		exit;
		if($igonline){
			$onlineuser=$s_allot->getusers(0);
		}else{
			$onlineuser=$s_allot->getusers(1);
			//204用户永远在线
// 			array_push($onlineuser, 204);
		}
		//行业类目
		$s_model=new service_module();
		//$category=$s_model->getCategoryIdStrByTaskProcessAllotId($config_id);
		//if($category==''){
		//	return "没有找到相应的分配类目ID";
		//}

		for($i = 0; $i < $allotnum; $i ++) {
			if($_REQUEST['task_id']<=0){
				$result = $q_free->get ();
			}else{
				$result=serialize(array('task_id'=>$_REQUEST['task_id'],'point'=>8));
			}
			if (! $result) {
				echo "没有任务";
				break;
			}
			$data = unserialize ( $result );
			$s_log = new service_log();
			if(!$data['task_id'] or !$data['point']){
				echo '取得的数据'.var_export($data,true).'不合法直接跳过。<br />';
			}elseif ($data ['task_id'] && $data ['point']) {
				echo date('Y-m-d H:i:s').'开始分配任务',$data['task_id'];
				$writelog='新行业运营悬赏需求分配,分配维度:'.$data['msg'];
				$s_task=new zbj_service_task($data ['task_id']);
				$s_task=$s_task->init();
				if(count($s_task->get())==0){
					echo '任务不合法<br />';
					continue;
				}
				if($s_task->get("state")==4){
					echo '任务已结束<br />';
					continue;
				}
				if($s_task->get("open_state")==1){
					echo '任务已关闭<br />';
					continue;
				}
				$manager_id = $s_task->get('manager_id');
				if ($manager_id) {//只是提醒
					echo '已有客服直接跳过<br />';
					continue;
				}
				if(in_array($s_task->get("m_is_at"),array(1))){//0未分配 ，1，已分配客服  2 是在调配库，3云客服
					echo '任务已分配客服<br />';
					$s_log->addLog(0, $s_task->get('task_id'), '任务已分配客服');
					continue;
				}
// 				if(in_array($s_task->get("m_is_at"),array(3))){//0未分配 ，1，已分配客服  2 是在调配库，3云客服
// 					echo '任务已有云客服<br />';
// 					$s_log->addLog(0, $s_task->get('task_id'), '任务已有云客服');
// 					continue;
// 				}
				$islockuser=false;//是否是锁定的用户
				$user=0;
				$mustend=false;
				//分配时间规划
				//$time_id=0;//分配后不重新排序
				//$time_id=1;//有金额的任务
				//$time_id=2;//无金额的任务分配
				//$time_id=3;//平均分配
				$time_id = $s_task->get ( 'amount' ) ? 1 : 2;
				$from_mo=false;
				if(!$user){
					if($data['from_mo']==1){
						$user=$s_allot_mo->getnextuser(1,0,$time_id);
						if($user){
							$from_mo=true;
							$allottype.="移动端任务分配";
						}else{
							$allottype.="移动端任务，但是是客服不在线";
						}
					}
				}
				if(!$user){
					if($data['m_is_at']==2){
						if($s_task->get('m_is_at')!=2){
							$s_log->addLog(0, $s_task->get('task_id'), '任务金额金额不符合进入资源库');
// 							$s_log->addLog(0, $s_task->get('task_id'), '任务金额金额不符合进入资源库'.var_export($data,true));
							$s_task->set('m_is_at',2);//进入调配库
							$s_task->save();
						}
						continue;
					}
				}
				if (!$user){
					if ($s_task->get('task_opis.from_manager_id')){
						if(in_array($s_task->get('task_opis.from_manager_id'),$onlineuser)){
							$user=$s_task->get('task_opis.from_manager_id');
							$writelog.='后台客服代发订单分配到代发客服，';
							$time_id=0;
						}else{
							$user=0;
							$writelog.='后台客服代发订单分配但是客服不在线，';
						}
					}
				}
				if(!$user){
					//锁定雇主
					$s_customer=new service_customer($s_task->get('user_id'));
					$user=$s_customer->checklock();
					if($user){
						$mustend=true;
						$islockuser=true;
						$s_task->set('task_opis.islock',1);
						$writelog.='用户被客服锁定直接分配，';
						$time_id=0;
// 						if(in_array($user,$onlineuser)){
// 							$mustend=true;
// 							$islockuser=true;
// 							$s_task->set('task_opis.islock',1);
// 							$writelog.='用户被客服锁定直接分配，';
// 							$time_id=0;
// 						}else{
// 							$user=0;
// 							$writelog.='用户被客服锁定但是客服不在线，';
// 						}
					}
				}
				if(!$user){
					$condition=array();
					//					$condition['mode']=10;
					$condition ['user_id'] = $s_task->get('user_id');
					$condition [] = 'manager_id!=0';
					$condition [] = 'createtime>='.(intval( $s_task->get('createtime'))-259200);
					$condition[]="category_id in (".$s_task->get('category_id').")";//需要分配的三级ID
					$oldtask=$m_task->selectOne($condition,'manager_id,manager_name',null,'order by task_id desc');
					if($oldtask['manager_id'] &&  !in_array($oldtask['manager_id'], $allotlogouser)){
						if(in_array($oldtask['manager_id'],$onlineuser)){
							$user=$oldtask['manager_id'];
							$writelog.="雇主三天内再次发布的需求自动分配，";
							$s_task->set('task_opis.islock',0);
							$time_id=0;
						}else{
							$user=0;
							$writelog.='雇主三天内再次发布但是客服不在线';
						}
					}
				}
// 				if(!$user){
// 					$condition=array();
// 					$condition['level']=3;
// 					$condition['is_pre']=1;
// 					$condition['is_delete']=0;
// 					$m_recordcat=new zbj_model_mk_recordcategory();
// 					$tmpcats=$m_recordcat->select($condition,'category_id')->items;
// 					if($tmpcats){
// 						$ids=lib_BaseUtils::array2Single($tmpcats, 'category_id');
// 						$m_record=new zbj_model_mk_record();
// 						$records=$m_record->selectOne(array("category_id in ({$ids})",'user_id'=>$s_task->get('user_id'),"create_date>='".date('Y-m-d',$this->_time-86400)."'","allotask_id=0"),'manager_id,manager_name,sign,record_id');
// 						if($records['manager_id']){
// 							if(in_array($records['manager_id'],$onlineuser)){
// 								$user=$records['manager_id'];
// 								$writelog="根据{$records['record_id']}售前记录分配.";
// 								$time_id=0;
// 							}else{
// 								$user=0;
// 								$writelog.="根据{$records['record_id']}售前记录但是客服不在线，";
// 							}
// 						}
// 					}
// 				}
				if(!$user){
					if($s_task->get("hosted")==1){//任务平均分配
						$user=$s_allot->getnextuser(1,0,3,0,null,null,array_merge($notallotuser,$allotlogouser));
						if($user){
							$writelog.='选稿任务已托管平均分配并直接标记已处理，';
							$time_id=3;
							$mustend=true;
						}
					}
				}
// 				if(!$user){
// 					if($s_task->get('mode')==10 && $s_task->checkSpecialTask()==18){
						//LOGO专场任务两小时内分配同一人
						// 						$condition=array();
						// // 						$condition['catalog2id']=18;
						// 						$condition ['user_id'] = $s_task->get('user_id');
						// // 						$condition [] = 'was_pack>=0';
						// // 						$condition [] = 'manager_id!=0';
						// // 						$condition [] = 'createtime>=1371116070';
						// 						$condition [] = 'createtime>='.(intval( $s_task->get('createtime'))-259200);
						// 						$oldtask=$m_task->selectOne($condition,'manager_id',null,'order by task_id desc');
						// 						if($oldtask['manager_id'] && in_array($oldtask['manager_id'], $s_allot->getusers(1,0))){
						// 							$user=$oldtask['manager_id'];
						// 							$writelog.="雇主三天小时内再次发布LOGO设计专场需求自动分配，";
						// 							$time_id=0;
						// 						}else {//所有的用户
// 						$user = $s_allot->getnextuser ( 1, 1, 3, 0, date('Y-m-d'), null, $notallotuser );
// 						if($user){
// 							$time_id=3;
// 							$writelog.='LOGO设计专场需求平均分配给特定交易顾问，';
// 						}else{
// 							$writelog.='LOGO设计专场需求未成功分配给特定交易顾问，按普通需求分配。';
// 						}
						// 						}
// 					}
// 				}
// 				if(!$user){
// 					if(!in_array($s_task->get("task_info.task_source"), array(0,5))){//小于100元并且未托管
// 						if($igonline){
// 							$user=$s_allot->getnextuser(0,0,3,0,date('Y-m-d'),null,array_merge($notallotuser,$allotlogouser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
// 						}else{
// 							$user=$s_allot->getnextuser(1,1,3,0,date('Y-m-d'),null,array_merge($notallotuser,$allotlogouser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
// 						}
// 						if($user){
// 							echo '移动端提交任务平均分配<br />';
// 							$time_id=3;
// 							$writelog.='移动端提交任务平均分配';
// 						}
// 					}
// 				}
// 				if(!$user && !isset($_REQUEST['human'])){
// 					//human是代表人手工执行。
// 					if($s_task->get("amount")<100 && $s_task->get("amount")!=0){//小于100元并且未托管
// 						echo '任务金额小于100元暂时不进行分配<br />';
// 						$s_log->addLog(0, $s_task->get('task_id'), '任务金额小于100元暂时不进行分配，进入资源库');
// 						$s_task->set('m_is_at',2);//进入调配库
// 						$s_task->save();
// 						continue;
// 					}
// 				}
				if(!$user){
					if($igonline){
						$user=$s_allot->getnextuser(0,0,3,0,date('Y-m-d'),null,array_merge($notallotuser,$allotlogouser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
					}else{
						$user=$s_allot->getnextuser(1,0,3,0,date('Y-m-d'),null,array_merge($notallotuser,$allotlogouser,$followtimeoutusers));//检查当天任务量没有超出阀值 的用户。
					}
					if($user){
						$time_id=3;
						$writelog.='任务未托管平均分配';
					}
				}
				if(!$user){
					echo '没有合适的用户进行分配,下次再执行分配。<br />';
					continue;
				}
				if($s_task->get("hosted")==1){//托管自动阀值
					$mustend=true;
				}
				if($igonline){
					$mustend=true;
				}
				// 				if($isweekday){//LOGO工作日专场地
				// 				}


				if($user){
					$s_manager = new zbj_service_manager ( $user );
					$s_task->set ( 'manager_id', $s_manager->get ( 'user_id' ) );
					$s_task->set('m_is_at',1);//从调配库移除
					$s_task->set ( 'manager_name', $s_manager->get ( 'name' ) );
					$s_task->set ( 'manager_teamid', $s_manager->get ( 'group_id' ) );
					if(in_array($user, $s_allot->getusers(0)) && !in_array($user, $onlineuser)){
						$s_task->set('task_opis.is_offline_allot',1);
					}
					$s_record=new service_record();
					$s_record->upTaskCloud($s_task->get('task_id'));
					$followtimeout=0;
					if($s_task->get('task_opis.is_followtimeout')){
						$followtimeout=1;
					}
					$writelog.="客服:".$s_manager->get('name').'客服ID：'.$s_manager->get('user_id');
					//判断是否老用户分配
					//$s_user=new zbj_service_user($s_task->get('user_id'));
					// 					$isnew=0;
					// 					if($s_user->get('count.newbid_buy_amount')+$s_user->get('count.free_buy_amount')){
					// 						$s_task->set('task_opis.showtime',intval($s_task->get('createtime'))+1800);//
					// 						$isnew=2;
					// 					}else{
					// 						$s_task->set('task_opis.showtime',intval($s_task->get('createtime'))+900);//
					// 						$isnew=1;
					// 					}
					if($s_task->save()){
						$s_cptask=new service_task($data ['task_id']);
						$s_cptask->addmanagerchangelog($user);
// 						if($records['manager_id']){
// 							$min=$records['record_id']-100;
// 							$max=$records['record_id']+100;
// 							$m_record->update(array('sign'=>$records['sign'],"record_id between {$min} and {$max}"),array('allotask_id'=>$data ['task_id']));
// 							unset($records);
// 						}
// 						if($followtimeout){
// 							$s_allot->createlog ( $data ['task_id'], $user, 3 );
// 						}else{
// 						}
						if($from_mo){
							$s_allot_mo->createlog ( $data ['task_id'], $user, $time_id );
						}else{
							$s_allot->createlog ( $data ['task_id'], $user, $time_id );
							if($mustend){
								$s_allot->processed($data['task_id']);
							}
						}
						$s_log->addLog(0, $s_task->get('task_id'), $writelog);
						//更新跟进数据
						if($_REQUEST['nofollow']==1){

						}else{
							$s_follow=new service_follow();
							$s_follow->updateSysLevel($s_task->get('task_id'), $chance_id=0,$islockuser);
						}
						echo "<font color=red>分配任务", $data ['task_id'], '在', $data ['point'], '点',$writelog,'客服',$s_manager->get('name'),'客服ID'.$user.'</font><br />';
					}else{
						echo "<font color=red>分配失败", $data ['task_id'], '在', $data ['point'], '点,原因:',$s_task->getError()."</font>";
					}
				}else{
					echo '没有客服','<br />';
				}
			}
		}
	}
	public function pagefollowremind($inPath) {
		$curTime = $this->_time-3600;
		$oneHourLater=$this->_time+3600;
		$half_hour_ater = time() + 1800;
		$condition = array ();
		$condition['issend']=0;
		$condition['expries']=date('Y-m-d',$curTime);
		$condition[]=" expriestime between {$curTime} and {$oneHourLater} ";
		//托管前跟进提醒
		$m_modelfollow=new model_mk_follow();
		$m_modelfollow->setLimit(20);
		$follows=$m_modelfollow->select($condition)->items;
		//托管后效果保障跟进提醒
		$m_effect_pro = new model_mk_effectprotection();
		$m_effect_pro->setLimit(20);
		$effpro_follows = $m_effect_pro->select($condition)->items;
		//会员销售跟进提醒
		$m_sell_follow = new model_mb_sellFollow();
		$m_sell_follow->setLimit(20);
		$sell_follows = $m_sell_follow->select(array('is_send' => 1, 'expire_date' => date('Y-m-d', $curTime), " expire_time between {$curTime} and {$half_hour_ater} "))->items;
		//机会跟进提醒
		$m_chance_follow = new model_mk_chanceFollow();
		$m_chance_follow->setLimit(20);
		$chance_follows = $m_chance_follow->select(array('is_send' => 0, 'expire_date' => date('Y-m-d', $curTime), " expire_time between {$curTime} and {$oneHourLater} "))->items;


		lib_BaseUtils::apiInit();
		$msg_service = new com\zhubajie\boss\interfaces\messageServiceClient(null);
		lib_BaseUtils::apigetclient($msg_service);

		$message_pack = new messagePack();
		$message_pack->type = messageType::BOSSMESSAGE;



		if(count($follows)){
// 			$s_msg = new service_msg();
			foreach ($follows as $k => $v) {
				$s_task=new zbj_service_task($v['task_id']);
				$s_task=$s_task->init();
				if (!$s_task->get ( 'hosted' )) {
					$message_pack->title = '您有一个订单需要跟进，请及时跟进！';
					$message_pack->cont = "您负责的订单#{$v['task_id']}号：".$s_task->get('title')." 需要跟进，请及时跟进！";

					$message_params=new com\zhubajie\boss\dataobject\message\SentMessageParamsDo();
					$message_params->messagePack[] = $message_pack;
					$message_params->f_uid = $s_task->get('manager_id');
					$message_params->product_type = messageProduct::TASK;
					$message_params->product_id = $v['task_id'];
					$message_params->range = messageRange::SELECT_USER;
					$message_params->to_uids = array($s_task->get('manager_id'));

					$msg_service->sentMessage($message_params);

// 					if($s_msg->add($s_task->get('manager_id'), $s_task->get('manager_name'), $s_task->get('manager_id'), $s_task->get('manager_name'), '您有一个订单需要跟进，请及时跟进！', "您负责的订单#{$v['task_id']}号：".$s_task->get('title')." 需要跟进，请及时跟进！", 2, $v['task_id'], $options = '')){

// 					}
				}
				$m_modelfollow->update(array('follow_id'=>$v['follow_id']), 'issend = 1');
				echo '提醒完成';
			}
		}
		if (count($effpro_follows)) {
// 			$s_msg = new service_msg();
			foreach ($effpro_follows as $k => $v) {
				$s_task=new zbj_service_task($v['task_id']);
				$s_task=$s_task->init();
				if ($s_task->get ( 'hosted' )) {
					$message_pack->title = '您有一个订单需要效果保障跟进，请及时跟进！';
					$message_pack->cont = "您负责的订单#{$v['task_id']}号：".$s_task->get('title')." 需要跟进，请及时跟进！";

					$message_params=new com\zhubajie\boss\dataobject\message\SentMessageParamsDo();
					$message_params->messagePack[] = $message_pack;
					$message_params->f_uid = $s_task->get('manager_id');
					$message_params->product_type = messageProduct::TASK;
					$message_params->product_id = $v['task_id'];
					$message_params->range = messageRange::SELECT_USER;
					$message_params->to_uids = array($s_task->get('manager_id'));

					$msg_service->sentMessage($message_params);

// 					if($s_msg->add($s_task->get('manager_id'), $s_task->get('manager_name'), $s_task->get('manager_id'), $s_task->get('manager_name'), '您有一个订单需要效果保障跟进，请及时跟进！', "您负责的订单#{$v['task_id']}号：".$s_task->get('title')." 需要跟进，请及时跟进！", 2, $v['task_id'], $options = '')){
// 						echo $v['task_id'].'<br />';
// 					}
				}
				$m_effect_pro->update(array('task_id'=>$v['task_id']), 'issend = 1');
				echo '提醒完成';
			}
		}

		if (count($sell_follows)) {
// 			$s_msg = new service_msg();
			foreach ($sell_follows as $k => $v) {
// 				$s_manager = new service_manager($v['created_by']);

				$message_pack->title = '您有一个服务商需要跟进，请及时处理！';
				$message_pack->cont = "你预约在半小时后跟进服务商：{$v['user_id']}，请及时跟进";

				$message_params=new com\zhubajie\boss\dataobject\message\SentMessageParamsDo();
				$message_params->messagePack[] = $message_pack;
				$message_params->f_uid = $v['follow_user_id'];
				$message_params->product_type = messageProduct::USER;
				$message_params->product_id = $v['user_id'];
				$message_params->range = messageRange::SELECT_USER;
				
				$to_uid = 0;
				if ($v['follow_user_id']) {
					$to_uid = $v['follow_user_id'];
				} else {
					if ($v['manager_id']) {
						$to_uid = $v['manager_id'];
					} else {
						$to_uid = $v['seller_id'];
					}
				}
				
				$message_params->to_uids = array($to_uid);

				$msg_service->sentMessage($message_params);

// 				if ($s_msg->add($v['created_by'], $s_manager->get('name'), $v['created_by'], $s_manager->get('name'), '您有一个服务商需要跟进，请及时处理！', "您锁定的服务商#{$v['user_id']} 需要跟进，请及时处理！", 0, $v['user_id'], $options = '')) {
// 					echo $v['task_id'].'<br />';
// 				}

				$m_sell_follow->update(array('user_id'=> $v['user_id']), 'is_send = 0');
				echo '提醒完成';
			}
		}

		if (count($chance_follows)) {
// 			$s_msg = new service_msg();
			foreach ($chance_follows as $k => $v) {
// 				$s_manager = new service_manager($v['manager_id']);

				$message_pack->title = '您有一个机会需要跟进，请及时处理！';
				$message_pack->cont = "您负责的机会#{$v['chance_id']} 需要跟进，请及时处理！";

				$message_params=new com\zhubajie\boss\dataobject\message\SentMessageParamsDo();
				$message_params->messagePack[] = $message_pack;
				$message_params->f_uid = $v['manager_id'];
				$s_chance = new service_mkchance($v['chance_id']);
				if ($s_chance->get('chance_type_group') == 3) {
					$message_params->product_type = messageProduct::LAW;
				}else{
					$message_params->product_type = messageProduct::COPYRIGHT;
				}
				$message_params->product_id = $v['chance_id'];
				$message_params->range = messageRange::SELECT_USER;
				$message_params->to_uids = array($v['manager_id']);

				$msg_service->sentMessage($message_params);

// 				if ($s_msg->add($v['manager_id'], $s_manager->get('name'), $v['manager_id'], $s_manager->get('name'), '您有一个机会需要跟进，请及时处理！', "您负责的机会#{$v['chance_id']} 需要跟进，请及时处理！", 3, $v['chance_id'], $options = '')) {
// 					echo $v['task_id'].'<br />';
// 				}

				$m_chance_follow->update(array('chance_id'=> $v['chance_id']), 'is_send = 1');
				$m_chance = new zbj_model_mk_chance();
				$m_chance->update(array('chance_id'=> $v['chance_id']), 'is_send = 1');
				echo '提醒完成';
			}
		}

		if ((! count($follows)) && (! count($effpro_follows)) && (! count($sell_follows))) {
			echo "没有相应的跟进需要提醒或已经全部提醒！";
		}

		//服务记录处理跟进提醒
		$this->_record_remind();
	}
	/**
	 *
	 * 产品需求&bug类的工单在截止时间到期前一个小时提醒负责人，若负责人不在线同时进行短信提醒。
	 */
	public function pageOrderOneHourRemind($inPath) {
// 		define('DEBUG', true);
		$m_order = new model_cp_order();
		$m_order->setLimit(20);
// 		$condition['item_pid']	= 153;
		$dateBegin = date("Y-m-d", strtotime("-".service_order::BEFORE_DAY." day"));//BEFORE_DAY之前的工单不显示
		$condition = array();
		$condition[] = "s_time_ymd >= '{$dateBegin}'";
		$condition['issend']	= 0;
		$condition['status']	= 1;
		$condition[] = "to_uid != '' and to_uid != f_uid";
		$curTime = time();
		$curTimeArray = getdate($curTime);
		$curHour = $curTimeArray['hours'];
		$curDate = date('Y-m-d', $curTime);
		$oneHourLater = $curHour + 1;
		$condition[] = " HOUR(FROM_UNIXTIME(e_time)) >= {$curHour} and HOUR(FROM_UNIXTIME(e_time)) <= {$oneHourLater} and e_time_ymd = '{$curDate}'";
		$order = $m_order->select($condition, 'order_id, f_uid, e_time, cont')->items;
		if (count($order)) {
			$mail_title = "你负责的一条工单即将超期";
			$bossmessage_title = "你负责的一条工单即将超期";
			$wechat_title = "你负责的一条工单即将超期";

			foreach ($order as $k => $v) {
				$e_time = date('Y-m-d H:i', $v['e_time']);
				$order_cont = $v['cont'];
				$mail_cont = "你负责的一条工单截止时间{$e_time}，即将在1小时后超期。<br/>工单描述：{$order_cont}<br/><a href='".$link."' target='_blank'>查看详情</a>";
				$bossmessage_cont = "你负责的一条工单截止时间{$e_time}，即将在1小时后超期。";
				$wechat_cont = "你负责的一条工单截止时间{$e_time}，即将在1小时后超期。";

				$cont_data = array(
						'mail_title'=>$mail_title,
						'mail_cont'=> $mail_cont,
						'bossmessage_title'=>$bossmessage_title,
						'bossmessage_cont'=>$bossmessage_cont,
						'wechat_title'=>$wechat_title,
						'wechat_cont'=>$wechat_cont
				);

				//将工单发送状态更改为已发送
				$s_order = new service_order($v['order_id']);
				$s_order->sendToUser($v['f_uid'], $cont_data, false, true,false,false);
				$m_order->update(array('order_id'=>$v['order_id']), 'issend = 1');

				//当工单负责人不在线时，给负责人发短信
				echo "工单".$v['order_id']."已经成功发送提醒";
			}
		}else{
			echo "没有相应的工单需要提醒或已经全部提醒！";
			exit;
		}

	}
    public function pageCustomerPersonIndexUpdate()
    {
        /**
         * 接收uid_start 和 uid_end
         * 查询更新
         */
        //XXX 环境初始化，判断是否重复执行

        set_time_limit(300);
        $select_start_time = microtime(true);
        $uid_start = $_GET['uid_start'];
        $uid_end = $_GET['uid_end'];
        $person_index_model = new model_mb_customerpersonindex();

        $sql = "select cp.user_id, cp.managerid, cp.salutationtype, cp.locktype, cp.lockvalue ,cp.industry ,cp.calltime, cp.com_scale, cp.qq, cp.com_address, c.expenditure, c.t_num, c.de_buy_amount, c.free_buy_amount, c.task_buy_amount, c.emp_buy_amount, a.regtime, a.loginendtime, a.mobilestatus, a.emailstatus, i.realtype, i.integral, i.creditpoints from mb_customer_person as cp  left join mb_account as a on cp.user_id=a.user_id left join mb_count as c on cp.user_id=c.user_id left join mb_info as i on cp.user_id=i.user_id where cp.user_id>={$uid_start} and cp.user_id<={$uid_end} limit 50000";//强制限制50000，防止一些全表操作

        $ret = array(
            'code' => 0,
            'data_num' => 0
        );
        $datas = $person_index_model->query($sql);
        $select_end_time = microtime(true);
        $ret['data_num'] = count($datas);
        $ret['select_time'] = ($select_end_time - $select_start_time) * 1000;

        $insert_start_time = microtime(TRUE);
        //define('DEBUG', TRUE);
        foreach ($datas as $row) {
            $ins = $row;
            foreach ($ins as &$v) {
                if (is_null($v)) {
                    $v = '';
                }
            }
            unset($ins['salutationtype']);
            if ($row['salutationtype'] == '男') {
                $ins['gender'] = 1;
            } elseif($row['salutationtype'] == '女') {
                $ins['gender'] = 0;
            } else {
                $ins['gender'] = 3;//未知
            }
            $ins['regtime'] = date('Y-m-d H:i:s', $row['regtime']);
            if (empty($ins['regtime'])) {
                $ins['regtime'] = '0000-00-00 00:00:00';
            }
            $ins['loginendtime'] = date('Y-m-d H:i:s', $row['loginendtime']);
            if (empty($ins['loginendtime'])) {
                $ins['loginendtime'] = '0000-00-00 00:00:00';
            }
            $ins['calltime'] = date('Y-m-d H:i:s', $row['calltime']);
            if (empty($ins['calltime'])) {
                $ins['calltime'] = '0000-00-00 00:00:00';
            }

            unset($ins['free_buy_amount']);
            unset($ins['task_buy_amount']);
            unset($ins['emp_buy_amount']);
            $ins['reward_buy_amount'] = $row['free_buy_amount'] + $row['task_buy_amount'] + $row['emp_buy_amount'];
            if (empty($ins['industry'])) {
                $ins['industry'] = 215;//不确定
            }

            //mb_count.pub_numth没人维护，用t_num代替
            $ins['pub_numth'] = $ins['t_num'];
            unset($ins['t_num']);


            $upt = $ins;

            unset($upt['user_id']);
            $res = $person_index_model->insert($ins, FALSE, FALSE, $upt);
            if ($res === FALSE) {
                $ret['code'] = -1;
                $ret['msg'] = "{$row['user_id']} insert error!";
                break;
            }
        }//end foreach
        $insert_end_time = microtime(TRUE);
        $ret['insert_time'] = ($insert_end_time - $insert_start_time) * 1000;
        echo json_encode($ret);
        exit;
    }

	/**
	 * T4移植过来的
	 * 垃圾稿件过滤
	 * 计划每5分钟一次
	 */
	function pageHandleWorks($inPath) {
		//暂时屏蔽 2014-04-17
		return  false;
		$urlParams = $this->getUrlParams($inPath);
		if ($urlParams['s'] != 1) {
			//exit;
		}
		//获取最后处理的works_id
		$num = 300;
// 		define(DEBUG,1);
		//$num = 10;
		$model = new zbj_model_lg_worksfeature();
		$aWork = $model->_db->selectOne('lg_works_autohandle', 'log_id>0', 'works_id', '', 'order by log_id desc');
		if (!$aWork) {
			$aWork = $model->_db->selectOne('mk_works', 'works_id>0', 'works_id', '', 'order by works_id desc');
		}
		$lastId = $aWork['works_id'];

		//找到大于最后处理的稿件id的所有稿件，并且稿件个数不能大于300
		$model->setLimit($num);
		$works = $model->_db->select('mk_works', 'open_state=0 and works_id>'.$lastId, 'works_id, task_id, user_id, nickname, createtime, createymd, ip, content, files')->items;
		$log = '';
		$logRepeat = ''; //记录由于稿件多次重复进入审核的情况
		if ($works) {
			$jump = 0; //不符合直接跳过的稿件，（非悬赏，悬赏发帖）
			$block = 0; //直接屏蔽的
			$checkPending = 0; //进入待审核的

			foreach ($works as $w) {
				//判断任务是否符合（非悬赏，悬赏发帖）
// 				if ($model->_db->selectOne('mk_task', 'task_id='.$w['task_id'].' and (mode!=0 or (mode=0 and allot=3 and type=1))', 'task_id')) {
// 				if ($model->_db->selectOne('mk_task', 'task_id='.$w['task_id'], 'task_id')) {
// 					$jump++;
// 					continue;
// 				}

				//判断稿件内容是否于黑名单相似
				$filesCode = ''; //单个文件为文件md5值，多个文件为多个文件的名称，大小连接md5值
				$blockReason = '';  //屏蔽原因
				$contentCode = md5($w['content']);
				$compareCondition = ''; //判断是否进入审核的条件
				$blackCondition = ''; //比对存在文件时，是否自动屏蔽的条件
				if ($w['files']) {
					$fileArr = unserialize($w['files']);
					if (count($fileArr) == 1) {  //只有一个附件的情况下
						$filesCode = $fileArr[0]['filecode'];
						if (!$filesCode) { //兼容老的稿件，如果没有filecode直接跳过
							echo '老稿件直接跳过<br/>';
							$jump++;
							continue;
						}
						$blackCondition = "files_code='$filesCode' and files_code!=''";
					} elseif (count($fileArr) > 1) { //多个附件
						$fileStr = '';
						$filecodeStr = '';
						foreach ($fileArr as $file) {
							$fileStr .= $file['ofilename'].$file['size'];
							if ($file['filecode']) {
								$filecodeStr .= "'{$file['filecode']}',";
							}
						}
						if ($filecodeStr) {
							$filecodeStr = substr($filecodeStr, 0, -1);
							$blackCondition = "files_code in ({$filecodeStr}) and files_code!=''";//检查附件是否在黑名单中的条件
						}
						$filesCode = md5($fileStr);
					} else {
						echo '文件冗余数据出错<br/>';
						continue; //文件冗余数据出错
					}
					$compareCondition = "files_code='$filesCode' and files_code!=''";  //用于后面判断重复
					//define(DEBUG, 1);
					//搜索当前稿件是否已经存在于黑名单中
					if ($blackCondition && ($blockWork = $model->_db->selectOne('lg_works_blacklist', $blackCondition)) != false) {
						$blockReason = '该稿件与黑名单中'.$blockWork['works_id'].'号稿件附件相同';
						echo '该稿件与黑名单中'.$blockWork['works_id'].'号稿件附件相同001';
					}
				} elseif (($blockWork = $model->_db->selectOne('lg_works_blacklist', "content_code='$contentCode' and files_code=''")) != false) {
					$blockReason = '该稿件与黑名单中'.$blockWork['works_id'].'号稿件内容相同';
					echo '该稿件与黑名单中'.$blockWork['works_id'].'号稿件附件相同002';
				}

				if ($blockReason) {
					$block++;
					$workObj = new zbj_service_works($w['works_id']);
					$workObj->addBlacklist(1, 0, '系统添加', $blockReason); //如果已经存在的，会自动跳过
					$workObj->shield();
					$this->addVerify($w, 2, $blockReason);
// 					echo '已经加入屏蔽原因';
					continue;
				}
				//进入正常的稿件库
				$insertData = array(
						'works_id'     => $w['works_id'],
						'task_id'      => $w['task_id'],
						'files'        => $w['files'],
						'files_code'   => $filesCode,
						'content'      => $w['content'],
						'content_code' => $contentCode,
						'user_id'      => $w['user_id'],
						'nickname'     => $w['nickname'],
						'ip'           => $w['ip'],
						'createtime'     => $this->_time,
						'createymd'      => date('Y-m-d', $this->_time)
				);
				$model->_db->insert('lg_works_feature', $insertData);
// 				echo '插入正常稿件库';

				//经验库比对
				$keyData = $model->_db->select('mb_censor', "var in ('works_ip', 'works_content', 'works_nickname')")->items;
				$keyWordsArr = array();
				foreach ($keyData as $key) {
					$keyWordsArr[$key['var']] = explode("|", preg_replace('/[\r\n]+/', '|', $key[cont]));
				}

				$reason = '';
				if (SFilter::checkIp($w['ip'], 0, $keyWordsArr['works_ip'])) {
					$reason = '<a href="/keyword/censor">IP与经验库规则匹配</a>';
				} elseif (SFilter::checkey($w['nickname'], 0, $keyWordsArr['works_nickname'])) {
					$reason = '<a href="/keyword/censor">用户名与经验库规则匹配</a>';
				} elseif (SFilter::checkey($w['content'], 0, $keyWordsArr['works_content'])) {
					$reason = '<a href="/keyword/censor">内容与经验库规则匹配</a>';
				} else {
					$contentCompare = 0;
					if (empty($compareCondition)) {
						$contentCompare = 1;
						$compareCondition = "content_code='$contentCode' and LENGTH(files_code) = 0 ";
					}
					$compareWorks = $model->_db->select('lg_works_feature', $compareCondition.' and works_id!='.$w['works_id'])->items;
					$cWorkNum = count($compareWorks);
					if ($cWorkNum > 0) {
						$worksUrl = "/works/workslist-tid-{$w['task_id']}-worksid-{$w['works_id']}.html";
						if ($contentCompare == 1) {
							$reason = '<span style="color:blue;">内容</span>重复'.$cWorkNum.'次（稿件号：<a href="'.$worksUrl.'" target="_blank">'.$w['works_id'].'</a>）';
						} else {
							$reason = '<span style="color:red;">附件</span>重复'.$cWorkNum.'次（稿件号：<a href="'.$worksUrl.'" target="_blank">'.$w['works_id'].'</a>）';
						}

						foreach ($compareWorks as $cw) {
							$this->addVerify($cw, 0, $reason);
						}
						$reason = preg_replace(array("/{$w['task_id']}/", "/{$w['works_id']}/"), array($compareWorks[0]['task_id'], $compareWorks[0]['works_id']), $reason);
						$logRepeat .= '稿件（'.$w['works_id'].'）重复'.$cWorkNum.'次，';
					}
				}

				if ($reason) {
					$checkPending++;
					$this->addVerify($w, 0, $reason);
				}
			}

			if ($jump) {
				$log .= '跳过 '.$jump.' 个稿件，';
// 				echo '跳过<br/>';
			}
			if ($block) {
				$log .= '系统自动屏蔽 '.$block.' 个稿件，';
// 				echo '屏蔽<br/>';
			}
			if ($checkPending) {
				$log .= '进入待审核库的有 '.$checkPending.' 个稿件';
			}
			if ($logRepeat) {
				$log .= '其他：'.$logRepeat;
			}
			if ($log) {
				$log = '本次总共扫描了 '.count($works).' 个稿件，其中：'.$log;
			} else {
				$log .= '本次总共扫描了 '.count($works).' 个稿件，无操作';
			}
			$lastId = $w['works_id'];
		} else {
			//没有要处理的稿件
			$log = '该时段没有需要处理的稿件';
		}

		//写入处理日志
		$logData = array('works_id' => $lastId, 'dateline' => $this->_time, 'content' => $log);
		$model->_db->insert('lg_works_autohandle', $logData);
		print_r($logData);
	}
    
	/**
	 * 添加稿件审核信息
	 * @param array $work 稿件信息
	 * @param int $state 审核状态 0.待审核，2拒绝
	 * @param string $reason 待审核或者拒绝的原因
	 */
	private function addVerify($work, $state, $reason) {
		$model = zbj_model_api::get('zbj_model_mb_usercert');
		$model->setDbEntry();
		//判断是否重复
		if ($model->selectOne('type=13 and content_id='.$work['works_id'])) {
			return true;
		}

		//组织冗余数据
		$expand = array(
				'info' => array(
						'task_id' => $work['task_id'],
						'files' => empty($work['files']) ? '' : unserialize($work['files'])
				),
				'key'  => $work['content'],
				'reason' => $reason
		);

		$insertData = array(
				'user_id' => $work['user_id'],
				'nickname' => $work['nickname'],
				'ip' => $work['ip'],
				'dateline' => $work['createtime'],
				'dateymd' => $work['createymd'],
				'type' => 13, //13表示稿件审核
				'content_id' => $work['works_id'],
				'status' => $state,
				'expand' => serialize($expand)
		);
		if ($state == 2) {
			$insertData['cp_user'] = '系统自动屏蔽';
			$insertData['opdateline'] = time();
			$insertData['opdateymd'] = date('Y-m-d');
			$insertData['op_result'] = $reason;
		}

		return ($model->insert($insertData));
	}
	/**
	 * @abstract 对降级、末处理以及无进展的订单进行跟踪及调整，每五分钟运行一次
	 * @param array()
	 * @author yuanzhuang
	 * @time 2013-6-25
	 */
	public function pageTaskAdjustment($inPath){
		date_default_timezone_set(PRC);
//		define(DEBUG, true);
		$this->handle_overtime();
		//$this->handle_no_progress();
		$this->correction_data();
		$this->handle_effpro_follow_overtime();
		echo date('Y-m-d H:i:s', $this->_time)." 执行";
	}

	/**
	 * @abstract 处理效果保障跟进超期
	 */
	private function handle_effpro_follow_overtime () {
//		define('DEBUG', true);
		$service_follow = new service_follow();
		$m_effpro_follow = new model_mk_effectprotection();
		$day90 = date('Y-m-d',strtotime('-90 day'));
		$condition = array(
			'is_overtime' => 0,
			"expriestime < {$this->_time}",
			'mk_task.hosted' => 1,
			'mk_task.open_state' => 0,
			'giveup_status' => 0,
			'mk_task.state <= 2',
			"createymd > '{$day90}'"
		);
		$item = array('mk_task.task_id', 'mk_task.manager_id');
		$leftjoin = array('mk_task' => 'mk_task.task_id = mk_task_effect_protection.task_id');

		$overtime_tasks = $m_effpro_follow->select($condition, $item, '', '', $leftjoin)->items;
		if ($overtime_tasks) {
			foreach ($overtime_tasks as $task) {
				$m_effpro_follow->update(array('task_id' => $task['task_id']), array('is_overtime' => 1));

				$service_follow->countFollowNum($task['manager_id'], 'effpro_follow_timeout_num');

				$this->addLog($task['task_id'], "效果保障跟进超期");
			}
		}
	}

	/**
	 * @abstract 修正超期数据
	 */
	private function  correction_data () {
//		define('DEBUG', true);
		$day60 = date('Y-m-d',strtotime('-60 day'));
		$model_task = new zbj_model_mk_task();
		$condition = array(
			'mk_task_opis.is_followtimeout' => 1,
			"createymd > '{$day60}'",
			'state > 0'
		);
		$item = array(
			'mk_task.task_id',
			'mk_task.mode',
			'mk_task.state',
			'mk_task.open_state',
			'mk_task_info.end_type',
			'mk_task.hosted',
			'mk_task.manager_id',
			'mk_follow.giveup_status',
			'mk_follow.issys'
		);
		$leftjoin = array(
			'mk_task_opis' => 'mk_task.task_id = mk_task_opis.task_id',
			'mk_task_info' => 'mk_task.task_id = mk_task_info.task_id',
			'mk_follow' => 'mk_task.task_id = mk_follow.task_id'
		);

		$tasks = $model_task->select($condition, $item, '', '', $leftjoin)->items;

		if ($tasks) {
			$model_task_opis = new zbj_model_mk_taskopis();
			$service_follow = new service_follow();
			foreach ($tasks as $task) {
				//对已先稿的清除标记
				if ((10 == $task['mode'] or 13 == $task['mode']) and 2 < $task['state']) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
				//对关闭的订单清除标记
				if (1 == $task['open_state']) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
				//对已托管的订单清除标记
				if (1 == $task['hosted']) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
				//对雇主放弃或服务商拒绝的订单清除标记
				if (($task['mode'] == 12 or $task['mode'] == 11) and ($task['end_type'] == 2 or $task['end_type'] == 5)) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
				//对交易顾问放弃成功的订单清除超期标记
				if (2 == $task['giveup_status']) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
				//对交易顾问跟进过的订单清除超期标记
				if (0 == $task['issys']) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
				//对网站强行关闭的订单清除超期标记
				if (4 == $task['end_type']) {
					$model_task_opis->update(array('task_id' => $task['task_id']), array('is_followtimeout' => 0));
					$service_follow->countFollowNum($task['manager_id'], 'first_follow_timeout_num', -1);
				}
			}
		}
	}

	/**
	 * @abstract 处理无进展订单
	 */
	public function handle_no_progress(){
		//define(DEBUG, true);
		$model_mk_follow = zbj_model_api::get(model_mk_follow);
		$model_follow_log = zbj_model_api::get(model_mk_followlog);

		//处理无进展或降级的订单
		$condition = "issys=0 and issea=0 and mk_task.hosted=0 and mk_task.mode=10 and dateline > ".($this->_time - 6*60);
		$item = 'follow_id, mk_follow.task_id, thrownum';
		$leftjoin = array('mk_task' => 'mk_task.task_id = mk_follow.task_id');
		$follows = $model_mk_follow->select($condition, $item, '', '', $leftjoin)->items;

		if($follows){
			foreach($follows as $follow){
				$condition = "task_id = {$follow['task_id']}";
				$item = array('level', 'oldlevel', 'log_id', 'manager_id', 'issea');
				$orderby = 'ORDER BY dateline DESC';

				$follow_logs = $model_follow_log->select($condition, $item, '', $orderby)->items;
				if($follow_logs){
					if($this->get_hightest_level($follow_logs) <= 3){
						$logs = array();
						for($i = 0; $i < count($follow_logs); $i ++){
							if($follow_logs[$i]['issea'] != 0){
								break;
							}else{
								if($follow_logs[$i]['level'] < 10 && $follow_logs[$i]['oldlevel'] < 10){
									$logs[] = $follow_logs[$i];
								}else{
									break;
								}
							}
						}

						if($logs){
							if($follow['thrownum']%2 == 0){
								if(count($logs) >= 2){
									if($logs[1]['level'] >= $logs[1]['oldlevel']){
										if($logs[0]['level'] >= $logs[0]['oldlevel']){
											$service_follow = new service_follow($follow['follow_id']);
											$service_follow->inSea();
											$this->addLog($follow['task_id'], "订单因降级或无进展被扔到了 小组公海");
											echo "订单号为 ".$follow['task_id']." 的订单因降级或无进展被扔到了 小组公海<br/>";
										}
									}
								}
							}else{
								if($logs[0]['level'] >= $logs[0]['oldlevel']){
									$service_follow = new service_follow($follow['follow_id']);
									$service_follow->inSea();
									$this->addLog($follow['task_id'], "订单因降级或无进展被扔到了 中心公海");
									echo "订单号为 ".$follow['task_id']." 的订单因降级或无进展被扔到了 中心公海<br/>";
								}
							}
						}
					}
				}
			}
		}
	}

	/**
	 * @abstract 处理超期订单
	 */
	private function handle_overtime(){
		define(DEBUG, true);
		$day60 = date('Y-m-d',strtotime('-60 day'));
		$model_mk_follow = zbj_model_api::get(model_mk_follow);
		$condition = array(
			"expriestime < {$this->_time}",
			'issea' => 0,
			'mk_follow.is_overtime' => 0,
			'mk_task.hosted' => 0,
			'mk_task.open_state' => 0,
			'mk_follow.giveup_status in (0, 3)',
			'((mk_task.mode = 13 and mk_task.state <= 2) or (mk_task.mode = 10 and mk_task.state <= 2) or (mk_task.mode in (11,12) and mk_task.state <= 3))',
			"createymd > '{$day60}'"
		);
		$item = array(
			'follow_id',
			'mk_follow.task_id',
			'mk_task.manager_id',
			'mk_task.manager_name',
			'mk_task.title',
			'thrownum',
			'inseatime',
			'issea',
			'issys',
			'expriestime',
			'giveup_option',
			'end_type',
			'mode',
			'mk_task.state',
			'is_offline_allot',
			'islock',
			'audit_state',
			'mk_follow.giveup_status',
			'mk_task_opis.ht'
		);
		$leftjoin = array(
			'mk_task' => 'mk_task.task_id = mk_follow.task_id',
			'mk_task_opis' => 'mk_task.task_id = mk_task_opis.task_id',
			'mk_task_info' => 'mk_task_info.task_id = mk_follow.task_id'
		);

		$follows = $model_mk_follow->select($condition, $item, '', '', $leftjoin)->items;

		if($follows){
			foreach($follows as $follow){
				if($follow['expriestime'] == 0){
					//对锁定雇主的提交不作处理
					continue;
				}

				if($follow['issys']){
					if ($follow['expriestime'] < 1378889556) {//2013-09-11 16:53以前的数据不处理
						continue;
					}

					if (($follow['mode'] == 12 or $follow['mode'] == 11) and ($follow['end_type'] == 2 or $follow['end_type'] == 5)) {
						//对雇佣或购买服务中雇主放弃或服务商拒绝不作处理
						continue;
					}

					if (($follow['mode'] == 10 or $follow['mode'] == 13) and $follow['state'] > 2) {
						//对已选稿或结束并按打款的订单不作处理
						continue;
					}

					if (4 == $follow['end_type']) {
						//对网站强行关闭的订单不作处理
						continue;
					}

					if (1 == $follow['is_offline_allot']) {
						//对交易顾问未上线分配的订单不作处理
						continue;
					}

					if (1 == $follow['islock']) {
						//对锁定雇主、锁定服务商的订单不作处理
						continue;
					}

//					if (10 == $follow['mode'] and (0 == $follow['audit_state'] or 2 == $follow['audit_state'])) {
//						//对悬赏订单未审核或审核未通过的订单不作处理
//						continue;
//					}

					if (1 == $follow['giveup_status']) {
						//申请放弃中的订单不超期
						continue;
					}

					if ((12 == $follow['mode']) or (11 == $follow['mode'])) {
						//对雇佣服务商开始工作的订单不作处理
						$m_fn_order = new zbj_model_fn_order();
						$order = $m_fn_order->selectOne(array('product_pkid' => $follow['task_id'], 'stype' => 16));
						if ($order['isaccept_buy'] && $order['isaccept_sl']) {
							continue;
						}
					}

					$m_taskopis = new zbj_model_mk_taskopis();
					$result = $m_taskopis->update(array('task_id' => $follow['task_id']), array('is_followtimeout' => 1, 'is_timeoutever' => 1));
					if ($result) {
						$model_mk_follow->update(array('task_id' => $follow['task_id']), array('is_overtime' => 1));
						
						$s_msg = new service_msg();
						$s_msg->add($follow['manager_id'], $follow['manager_name'], 0, '系统提醒', '系统评级订单超期', '你有一个订单已超期: <a href="http://'.$_SERVER['HTTP_HOST'].'/task/lastview-id-'.$follow['task_id'].'.html">'.$follow['title'].'</a>' ,2, $follow['task_id']);

						//统计超期次数
						$service_follow = new service_follow($follow['follow_id']);
						$service_follow->countFollowNum($follow['manager_id'], 'first_follow_timeout_num');

						$this->addLog($follow['task_id'], "系统评级订单超期");
						echo "订单号为 ".$follow['task_id']." 系统评级订单超期<br/>";
					}

//					if($follow['giveup_option'] == 0){
//						if($this->clear($follow['task_id'])){
//							$this->addLog($follow['task_id'], "因超期将重新进行分配");
//							echo "订单号为 ".$follow['task_id']." 的订单因超期 在 ".date('Y-m-d H:i', $this->_time)." 将重新进行分配<br/>";
//
//						}
//					}

					continue;
				}

				if (1 == $follow['ht']) {
					$model_mk_follow->update(array('task_id' => $follow['task_id']), array('is_overtime' => 1));

					//统计超期次数
					$service_follow = new service_follow($follow['follow_id']);
					$service_follow->countFollowNum($follow['manager_id'], 'follow_timeout_num');

					$this->addLog($follow['task_id'], "经纪人委托需求超期");
					echo "订单号为 ".$follow['task_id']." 经纪人委托需求超期<br/>";

					continue;
				}

				if($follow['thrownum']%2 == 0){
					$service_follow = new service_follow($follow['follow_id']);
					if ($service_follow->inSea()) {
						$service_follow->countFollowNum($follow['manager_id'], 'follow_timeout_num');

						$this->addLog($follow['task_id'], "因超期进入小组公海");
						echo "订单号为 ".$follow['task_id']." 的订单因超期 在 ".date('Y-m-d H:i', $this->_time)." 进入了 小组公海<br/>";
					}
				}else{
					$service_follow = new service_follow($follow['follow_id']);
					if ($service_follow->inSea()) {
//	   					$service_follow->countFollowNum($follow['manager_id'], 'follow_timeout_num');

						$this->addLog($follow['task_id'], "因超期进入中心公海");
						echo "订单号为 ".$follow['task_id']." 的订单因超期 在 ".date('Y-m-d H:i', $this->_time)." 进入了 中心公海<br/>";
					}
				}
			}
		}

		$condition = "inseatime < {$this->_time} and issea=1 and mk_task.hosted=0 and mk_task.open_state=0 and mk_follow.giveup_status in (0, 3)";

		$follows = $model_mk_follow->select($condition, $item, '', '', $leftjoin)->items;
		if($follows){
			foreach($follows as $follow){
				if($follow['expriestime'] == 0){
					//对锁定雇主的提交不作处理
					continue;
				}

				if($follow['issys'] == 1){
					if($follow['inseatime'] + 1*60*60 < $this->_time){
						$service_follow = new service_follow($follow['follow_id']);
						if ($service_follow->inSea()) {
//							$service_follow->countFollowNum($follow['manager_id'], 'follow_timeout_num');

							$this->addLog($follow['task_id'], "因超期进入中心公海");
							echo "订单号为 ".$follow['task_id']." 的订单因超期 在 ".date('Y-m-d H:i', $this->_time)." 进入了 中心公海<br/>";
						}
					}
				}else{
					if($follow['inseatime'] + 12*60*60 < $this->_time){
						$service_follow = new service_follow($follow['follow_id']);
						if ($service_follow->inSea()) {
//							$service_follow->countFollowNum($follow['manager_id'], 'follow_timeout_num');

							$this->addLog($follow['task_id'], "因超期进入中心公海");
							echo "订单号为 ".$follow['task_id']." 的订单因超期 在 ".date('Y-m-d H:i', $this->_time)." 进入了 中心公海<br/>";
						}
					}
				}
			}
		}
	}

	/**
	 * 对系统评级的订单进行清空操作
	 */
	public function clear($task_id){
		//清空数据以便重新分配
		$service_task = new service_task($task_id);

		$service_task->set('manager_id', 0);
		$service_task->set('manager_name', '');
		$service_task->set('manager_teamid', 0);
		$service_task->set('m_is_at', 0);
		if($service_task->save()){
			$m_taskopis = new zbj_model_mk_taskopis();
			$m_taskopis->update(array('task_id' => $task_id), array('is_followtimeout' => 1));

			$service_allot = new zbj_service_allot(2);
			if($service_allot->processed($task_id)){
				$m_follow = new model_mk_follow();
				$m_follow->delete("task_id = {$task_id}");

				$m_follow_log = new model_mk_followlog();
				$m_follow_log->delete("task_id = {$task_id}");

				return true;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}

	/**
	 * @abstract 获取当前订单最早出现的最高等级
	 * @param array() $logs
	 * @param int $count
	 * @return array() 返回最高等级以及最早出现有位置
	 */
//	public function get_hightest_level($logs){
//		$result = array(
//			'hightest_level' => 4,
//			'location' => -1
//		);
//
//		$count = count($logs);
//		for($i = 0; $i < $count; $i ++){
//			if($result['hightest_level'] >= $logs[$i]['level']){
//				$result['hightest_level'] = $logs[$i]['level'];
//				$result['location'] = $i;
//			}
//		}
//
//		return $result['hightest_level'];
//	}

	public function pageSyncTel() {
		$mUser = new zbj_model_cp_user();
		$list = $mUser->select("worknum!=''")->items;
		if ($list) {
			$mPerson = new zbj_model_mb_customerperson();
			foreach ($list as $value) {
				$mPerson->update(array('managerid' => $value['user_id']), array('manager_tel' => $value['worknum']));
				echo "sync user:{$value['user_id']} <br>";
			}
		}
	}
	/**
	 * 今日订单分配概况
	 */
	public function pageTodayAllot(){
		$mUser = new zbj_model_cp_user();
		$uList = $mUser->select("group_id in (101, 7, 8, 74, 75, 76, 104)", 'user_id,group_id,name')->items;
		$cpallot = new service_cpallot();
		$userinfo = array();
		foreach ($uList as $key => $value) {
			$manager_id = $value['user_id'];
			$userinfo[$key]['manager_id'] = $manager_id;
			$userinfo[$key]['manager_name'] = $value['name'];
			//已分配订单
			$userinfo[$key]['allocated'] = $cpallot->getAllocated($manager_id);
			//锁定雇主订单
			$quotainfo = $cpallot->getQuotaInfo($manager_id);
			$userinfo[$key]['locktask'] = $quotainfo['locktask']; //锁定雇主订单
			$userinfo[$key]['locktask_hosted'] = $quotainfo['locktask_hosted']; //已托管锁定雇主订单
			$userinfo[$key]['unlocktask'] = $quotainfo['unlocktask']; //锁定公海雇主订单
			$userinfo[$key]['unlocktask_claim'] = $cpallot->getClaimNum($manager_id); //已认领锁定公海雇主订单
			$userinfo[$key]['unlocktask_hosted'] = $quotainfo['unlocktask_hosted']; //已托管锁定公海雇主订单
			$userinfo[$key]['close_num'] = $quotainfo['close']; //已关闭
			$userinfo[$key]['drop_num'] = $quotainfo['drop']; //已放弃
			//剩余订单配额
			$userinfo[$key]['max_num'] = $cpallot->getMax($manager_id);
			$userinfo[$key]['createdate'] = date('Y-m-d', $this->_time);
			$userinfo[$key]['createtime'] = $this->_time;
		}
		$mAllottoday = new model_cp_allottoday();
		$mAllottoday->addMultiple($userinfo);
	}

	public function pageFollowDel(){
//		define('DEBUG', 1);
		$mFollow = new model_mk_follow();
		$flist = $mFollow->select("", "task_id,count(*) num", "GROUP BY task_id HAVING num >1")->items;
		if (!$flist) {
			return "no data";
		}
		$fids = array();
		foreach ($flist as $value) {
			$tlist = $mFollow->select(array('task_id' => $value['task_id']), 'follow_id', '', 'order by follow_id desc')->items;
			if ($tlist) {
				$f = false;
				foreach ($tlist as $v) {
					if ($f) {
						$fids[] = $v['follow_id'];
					}
					$f = true;
				}
			}
		}
		if ($fids) {
			$fid = implode(',', $fids);
			$mFollow->delete("follow_id in ($fid)");
		}
		return '共删除：' . count($fids);
	}
	/**
	 * 任务没有分配就已经托管，交易顾问为0，为该任务指定交易顾问
	 * boss.zhubajie.com/crontab/UpdateFollowManager?begin=2013-08-01&end=2013-08-21&page=1
	 */
	public function pageUpdateFollowManager(){
		$m_performance = new model_mk_performance();
		$begin = isset($_GET['begin'])?zbj_lib_BaseUtils::getStr($_GET['begin']):date('Y-m-d');
		$end = isset($_GET['end'])?zbj_lib_BaseUtils::getStr($_GET['end']):date('Y-m-d');
		$page = isset($_GET['page'])?zbj_lib_BaseUtils::getStr($_GET['page'],'int'):1;
		$limit = 500;
		$m_performance->setLimit($limit);
		$m_performance->setPage($page);
		$leftjoin = array(
				'mk_task'=>'mk_task.task_id = mk_performance.task_id'
				);
		$performanceList = $m_performance->select("mk_performance.manager_id=0 and mk_task.manager_id !=0 and lastdate >='{$begin}' and lastdate<='{$end}'", "performance_id,mk_task.task_id,mk_task.manager_id,mk_task.manager_name", null,null,$leftjoin,array('dbinfo' => 'co_market'))->items;
		if (count($performanceList) == $limit){
			echo "需要更新的数据超过{$limit}，等执行完毕后，请直接将page+1并刷新浏览器";
		}else{
			echo "需要更新的数据共".count($performanceList)."条<br/>";
		}
		if ($performanceList){
			foreach ($performanceList as $k=>$v){
				if ($v['manager_id']){
					if($m_performance->update(array('performance_id'=>$v['performance_id']),array('manager_id'=>$v['manager_id'], 'manager_name'=>$v['manager_name'])) !== false){
						echo "成功更新了mk_performance表中记录，performance_id=".$v['performance_id']."<br/>";
					}else{
						echo "不需要更新的任务号task_id=".$v['task_id']."，performance_id=".$v['performance_id']."<br/>";
					}
				}
				if ($k== (count($performanceList) -1)){
					echo "本次更新完毕！";
				}
			}
		}else{
			echo "没有要更新的数据！";
		}
	}

	/**
	 * 公海客户:mk_task_opis.islock=0
	 * 悬赏-售前跟进积分score_item_id=5
	 * mk_task_opis中clound_id云客服id  托管前交易顾问跟进：mk_follow.issys=0
	 */
	 public function pageSeaHostedFollowScore(){
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	//获取公海客户 悬赏-售前跟进积分score_item_id=5
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//无云客服服务，无交易顾问跟进：云客服积分0%，交易顾问积分0%，产品贡献积分50%
	 	//无云客服服务，有交易顾问跟进：云客服积分0%，交易顾问积分50%
	 	//有云客服服务，无交易顾问跟进：云客服积分50%，交易顾问积分0%
	 	//有云客服服务，有交易顾问跟进：云客服积分25%，交易顾问积分25%
	 	//易顾问积分悬赏以下三种情况会加倍
	 	//从中心公海认领并托管的需求奖励2倍积分:mk_follow.thrownum >0 and mk_follow.isclaim=1
	 	//从资源库认领并托管的需求奖励1.5倍积分:  mk_follow.is_frompubdomain=1
	 	//自动担保的需求，有效果保障跟进且需求产生了加价的，效果保障部分的积分乘以2倍thrownum =0 and is_frompubdomain=0 and issys=1 and (allot=1 or allot=2)
	 	if ($_GET['debug']){
			define(DEBUG, 1);
		}
	 	$sql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,t.hosted_date,t.hosted_time,
	 	case
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.5*".service_score::SCORE_SEA."
	 		when o.cloud_id=0 and f.is_effective_follow=1  and f.is_frompubdomain=1 then o.pub_amount*0.5*".service_score::SCORE_NATURE."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1  and f.is_frompubdomain=0 then o.pub_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum =0 then o.pub_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum is null then o.pub_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.25*".service_score::SCORE_SEA."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then o.pub_amount*0.25*".service_score::SCORE_NATURE."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then o.pub_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum =0 then o.pub_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum is null then o.pub_amount*0.25
		 	else 0 end as manager_score,
	 	case when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) then o.pub_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 then o.pub_amount*0.25
		 	else 0 end as cloud_score,
		case when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.5*".service_score::SCORE_SEA."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and  f.is_frompubdomain=1 then o.pub_amount*0.5*".service_score::SCORE_NATURE."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and  f.is_frompubdomain=0 then o.pub_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum is null then o.pub_amount*0.5
			else 0 end as product_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where hosted=1 and t.mode=10 and t.hosted_date>='{$start}' and t.hosted_date<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) and hosted=1";
	 	$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
	 	if ($task) {
	 		$data = array();
	 		foreach ($task as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 5;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['cloud_id'] = $v['cloud_id'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['cloud_score'] = $v['cloud_score'];
	 			$data[$k]['product_score'] = $v['product_score'];
	 			$data[$k]['createtime'] = $v['hosted_time'];
	 			$data[$k]['createymd'] = $v['hosted_date'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score','cloud_score','product_score'));
	 	}else{
	 		echo "没有相应的任务来添加绩效积分！<br/>";
	 	}
	 	//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
	 	//p.first_follow_time<a.dateline
	 	$addsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,a.dateymd,a.dateline,
	 	sum(a.amount) as amount,
	 	f.is_effective_follow as f_is_effective_follow,f.first_effect_follow_time as f_first_effect_follow_time,
	 	f.thrownum,f.isclaim,f.is_frompubdomain,
	 	p.is_effective_follow as p_is_effective_follow,p.first_follow_time as p_first_follow_time
	 	from mk_task_addamount a
	 	left join mk_task t on a.task_id = t.task_id
	 	left join mk_task_opis o on a.task_id = o.task_id
	 	left join mk_follow f on a.task_id = f.task_id
	 	left join mk_task_effect_protection p on a.task_id = p.task_id
	 	where hosted=1 and a.state=0 and t.mode=10 and a.dateymd>='{$start}' and a.dateymd<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) group by a.dateymd,a.task_id";
	 	//公海客户 悬赏-售前跟进加价积分score_item_id=11
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 11;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['cloud_id'] = $v['cloud_id'];
				$manager_score = 0;
				if(($v['f_is_effective_follow'] ==1 && $v['f_first_effect_follow_time'] < $v['dateline']) || ($v['p_is_effective_follow'] ==1 && $v['p_first_effect_follow_time'] < $v['dateline'])) {
					if($v['thrownum']>0 && $v['isclaim']==1){
						$manager_score = $v['amount']*service_score::SCORE_SEA;
					}else if($v['is_frompubdomain'] == 1){
						$manager_score = $v['amount']*service_score::SCORE_NATURE;
					}else{
						$manager_score = $v['amount'];
					}
				}
				$product_score = 0;
				if($v['p_is_effective_follow']==0 || !$v['p_is_effective_follow']) {
					if($v['thrownum']>0 && $v['isclaim']==1){
						$product_score = $v['amount']*service_score::SCORE_SEA;
					}else if($v['is_frompubdomain'] == 1){
						$product_score = $v['amount']*service_score::SCORE_NATURE;
					}else{
						$product_score = $v['amount'];
					}
				}
				$addData[$k]['manager_score'] = $manager_score*0.5;
				$addData[$k]['product_score'] = $product_score*0.5;
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($addData,array('manager_score','cloud_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加绩效加价积分！<br/>";
		}
	 	//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
// 		1售前有交易顾问得分的任务：
// 		（托管金额*得分比例+加价*得分比例；退款：退款得分：退款金额*托管金额得分的最小比例（最大为50%，最小为25%））
// 		2.交易顾问售前没有得分的任务，加价部分得分：如果退款金额>=加价，加价*0.5；如果退款金额<加价，退款金额*0.5
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		//p.first_follow_time<a.dateline
	 	$refundsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,i.close_time,i.close_ymd,
	 	sum(case when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.5*".service_score::SCORE_SEA."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then i.refund_amount*0.5*".service_score::SCORE_NATURE."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then i.refund_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum =0 then i.refund_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum is null then i.refund_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.25*".service_score::SCORE_SEA."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then i.refund_amount*0.25*".service_score::SCORE_NATURE."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then i.refund_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum =0 then i.refund_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum is null then i.refund_amount*0.25
		 	else 0 end) as manager_score,
	 	sum(case
	 	    when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) and i.refund_amount >= o.pub_amount then o.pub_amount*0.5
	 	    when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) and i.refund_amount < o.pub_amount then i.refund_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and i.refund_amount >= o.pub_amount then o.pub_amount*0.25
		 	when o.cloud_id>0 and f.is_effective_follow=1 and i.refund_amount < o.pub_amount then i.refund_amount*0.25
		 	else 0 end) as cloud_score,
		sum(case when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.5*".service_score::SCORE_SEA."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=1 then i.refund_amount*0.5*".service_score::SCORE_NATURE."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=0 then i.refund_amount*0.5
			when o.cloud_id=0 and f.is_frompubdomain=0  then i.refund_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum is null then i.refund_amount*0.5
			else 0 end) as product_score
	 	from mk_task_info i
	 	left join mk_task t on i.task_id = t.task_id
	 	left join mk_task_opis o on i.task_id = o.task_id
	 	left join mk_follow f on i.task_id = f.task_id
	 	left join mk_task_effect_protection p on i.task_id = p.task_id
	 	where hosted=1 and t.hosted_date>='2013-10-16' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=10  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
	 	//公海客户 悬赏-退款积分score_item_id=15
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));

		//交易顾问售前没有得分，加价得分的任务，如果加价>=退款，则退款分数manager_score=退款金额*0.25,否则=加价金额*0.25
		$addAmountManagerSql = "select t.task_id,sum(a.amount)*0.5 as amount from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
	 	left join mk_follow f on a.task_id = f.task_id
	 	left join mk_task_effect_protection p on a.task_id = p.task_id
		where f.is_effective_follow=0 and p.is_effective_follow=1 and p.first_follow_time<a.dateline and hosted=1 and t.hosted_date>='2013-09-12' and refund_time >= unix_timestamp('{$date} 00:00:00') and refund_time<=unix_timestamp('{$date} 23:59:59') and refund_state=1 and t.mode=10  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
		$addAmountManager = $m_task->query($addAmountManager, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 15;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['cloud_id'] = $v['cloud_id'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				if ($addAmountManager) {
					foreach ($addAmountManager as $key => $value) {
						if ($v['task_id'] == $value['task_id']){
							if ($v['manager_score'] >= $value['amount']) {
								$refundData[$k]['manager_score'] = $value['amount'];
							}
						}
					}
				}
				$refundData[$k]['cloud_score'] = $v['cloud_score'];
				$refundData[$k]['product_score'] = $v['product_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundData,array('manager_score','cloud_score','product_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加绩效退款积分！<br/>";
		}
		//10月16日及之前托管的需求（托管时间<=16日），16号之后产生退款的原交易顾问扣分=退款金额*50% 原服务商经纪人不扣分
		$refundOldSql = "select t.task_id,t.manager_id,t.manager_name,i.refund_amount*0.5 as manager_score,i.close_time,i.close_ymd
		from mk_task_info i
		left join mk_task t on i.task_id = t.task_id
		left join mk_task_opis o on i.task_id = o.task_id
		where hosted=1 and t.hosted_date<'2013-10-16' and t.hosted_date>='2013-10-01' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=10  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";//退款
		$refundOld = $m_task->query($refundOldSql, null, null, array('dbinfo' => 'co_market'));
		if ($refundOld) {
			$refundOldData = array();
			foreach ($refundOld as $k=>$v){
				$refundOldData[$k]['task_id'] = $v['task_id'];
				$refundOldData[$k]['score_item_id'] = 15;
				$refundOldData[$k]['manager_id'] = $v['manager_id'];
				$refundOldData[$k]['manager_name'] = $v['manager_name'];
				$refundOldData[$k]['manager_score'] = $v['manager_score'];
				$refundOldData[$k]['createtime'] = $v['close_time'];
				$refundOldData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundOldData,array('manager_score'));
			// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有2013-10-16之前托管的任务来添加绩效退款积分！<br/>";
		}
		$refundOldSql = "select t.task_id,t.manager_id,t.manager_name,i.refund_amount*0.5 as manager_score,i.close_time,i.close_ymd
		from mk_task_info i
		left join mk_task t on i.task_id = t.task_id
		left join mk_task_opis o on i.task_id = o.task_id
		where hosted=1 and t.hosted_date<'2013-10-01' and t.hosted_date>='2013-06-01' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=10  and (t.manager_id != 106 and o.cloud_server_id=0) and t.manager_id not in (49,2282,688,1046,582,344,412,1118,1127)  group by t.task_id";//退款
		$refundOld = $m_task->query($refundOldSql, null, null, array('dbinfo' => 'co_market'));
		if ($refundOld) {
			$refundOldData = array();
			foreach ($refundOld as $k=>$v){
				$refundOldData[$k]['task_id'] = $v['task_id'];
				$refundOldData[$k]['score_item_id'] = 15;
				$refundOldData[$k]['manager_id'] = $v['manager_id'];
				$refundOldData[$k]['manager_name'] = $v['manager_name'];
				$refundOldData[$k]['manager_score'] = $v['manager_score'];
				$refundOldData[$k]['createtime'] = $v['close_time'];
				$refundOldData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundOldData,array('manager_score'));
			// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有2013-10-01之前托管的任务来添加绩效退款积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	/**
	 * 公海客户:mk_task_opis.islock=0
	 * 招标-售前跟进积分score_item_id=21
	 * mk_task_opis中clound_id云客服id  托管前交易顾问跟进：mk_follow.issys=0
	 */
	 public function pageSeaHostedFollowZbScore(){
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	//获取公海客户 悬赏-售前跟进积分score_item_id=5
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//无云客服服务，无交易顾问跟进：云客服积分0%，交易顾问积分0%，产品贡献积分50%
	 	//无云客服服务，有交易顾问跟进：云客服积分0%，交易顾问积分50%
	 	//有云客服服务，无交易顾问跟进：云客服积分50%，交易顾问积分0%
	 	//有云客服服务，有交易顾问跟进：云客服积分25%，交易顾问积分25%
	 	//易顾问积分悬赏以下三种情况会加倍
	 	//从中心公海认领并托管的需求奖励2倍积分:mk_follow.thrownum >0 and mk_follow.isclaim=1
	 	//从资源库认领并托管的需求奖励1.5倍积分:  mk_follow.is_frompubdomain=1
	 	//自动担保的需求，有效果保障跟进且需求产生了加价的，效果保障部分的积分乘以2倍thrownum =0 and is_frompubdomain=0 and issys=1 and (allot=1 or allot=2)
	 	if ($_GET['debug']){
			define(DEBUG, 1);
		}
	 	$sql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,t.hosted_date,t.hosted_time,
	 	case
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then o.pub_amount*".service_score::SCORE_SEA."
	 		when o.cloud_id=0 and f.is_effective_follow=1  and f.is_frompubdomain=1 then o.pub_amount*".service_score::SCORE_NATURE."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then o.pub_amount
	 		when o.cloud_id=0 and f.is_effective_follow=1  and f.is_frompubdomain=0 then o.pub_amount
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum =0 then o.pub_amount
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum is null then o.pub_amount
		 	when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.75*".service_score::SCORE_SEA."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then o.pub_amount*0.75*".service_score::SCORE_NATURE."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.75
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then o.pub_amount*0.75
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum =0 then o.pub_amount*0.75
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum is null then o.pub_amount*0.75
		 	else 0 end as manager_score,
	 	case when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) then o.pub_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 then o.pub_amount*0.25
		 	else 0 end as cloud_score,
		case when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.5*".service_score::SCORE_SEA."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and  f.is_frompubdomain=1 then o.pub_amount*0.5*".service_score::SCORE_NATURE."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and  f.is_frompubdomain=0 then o.pub_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum is null then o.pub_amount*0.5
			else 0 end as product_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where hosted=1 and t.mode=13 and t.hosted_date>='{$start}' and t.hosted_date<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) and hosted=1";
	 	$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
	 	if ($task) {
	 		$data = array();
	 		foreach ($task as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 21;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['cloud_id'] = $v['cloud_id'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['cloud_score'] = $v['cloud_score'];
	 			$data[$k]['product_score'] = $v['product_score'];
	 			$data[$k]['createtime'] = $v['hosted_time'];
	 			$data[$k]['createymd'] = $v['hosted_date'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score','cloud_score','product_score'));
	 	}else{
	 		echo "没有相应的任务来添加绩效积分！<br/>";
	 	}
	 	//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
	 	//p.first_follow_time<a.dateline
	 	$addsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,a.dateymd,a.dateline,sum(a.amount) as amount,
	 	f.is_effective_follow as f_is_effective_follow,f.first_effect_follow_time as f_first_effect_follow_time,
	 	f.thrownum,f.isclaim,f.is_frompubdomain,
	 	p.is_effective_follow as p_is_effective_follow,p.first_follow_time as p_first_follow_time
	 	from mk_task_addamount a
	 	left join mk_task t on a.task_id = t.task_id
	 	left join mk_task_opis o on a.task_id = o.task_id
	 	left join mk_follow f on a.task_id = f.task_id
	 	left join mk_task_effect_protection p on a.task_id = p.task_id
	 	where hosted=1 and a.state=0 and t.mode=13 and a.dateymd>='{$start}' and a.dateymd<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) group by a.dateymd,a.task_id";
	 	//公海客户 悬赏-售前跟进加价积分score_item_id=11
	 	define(DEBUG, 1);
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 24;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['cloud_id'] = $v['cloud_id'];
				$manager_score = 0;
				if(($v['f_is_effective_follow'] ==1 && $v['f_first_effect_follow_time'] < $v['dateline']) || ($v['p_is_effective_follow'] ==1 && $v['p_first_effect_follow_time'] < $v['dateline'])) {
					if($v['thrownum']>0 && $v['isclaim']==1){
						$manager_score = $v['amount']*service_score::SCORE_SEA;
					}else if($v['is_frompubdomain'] == 1){
						$manager_score = $v['amount']*service_score::SCORE_NATURE;
					}else{
						$manager_score = $v['amount'];
					}
				}
				$product_score = 0;
				if($v['p_is_effective_follow']==0 || !$v['p_is_effective_follow']) {
					if($v['thrownum']>0 && $v['isclaim']==1){
						$product_score = $v['amount']*service_score::SCORE_SEA;
					}else if($v['is_frompubdomain'] == 1){
						$product_score = $v['amount']*service_score::SCORE_NATURE;
					}else{
						$product_score = $v['amount'];
					}
				}
				$addData[$k]['manager_score'] = $manager_score;
				$addData[$k]['product_score'] = $product_score;
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($addData,array('manager_score','cloud_score'));

// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加绩效加价积分！<br/>";
		}
	 	//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
// 		1售前有交易顾问得分的任务：
// 		（托管金额*得分比例+加价*得分比例；退款：退款得分：退款金额*托管金额得分的最小比例（最大为50%，最小为25%））
// 		2.交易顾问售前没有得分的任务，加价部分得分：如果退款金额>=加价，加价*0.5；如果退款金额<加价，退款金额*0.5
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		//p.first_follow_time<a.dateline
	 	$refundsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,i.close_time,i.close_ymd,
	 	sum(case when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then i.refund_amount*".service_score::SCORE_SEA."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then i.refund_amount*".service_score::SCORE_NATURE."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then i.refund_amount
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then i.refund_amount
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum =0 then i.refund_amount
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum is null then i.refund_amount
		 	when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.75*".service_score::SCORE_SEA."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then i.refund_amount*0.75*".service_score::SCORE_NATURE."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.75
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then i.refund_amount*0.75
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum =0 then i.refund_amount*0.75
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum is null then i.refund_amount*0.75
		 	else 0 end) as manager_score,
	 	sum(case
	 	    when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) and i.refund_amount >= o.pub_amount then o.pub_amount*0.5
	 	    when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) and i.refund_amount < o.pub_amount then i.refund_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and i.refund_amount >= o.pub_amount then o.pub_amount*0.25
		 	when o.cloud_id>0 and f.is_effective_follow=1 and i.refund_amount < o.pub_amount then i.refund_amount*0.25
		 	else 0 end) as cloud_score,
		sum(case when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.5*".service_score::SCORE_SEA."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=1 then i.refund_amount*0.5*".service_score::SCORE_NATURE."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=0 then i.refund_amount*0.5
			when o.cloud_id=0 and f.is_frompubdomain=0  then i.refund_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum is null then i.refund_amount*0.5
			else 0 end) as product_score
	 	from mk_task_info i
	 	left join mk_task t on i.task_id = t.task_id
	 	left join mk_task_opis o on i.task_id = o.task_id
	 	left join mk_follow f on i.task_id = f.task_id
	 	left join mk_task_effect_protection p on i.task_id = p.task_id
	 	where hosted=1 and t.hosted_date>='2013-10-16' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=13  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
	 	//公海客户 悬赏-退款积分score_item_id=15
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		//交易顾问售前没有得分，加价得分的任务，如果加价>=退款，则退款分数manager_score=退款金额*0.25,否则=加价金额*0.25
		$addAmountManagerSql = "select t.task_id,sum(a.amount)*0.5 as amount from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
	 	left join mk_follow f on a.task_id = f.task_id
	 	left join mk_task_effect_protection p on a.task_id = p.task_id
		where f.is_effective_follow=0 and p.is_effective_follow=1 and p.first_follow_time<a.dateline and hosted=1 and t.hosted_date>='2013-09-12' and refund_time >= unix_timestamp('{$date} 00:00:00') and refund_time<=unix_timestamp('{$date} 23:59:59') and refund_state=1 and t.mode=13  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
		$addAmountManager = $m_task->query($addAmountManager, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 18;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['cloud_id'] = $v['cloud_id'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				if ($addAmountManager) {
					foreach ($addAmountManager as $key => $value) {
						if ($v['task_id'] == $value['task_id']){
							if ($v['manager_score'] >= $value['amount']) {
								$refundData[$k]['manager_score'] = $value['amount'];
							}
						}
					}
				}
				$refundData[$k]['cloud_score'] = $v['cloud_score'];
				$refundData[$k]['product_score'] = $v['product_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundData,array('manager_score','cloud_score','product_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加绩效退款积分！<br/>";
		}

		$noSaleFollowRefundSql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,i.close_time,i.close_ymd,
		sum(case
		when o.cloud_id=0  and f.thrownum >0 and f.isclaim=1 and i.refund_amount <= o.pub_amount then i.refund_amount*0.5*".service_score::SCORE_SEA."
		when o.cloud_id=0  and f.is_frompubdomain=1 and i.refund_amount <= o.pub_amount then i.refund_amount*0.5*".service_score::SCORE_NATURE."
		when o.cloud_id=0  and f.thrownum >0 and f.isclaim=0 and i.refund_amount <= o.pub_amount then i.refund_amount*0.5
		when o.cloud_id=0  and f.is_frompubdomain=0 and i.refund_amount <= o.pub_amount then i.refund_amount*0.5
		when o.cloud_id=0  and f.thrownum =0 and i.refund_amount <= o.pub_amount then i.refund_amount*0.5
		when o.cloud_id=0  and f.thrownum is null and i.refund_amount <= o.pub_amount then i.refund_amount*0.5
		when o.cloud_id=0  and f.thrownum >0 and f.isclaim=1 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)*".service_score::SCORE_SEA."
		when o.cloud_id=0  and f.is_frompubdomain=1 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)*".service_score::SCORE_NATURE."
		when o.cloud_id=0  and f.thrownum >0 and f.isclaim=0 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		when o.cloud_id=0  and f.is_frompubdomain=0 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		when o.cloud_id=0  and f.thrownum =0 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		when o.cloud_id=0  and f.thrownum is null and i.refund_amount > o.pub_amount then i.refund_amount*0.5
		when o.cloud_id>0  and f.thrownum >0 and f.isclaim=1 and i.refund_amount <= o.pub_amount then i.refund_amount*0.25*".service_score::SCORE_SEA."
		when o.cloud_id>0  and f.is_frompubdomain=1 and i.refund_amount <= o.pub_amount then i.refund_amount*0.25*".service_score::SCORE_NATURE."
		when o.cloud_id>0  and f.thrownum >0 and f.isclaim=0 and i.refund_amount <= o.pub_amount then i.refund_amount*0.25
		when o.cloud_id>0  and f.is_frompubdomain=0 and i.refund_amount <= o.pub_amount then i.refund_amount*0.25
		when o.cloud_id>0  and f.thrownum =0 and i.refund_amount <= o.pub_amount then i.refund_amount*0.25
		when o.cloud_id>0  and f.thrownum is null and i.refund_amount <= o.pub_amount then i.refund_amount*0.25
		when o.cloud_id>0  and f.thrownum >0 and f.isclaim=1 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)*".service_score::SCORE_SEA."
		when o.cloud_id>0  and f.is_frompubdomain=1 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)*".service_score::SCORE_NATURE."
		when o.cloud_id>0  and f.thrownum >0 and f.isclaim=0 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		when o.cloud_id>0  and f.is_frompubdomain=0 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		when o.cloud_id>0  and f.thrownum =0 and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		when o.cloud_id>0  and f.thrownum is null and i.refund_amount > o.pub_amount then (i.refund_amount-o.pub_amount*0.5)
		else 0 end) as manager_score
		from mk_task_info i
		left join mk_task t on i.task_id = t.task_id
		left join mk_task_opis o on i.task_id = o.task_id
		left join mk_follow f on i.task_id = f.task_id
		left join mk_task_effect_protection p on i.task_id = p.task_id
		where hosted=1 and f.is_effective_follow=0 and t.hosted_date>='2013-10-16' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=13  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
		//公海客户 悬赏-退款积分score_item_id=15
		$noSaleFollowRefund = $m_task->query($noSaleFollowRefundSql, null, null, array('dbinfo' => 'co_market'));
// 		print_r($noSaleFollowRefund);
		if ($noSaleFollowRefund) {
			$refundData = array();
			foreach ($noSaleFollowRefund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 18;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundData,array('manager_score','cloud_score','product_score'));
			// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加绩效退款积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	/**
	 * 公海客户:mk_task_opis.islock=0
	 * 雇佣-售前跟进积分score_item_id=7
	 * mk_task_opis中clound_id云客服id  托管前交易顾问跟进：mk_follow.issys=0
	 */
	 public function pageSeaHostedFollowGuScore(){
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	//获取公海客户 雇佣-售前跟进积分score_item_id=7
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//无云客服服务，无交易顾问跟进：云客服积分0%，交易顾问积分0%，产品贡献积分50%
	 	//无云客服服务，有交易顾问跟进：云客服积分0%，交易顾问积分50%
	 	//有云客服服务，无交易顾问跟进：云客服积分50%，交易顾问积分0%
	 	//有云客服服务，有交易顾问跟进：云客服积分25%，交易顾问积分25%
	 	if ($_GET['debug']){
			define(DEBUG, 1);
		}
	 	$sql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,t.hosted_date,t.hosted_time,
	 	case when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.5*".service_score::SCORE_SEA."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then o.pub_amount*0.5*".service_score::SCORE_NATURE."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then o.pub_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum =0 then o.pub_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum is null then o.pub_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.25*".service_score::SCORE_SEA."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then o.pub_amount*0.25*".service_score::SCORE_NATURE."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then o.pub_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum =0 then o.pub_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum is null then o.pub_amount*0.25
		 	else 0 end as manager_score,
	 	case when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) then o.pub_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 then o.pub_amount*0.25
		 	else 0 end as cloud_score,
		case when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=1 then o.pub_amount*0.5*".service_score::SCORE_SEA."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=1 then o.pub_amount*0.5*".service_score::SCORE_NATURE."
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=0 then o.pub_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=0 then o.pub_amount*0.5
			when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum is null then o.pub_amount*0.5
			else 0 end as product_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where hosted=1 and (t.mode=11 or t.mode=12) and t.hosted_date>='{$start}' and t.hosted_date<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) and hosted=1";
	 	$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
	 	if ($task) {
	 		$data = array();
	 		foreach ($task as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 7;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['cloud_id'] = $v['cloud_id'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['cloud_score'] = $v['cloud_score'];
	 			$data[$k]['product_score'] = $v['product_score'];
	 			$data[$k]['createtime'] = $v['hosted_time'];
	 			$data[$k]['createymd'] = $v['hosted_date'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score','cloud_score','product_score'));
	 	}else{
	 		echo "没有相应的任务来添加绩效积分！<br/>";
	 	}

	 	//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
	 	$addsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,a.dateymd,a.dateline,sum(a.amount) as amount,
	 	f.is_effective_follow as f_is_effective_follow,f.first_effect_follow_time as f_first_effect_follow_time,
	 	f.thrownum,f.isclaim,f.is_frompubdomain,
	 	p.is_effective_follow as p_is_effective_follow,p.first_follow_time as p_first_follow_time
	 	from mk_task_addamount a
	 	left join mk_task t on a.task_id = t.task_id
	 	left join mk_task_opis o on a.task_id = o.task_id
	 	left join mk_follow f on a.task_id = f.task_id
	 	left join mk_task_effect_protection p on a.task_id = p.task_id
	 	where hosted=1 and a.state=0 and (t.mode=11 or t.mode=12) and a.dateymd>='{$start}' and a.dateymd<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) and p.first_follow_time<a.dateline group by a.dateymd,a.task_id";
	 	//公海客户 悬赏-雇佣跟进加价积分score_item_id=12
	 	$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
	 	if ($addHost) {
	 		$addData = array();
	 		foreach ($addHost as $k=>$v){
	 			$addData[$k]['task_id'] = $v['task_id'];
	 			$addData[$k]['score_item_id'] = 12;
	 			$addData[$k]['manager_id'] = $v['manager_id'];
	 			$addData[$k]['manager_name'] = $v['manager_name'];
	 			$addData[$k]['cloud_id'] = $v['cloud_id'];
	 			$manager_score = 0;
				if(($v['f_is_effective_follow'] ==1 && $v['f_first_effect_follow_time'] < $v['dateline']) || ($v['p_is_effective_follow'] ==1 && $v['p_first_effect_follow_time'] < $v['dateline'])) {
					if($v['thrownum']>0 && $v['isclaim']==1){
						$manager_score = $v['amount']*service_score::SCORE_SEA;
					}else if($v['is_frompubdomain'] == 1){
						$manager_score = $v['amount']*service_score::SCORE_NATURE;
					}else{
						$manager_score = $v['amount'];
					}
				}
				$product_score = 0;
				if($v['p_is_effective_follow']==0 || !$v['p_is_effective_follow']) {
					if($v['thrownum']>0 && $v['isclaim']==1){
						$product_score = $v['amount']*service_score::SCORE_SEA;
					}else if($v['is_frompubdomain'] == 1){
						$product_score = $v['amount']*service_score::SCORE_NATURE;
					}else{
						$product_score = $v['amount'];
					}
				}
				$addData[$k]['manager_score'] = $manager_score*0.5;
				$addData[$k]['product_score'] = $product_score*0.5;
	 			$addData[$k]['createtime'] = $v['dateline'];
	 			$addData[$k]['createymd'] = $v['dateymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($addData,array('manager_score','cloud_score'));
// 	 		$m_score->addMultiple($addData) ;
	 	}else{
	 		echo "没有相应的任务来添加绩效加价积分！<br/>";
	 	}
	 	//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
	 	$refundsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,i.close_time,i.close_ymd,
	 	sum(case when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.5*".service_score::SCORE_SEA."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then i.refund_amount*0.5*".service_score::SCORE_NATURE."
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then i.refund_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum =0 then i.refund_amount*0.5
	 		when o.cloud_id=0 and f.is_effective_follow=1 and f.thrownum is null then i.refund_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.25*".service_score::SCORE_SEA."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=1 then i.refund_amount*0.25*".service_score::SCORE_NATURE."
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.is_frompubdomain=0 then i.refund_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum =0 then i.refund_amount*0.25
	 		when o.cloud_id>0 and f.is_effective_follow=1 and f.thrownum is null then i.refund_amount*0.25
		 	else 0 end) as manager_score,
	 	sum(case
	 		when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) and i.refund_amount >= o.pub_amount then o.pub_amount*0.5
	 		when o.cloud_id >0 and (f.is_effective_follow=0 or f.issys is null) and i.refund_amount < o.pub_amount then i.refund_amount*0.5
		 	when o.cloud_id>0 and f.is_effective_follow=1 and i.refund_amount >= o.pub_amount then o.pub_amount*0.25
		 	when o.cloud_id>0 and f.is_effective_follow=1 and i.refund_amount < o.pub_amount then i.refund_amount*0.25
		 	else 0 end) as cloud_score,
	 	sum(case when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=1 then i.refund_amount*0.5*".service_score::SCORE_SEA."
		 	when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=1 then i.refund_amount*0.5*".service_score::SCORE_NATURE."
		 	when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum >0 and f.isclaim=0 then i.refund_amount*0.5
		 	when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.is_frompubdomain=0 then i.refund_amount*0.5
		 	when o.cloud_id=0 and (f.is_effective_follow=0 or f.issys is null) and f.thrownum is null then i.refund_amount*0.5
		 	else 0 end) as product_score
	 	from mk_task_info i
	 	left join mk_task t on i.task_id = t.task_id
	 	left join mk_task_opis o on i.task_id = o.task_id
	 	left join mk_follow f on i.task_id = f.task_id
	 	left join mk_task_effect_protection p on i.task_id = p.task_id
	 	where hosted=1 and t.hosted_date>='2013-10-16' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and (t.mode=11 or t.mode=12)  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
	 	//公海客户 雇佣-退款积分score_item_id=16
	 	$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));

	 	//交易顾问售前没有得分，加价得分的任务，如果加价>=退款，则退款分数manager_score=退款金额*0.25,否则=加价金额*0.25
	 	$addAmountManagerSql = "select t.task_id,sum(a.amount)*0.5 as amount from mk_task_addamount a
	 	left join mk_task t on a.task_id = t.task_id
	 	left join mk_task_opis o on a.task_id = o.task_id
	 	left join mk_follow f on a.task_id = f.task_id
	 	left join mk_task_effect_protection p on a.task_id = p.task_id
	 	where f.is_effective_follow=0 and p.is_effective_follow=1 and p.first_follow_time<a.dateline and hosted=1 and t.hosted_date>='2013-09-12' and refund_time >= unix_timestamp('{$date} 00:00:00') and refund_time<=unix_timestamp('{$date} 23:59:59') and refund_state=1 and (t.mode=11 or t.mode=12) and o.islock=0 and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";
	 	$addAmountManager = $m_task->query($addAmountManager, null, null, array('dbinfo' => 'co_market'));
	 	if ($refund) {
	 		$refundData = array();
	 		foreach ($refund as $k=>$v){
	 			$refundData[$k]['task_id'] = $v['task_id'];
	 			$refundData[$k]['score_item_id'] = 16;
	 			$refundData[$k]['manager_id'] = $v['manager_id'];
	 			$refundData[$k]['manager_name'] = $v['manager_name'];
	 			$refundData[$k]['cloud_id'] = $v['cloud_id'];
	 			$refundData[$k]['manager_score'] = $v['manager_score'];
	 			if ($addAmountManager) {
	 				foreach ($addAmountManager as $key => $value) {
	 					if ($v['task_id'] == $value['task_id']){
	 						if ($v['manager_score'] >= $value['amount']) {
	 							$refundData[$k]['manager_score'] = $value['amount'];
	 						}
	 					}
	 				}
	 			}
	 			$refundData[$k]['cloud_score'] = $v['cloud_score'];
	 			$refundData[$k]['product_score'] = $v['product_score'];
	 			$refundData[$k]['createtime'] = $v['close_time'];
	 			$refundData[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($refundData,array('manager_score','cloud_score', 'product_score'));
// 	 		$m_score->addMultiple($refundData) ;
	 	}else{
	 		echo "没有相应的任务来添加绩效退款积分！<br/>";
	 	}
	 	//10月16日及之前托管的需求（托管时间<=16日），16号之后产生退款的原交易顾问扣分=退款金额*50% 原服务商经纪人不扣分
	 	$refundOldSql = "select t.task_id,t.manager_id,t.manager_name,i.refund_amount*0.5 as manager_score,i.close_time,i.close_ymd
	 	from mk_task_info i
	 	left join mk_task t on i.task_id = t.task_id
	 	left join mk_task_opis o on i.task_id = o.task_id
	 	where hosted=1 and t.hosted_date<'2013-10-16' and t.hosted_date>='2013-10-01' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and (t.mode=11 or t.mode=12)  and (t.manager_id != 106 and o.cloud_server_id=0) group by t.task_id";//退款
	 	$refundOld = $m_task->query($refundOldSql, null, null, array('dbinfo' => 'co_market'));
	 	if ($refundOld) {
	 		$refundOldData = array();
	 		foreach ($refundOld as $k=>$v){
	 			$refundOldData[$k]['task_id'] = $v['task_id'];
	 			$refundOldData[$k]['score_item_id'] = 16;
	 			$refundOldData[$k]['manager_id'] = $v['manager_id'];
	 			$refundOldData[$k]['manager_name'] = $v['manager_name'];
	 			$refundOldData[$k]['manager_score'] = $v['manager_score'];
	 			$refundOldData[$k]['createtime'] = $v['close_time'];
	 			$refundOldData[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($refundOldData,array('manager_score'));
	 		// 			$m_score->addMultiple($refundData) ;
	 	}else{
	 		echo "没有2013-10-16之前托管的任务来添加绩效退款积分！<br/>";
	 	}
	 	$refundOldSql = "select t.task_id,t.manager_id,t.manager_name,i.refund_amount*0.5 as manager_score,i.close_time,i.close_ymd
	 	from mk_task_info i
	 	left join mk_task t on i.task_id = t.task_id
	 	left join mk_task_opis o on i.task_id = o.task_id
	 	where hosted=1 and t.hosted_date<'2013-10-01' and t.hosted_date>='2013-06-01' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and (t.mode=11 or t.mode=12)  and (t.manager_id != 106 and o.cloud_server_id=0) and t.manager_id not in (49,2282,688,1046,582,344,412,1118,1127)  group by t.task_id";//退款
	 	$refundOld = $m_task->query($refundOldSql, null, null, array('dbinfo' => 'co_market'));
	 	if ($refundOld) {
	 		$refundOldData = array();
	 		foreach ($refundOld as $k=>$v){
	 			$refundOldData[$k]['task_id'] = $v['task_id'];
	 			$refundOldData[$k]['score_item_id'] = 16;
	 			$refundOldData[$k]['manager_id'] = $v['manager_id'];
	 			$refundOldData[$k]['manager_name'] = $v['manager_name'];
	 			$refundOldData[$k]['manager_score'] = $v['manager_score'];
	 			$refundOldData[$k]['createtime'] = $v['close_time'];
	 			$refundOldData[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($refundOldData,array('manager_score'));
	 		// 			$m_score->addMultiple($refundData) ;
	 	}else{
	 		echo "没有2013-10-01之前托管的任务来添加绩效退款积分！<br/>";
	 	}
	 	echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	 /**
	  * 公海客户 悬赏-售后效果保障积分mk_score_item.id=6
	  *  公海客户：mk_task_opis.islock=0
	  *  交易顾问跟进：通过task_id和manager_id能在mk_task_effpro_log表中找到记录
	  *  效果保障：悬赏500，找人类任务：mk_task.hosted_amount>=500 and mk_task.mode=10  mk_task_info.ispic=2
	  *  实际付款金额：mk_task.at_amount 打款时间：mk_task_info.close_ymd
	  */
	 public function pageSeaPayEffectFollowScore() {
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//分两种情况1需要保障跟进，2不需要保障跟进
	 	//1需要保障跟进的任务:悬赏>=500
	 	//无交易顾问跟进，交易顾问积分0%  产品贡献积分50%
	 	//有交易顾问跟进，交易顾问积分50%
	 	//易顾问积分悬赏以下三种情况会加倍
	 	//从中心公海认领并托管的需求奖励2倍积分:mk_follow.thrownum >0 and mk_follow.isclaim=1
	 	//从资源库认领并托管的需求奖励1.5倍积分:mk_follow.is_frompubdomain=1
	 	//自动担保的需求，有效果保障跟进且需求产生了加价的，效果保障部分的积分乘以2倍thrownum =0 and is_frompubdomain=0 and issys=1 and (allot=1 or allot=2)
	 	//往mk_score表中插入数据task_id、score_item_id、manager_id、 	manager_name、cloud_id、manager_score、cloud_score、product_score、createtime、createymd
	 	//mk_task_effect_protection中字段is_effective_follow 是否有效跟进：0否；1是
	 	$sql_follow = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
	 	case
	 		when f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when f.is_effective_follow=1 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when f.is_effective_follow=1 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when f.is_effective_follow=1 and f.thrownum is null then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.thrownum is null then t.at_amount*0.5
	 		else 0 end as manager_score,
	 	case when p.is_effective_follow=0 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when p.is_effective_follow=0 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when p.is_effective_follow=0 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when p.is_effective_follow=0 and f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.thrownum is null then t.at_amount*0.5
	 		else 0 end as product_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_task_effect_protection p on t.task_id = p.task_id
	 	left join mk_task_info i on t.task_id = i.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where hosted=1 and t.hosted_date >='2013-10-01' and t.mode=10 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}'  and t.hosted_amount>=500 and (t.manager_id != 106 and o.cloud_server_id=0)";
	 	if ($_GET['debug']){
			define(DEBUG, 1);
		}
	 	$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
	 	if ($task_follow) {
	 		$data = array();
	 		foreach ($task_follow as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 6;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['product_score'] = $v['product_score'];
	 			$data[$k]['createtime'] = $v['close_time'];
	 			$data[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score','product_score'));
		 }else{
		 	echo "没有托管时间在2013-10-01以后的任务来添加绩效积分！<br/>";
		 }
		 //and t.hosted_date>='2013-06-01' and t.hosted_date<='2013-09-30'  的任务  效果保障分数 打款金额*0.3
		 $oldSql = "select t.task_id,t.manager_id,t.manager_name,t.at_amount*0.3 as manager_score,i.close_time,i.close_ymd
		 from mk_task t
		 left join mk_task_opis o on t.task_id = o.task_id
		 left join mk_task_effect_protection p on t.task_id = p.task_id
		 left join mk_task_info i on t.task_id = i.task_id
		 left join mk_follow f on t.task_id = f.task_id
		 where hosted=1 and t.hosted_date>='2013-06-01' and t.hosted_date<='2013-09-30' and t.mode=10 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0) and t.manager_id not in (49,2282,688,1046,582,344,412,1118,1127)";
		 $oldTask = $m_task->query($oldSql, null, null, array('dbinfo' => 'co_market'));
		 if ($oldTask) {
		 	$data = array();
		 	foreach ($oldTask as $k=>$v){
		 		$data[$k]['task_id'] = $v['task_id'];
		 		$data[$k]['score_item_id'] = 6;
		 		$data[$k]['manager_id'] = $v['manager_id'];
		 		$data[$k]['manager_name'] = $v['manager_name'];
		 		$data[$k]['manager_score'] = $v['manager_score'];
		 		$data[$k]['createtime'] = $v['close_time'];
		 		$data[$k]['createymd'] = $v['close_ymd'];
		 	}
		 	$m_score->addUpdateMultiple($data,array('manager_score'));
		 }else{
		 	echo "没有托管时间在2013-06-01~2013-09-30的任务来添加绩效积分！<br/>";
		 }
// 		 $m_score->addMultiple($data) ;
		 echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	 /**
	  * 公海客户 招标-售后效果保障积分mk_score_item.id=22
	  *  公海客户：mk_task_opis.islock=0
	  *  交易顾问跟进：通过task_id和manager_id能在mk_task_effpro_log表中找到记录
	  *  效果保障：悬赏500，找人类任务：mk_task.hosted_amount>=500 and mk_task.mode=10  mk_task_info.ispic=2
	  *  实际付款金额：mk_task.at_amount 打款时间：mk_task_info.close_ymd
	  */
	 public function pageSeaPayEffectFollowZbScore() {
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//分两种情况1需要保障跟进，2不需要保障跟进
	 	//1需要保障跟进的任务:悬赏>=500
	 	//无交易顾问跟进，交易顾问积分0%  产品贡献积分50%
	 	//有交易顾问跟进，交易顾问积分50%
	 	//易顾问积分悬赏以下三种情况会加倍
	 	//从中心公海认领并托管的需求奖励2倍积分:mk_follow.thrownum >0 and mk_follow.isclaim=1
	 	//从资源库认领并托管的需求奖励1.5倍积分:mk_follow.is_frompubdomain=1
	 	//自动担保的需求，有效果保障跟进且需求产生了加价的，效果保障部分的积分乘以2倍thrownum =0 and is_frompubdomain=0 and issys=1 and (allot=1 or allot=2)
	 	//往mk_score表中插入数据task_id、score_item_id、manager_id、 	manager_name、cloud_id、manager_score、cloud_score、product_score、createtime、createymd
	 	//mk_task_effect_protection中字段is_effective_follow 是否有效跟进：0否；1是
	 	$sql_follow = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
	 	case
	 	    when p.task_id>0 and p.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.thrownum is null then t.at_amount*0.5
	 		else 0 end as manager_score,
	 	case when p.is_effective_follow=0 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when p.is_effective_follow=0 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when p.is_effective_follow=0 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when p.is_effective_follow=0 and f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.thrownum is null then t.at_amount*0.5
	 		else 0 end as product_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_task_effect_protection p on t.task_id = p.task_id
	 	left join mk_task_info i on t.task_id = i.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where f.is_effective_follow=0 and hosted=1 and t.hosted_date >='2013-10-01' and t.mode=13 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}'  and t.hosted_amount>=500 and (t.manager_id != 106 and o.cloud_server_id=0)";
	 	if ($_GET['debug']){
			define(DEBUG, 1);
		}
	 	$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
	 	$m_addamount = new zbj_model_mk_taskaddamount();
	 	if ($task_follow) {
	 		$data = array();
	 		foreach ($task_follow as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$addamount = $m_addamount->selectOne(array('task_id'=>$v['task_id']), 'sum(amount) as amount');
	 			$data[$k]['score_item_id'] = 22;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			if ($addamount && $addamount['amount']) {
	 				$data[$k]['manager_score'] -= $addamount['amount']*0.5;
	 			}
	 			$data[$k]['product_score'] = $v['product_score'];
	 			$data[$k]['createtime'] = $v['close_time'];
	 			$data[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score','product_score'));
		 }else{
		 	echo "没有托管时间在2013-10-01以后的任务来添加绩效积分！<br/>";
		 }
		 echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	 public function pageSeaPayEffectScore() {
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//TODOsql是否需要处理，需要再次确认
	 	//分两种情况1需要保障跟进，2不需要保障跟进
	 	//2不需要保障跟进的任务，不管是否跟进，交易顾问都得50%
	 	//易顾问积分悬赏以下三种情况会加倍
	 	//从中心公海认领并托管的需求奖励2倍积分:mk_follow.thrownum >0 and mk_follow.isclaim=1
	 	//从资源库认领并托管的需求奖励1.5倍积分: mk_follow.is_frompubdomain=1
	 	//自动担保的需求，有效果保障跟进且需求产生了加价的，效果保障部分的积分乘以2倍thrownum =0 and is_frompubdomain=0 and issys=1 and (allot=1 or allot=2)
	 	//往mk_score表中插入数据task_id、score_item_id、manager_id、 	manager_name、cloud_id、manager_score、cloud_score、product_score、createtime、createymd
	 	$task = array();
	 	$sql_follow = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
	 	case
	 		when f.thrownum >0 and f.isclaim=1  then t.at_amount*0.5*".service_score::SCORE_SEA."
			when f.is_frompubdomain=1  then t.at_amount*0.5*".service_score::SCORE_NATURE."
			when f.thrownum >0 and f.isclaim=0  then t.at_amount*0.5
			when f.is_frompubdomain=0  then t.at_amount*0.5
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0  then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0)  then t.at_amount*0.5
			when f.thrownum is null  then t.at_amount*0.5
			else 0 end as manager_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_task_effect_protection p on t.task_id = p.task_id
	 	left join mk_task_info i on t.task_id = i.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where hosted=1 and t.hosted_date >='2013-10-01' and t.mode=10 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and i.close_ymd<'2014-02-25'  and (t.hosted_amount<500 ) and (t.manager_id != 106 and o.cloud_server_id=0)";
	 	$task = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
	 	if (!$task) {
	 		echo "没有2014-02-25以前相应的任务来添加绩效积分！<br/>";
	 	}else{
	 		$data = array();
	 		foreach ($task as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 6;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['createtime'] = $v['close_time'];
	 			$data[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score'));
	 	}
		$task = array();
	 	$sql_follow = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
	 	case
	 		when f.thrownum >0 and f.isclaim=1 and t.is_sysselect=0 then t.at_amount*0.5*".service_score::SCORE_SEA."
			when f.is_frompubdomain=1 and t.is_sysselect=0 then t.at_amount*0.5*".service_score::SCORE_NATURE."
			when f.thrownum >0 and f.isclaim=0 and t.is_sysselect=0 then t.at_amount*0.5
			when f.is_frompubdomain=0 and t.is_sysselect=0 then t.at_amount*0.5
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 and t.is_sysselect=0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) and t.is_sysselect=0 then t.at_amount*0.5
			when f.thrownum is null and t.is_sysselect=0 then t.at_amount*0.5
	 		when f.thrownum >0 and f.isclaim=1 and t.is_sysselect=1 then t.at_amount*0.25*".service_score::SCORE_SEA."
			when f.is_frompubdomain=1 and t.is_sysselect=1 then t.at_amount*0.25*".service_score::SCORE_NATURE."
			when f.thrownum >0 and f.isclaim=0 and t.is_sysselect=1 then t.at_amount*0.25
			when f.is_frompubdomain=0 and t.is_sysselect=1 then t.at_amount*0.25
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 and t.is_sysselect=1 then t.at_amount*0.25*".service_score::SCORE_AUTO_ADD."
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) and t.is_sysselect=1 then t.at_amount*0.25
			when f.thrownum is null and t.is_sysselect=1 then t.at_amount*0.25
			else 0 end as manager_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_task_effect_protection p on t.task_id = p.task_id
	 	left join mk_task_info i on t.task_id = i.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where hosted=1 and t.hosted_date >='2013-10-01' and t.mode=10 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and i.close_ymd>='2014-02-25'  and (t.hosted_amount<500 ) and (t.manager_id != 106 and o.cloud_server_id=0)";
	 	$task = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
	 	if (!$task) {
	 		echo "没有2014-02-25后相应的任务来添加绩效积分！<br/>";
	 	}else{
	 		$data = array();
	 		foreach ($task as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 6;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['createtime'] = $v['close_time'];
	 			$data[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score'));
	 	}

// 		 $m_score->addMultiple($data) ;
		 echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	 public function pageSeaPayEffectZbScore() {
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//TODOsql是否需要处理，需要再次确认
	 	//分两种情况1需要保障跟进，2不需要保障跟进
	 	//2不需要保障跟进的任务，不管是否跟进，交易顾问都得50%
	 	//易顾问积分悬赏以下三种情况会加倍
	 	//从中心公海认领并托管的需求奖励2倍积分:mk_follow.thrownum >0 and mk_follow.isclaim=1
	 	//从资源库认领并托管的需求奖励1.5倍积分: mk_follow.is_frompubdomain=1
	 	//自动担保的需求，有效果保障跟进且需求产生了加价的，效果保障部分的积分乘以2倍thrownum =0 and is_frompubdomain=0 and issys=1 and (allot=1 or allot=2)
	 	//往mk_score表中插入数据task_id、score_item_id、manager_id、 	manager_name、cloud_id、manager_score、cloud_score、product_score、createtime、createymd
	 	$task = array();
	 	$sql_follow = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
	 	case when f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
			when f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
			when f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
			when f.is_frompubdomain=0 then t.at_amount*0.5
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
			when f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
			when f.thrownum is null then t.at_amount*0.5
			else 0 end as manager_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_task_effect_protection p on t.task_id = p.task_id
	 	left join mk_task_info i on t.task_id = i.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	where f.is_effective_follow=0 and hosted=1 and t.hosted_date >='2013-10-01' and t.mode=13 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}'  and (t.hosted_amount<500 ) and (t.manager_id != 106 and o.cloud_server_id=0)";
	 	$task = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
	 	if (!$task) {
	 		echo "没有相应的任务来添加绩效积分！<br/>";
	 	}else{
	 		$data = array();
	 		foreach ($task as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 22;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['createtime'] = $v['close_time'];
	 			$data[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score'));
	 	}

// 		 $m_score->addMultiple($data) ;
		 echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	 }
	 /**
	  * 锁定客户 雇佣-售后效果保障积分mk_score_item.id=8
	  *  锁定客户：mk_task_opis.islock=0
	  *  交易顾问跟进：通过task_id和manager_id能在mk_task_effpro_log表中找到记录
	  *  实际付款金额：mk_task.at_amount 打款时间：mk_task_info.close_ymd
	  */
	 public function pageSeaPayEffectFollowGuScore() {
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	$date = date("Y-m-d", strtotime("-1 day"));
	 	$start = date("Y-m", strtotime("-1 day"))."-01";
	 	$end = $date;
	 	if (isset($_GET['start'])){
	 		$start = zbj_lib_BaseUtils::getStr($_GET['start']);
	 	}
	 	if (isset($_GET['end'])){
	 		$end = zbj_lib_BaseUtils::getStr($_GET['end']);
	 	}
	 	//保证计划任务在2013-12-16开始执行
	 	if (strtotime($start) < strtotime('2013-12-16')) {
	 		$start = "2013-12-16";
	 	}
	 	$m_task = new zbj_model_mk_task();
	 	//无交易顾问跟进，交易顾问积分0%  产品贡献积分50%
	 	//有交易顾问跟进，交易顾问积分50%
	 	if ($_GET['debug']){
			define(DEBUG, 1);
		}
	 	//往mk_score表中插入数据task_id、score_item_id、manager_id、 	manager_name、cloud_id、manager_score、cloud_score、product_score、createtime、createymd
	 	//自动托管and没有售后效果保障跟进--这部分任务交易顾问售后不得分 f.is_effective_follow=0(自动托管) and p.is_effective_follow=0
	 	//自动托管有效果保障跟进有 售后保障积分 f.is_effective_follow=0 and p.is_effective_follow=1
	 	//未自动托管的需求，只要有售前跟进 就有效果保障的积分f.is_effective_follow=1
	 	$sql_follow = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
	 	case when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.is_frompubdomain=0 and f.is_effective_follow=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.is_frompubdomain=0 and f.is_effective_follow=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when p.task_id>0 and p.is_effective_follow=1 and f.is_effective_follow=0 and f.thrownum is null then t.at_amount*0.5
	 		when p.task_id>0 and f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when f.is_effective_follow=1 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when f.is_effective_follow=1 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when f.is_effective_follow=1 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when f.is_effective_follow=1 and f.is_frompubdomain=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when f.is_effective_follow=1 and f.is_frompubdomain=0  and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when f.is_effective_follow=1 and f.thrownum is null then t.at_amount*0.5
	 		else 0 end as manager_score,
	 	case when p.is_effective_follow=0 and f.is_effective_follow=0 and f.thrownum >0 and f.isclaim=1 then t.at_amount*0.5*".service_score::SCORE_SEA."
	 		when p.is_effective_follow=0 and f.is_effective_follow=0 and f.is_frompubdomain=1 then t.at_amount*0.5*".service_score::SCORE_NATURE."
	 		when p.is_effective_follow=0 and f.is_effective_follow=0 and f.thrownum >0 and f.isclaim=0 then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_effective_follow=0 and f.is_frompubdomain=0 then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_effective_follow=0 and f.is_frompubdomain=0 and (allot=1 or allot=2) and t.ext_la>0 then t.at_amount*0.5*".service_score::SCORE_AUTO_ADD."
	 		when p.is_effective_follow=0 and f.is_effective_follow=0 and f.is_frompubdomain=0 and ((f.is_effective_follow=1 or (f.is_effective_follow=0 and allot != 1 and allot !=2)) or t.ext_la=0) then t.at_amount*0.5
	 		when p.is_effective_follow=0 and f.is_effective_follow=0 and f.thrownum is null then t.at_amount*0.5
	 		else 0 end as product_score
	 	from mk_task t
	 	left join mk_task_opis o on t.task_id = o.task_id
	 	left join mk_task_effect_protection p on t.task_id = p.task_id
	 	left join mk_follow f on t.task_id = f.task_id
	 	left join mk_task_info i on t.task_id = i.task_id
	 	where hosted=1 and t.hosted_date >='2013-10-01' and (t.mode=11 or t.mode=12) and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}'  and (t.manager_id != 106 and o.cloud_server_id=0)";
	 	$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
	 	$m_score = new model_mk_score();
	 	if ($task_follow) {
	 		$data = array();
	 		foreach ($task_follow as $k=>$v){
	 			$data[$k]['task_id'] = $v['task_id'];
	 			$data[$k]['score_item_id'] = 8;
	 			$data[$k]['manager_id'] = $v['manager_id'];
	 			$data[$k]['manager_name'] = $v['manager_name'];
	 			$data[$k]['manager_score'] = $v['manager_score'];
	 			$data[$k]['product_score'] = $v['product_score'];
	 			$data[$k]['createtime'] = $v['close_time'];
	 			$data[$k]['createymd'] = $v['close_ymd'];
	 		}
	 		$m_score = new model_mk_score();
	 		$m_score->addUpdateMultiple($data,array('manager_score','product_score'));
		 }else{
		 	echo "没有托管时间在2013-10-01以后的任务来添加绩效积分！<br/>";
		 }
		 echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	 /**悬赏--锁定客户
	  * 云顾问积分现在统一计在胡亮身上，具体积分：托管时计100%的跟进托管积分，打款时计余下的100%效果保障积分。
	  * t.manager_id = 109 and o.cloud_server_id>0
	  */
	public function pageLockCloudServerScore(){
		$startRunTime = lib_BaseUtils::microtime_float();
		//获取锁定客户 悬赏-售前跟进积分score_item_id=1
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		$m_task = new zbj_model_mk_task();
		$sql = "select t.task_id,t.manager_id,t.manager_name,o.pub_amount as manager_score,t.hosted_date,t.hosted_time from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=10 and t.hosted_date>='{$start}' and t.hosted_date<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";//首次担保
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		if ($task) {
			$data = array();
			foreach ($task as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 1;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['hosted_time'];
				$data[$k]['createymd'] = $v['hosted_date'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加绩效积分！<br/>";
		}
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		$addsql = "select t.task_id,t.manager_id,t.manager_name,a.dateymd,a.dateline,
		sum(a.amount) as manager_score
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and a.state=0 and t.mode=10 and a.dateymd>='{$start}' and a.dateymd<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";//加价
		//锁定客户 悬赏-售前跟进加价积分score_item_id=9
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 9;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['manager_score'] = $v['manager_score'];
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($addData,array('manager_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加绩效加价积分！<br/>";
		}
		if ($_GET['debug']){
			define(DEBUG, 1);
		}
		//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
		$refundsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,i.close_time,i.close_ymd,
		sum(i.refund_amount) as manager_score
		from mk_task_info i
		left join mk_task t on i.task_id = t.task_id
		left join mk_task_opis o on i.task_id = o.task_id
		left join mk_follow f on i.task_id = f.task_id
		where hosted=1 and t.hosted_date>='2013-09-12' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=10 and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";//退款
		//锁定客户 悬赏-退款积分score_item_id=9
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 13;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['cloud_id'] = $v['cloud_id'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['cloud_score'] = $v['cloud_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundData,array('manager_score','cloud_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加绩效退款积分！<br/>";
		}
		//锁定客户 悬赏-售后效果保障积分mk_score_item.id=2
		$sql_follow = "select t.task_id,t.manager_id,t.manager_name,t.at_amount as manager_score,i.close_time,i.close_ymd
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_task_effect_protection p on t.task_id = p.task_id
		left join mk_task_info i on t.task_id = i.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=10 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
		if ($task_follow) {
			$data = array();
			foreach ($task_follow as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 2;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['product_score'] = $v['product_score'];
				$data[$k]['createtime'] = $v['close_time'];
				$data[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($data,array('manager_score','product_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加锁定客户 悬赏-售后效果保障积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	 /**招标--锁定客户
	  * 云顾问积分现在统一计在胡亮身上，具体积分：托管时计100%的跟进托管积分，打款时计余下的100%效果保障积分。
	  * t.manager_id = 109 and o.cloud_server_id>0
	  */
	public function pageLockCloudServerZbScore(){
		$startRunTime = lib_BaseUtils::microtime_float();
		//获取锁定客户 悬赏-售前跟进积分score_item_id=1
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		$m_task = new zbj_model_mk_task();
		$sql = "select t.task_id,t.manager_id,t.manager_name,o.pub_amount as manager_score,t.hosted_date,t.hosted_time from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=13 and t.hosted_date>='{$start}' and t.hosted_date<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";//首次担保
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		if ($task) {
			$data = array();
			foreach ($task as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 19;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['hosted_time'];
				$data[$k]['createymd'] = $v['hosted_date'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加绩效积分！<br/>";
		}
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		$addsql = "select t.task_id,t.manager_id,t.manager_name,a.dateymd,a.dateline,
		sum(a.amount) as manager_score
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and a.state=0 and t.mode=13 and a.dateymd>='{$start}' and a.dateymd<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";//加价
		//锁定客户 招标-售前跟进加价积分score_item_id=23
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 23;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['manager_score'] = $v['manager_score'];
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($addData,array('manager_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加绩效加价积分！<br/>";
		}
		if ($_GET['debug']){
			define(DEBUG, 1);
		}
		//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
		$refundsql = "select t.task_id,t.manager_id,t.manager_name,o.cloud_id,i.close_time,i.close_ymd,
		sum(i.refund_amount) as manager_score
		from mk_task_info i
		left join mk_task t on i.task_id = t.task_id
		left join mk_task_opis o on i.task_id = o.task_id
		left join mk_follow f on i.task_id = f.task_id
		where hosted=1 and t.hosted_date>='2013-09-12' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=13 and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";//退款
		//锁定客户 招标-退款积分score_item_id=17
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 17;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['cloud_id'] = $v['cloud_id'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['cloud_score'] = $v['cloud_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundData,array('manager_score','cloud_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加绩效退款积分！<br/>";
		}
		//锁定客户 招标-售后效果保障积分mk_score_item.id=20
		$sql_follow = "select t.task_id,t.manager_id,t.manager_name,t.at_amount as manager_score,i.close_time,i.close_ymd
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_task_effect_protection p on t.task_id = p.task_id
		left join mk_task_info i on t.task_id = i.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=13 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
		if ($task_follow) {
			$data = array();
			foreach ($task_follow as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 20;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['product_score'] = $v['product_score'];
				$data[$k]['createtime'] = $v['close_time'];
				$data[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($data,array('manager_score','product_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加锁定客户 悬赏-售后效果保障积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	 /**雇佣--锁定客户
	  * 云顾问积分现在统一计在胡亮身上，具体积分：托管时计100%的跟进托管积分，打款时计余下的100%效果保障积分。
	  * t.manager_id = 109 and o.cloud_server_id>0
	  */
	public function pageLockCloudServerGuScore(){
		$startRunTime = lib_BaseUtils::microtime_float();
		//获取锁定客户 雇佣-售前跟进积分score_item_id=3
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		$m_task = new zbj_model_mk_task();
		$sql = "select t.task_id,t.manager_id,t.manager_name,o.pub_amount as manager_score,t.hosted_date,t.hosted_time from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and (t.mode=11 or t.mode=12) and t.hosted_date>='{$start}' and t.hosted_date<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";//首次担保
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		if ($task) {
			$data = array();
			foreach ($task as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 3;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['hosted_time'];
				$data[$k]['createymd'] = $v['hosted_date'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加绩效积分！<br/>";
		}
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		$addsql = "select t.task_id,t.manager_id,t.manager_name,a.dateymd,a.dateline,
		sum(a.amount) as manager_score
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where  hosted=1 and a.state=0 and (t.mode=11 or t.mode=12) and a.dateymd>='{$start}' and a.dateymd<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";//加价
		//锁定客户 雇佣-售前跟进加价积分score_item_id=10
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 10;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['manager_score'] = $v['manager_score'];
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($addData,array('manager_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加绩效加价积分！<br/>";
		}

		//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
		$refundsql = "select t.task_id,t.manager_id,t.manager_name,i.close_time,i.close_ymd,
		sum(i.refund_amount) as manager_score
		from mk_task_info i
		left join mk_task t on i.task_id = t.task_id
		left join mk_task_opis o on i.task_id = o.task_id
		left join mk_follow f on i.task_id = f.task_id
		where hosted=1 and t.hosted_date>='2013-09-12' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and (t.mode=11 or t.mode=12) and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";//退款
		//锁定客户 雇佣-退款积分score_item_id=14
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 14;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($refundData,array('manager_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加绩效退款积分！<br/>";
		}
		//锁定客户 雇佣-售后效果保障积分mk_score_item.id=4
		$sql_follow = "select t.task_id,t.manager_id,t.manager_name,t.at_amount as manager_score,i.close_time,i.close_ymd
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_task_effect_protection p on t.task_id = p.task_id
		left join mk_task_info i on t.task_id = i.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and (t.mode=11 or t.mode=12) and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and o.islock>0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
		if ($task_follow) {
			$data = array();
			foreach ($task_follow as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 4;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['close_time'];
				$data[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score = new model_mk_score();
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加锁定客户 悬赏-售后效果保障积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	/**悬赏--公海客户
	 * 云顾问积分现在统一计在胡亮身上，具体积分：托管时计100%的跟进托管积分，打款时计余下的100%效果保障积分。
	* t.manager_id = 109 and o.cloud_server_id>0
	*/
	public function pageSeaCloudServerScore(){
		$startRunTime = lib_BaseUtils::microtime_float();
		//获取公海客户 悬赏-售前跟进积分score_item_id=5
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		$m_task = new zbj_model_mk_task();
		$m_score = new model_mk_score();
		$sql = "select t.task_id,t.manager_id,t.manager_name,o.pub_amount as manager_score,t.hosted_date,t.hosted_time
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=10 and t.hosted_date>='{$start}' and t.hosted_date<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		if ($task) {
			$data = array();
			foreach ($task as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 5;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['hosted_time'];
				$data[$k]['createymd'] = $v['hosted_date'];
			}
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-售前跟进积分！<br/>";
		}
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		$addsql = "select t.task_id,t.manager_id,t.manager_name, sum(a.amount) as manager_score,a.dateymd,a.dateline
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and a.state=0 and t.mode=10 and a.dateymd>='{$start}' and a.dateymd<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";
		//公海客户 悬赏-售前跟进加价积分score_item_id=11
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 11;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['manager_score'] = $v['manager_score'];
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score->addUpdateMultiple($addData,array('manager_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-售前跟进加价积分！<br/>";
		}
		//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
		$refundsql = "select t.task_id,t.manager_id,t.manager_name,sum(i.refund_amount) as manager_score,i.close_time,i.close_ymd
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and t.hosted_date>='2013-09-12' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=10 and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";
		//公海客户 悬赏-退款积分score_item_id=15
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 15;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score->addUpdateMultiple($refundData,array('manager_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-退款积分！<br/>";
		}
		//公海悬赏-售后效果保障积分
		$sql_follow = "select t.task_id,t.manager_id,t.manager_name,t.at_amount	as manager_score,i.close_time,i.close_ymd
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_task_effect_protection p on t.task_id = p.task_id
		left join mk_task_info i on t.task_id = i.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=10 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
		if ($task_follow) {
			$data = array();
			foreach ($task_follow as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 6;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['close_time'];
				$data[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加公海悬赏-售后效果保障积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	/**悬赏--招标客户
	 * 云顾问积分现在统一计在胡亮身上，具体积分：托管时计100%的跟进托管积分，打款时计余下的100%效果保障积分。
	* t.manager_id = 109 and o.cloud_server_id>0
	*/
	public function pageSeaCloudServerZbScore(){
		$startRunTime = lib_BaseUtils::microtime_float();
		//获取公海客户 招标-售前跟进积分score_item_id=21
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		$m_task = new zbj_model_mk_task();
		$m_score = new model_mk_score();
		$sql = "select t.task_id,t.manager_id,t.manager_name,o.pub_amount as manager_score,t.hosted_date,t.hosted_time
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=13 and t.hosted_date>='{$start}' and t.hosted_date<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		if ($task) {
			$data = array();
			foreach ($task as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 21;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['hosted_time'];
				$data[$k]['createymd'] = $v['hosted_date'];
			}
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-售前跟进积分！<br/>";
		}
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		$addsql = "select t.task_id,t.manager_id,t.manager_name, sum(a.amount) as manager_score,a.dateymd,a.dateline
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and a.state=0 and t.mode=13 and a.dateymd>='{$start}' and a.dateymd<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";
		//公海客户 招标-售前跟进加价积分score_item_id=24
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 24;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['manager_score'] = $v['manager_score'];
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score->addUpdateMultiple($addData,array('manager_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加公海客户 招标-售前跟进加价积分！<br/>";
		}
		//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
		$refundsql = "select t.task_id,t.manager_id,t.manager_name,sum(i.refund_amount) as manager_score,i.close_time,i.close_ymd
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and t.hosted_date>='2013-09-12' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and t.mode=13 and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";
		//公海客户 招标-退款积分score_item_id=18
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 18;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score->addUpdateMultiple($refundData,array('manager_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加公海客户 招标-退款积分！<br/>";
		}
		//公海悬赏-售后效果保障积分
		$sql_follow = "select t.task_id,t.manager_id,t.manager_name,t.at_amount	as manager_score,i.close_time,i.close_ymd
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_task_effect_protection p on t.task_id = p.task_id
		left join mk_task_info i on t.task_id = i.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and t.mode=13 and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
		if ($task_follow) {
			$data = array();
			foreach ($task_follow as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 22;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['close_time'];
				$data[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加公海悬赏-售后效果保障积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	/**雇佣--公海客户
	 * 云顾问积分现在统一计在胡亮身上，具体积分：托管时计100%的跟进托管积分，打款时计余下的100%效果保障积分。
	* t.manager_id = 109 and o.cloud_server_id>0
	*/
	public function pageSeaCloudServerGuScore(){
		$startRunTime = lib_BaseUtils::microtime_float();
		//获取公海客户 雇佣-售前跟进积分score_item_id=7
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		$m_task = new zbj_model_mk_task();
		$m_score = new model_mk_score();
		$sql = "select t.task_id,t.manager_id,t.manager_name,o.pub_amount as manager_score,t.hosted_date,t.hosted_time
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and (t.mode=11 or t.mode=12) and t.hosted_date>='{$start}' and t.hosted_date<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		if ($task) {
			$data = array();
			foreach ($task as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 7;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['hosted_time'];
				$data[$k]['createymd'] = $v['hosted_date'];
			}
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-售前跟进积分！<br/>";
		}
		//加价表mk_task_addamount：加价时间a.dateymd,加价金额a.amount
		$addsql = "select t.task_id,t.manager_id,t.manager_name, sum(a.amount) as manager_score,a.dateymd,a.dateline
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and a.state=0 and (t.mode=11 or t.mode=12) and a.dateymd>='{$start}' and a.dateymd<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";
		//公海客户 雇佣-售前跟进加价积分score_item_id=12
		$addHost = $m_task->query($addsql, null, null, array('dbinfo' => 'co_market'));
		if ($addHost) {
			$addData = array();
			foreach ($addHost as $k=>$v){
				$addData[$k]['task_id'] = $v['task_id'];
				$addData[$k]['score_item_id'] = 12;
				$addData[$k]['manager_id'] = $v['manager_id'];
				$addData[$k]['manager_name'] = $v['manager_name'];
				$addData[$k]['manager_score'] = $v['manager_score'];
				$addData[$k]['createtime'] = $v['dateline'];
				$addData[$k]['createymd'] = $v['dateymd'];
			}
			$m_score->addUpdateMultiple($addData,array('manager_score'));
// 			$m_score->addMultiple($addData) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-售前跟进加价积分！<br/>";
		}
		//退款表mk_task_info：退款时间戳i.refund_time,退款金额i.refund_amount,退款状态：i.refund_state=1
		$refundsql = "select t.task_id,t.manager_id,t.manager_name,sum(i.refund_amount) as manager_score,i.close_time,i.close_ymd
		from mk_task_addamount a
		left join mk_task t on a.task_id = t.task_id
		left join mk_task_opis o on a.task_id = o.task_id
		left join mk_follow f on a.task_id = f.task_id
		where hosted=1 and t.hosted_date>='2013-09-12' and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and refund_state=1 and (t.mode=11 or t.mode=12) and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 group by t.task_id";
		//公海客户 悬赏-退款积分score_item_id=16
		$refund = $m_task->query($refundsql, null, null, array('dbinfo' => 'co_market'));
		if ($refund) {
			$refundData = array();
			foreach ($refund as $k=>$v){
				$refundData[$k]['task_id'] = $v['task_id'];
				$refundData[$k]['score_item_id'] = 16;
				$refundData[$k]['manager_id'] = $v['manager_id'];
				$refundData[$k]['manager_name'] = $v['manager_name'];
				$refundData[$k]['manager_score'] = $v['manager_score'];
				$refundData[$k]['createtime'] = $v['close_time'];
				$refundData[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score->addUpdateMultiple($refundData,array('manager_score'));
// 			$m_score->addMultiple($refundData) ;
		}else{
			echo "没有相应的任务来添加公海客户 悬赏-退款积分！<br/>";
		}
		//公海雇佣-售后效果保障积分
		$sql_follow = "select t.task_id,t.manager_id,t.manager_name,t.at_amount	as manager_score,i.close_time,i.close_ymd
		from mk_task t
		left join mk_task_opis o on t.task_id = o.task_id
		left join mk_task_effect_protection p on t.task_id = p.task_id
		left join mk_task_info i on t.task_id = i.task_id
		left join mk_follow f on t.task_id = f.task_id
		where hosted=1 and (t.mode=11 or t.mode=12) and i.close_ymd >= '{$start}' and i.close_ymd<='{$end}' and o.islock=0 and t.manager_id = 109 and o.cloud_server_id>0 and hosted=1";
		$task_follow = $m_task->query($sql_follow, null, null, array('dbinfo' => 'co_market'));
		if ($task_follow) {
			$data = array();
			foreach ($task_follow as $k=>$v){
				$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['score_item_id'] = 8;
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['manager_score'] = $v['manager_score'];
				$data[$k]['createtime'] = $v['close_time'];
				$data[$k]['createymd'] = $v['close_ymd'];
			}
			$m_score->addUpdateMultiple($data,array('manager_score'));
// 			$m_score->addMultiple($data) ;
		}else{
			echo "没有相应的任务来添加公海悬赏-售后效果保障积分！<br/>";
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	/**
	 * 更新mk_score交易顾问分数值，保证退款后交易顾问分数>=0
	 */
	 public function pageUpdateScoreByDate() {
	 	$startRunTime = lib_BaseUtils::microtime_float();
	 	$date = date("Y-m-d", strtotime("-1 day"));
		$start = date("Y-m", strtotime("-1 day"))."-01";
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
	 	$condition[] = "score_item_id >=13 AND score_item_id <=18";
	 	$condition[] = "createymd >= '{$start}' AND createymd <= '{$end}'";
	 	$m_score = new model_mk_score();
	 	//获取该时间段所有退款的任务号
	 	$taskIdArray = $m_score->select($condition, 'task_id', null, null, null, array('dbinfo' => 'co_market'))->items;
	 	if (!$taskIdArray) {
	 		echo "没有要更新的数据！";
	 		return false;
	 	}
	 	$taskIds = "";
	 	foreach ($taskIdArray as $k=>$v) {
	 		$taskIds .= "{$v['task_id']},";
	 	}
	 	$taskIds = trim($taskIds, ",");
	 	//根据任务号，计算出退款扣分大于交易顾问得分的任务
// 	 	SELECT task_id,sum(case when score_item_id >=13 AND score_item_id <=18 then `manager_score` else 0 end ) as subscore,sum(case when score_item_id <13 or score_item_id >18 then `manager_score` else 0 end) as addscore FROM `mk_score` WHERE `createymd`>='2013-12-01' group by task_id having (subscore > addscore)
	 	//
	 	$sql = "SELECT s.task_id,sum(case when score_item_id >=13 AND score_item_id <=18 then `manager_score` else 0 end ) as subscore,
	 	sum(case when score_item_id <13 or score_item_id >18 then `manager_score` else 0 end) as addscore
	 	FROM `mk_score` s
	 	WHERE s.task_id in ({$taskIds}) group by s.task_id having (subscore > addscore) ";
	 	//兼容老绩效
// 	 	$sql = "SELECT s.task_id,sum(case when score_item_id >=13 AND score_item_id <=18 then `manager_score` else 0 end ) as subscore,
// 	 	sum(case when score_item_id <13 or score_item_id >18 then `manager_score` else 0 end) as addscore,
// 	 	sum(new_point + old_point - new_refund - old_refund) as addpoint
// 	 	FROM `mk_score` s
// 	 	left join mk_performance_log l on l.task_id = s.task_id
// 	 	WHERE s.task_id in ({$taskIds}) group by s.task_id having (subscore > (addscore+addpoint)) ";

	 	$score = $m_score->query($sql, null, null, array('dbinfo' => 'co_market'));//新绩效加分、扣分
	 	if (!$score) {
	 		echo "没有退款扣分大于交易顾问得分的任务";
	 	}else{
	 		//老绩效得分分数
	 		$m_performanceLog = new model_mk_performancelog();
	 		$performancelog = $m_performanceLog->select("task_id in ({$taskIds})", "task_id,sum(new_point + old_point - new_refund - old_refund) as addpoint", "group by task_id", null, null,array('dbinfo' => 'co_market'))->items;
	 		if ($performancelog) {
	 			foreach ($performancelog as $k=>$v) {
	 				foreach ($score as $key=>$value) {
	 					$score[$key]['addpoint'] = 0;
	 					if ($v['task_id'] == $value['task_id']) {
	 						$score[$key]['addpoint'] = $v['addpoint'];
	 					}
	 				}
	 			}
	 		}
	 		// 	 	print_r($score);exit;
	 		foreach ($score as $k=>$v) {
	 			if ($v['subscore']>($v['addscore']+$v['addpoint'])) {
	 				echo "需要执行更新的：任务号{$v['task_id']}----退款分数---{$v['subscore']}--加分-".($v['addscore']+$v['addpoint'])."<br/>";
	 				if ($m_score->update("score_item_id >=13 AND score_item_id <=18 and task_id = {$v['task_id']}",array('manager_score'=>$v['addscore']+$v['addpoint'])) === false) {
	 					echo "第{$k}个执行失败，任务号{$v['task_id']}<br/>";
	 				}
	 			}
	 		}
	 	}

	 	//服务商拒绝了交易，需求被取消，这种任务没有退款记录，清除这部分所得积分
// 	 	fn_order表中：select * from fn_order where (isaccept_buy =1 or isaccept_sl =1) and state=2 and createymd >= '2014-02-01' 	AND createymd < '2014-03-01'
		$m_order = new zbj_model_fn_order();
		$order = $m_order->select("(isaccept_buy =1 or isaccept_sl =1) and state=2 and createymd >= '{$start}' 	AND createymd <= '{$end}'", "product_pkid", null, null, null, array('dbinfo' => 'co_finance'))->items;
		if ($order) {
			foreach ($order as $k=>$v) {
				$m_score->delete(array('task_id'=>$v['product_pkid']));
			}
		}else{
			echo "没有关闭的任务需要清楚积分！<br/>";
		}

		//解决交易顾问积分跑出后，再绑定云客服，再跑分就会多算一条积分记录，造成重复计算（积分项目重复记录，原来没云客服，现在有云客服，出现同一时间，相同积分项目出现两条）
		//SELECT * FROM `mk_score` WHERE createymd >= '2014-02-01' AND createymd < '2014-03-01' AND cloud_id >0查出该批任务号task_ids
	 	$cloudScore = $m_score->select("createymd >= '{$start}' AND createymd < '{$end}' AND cloud_id >0", "task_id", null, null, null, array('dbinfo' => 'co_market'))->items;
	 	if ($cloudScore) {
	 		$taskIds = "";
	 		foreach ($cloudScore as $k=>$v) {
	 			$taskIds .= $v['task_id'].",";
	 		}
	 		$taskIds = trim($taskIds, ",");
	 		//select * from mk_score where cloud_id=0 and task_id in (task_ids)
	 		$noCloudScore = $m_score->select("cloud_id=0 and task_id in ({$taskids})", "id", null, null, null, array('dbinfo' => 'co_market'))->items;
	 		if ($noCloudScore) {
	 			foreach ($noCloudScore as $k=>$v) {
	 				$m_score->delete(array('id'=>$v['id']));
	 			}
	 		}else{
	 			echo "绑定云客服，没有重复的积分记录需要删除！<br/>";
	 		}
	 	}else{
	 			echo "绑定云客服，没有重复的积分记录需要删除！<br/>";
	 		}
	 	echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
// 	 	$score = $m_score->select("task_id in ({$taskIds})", '')
	 }
	/**
	 * 判断是否完成服务记录
	 */
	public function pageRecordDispose(){
		$create_date = trim(lib_BaseUtils::getStr($_GET['date']));
		if ($create_date) {
			$condition['create_date'] = $create_date;
		}
		$condition['status'] = 1;

		$sRecord = new zbj_service_record();
		$lastCategory = $sRecord->getLastCategory();
		$mRecord = new zbj_model_mk_record();
		$mRecord->setLimit(50);
		$list = $mRecord->select($condition, '*', null, 'order by record_id asc')->items;
		if ($list) {
			$status2 = array();
			$status3 = array();
			$status4 = array();
			$mRemark = new zbj_model_cp_remark();
			foreach ($list as $value) {
				$logCondition = array();
				$category = $lastCategory[$value['category_id']];
				if ($category['action'] != '') {
					$logCondition['user_id'] = $value['user_id'];
					$logCondition['action'] = $category['action'];
					$logCondition[] = "create_time>=" . $value['incoming_time'];
					$logCondition[] = "create_time<=" . ($value['incoming_time'] + 3600);
					$oRemark = $mRemark->selectOne($logCondition, 'count(*)');
					if ($oRemark) {
						$status2[] = $value['record_id'];
					} else {
						$status3[] = $value['record_id'];
					}
				} else {
					$status4[] = $value['record_id'];
				}
			}
			if ($status2) {
				$mRecord->update("record_id in (" . implode(',', $status2) . ")", array('status' => 2));
			}
			if ($status3) {
				$mRecord->update("record_id in (" . implode(',', $status3) . ")", array('status' => 3));
			}
			if ($status4) {
				$mRecord->update("record_id in (" . implode(',', $status4) . ")", array('status' => 4));
			}
			if ($_GET['d']) {
				echo "已处理服务记录:<br>";
				echo $status2 ? implode('<br>', $status2) : '无';
				echo "<hr>";
				echo "未处理服务记录:<br>";
				echo $status3 ? implode('<br>', $status3) : '无';
				echo "<hr>";
				echo "无法判断是否处理:<br>";
				echo $status2 ? implode('<br>', $status2) : '无';
			}
		}
	}
	/**
	 * 清空云客服
	 */
	function pageClearCloud() {
		exit;
		$mOpis = new zbj_model_mk_taskopis();
		var_dump($mOpis->update("cloud_id>0", array('cloud_id' => 0)));
	}

	/**
	 * 设置云客服
	 */
	function pageCloud() {
		exit;
		$page = (int) $_GET['p'];
		$limit = $_GET['l'] ? (int) $_GET['l'] : 100;
		if (!$page) {
			echo '请输入page<br>';
			exit;
		}
		if ($_GET['d'] == 1) {
			define('DEBUG', 1);
		}
		$mRecord = new zbj_model_mk_record();
		$sRecord = new service_record();
		$leftjoin = array(
			'mk_record_category' => "mk_record.category_id=mk_record_category.category_id",
		);
		$mRecord->setLimit($limit);
		$mRecord->setPage($page);
		$mRecord->setCount(false);
		$list = $mRecord->select(array('audit_status' => 2, 'is_pre' => 1), '*', null, 'order by record_id', $leftjoin)->items;
		if ($list) {
			$mTask = new zbj_model_mk_task();
			$mOpis = new zbj_model_mk_taskopis();
			foreach ($list as $value) {
				$record_id = $value['record_id'];
				$user_id = $value['user_id'];
				//关联的任务
				$task_ids = $sRecord->getTasks($record_id);
				if ($task_ids) {
					$hlist = $mTask->select("task_id in (" . implode(',', $task_ids) . ") and hosted=0", 'task_id')->items; //托管了的任务
					if (!$hlist) {
						continue;
					}
					$htid = lib_BaseUtils::array2Single($hlist, 'task_id');
					if ($mOpis->update("task_id in ($htid)", array('cloud_id' => $value['cloud_id'])) === false) {
						echo '关联的任务,更新失败<br>';
						exit;
					}
				}
				//关联用户
				$ulist = $mTask->select("user_id = {$user_id} and createtime between {$value['incoming_time']} and " . ($value['incoming_time'] + 86400) . "", 'task_id')->items;
				if ($ulist) {
					$utid = lib_BaseUtils::array2Single($ulist, 'task_id');
					if ($mOpis->update("task_id in ($utid)", array('cloud_id' => $value['cloud_id'])) === false) {
						echo '关联用户,更新失败<br>';
						exit;
					}
				}
				echo 'ok<br>';
			}
		} else {
			echo 'over';
		}
	}
	/**
	 * 设置记录与任务关联且没有绑定云客服
	 */
	function pageCloud2() {
		$page = (int) $_GET['p'];
		$limit = $_GET['l'] ? (int) $_GET['l'] : 100;
		if (!$page) {
			echo '请输入page<br>';
			exit;
		}
		if ($_GET['d'] == 1) {
			define('DEBUG', 1);
		}
		$mRecordTask = new zbj_model_mk_recordtask();
		$mRecord = new zbj_model_mk_record();
		$mRecordCategory = new zbj_model_mk_recordcategory();
		$mTask = new zbj_model_mk_task();
		$mTaskOpis = new zbj_model_mk_taskopis();

		$recordTaskTable = $mRecordTask->tableName();
		$recordTable = $mRecord->tableName();
		$recordCategoryTable = $mRecordCategory->tableName();
		$taskTable = $mTask->tableName();
		$taskOpisTable = $mTaskOpis->tableName();
		$leftjoin = array(
			$recordTable => "{$recordTaskTable}.record_id={$recordTable}.record_id",
			$recordCategoryTable => "{$recordTable}.category_id={$recordCategoryTable}.category_id",
			$taskTable => "{$recordTaskTable}.task_id={$taskTable}.task_id",
			$taskOpisTable => "{$recordTaskTable}.task_id={$taskOpisTable}.task_id",
		);
		$mRecordTask->setLimit($limit);
		$mRecordTask->setPage($page);
		$mRecordTask->setCount(false);
		$condition = "is_pre=1 and origin=2 and ( (create_date between '2013-10-04' and '2013-10-21') or (create_date between '2013-09-01' and '2013-09-30') ) and {$taskOpisTable}.cloud_id=0 and (hosted=0 or hosted_time>incoming_time)";
//		define('DEBUG', 1);
		$list = $mRecordTask->select($condition, "{$recordTaskTable}.task_id,{$recordTable}.cloud_id,{$recordTable}.record_id", null, "order by {$recordTaskTable}.task_id", $leftjoin)->items;
//		pf($list);
		if ($list) {
			$sRecord = new service_record();
			$sYunkefu = new service_yunkefu();
			try {
				$mRecordTask->beginTransaction('mk');
				$mRecordTask->beginTransaction('lg');
				foreach ($list as $value) {
					$lRecord = $sRecord->getLastRecord($value['task_id']);
					$cloud_id = $lRecord['cloud_id'];
					if (!$cloud_id) {
						$cloud_id = $value['cloud_id'];
					}
					if ($sYunkefu->updateCloud($value['task_id'], $cloud_id, "云客服在审核时被绑定，因为服务记录[{$value['record_id']}]关联") === false) {
						throw new Exception('绑定云客服失败');
					}
				}
				$mRecordTask->commit('mk');
				$mRecordTask->commit('lg');
				return true;
			} catch (Exception $e) {
				echo $e->getMessage()."<br>";
				$mRecordTask->rollBack('mk');
				$mRecordTask->rollBack('lg');
				return false;
			}
			echo 'ok<br>';
		} else {
			echo 'over';
		}
	}

	/**
	 * @abstract 统计交易顾问需处理的订单数 每天执行一次 03：00运行
	 */
	public function pageNeedFollowNum () {
//		define('DEBUG', true);
		$m_follow = new model_mk_follow();
		$m_effpro_follow = new model_mk_effectprotection();

		//需促进担保跟进的订单数
		$day90 = date('Y-m-d',strtotime('-90 day'));
		$today = date('Y-m-d', $this->_time);
		$condition = array(
			'issys' => 0,
			'expries = "'.$today.'"',
			'mk_task.hosted' => 0,
			'mk_task.open_state' => 0,
			'giveup_status != 2',
			'mk_task.manager_id != 0',
			'((mk_task.mode in (10, 13) and mk_task.state <= 2) or (mk_task.mode in (11,12) and mk_task.state <= 3))',
			'issea != 2',
			"createymd > '{$day90}'"
		);
		$items = array('mk_task.manager_id', 'COUNT( mk_task.manager_id ) AS num');
		$leftjoin = array('mk_task' => 'mk_task.task_id = mk_follow.task_id');

		$need_follow_orders = $m_follow->select($condition, $items, 'GROUP BY mk_task.manager_id', '', $leftjoin)->items;

		$service_follow = new service_follow();
		foreach ($need_follow_orders as $order) {
			$service_follow->countFollowNum($order['manager_id'], 'need_follow_num', $order['num']);
		}

		//需首次跟进的订单数
		$day30 = date('Y-m-d',strtotime('-30 day'));
		$condition = array(
			'issys' => 1,
			'expries <= "'.$today.'"',
			'mk_task.hosted' => 0,
			'mk_task.open_state' => 0,
			'giveup_status != 2',
			'mk_task.manager_id != 0',
			'((mk_task.mode in (10, 13) and mk_task.state <= 2) or (mk_task.mode in (11,12) and mk_task.state <= 3))',
			'issea != 2',
			"createymd > '{$day30}'"
		);
		$need_first_follow_orders = $m_follow->select($condition, $items, 'GROUP BY mk_task.manager_id', '', $leftjoin)->items;

		foreach ($need_first_follow_orders as $order) {
			$service_follow->countFollowNum($order['manager_id'], 'need_first_follow_num', $order['num']);
		}

		//对前一天的需首次跟进数据进行修正
		$yestoday = date('Y-m-d', $this->_time - 24 * 60 * 60);
		$condition = array(
			'issys' => 1,
			'mk_task.createymd = "'.$yestoday.'"',
			'(mk_task.hosted = 1 or (mk_task.mode in (10, 13) and mk_task.state > 2) or (mk_task.mode in (11,12) and mk_task.state = 4) or (mk_task.mode in (11, 12) and mk_task_info.end_type in (2, 5)) or end_type = 4)',
			'mk_task.manager_id != 0',
			'createymd > "2013-11-01"'
		);
		$need_correct_orders = $m_follow->select($condition, $items, 'GROUP BY mk_task.manager_id', '', $leftjoin + array('mk_task_info' => 'mk_follow.task_id = mk_task_info.task_id'))->items;

		foreach ($need_correct_orders as $order) {
			$service_follow->countFollowNum($order['manager_id'], 'need_first_follow_num', 0 - $order['num'], $yestoday);
		}

		//对前一天的需促进担保跟进数据进行修正
		$condition = array(
			'issys' => 0,
			'expries = "'.$yestoday.'"',
			'(mk_task.hosted = 1 or mk_task.open_state = 1 or (mk_task.mode in (10, 13) and mk_task.state > 2) or (mk_task.mode in (11,12) and mk_task.state = 4) or (mk_task.mode in (11, 12) and mk_task_info.end_type in (2, 5)) or end_type = 4)',
			'mk_task.manager_id != 0',
			'createymd > "2013-11-01"'
		);
		$need_correct_orders = $m_follow->select($condition, $items, 'GROUP BY mk_task.manager_id', '', $leftjoin + array('mk_task_info' => 'mk_follow.task_id = mk_task_info.task_id'))->items;

		foreach ($need_correct_orders as $order) {
			$service_follow->countFollowNum($order['manager_id'], 'need_follow_num', 0 - $order['num'], $yestoday);
		}

		//需效果保障跟进的订单数
		$condition = array(
			'expries = "'.$today.'"',
			'giveup_status' => 0,
			'mk_task.open_state' => 0,
			'mk_task.hosted' => 1,
			'((mk_task.mode in (10, 13) and mk_task.state <= 2) or (mk_task.mode in (11,12) and mk_task.state <= 3))',
			'createymd > "2013-09-01"'
		);
		$need_effpro_follow_num = $m_effpro_follow->select($condition, $items, 'GROUP BY mk_task.manager_id', '', array('mk_task' => 'mk_task.task_id = mk_task_effect_protection.task_id'))->items;

		foreach ($need_effpro_follow_num as $order) {
			$service_follow->countFollowNum($order['manager_id'], 'need_effpro_follow_num', $order['num']);
		}

		//对前一天需效果保障跟进的数据进行修正
		$condition = array(
			'expries = "'.$yestoday.'"',
			'mk_task.hosted' => 1,
			'((mk_task.open_state = 1) or (mk_task.mode in (10, 13) and mk_task.state > 2) or (mk_task.mode in (11,12) and mk_task.state = 4))',
			'createymd > "2013-11-01"'
		);
		$need_correct_orders = $m_effpro_follow->select($condition, $items, 'GROUP BY mk_task.manager_id', '', array('mk_task' => 'mk_task.task_id = mk_task_effect_protection.task_id'))->items;

		foreach ($need_correct_orders as $order) {
			$service_follow->countFollowNum($order['manager_id'], 'need_effpro_follow_num', 0 - $order['num'], $yestoday);
		}

		echo '执行成功';
	}
	/**
	 * 为任务批量设置售后效果保障跟进状态
	 */
	public function pageSetEffectFollow() {
		$m_task = new zbj_model_mk_task();
		$task = $m_task->select("hosted=1 and ((hosted_date <'2013-10-17'and hosted_date >='2013-10-01' and mode in (11,12)) or (date_add(endymd,interval 7 day)<'2013-10-17' and date_add(endymd,interval 7 day)>='2013-10-01' and mode=10))", 'task_id,manager_id,manager_name',null,null,null,array('dbinfo' => 'co_market'))->items;
		print_r($task);
		$time = time();
		if (!$task) return false;
		$m_effect = new model_mk_effectprotection();
		foreach ($task as $k=>$v) {
			$data[$k]['task_id'] = $v['task_id'];
				$data[$k]['manager_id'] = $v['manager_id'];
				$data[$k]['manager_name'] = $v['manager_name'];
				$data[$k]['create_time'] = $time;
				$data[$k]['issend'] = 1;
				$data[$k]['is_effective_follow'] = 1;
				$data[$k]['level'] = 1;
		}
		$m_effect->addUpdateMultiple($data,array('is_effective_follow'));
		echo "执行完毕！";
	}
	/**
	 * 删除绩效考核记录
	 */
	public function pageDeleteScoreById(){
		$m_score = new model_mk_score();
		$ids = "1514529";
		if ($_GET['id']) {
			$ids = $_GET['id'];
		}
		if (!$ids) return false;
		define(DEBUG, 1);
		$m_score->delete("id in ({$ids})");
		echo "执行完毕！";
	}
	/**
	 * 更新follow表thrownum值=1
	 */
	public function pageSetFollowThrownumByIds(){
		$m_follow = new model_mk_follow();
		$ids = "";
		if (!$ids) return false;
		$m_follow->update("follow_id in ({$ids})", "thrownum=1");
		echo "执行完毕！";
	}

	/**
	 * 服务商业绩归档
	 */
	public function pageSellerCount(){
		$sdate = $_GET['sdate'];
		$edate = $_GET['edate'];
		if (!$sdate && !$edate) {
			$sdate = date('Y-m-d');
			$edate = date('Y-m-d');
		} elseif (!$sdate) {
			$sdate = date('Y-m-d');
		} elseif (!$edate) {
			$edate = date('Y-m-d');
		}
		//清空当天数据
		$mCount = new zbj_model_mk_sellercount();
		$mCount->delete("ymd between '{$sdate}' and '{$edate}'");
		//归档
		$mLog = new zbj_model_mk_sellerlog();
		$item = 'count(*) num,sum(amount) amount,task_id,user_id,nickname,createdate,type';
		$logs = $mLog->select("createdate between '{$sdate}' and '{$edate}'", $item, 'group by user_id,createdate,category_id,type')->items;
		if($logs){
			$insertData = array();
			foreach ($logs as $key => $value) {
				$user_id = $value['user_id'];
				$createdate = $value['createdate'];
				$mTask = new zbj_model_mk_task($value['task_id']);
				$category_id = $mTask->getData('category_id');
				$k = md5($user_id . '_' . $createdate . '_' . $category_id);
				if(!array_key_exists($k, $insertData)){
					$sUser = new zbj_service_user($user_id);
					$insertData[$k] = array(
						'user_id' => $value['user_id'],
						'nickname' => $value['nickname'],
						'ymd' => $value['createdate'],
						'manager_id' => $sUser->get("info.manager_id"),
						'manager_name' => $sUser->get("info.manager_name"),
						'category_id' => $category_id,
						'category2id' => $mTask->getData('category2id'),
						'category1id' => $mTask->getData('category1id'),
					);
				}
				switch($value['type']) {
                    case 1://被雇佣
                        $updateData[$k]['employ_num'] = $insertData[$k]['employ_num'] = $value['num'];
						 break;
                    case 2://雇佣托管
                        $updateData[$k]['employ_hosted_num'] = $insertData[$k]['employ_hosted_num'] = $value['num'];
                        $updateData[$k]['employ_hosted_amount'] = $insertData[$k]['employ_hosted_amount'] = $value['amount'];
                        break;
                    case 3://雇佣首次打款
                        $updateData[$k]['employ_at_num'] = $insertData[$k]['employ_at_num'] = $value['num'];
                        $updateData[$k]['employ_at_amount'] = $insertData[$k]['employ_at_amount'] = $value['amount'];
                        break;
                    case 4://雇佣退款
                        $updateData[$k]['employ_refund_num'] = $insertData[$k]['employ_refund_num'] = $value['num'];
                        $updateData[$k]['employ_refund_amount'] = $insertData[$k]['employ_refund_amount'] = $value['amount'];
                        break;
                    case 5://悬赏参与
                        $updateData[$k]['offer_bid_num'] = $insertData[$k]['offer_bid_num'] = $value['num'];
                        break;
                    case 6://悬赏中标
                        $updateData[$k]['offer_sel_num'] = $insertData[$k]['offer_sel_num'] = $value['num'];
                        break;
                    case 7://悬赏首次打款
                        $updateData[$k]['offer_at_num'] = $insertData[$k]['offer_at_num'] = $value['num'];
                        $updateData[$k]['offer_at_amount'] = $insertData[$k]['offer_at_amount'] = $value['amount'];
                        break;
                    case 8://悬赏退款
                        $updateData[$k]['offer_refund_num'] = $insertData[$k]['offer_refund_num'] = $value['num'];
                        $updateData[$k]['offer_refund_amount'] = $insertData[$k]['offer_refund_amount'] = $value['amount'];
                        break;
					case 9://雇佣加价
						$updateData[$k]['employ_add_num'] = $insertData[$k]['employ_add_num'] = $value['num'];
                        $updateData[$k]['employ_add_amount'] = $insertData[$k]['employ_add_amount'] = $value['amount'];
						break;
					case 10://雇佣非首次打款
						$updateData[$k]['employ_otherpay_num'] = $insertData[$k]['employ_otherpay_num'] = $value['num'];
                        $updateData[$k]['employ_otherpay_amount'] = $insertData[$k]['employ_otherpay_amount'] = $value['amount'];
						break;
					case 11://悬赏非首次打款
						$updateData[$k]['offer_otherpay_num'] = $insertData[$k]['offer_otherpay_num'] = $value['num'];
                        $updateData[$k]['offer_otherpay_amount'] = $insertData[$k]['offer_otherpay_amount'] = $value['amount'];
						break;
                    case 12://招标参与
                        $updateData[$k]['bid_bid_num'] = $insertData[$k]['bid_bid_num'] = $value['num'];
                        break;
                    case 13://招标中标
                        $updateData[$k]['bid_sel_num'] = $insertData[$k]['bid_sel_num'] = $value['num'];
                        break;
                    case 14://招标首次打款
                        $updateData[$k]['bid_at_num'] = $insertData[$k]['bid_at_num'] = $value['num'];
                        $updateData[$k]['bid_at_amount'] = $insertData[$k]['bid_at_amount'] = $value['amount'];
                        break;
                    case 15://招标非首次打款
                        $updateData[$k]['bid_otherpay_num'] = $insertData[$k]['bid_otherpay_num'] = $value['num'];
                        $updateData[$k]['bid_otherpay_amount'] = $insertData[$k]['bid_otherpay_amount'] = $value['amount'];
                        break;
					case 16://招标退款
						$updateData[$k]['bid_refund_num'] = $insertData[$k]['bid_refund_num'] = $value['num'];
                        $updateData[$k]['bid_refund_amount'] = $insertData[$k]['bid_refund_amount'] = $value['amount'];
						break;
                }
			}
			foreach ($insertData as $key => $value) {
				$mCount->insert($value, false, false, $updateData[$key]);
			}
			echo ' ok ';
		}else{
			echo 'no data';
		}
	}

	/**
	 * 清除缓存
	 */
	public function pageDelCache() {
		$cache = new zbj_lib_cache('memcache');
		$name = $_GET['name'];
		var_dump($cache->del($name));
		echo date('Y-m-d H:i:s');
	}

	/**
	 * @abstract 处理雇主放弃、服务商拒绝超期总数
	 */
	public function pageHandleOvertimeNum ($inPath) {
//		define('DEBUG', true);
		$start_date = zbj_lib_BaseUtils::getStr($_GET['start_date'],'string');
		$end_date = zbj_lib_BaseUtils::getStr($_GET['end_date'],'string');
		$overtime_type = zbj_lib_BaseUtils::getStr($_GET['overtime_type'],'int');

		if (! ($start_date && $end_date)) {
			echo "输入开始时间start_date和结束时间end_date";
			exit;
		}

		if (! $overtime_type) {
			echo "输入超期类型overtime_type";
			exit;
		}

		if (1 == $overtime_type) {
			$condition[] = "content like '系统评级订单超期'";
		} elseif (2 == $overtime_type) {
			$condition[] = "content like '因超期进入%'";
		} else {
			$condition[] = "content like '效果保障跟进超期%'";
		}

		$condition[] = 'create_date >= "'.$start_date.'"  AND create_date <= "'.$end_date.'"';

		$m_log_remark = new model_cp_remark();
		$overtime_task_logs = $m_log_remark->select($condition, array('pk_id', 'create_time', 'create_date'))->items;

		$task_ids = '';
		if ($overtime_task_logs) {
			foreach ($overtime_task_logs as $key => $overtime_task) {
				if ($task_ids) {
					$task_ids .= ", {$overtime_task['pk_id']}";
				} else {
					$task_ids = $overtime_task['pk_id'];
				}
			}
		}

		$m_task = new zbj_model_mk_task();
		$overtime_task_detail = $m_task->select(array("mk_task.task_id in ({$task_ids})", 'mk_task_info.end_type in (2, 5)'), array('mk_task.task_id', 'manager_id'), '', '', array('mk_task_info' => 'mk_task_info.task_id = mk_task.task_id'))->items;

		if ($overtime_task_detail) {
			foreach ($overtime_task_detail as $item) {
				foreach ($overtime_task_logs as $key => $log) {
					if ($item['task_id'] == $log['pk_id']) {
						$service_follow = new service_follow();
						if (1 == $overtime_type) {
							$service_follow->countFollowNum($item['manager_id'], 'first_follow_timeout_num', -1, $log['create_date']);
						} elseif (2 == $overtime_type) {
							$service_follow->countFollowNum($item['manager_id'], 'follow_timeout_num', -1, $log['create_date']);
						} else {
							$service_follow->countFollowNum($item['manager_id'], 'effpro_follow_timeout_num', -1, $log['create_date']);
						}

						echo $item['manager_id'].' '.$item['task_id'].' '.$log['create_date'].'<br/>';
						unset($overtime_task_logs[$key]);
					}
				}
			}
		}

		echo "执行成功";
	}

	/**
	 * @abstract 修复超期次数
	 */
	public function pageRepairOvertimeNum ($inPath) {
		$date = zbj_lib_BaseUtils::getStr($_GET['d'],'string');
		$field = zbj_lib_BaseUtils::getStr($_GET['f'],'string');
		$num = zbj_lib_BaseUtils::getStr($_GET['n'],'int');
		$mid = zbj_lib_BaseUtils::getStr($_GET['m'],'int');

		if (! ($date && $field && $num && mid)) {
			echo '参数不对';
			exit;
		}

		$service_follow = new service_follow();
		$service_follow->countFollowNum($mid, $field, 0 - $num, $date);

		echo '执行成功';
	}


	/**
	 *  之前这个计划任务为服务商断约30天后自动解锁， 现在改为超期未跟进解锁（销售跟进）
	 *  
	 *  @author yuanzhuang
	 *  @copyright 2015-06-07
	 */
	public function pageAutoUnlock ($inPath) {
	    //临时暂停一周
	    exit;
		define('DEBUG', true);
		$m_sell_follow = new model_mb_sellFollow();
		
		$condition = array(
			'is_sea' => 0,
			'follow_level' => 0,
			'seller_id > 0',
			'manager_id = 0',
			"expire_time < " . time(),
			'expire_date' => date('Y-m-d', time()),
		);
		$item = array('user_id');
		
		$m_sell_follow->setLimit(5);
		$follow_list = $m_sell_follow->select($condition, $item)->items;
		if ($follow_list) {
			lib_BaseUtils::apiInit(10, array('membership_sdk'));
			$follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
			lib_BaseUtils::apigetclient($follow_service);
			
			$user_service = new com\zhubajie\membership\interfaces\UserServiceClient(null);
			lib_BaseUtils::apigetclient($user_service);
			
			foreach ($follow_list as $each_item) {
				//unlock user
				$user_service->updateFollowSeller($each_item['user_id'], 0);
				//add follow log
				$follow_data = array(
					'user_id' => $each_item['user_id'],
					'is_sea' => 1,
					'enter_sea_reason' => 2,
				    'remark' => '超期未跟进解锁（销售跟进）',
				);
				$follow_service->follow($follow_data);
				//release threshold
				$s_allot = new zbj_service_allot(6);
				$s_allot->processed($each_item['user_id']);
				$s_allot = new zbj_service_allot(97);
				$s_allot->processed($each_item['user_id']);
				$this->addLog($each_item['user_id'],'超期未跟进解锁（销售跟进）','user');
				echo $each_item['user_id'] . '<br/>';
			}
		}
	}


    /**
     *  每个销售名下的服务商，从锁定到销售名下开始，默认30天的跟进周期。
     *  到期时，后台识别如果没有跟进记录的，统一解锁进入公海
     *
     *  @author joey
     *  @copyright 2015-10-28
     */
    public function pageAutoUnlockExcd30Days ($inPath) {

        define('DEBUG', true);
        $m_sell_follow = new model_mb_sellFollow();
        $m_account     = new model_mb_account();

        $condition = array(
            'is_sea' => 0,
            'follow_level' => 0,
            'seller_id > 0',
            'manager_id = 0',
            //"expire_time < " . time(),
            //'expire_date' => date('Y-m-d', time()),
            'allot_at_time < ' . time() - 30*86400, // 超过30天未跟进则需解锁
            'allot_at_time > 0', // 历史数据不受影响,应由初始化程序负责此字段
        );
        $item = array('user_id');

        $m_sell_follow->setLimit(5);
        $follow_list = $m_sell_follow->select($condition, $item)->items;
        if ($follow_list) {
            lib_BaseUtils::apiInit(10, array('membership_sdk'));
            $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
            lib_BaseUtils::apigetclient($follow_service);

            $user_service = new com\zhubajie\membership\interfaces\UserServiceClient(null);
            lib_BaseUtils::apigetclient($user_service);

            foreach ($follow_list as $each_item) {
                // 检查是否已签约，若已签约则不解锁
                $account = $m_account->selectOne(array('user_id'=>$each_item['user_id']),array('user_id','goldstatus'));
                if ($account) {
                    if ($account['goldstatus'] > 0 && $account['goldstatus'] != 5) {
                        continue;
                    }
                }

                //unlock user
                $user_service->updateFollowSeller($each_item['user_id'], 0);
                //add follow log
                $follow_data = array(
                    'user_id' => $each_item['user_id'],
                    'is_sea' => 1,
                    'enter_sea_reason' => 2,
                    'remark' => '超期未跟进解锁（销售跟进）',
                );
                $follow_service->follow($follow_data);
                $this->addLog($each_item['user_id'],'超期未跟进解锁（销售跟进）','user');
                echo $each_item['user_id'] . '<br/>';
            }
        }
    }

	/**
	 * @abstract mb_user_opis 更新当月接受派单数 每5分钟运行一次
	 */
	public function pageUpdateAcceptNum ($inPath) {
		$m_user_opis = new model_mb_useropis();

		$sql = 'UPDATE `mb_user_opis` INNER JOIN (SELECT user_id, COUNT( user_id ) AS accept_num FROM mb_recommend_action WHERE action_type =2 AND ymd >= "'.date('Y-m', $this->_time).'-01" GROUP BY user_id) t ON mb_user_opis.user_id = t.user_id SET mb_user_opis.month_accept_num = t.accept_num';
		$m_user_opis->query($sql);

		echo '执行成功';
	}

	/**
	 * 每月1号03：00点运行
	 * @abstract 每月1号清除表mb_user_opis mb_recommend_num（当月派单数）、mb_accept_num（当月接受派单数）
	 */
	public function pageClearRecommendNum ($inPath) {
		$m_user_opis = new model_mb_useropis();

		$sql = 'UPDATE `mb_user_opis` SET `month_recommend_num`=0, `month_accept_num`=0';
		$m_user_opis->query($sql);

		echo '执行成功';
	}

	/**
	 * @abstract mk_recommend mk_works 稿件号 works_id
	 */
	public function pageUpdateWorksId ($inPath) {
		return true; // 下线 lidacheng 2015-07-20
	}
	/**
	 * 手动清除单项增值服务的缓存
	 * stype 86 服务商底部推广
	 *       94 服务商右侧推广
	 *       96 服务右侧推广
	 *       97 服务底部推广
	 */
	public function pageClearAddedserviceMemcache($inPath){
		$url = $this->getUrlParams($inPath);
		$stype = (int)$url['s'];
		$virtual_id = (int)$url['id'];
		$srv_vas = new zbj_service_vas();
		$rs = $srv_vas->clearMemcache($stype, $virtual_id);
		if ( $rs == true ) {
			echo "清除缓存成功";
		} else {
			echo "清除缓存失败";
		}
	}

	/**
	 * 更新平台收入，执行后可以删除
	 */
	public function pageUpdatePlatformIncome(){
		if ($_GET['debug']) {
			define(DEBUG, 1);
		}
		$start = '';
		if ($_GET['start']) {
			$start = $_GET['start'];
		}
		$end = '';
		if ($_GET['end']) {
			$end = $_GET['end'];
		}
		$startRunTime = lib_BaseUtils::microtime_float();
		$leftjoin = array(
				"mk_task_info" => "mk_task.task_id = mk_task_info.task_id",
				"mk_task_opis" => "mk_task.task_id = mk_task_opis.task_id",
				"mk_task_paytype" => "mk_task.paytype_id = mk_task_paytype.paytype_id"
				);
		$condition = "mk_task_info.close_ymd>='2013-01-01' and hosted_amount>0";
		$condition .= " and mk_task.mode in (11,12)";
		if ($start && $end) {
			$condition = "mk_task_info.close_ymd>='{$start}' and mk_task_info.close_ymd<='{$end}' and hosted_amount>0";
		}
		$m_task = new zbj_model_mk_task();
		$items = "mk_task.task_id,at_amount*(1-mk_task_paytype.option_accept) as platform_income";
		$task = $m_task->select($condition,$items,null,null,$leftjoin,array('dbinfo' => 'co_market'))->items;
		if ($task) {
			$m_taskopis = new model_mk_taskopis();
			$m_taskopis->addUpdateMultiple($task,array('platform_income'));
		}
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}

	/**
	 * 过滤垃圾稿件和无效稿件
	 * 2014-12-25采用新的垃圾屏蔽算法，算法部算法服务器暂时还未搭建，先注释掉法
	 *
	 */
	public function pageCheckWorks() {
		header("Content-Type:text/html;charset=utf-8");
		//初始化算法的sdk
		lib_BaseUtils::apiInit(10,array('zbj_alg_sdk'));
		
		//首先处理上次的累加关键词频率
		$this->handlecacheCheckfrequency();
		//$test_str = "联系我的企鹅号QQasdasdasd号码qq记得加asdasd我哦！";
			//获取上一次最大稿件ID
		$cacheName = "boss_check_works_frequency_root_111";
		$cache = new zbj_lib_cache('memcache');
// 		$cache->del($cacheName);exit;
		$timestamp = 60*60;  //设置缓存时间一小时
		//初始化匹配垃圾稿件的启始位置和默认匹配条数
		$rows = 500;
		$lastWorks_Info = array();
		if ($cache->get($cacheName)) {
			$lastWorks_cache = $cache->get($cacheName);
			//如果稿件量过大系统自动调整取稿件的数量峰值为1000
			if ($lastWorks_cache['rows'] >= $rows) {
				$multiple = ceil($lastWorks_cache['rows']/($rows-50));
				$multiplerows =  $rows + (100 * $multiple);
				if ($multiplerows > 1500) {
					$multiplerows = 1500;
				}
				$lastWorks_Info = array('lastworks_id'=>$lastWorks_cache['lastworks_id'],'rows'=>$multiplerows);
			} else {
				$lastWorks_Info = array('lastworks_id'=>$lastWorks_cache['lastworks_id'],'rows'=>$rows);
			}
			$cache->del($cacheName);
		} else {
			$mCheck = new model_mk_check();
			$lastArr = $mCheck->selectOne('', 'pk_id', '', 'order by check_id desc');
			if (!empty($lastArr)) {
				$lastWorks_Info = array('lastworks_id'=>$lastArr['pk_id'],'rows'=>$rows);
			} else {
				//第一次初始化开始处理稿件的开始ID 14592157
				$lastWorks_Info = array('lastworks_id'=>'14592157','rows'=>$rows);
			}
		}
		$mWork = new zbj_model_mk_works();
		$condition[] = "mk_works.works_id > ".$lastWorks_Info['lastworks_id'];
		$condition[] = "mk_works.fromsite != 3";
//		$condition[] = "mk_works.isgold = 0";
		$condition[] = "mk_works.createymd between '".date('Y-m-d',time()-86400)."' and '".date('Y-m-d',time())."'";
		$listWorks = $mWork->select($condition, 'mk_works.works_id,mk_works.task_id,mk_works.user_id,mk_works.nickname,mk_works.createtime,mk_works.createymd,mk_works.ip,mk_task.mode,mk_task.allot,mk_task.category1id,mk_works.content,mk_works.hasimgfile', '', 'order by mk_works.works_id asc limit '.$lastWorks_Info['rows'],array('mk_task' => 'mk_task.task_id = mk_works.task_id'))->items;
		unset($condition);
// 		//测试使用，稳定后可以删除
// 		$mWork = new zbj_model_mk_works();
// 		$condition[] = "mk_works.isgold = 0";
// 		$start= $_GET['start']; 
// 		$end= $_GET['end'];
// 		$condition[] = "mk_works.createymd between '".$start."' and '".$end."'";
// 		$listWorks = $mWork->select($condition, 'mk_works.works_id,mk_works.task_id,mk_works.user_id,mk_works.nickname,mk_works.createtime,mk_works.createymd,mk_works.ip,mk_task.mode,mk_task.allot,mk_task.category1id,mk_works.content,mk_works.hasimgfile', '', 'order by mk_works.works_id asc limit '.$lastWorks_Info['rows'],array('mk_task' => 'mk_task.task_id = mk_works.task_id'))->items;
// 		unset($condition);
		

		//初始化统计稿件发布人的ID以及状态避免以后重复统计发稿人的最近发稿量和黑名单操作
		$listworksuser = array();
		//开始处理稿件
		if (!empty($listWorks)) {
			
			$s_spamFilter = new com\zhubajie\spamfilter\interfaces\SpamFilterServiceClient(null);
			lib_BaseUtils::apigetclient ( $s_spamFilter );
			
			$countforeach = 0;
			foreach ($listWorks as $key => $value) {
				if ($value['mode'] == 10 || $value['mode'] == 13){
					//雇佣和服务的稿件才进行过滤
					
					//判断是否为垃圾稿件，如果是垃圾稿件，放入审核表中
					$m_spam = new com\zhubajie\spamfilter\dataobject\spamfilter\SpamModel();
					// 		$content = "本人09年研究生毕业，具有多年的C和JAVA开发经验，希望可以合作，联系扣扣 270 907 838";
					$content = "nihao，测试数据内容，不知道能否返回1，还得再加强测试";
					$m_spam->lineTxt = $value['content'];
					$spam_result = $s_spamFilter->indexSpam($m_spam);
					// 				0：服务出错 1：正常内容	2：不合法内容
					switch ($spam_result) {
						case 0:
							echo "服务器出错，未执行稿件审核";
							break;
					
						case 1:
							echo "稿件号{$value['works_id']}正常稿件<br>";
							$this->handleCheckworks(0,$value);
							break;
					
							case 2:
							echo "稿件号{$value['works_id']}不合法<br/>";
							$this->handleCheckworks(4,$value);
							break;
					
					}
					$countforeach++;
				}
				
			}
// 			exit;
			unset($lastWorks_Info);
			//记录处理结果
			$lastWorks_Info = array('lastworks_id'=>$listWorks[$countforeach-1]['works_id'],'rows'=>$countforeach);
			$cache->set($cacheName, $lastWorks_Info, $timestamp);
			//处理黑名单过期的用户
			$this->autohandleworksblack();
		} else {
			return $this->printmsg('亲,获取稿件为空或失败.');
		}
	}
	
	
	/**
	 * 过滤垃圾稿件和无效稿件老的可以删除
	 *
	 */
	public function pageCheckWorksold() {
		/*
		 * 概率验证
		$filterFactor = array(
				//联系方式
				'param1'=>1,
				//无效字段
				'param2'=>1,
				//稿件大小为0
				'param3'=>0,
				//稿件大小为1-8
				'param4'=>0,
				//稿件大小为9-60
				'param5'=>0,
				//稿件大小60字节以上
				'param6'=>1,
				//在危险用户库中
				'param7'=>1,
				//有附件图片
				'param8'=>0);
	
		//无效训练概率
		$invalid_probability = array(
				'param1'=>'0.434',
				'param2'=>'0.168',
				'param3'=>'0.01',
				'param4'=>'0.113',
				'param5'=>'0.263',
				'param6'=>'0.625',
				'param7'=>'0.308',
				'param8'=>'0.323'
	
		);
		//有效训练概率
		$effective_probability = array(
				'param1'=>'0.037',
				'param2'=>'0.10',
				'param3'=>'0.485',
				'param4'=>'0.561',
				'param5'=>'0.392',
				'param6'=>'0.047',
				'param7'=>'0.135',
				'param8'=>'0.564'
		);
	
		//无效概率
		$x = array();
	
		//有效概率
		$y = array();
	
		foreach ($filterFactor as $kkk =>$vvv) {
		if($vvv == 1){
		//无效概率
		$x[] = $invalid_probability[$kkk];
		//有效概率
		$y[] = $effective_probability[$kkk];
		} else {
		//无效概率
		$x[] = 1-$invalid_probability[$kkk];
		//有效概率
		$y[] = 1-$effective_probability[$kkk];
		}
	
		}
	
		//print_r($x);
	
		//无效概率结果
		$p_invalid_probability   = $x[0]*$x[1]*$x[2]*$x[3]*$x[4]*$x[5]*$x[6]*$x[7];
	
		//echo $p_invalid_probability."<br>";
	
		//print_r($y);
		//有效概率结果
		$p_effective_probability = $y[0]*$y[1]*$y[2]*$y[3]*$y[4]*$y[5]*$y[6]*$y[7];
		//echo $p_effective_probability;
	
		//概率结果
		$p_result = $p_invalid_probability/$p_effective_probability;
	
		if ($p_result <= 1) {
		$level = 0;
		} else if ($p_result > 1 && $p_result <= 10) {
		$level = 1;
		} else if ($p_result > 10 && $p_result <= 200) {
		$level = 2;
		} else {
		$level = 3;
		}
		echo $p_result."<br>";
		echo $level;
		*/
	
		//首先处理上次的累加关键词频率
		$this->handlecacheCheckfrequency();
	//$test_str = "联系我的企鹅号QQasdasdasd号码qq记得加asdasd我哦！";
	$mCheckfilter = new model_mk_checkfilter();
	//state 关键词状态 0:关闭 1:启用 2:暂停
	$condition['state'] = 1;
	$filter = $mCheckfilter->select($condition, 'wd_id,words,type,rule', '', 'order by sort,frequency desc')->items;
	unset($condition);
	if (!empty($filter)) {
		foreach ($filter as $key =>$value) {
			//type 1:联系方式,2:无效字段,3:垃圾词库
			if ($value['type'] == 1) {
				//联系方式
				$filterCountUS[] = $value;
			} else if ($value['type'] == 2) {
				//无效字段
				$filterAvail[]= $value;
			} else {
				//垃圾词库
				$filterTrash[]= $value;
			}
		}
		//获取上一次最大稿件ID
		$cacheName = "boss_check_works_frequency_root_111";
		$cache = new zbj_lib_cache('memcache');
		$timestamp = 60*60;  //设置缓存时间一小时
		//初始化匹配垃圾稿件的启始位置和默认匹配条数
		$rows = 500;
		$lastWorks_Info = array();
		if ($cache->get($cacheName)) {
			$lastWorks_cache = $cache->get($cacheName);
			//如果稿件量过大系统自动调整取稿件的数量峰值为1000
			if ($lastWorks_cache['rows'] >= $rows) {
				$multiple = ceil($lastWorks_cache['rows']/($rows-50));
				$multiplerows =  $rows + (100 * $multiple);
				if ($multiplerows > 1500) {
					$multiplerows = 1500;
				}
				$lastWorks_Info = array('lastworks_id'=>$lastWorks_cache['lastworks_id'],'rows'=>$multiplerows);
			} else {
				$lastWorks_Info = array('lastworks_id'=>$lastWorks_cache['lastworks_id'],'rows'=>$rows);
			}
			$cache->del($cacheName);
		} else {
			$mCheck = new model_mk_check();
			$lastArr = $mCheck->selectOne('', 'pk_id', '', 'order by check_id desc');
			if (!empty($lastArr)) {
				$lastWorks_Info = array('lastworks_id'=>$lastArr['pk_id'],'rows'=>$rows);
			} else {
				//第一次初始化开始处理稿件的开始ID 14592157
				$lastWorks_Info = array('lastworks_id'=>'14592157','rows'=>$rows);
			}
		}
	
		//获取旧审核稿件的已经审核的稿件
		/*
		$moldcheck = new zbj_model_lg_check();
		$condition[] = "pk_id > ".$lastWorks_Info['lastworks_id'];
		$condition[] = "createdate between '".date('Y-m-d',time()-86400)."' and '".date('Y-m-d',time())."'";
		$listoldcheck = $moldcheck->select($condition,'pk_id')->items;
		unset($condition);*/
	
	
		$mWork = new zbj_model_mk_works();
		//define("DEBUG",1);
		$condition[] = "mk_works.works_id > ".$lastWorks_Info['lastworks_id'];
		$condition[] = "mk_works.isgold = 0";
		$condition[] = "mk_works.createymd between '".date('Y-m-d',time()-86400)."' and '".date('Y-m-d',time())."'";
		$listWorks = $mWork->select($condition, 'mk_works.works_id,mk_works.task_id,mk_works.user_id,mk_works.nickname,mk_works.createtime,mk_works.createymd,mk_works.ip,mk_task.mode,mk_task.allot,mk_task.category1id,mk_works.content,mk_works.hasimgfile', '', 'order by mk_works.works_id asc limit '.$lastWorks_Info['rows'],array('mk_task' => 'mk_task.task_id = mk_works.task_id'))->items;
		unset($condition);
	
		//过滤旧稿件审核系统已经处理的稿件避免重复过滤
		 /*
		if(!empty($listoldcheck)){
		foreach ($listoldcheck as $kp=>$vp) {
		$arr_old_check_pk_id[] = $vp['pk_id'];
		}
		$newlistWorks = array();
		foreach ($listWorks as $ko=>$wo) {
		if (false == in_array($wo['works_id'],$arr_old_check_pk_id)) {
		$newlistWorks[] = $wo;
		}
	
		}
		$listWorks = $newlistWorks;
	
	}*/
	
		//初始化统计稿件发布人的ID以及状态避免以后重复统计发稿人的最近发稿量和黑名单操作
		$listworksuser = array();
		//开始处理稿件
		if (!empty($listWorks)) {
		$countforeach = 0;
		foreach ($listWorks as $key => $value) {
		//初始化无效稿件判断影响因子
		$filterFactor = array(
		//联系方式
		'param1'=>0,
		//无效字段
		'param2'=>0,
		//稿件大小为0
		'param3'=>0,
		//稿件大小为1-8
		'param4'=>0,
		//稿件大小为9-60
		'param5'=>0,
		//稿件大小60字节以上
		'param6'=>0,
		//在危险用户库中
		'param7'=>0,
		//有附件图片
		'param8'=>0);
	
		//本条稿件是否已经处理
		$if_hasbeen_handle = false;
	
		//2014-01-09 垃圾稿件库
		$model_worksfeature = new zbj_model_lg_worksfeature();
				$compareCondition = "content_code=".md5($value['content'])." and LENGTH(files_code) = 0 ";
				$compareWorks = $model_worksfeature->_db->select('lg_works_feature', $compareCondition.' and works_id!='.$value['works_id'])->items;
				$cWorkNum = count($compareWorks);
				if ($cWorkNum > 0) {
				//处理垃圾稿件
				$this->handleCheckworks(4,$value);
				$if_hasbeen_handle = true;
		}
	
			//匹配垃圾稿件
			if (!empty($filterTrash) && $if_hasbeen_handle == false) {
			foreach ($filterTrash as $k => $v) {
			if ($v['rule'] == 2 ) {
			if(preg_match("/".$v['words']."/iUs",$value['content'])) {
			//处理垃圾稿件
			$this->handleCheckworks(4,$value);
			$if_hasbeen_handle = true;
			//记录一次成功匹配的关键词
			$this->handleCheckfrequency($v['wd_id']);
			break;
			} else {
			//匹配汉子分词
			if (preg_match("/^[\x7f-\xff]+$/", $v['words'])) {
			$array = str_split($v['words'],3);
			$pattern = "/";
			foreach ($array as $km => $vm) {
			if ($km+1 == count($array)) {
					$pattern .= $vm."/iUs";
			} else {
			$pattern .= $vm."(.{0,3})";
			}
			}
			if(preg_match($pattern,$value['content'])) {
			//处理垃圾稿件
			$this->handleCheckworks(4,$value);
			$if_hasbeen_handle = true;
			//记录一次成功匹配的关键词
			$this->handleCheckfrequency($v['wd_id']);
			break;
			}
			} else {
			$array = str_split($v['words'],1);
					$pattern = "/";
					foreach ($array as $kn => $vn) {
				if ($kn+1 == count($array)) {
				$pattern .= $vn."/iUs";
			} else {
			$pattern .= $vn."(.{0,3})";
			}
			}
			if(preg_match($pattern,$value['content'])) {
			//处理垃圾稿件
			$this->handleCheckworks(4,$value);
					$if_hasbeen_handle = true;
					//记录一次成功匹配的关键词
					$this->handleCheckfrequency($v['wd_id']);
					break;
			}
			}
	
			}
			} else if ($v['rule'] == 1 ) {
			//匹配汉子分词
			if (preg_match("/^[\x7f-\xff]+$/", $v['words'])) {
			$array = str_split($v['words'],3);
				$pattern = "/";
				foreach ($array as $kb => $vb) {
				if ($kb+1 == count($array)) {
				$pattern .= $vb."/iUs";
			} else {
			$pattern .= $vb."(.{0,3})";
			}
			}
			if(preg_match($pattern,$value['content'])) {
			//处理垃圾稿件
			$this->handleCheckworks(4,$value);
			$if_hasbeen_handle = true;
			//记录一次成功匹配的关键词
			$this->handleCheckfrequency($v['wd_id']);
			break;
			}
	
			} else {
				$array = str_split($v['words'],1);
				$pattern = "/";
				foreach ($array as $kc => $vc) {
				if ($kc+1 == count($array)) {
				$pattern .= $vc."/iUs";
				} else {
					$pattern .= $vc."(.{0,3})";
				}
				}
					if(preg_match($pattern,$value['content'])) {
					//处理垃圾稿件
					$this->handleCheckworks(4,$value);
					$if_hasbeen_handle = true;
					//记录一次成功匹配的关键词
					$this->handleCheckfrequency($v['wd_id']);
					break;
	}
	}
	
	} else {
	if(preg_match("/".$v['words']."/iUs",$value['content'])) {
	//处理垃圾稿件
	$this->handleCheckworks(4,$value);
	$if_hasbeen_handle = true;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	}
	}
	}
	
	//比稿和非计件任务过滤无效稿件
	if ($value['mode'] == 10 && $value['allot'] != 3 && $if_hasbeen_handle == false) {
	//匹配联系方式
	if (!empty($filterCountUS)) {
	foreach ($filterCountUS as $k => $v) {
	if ($v['rule'] == 2 ) {
	if(preg_match("/".$v['words']."/iUs",$value['content'])) {
	$filterFactor['param1'] = 1;
		//记录一次成功匹配的关键词
		$this->handleCheckfrequency($v['wd_id']);
		break;
	} else {
	//匹配汉子分词
	if (preg_match("/^[\x7f-\xff]+$/", $v['words'])) {
	$array = str_split($v['words'],3);
	$pattern = "/";
	foreach ($array as $kx => $vx) {
	if ($kx+1 == count($array)) {
	$pattern .= $vx."/iUs";
	} else {
	$pattern .= $vx."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param1'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	} else {
	$array = str_split($v['words'],1);
	$pattern = "/";
	foreach ($array as $kz => $vz) {
	if ($kz+1 == count($array)) {
			$pattern .= $vz."/iUs";
	} else {
	$pattern .= $vz."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param1'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	}
	
	}
	} else if ($v['rule'] == 1 ) {
	//匹配汉子分词
	if (preg_match("/^[\x7f-\xff]+$/", $v['words'])) {
	$array = str_split($v['words'],3);
	$pattern = "/";
	foreach ($array as $ka => $va) {
	if ($ka+1 == count($array)) {
	$pattern .= $va."/iUs";
	} else {
	$pattern .= $va."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param1'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	
	} else {
	$array = str_split($v['words'],1);
	$pattern = "/";
	foreach ($array as $ks => $vs) {
	if ($ks+1 == count($array)) {
	$pattern .= $vs."/iUs";
	} else {
	$pattern .= $vs."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param1'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	}
	
	} else {
	if(preg_match("/".$v['words']."/iUs",$value['content'])) {
	$filterFactor['param1'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
		break;
	}
	
	}
	}
	}
	
	//匹配无效字段
	if (!empty($filterAvail)) {
	foreach ($filterAvail as $k => $v) {
	if ($v['rule'] == 2 ) {
	if(preg_match("/".$v['words']."/iUs",$value['content'])) {
	$filterFactor['param2'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	} else {
	//匹配汉子分词
	if (preg_match("/^[\x7f-\xff]+$/", $v['words'])) {
	$array = str_split($v['words'],3);
	$pattern = "/";
	foreach ($array as $kd => $vd) {
	if ($kd+1 == count($array)) {
	$pattern .= $vd."/iUs";
	} else {
	$pattern .= $vd."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param2'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	
	} else {
	$array = str_split($v['words'],1);
	$pattern = "/";
	foreach ($array as $kf => $vf) {
	if ($kf+1 == count($array)) {
	$pattern .= $vf."/iUs";
	} else {
	$pattern .= $vf."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param2'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	}
	
	}
	} else if ($v['rule'] == 1 ) {
	//匹配汉子分词
	if (preg_match("/^[\x7f-\xff]+$/", $v['words'])) {
	$array = str_split($v['words'],3);
	$pattern = "/";
	foreach ($array as $kg => $vg) {
	if ($kg+1 == count($array)) {
	$pattern .= $vg."/iUs";
	} else {
	$pattern .= $vg."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param2'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	
	} else {
	$array = str_split($v['words'],1);
	$pattern = "/";
	foreach ($array as $kh => $vh) {
	if ($kh+1 == count($array)) {
	$pattern .= $vh."/iUs";
	} else {
	$pattern .= $vh."(.{0,6})";
	}
	}
	if(preg_match($pattern,$value['content'])) {
	$filterFactor['param2'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	}
	
	} else {
	if (preg_match("/".$v['words']."/iUs",$value['content'])) {
	$filterFactor['param2'] = 1;
	//记录一次成功匹配的关键词
	$this->handleCheckfrequency($v['wd_id']);
	break;
	}
	
	}
	}
	}
	
	
	//匹配稿件大小为0
	if (empty($value['content'])) {
	$filterFactor['param3'] = 1;
	} else {
	
	//匹配稿件大小为1-8
	$worksLength = $this->CheckworksLength($value['content']);
	if ($worksLength >=1 && $worksLength <=8) {
	$filterFactor['param4'] = 1;
	}
	
	//匹配稿件大小为9-60
	if ($worksLength >=9 && $worksLength <=60) {
	$filterFactor['param5'] = 1;
	}
	
	//匹配稿件大小为60上
	if ($worksLength > 60) {
	$filterFactor['param6'] = 1;
	}
	
	}
	
	
	//匹配该用户发布稿件的频率和黑名单操作
	if (!empty($listworksuser)) {
		$is_checkd = false;
		foreach ($listworksuser as $kk =>$vv) {
				if (in_array($value['user_id'],$vv)) {
				$is_checkd = true;
				if ($vv[status] == true) {
				$filterFactor['param7'] = 1;
	}
	break;
	}
	}
	if($is_checkd == false){
	if (true == $this->CheckworksPubfrequency($value,false)) {
			$filterFactor['param7'] = 1;
			$listworksuser[] = array($value['user_id'],'status'=>true);
					} else {
				$listworksuser[] = array($value['user_id'],'status'=>false);
					}
					}
					} else {
					if (true == $this->CheckworksPubfrequency($value,false)) {
					$filterFactor['param7'] = 1;
							$listworksuser[] = array($value['user_id'],'status'=>true);
				} else {
				$listworksuser[] = array($value['user_id'],'status'=>false);
				}
					}
	
					//匹配是否有图片附件
					if ($value['hasimgfile'] == 1) {
							$filterFactor['param8'] = 1;
					}
	
							//根据不同类目计算不同的概率
							switch ($v['category1id']) {
							// 如果是其名取名类需求有效和无效概率都为1
							case  16 :
							//无效训练概率
							$invalid_probability = array(
							'param1'=>'0.434',
							'param2'=>'0.168',
							'param3'=>'0.5',
							'param4'=>'0.5',
							'param5'=>'0.3',
							'param6'=>'0.3',
							'param7'=>'0.5',
							'param8'=>'0.005'
	
							);
							//有效训练概率
							$effective_probability = array(
							'param1'=>'0.037',
							'param2'=>'0.10',
							'param3'=>'0.5',
							'param4'=>'0.5',
							'param5'=>'0.8',
							'param6'=>'0.3',
							'param7'=>'0.5',
							'param8'=>'0.564'
							);
							break;
							//创意祝福
							case 405 :
							//无效训练概率
							$invalid_probability = array(
							'param1'=>'0.434',
							'param2'=>'0.168',
							'param3'=>'0.5',
							'param4'=>'0.5',
							'param5'=>'0.5',
							'param6'=>'0.5',
							'param7'=>'0.5',
							'param8'=>'0.005'
	
	);
	//有效训练概率
	$effective_probability = array(
			'param1'=>'0.037',
			'param2'=>'0.10',
			'param3'=>'0.5',
			'param4'=>'0.5',
			'param5'=>'0.5',
			'param6'=>'0.5',
			'param7'=>'0.5',
			'param8'=>'0.564'
							);
							break;
							//方案策划
							case 19 :
							//无效训练概率
							$invalid_probability = array(
							'param1'=>'0.434',
							'param2'=>'0.168',
							'param3'=>'0.5',
							'param4'=>'0.5',
							'param5'=>'0.5',
							'param6'=>'0.5',
							'param7'=>'0.5',
							'param8'=>'0.005'
	
							);
							//有效训练概率
							$effective_probability = array(
							'param1'=>'0.037',
							'param2'=>'0.10',
							'param3'=>'0.5',
							'param4'=>'0.5',
							'param5'=>'0.5',
							'param6'=>'0.5',
							'param7'=>'0.5',
							'param8'=>'0.564'
							);
							break;
							//宣传文案
							case 17 :
							//无效训练概率
							$invalid_probability = array(
									'param1'=>'0.434',
									'param2'=>'0.168',
									'param3'=>'0.5',
									'param4'=>'0.5',
									'param5'=>'0.5',
									'param6'=>'0.5',
							'param7'=>'0.5',
							'param8'=>'0.005'
	
							);
							//有效训练概率
							$effective_probability = array(
							'param1'=>'0.037',
							'param2'=>'0.10',
							'param3'=>'0.5',
							'param4'=>'0.5',
							'param5'=>'0.5',
							'param6'=>'0.5',
							'param7'=>'0.5',
							'param8'=>'0.564'
							);
							break;
							//影音服务
								case 21 :
								//无效训练概率
								$invalid_probability = array(
										'param1'=>'0.434',
											'param2'=>'0.168',
											'param3'=>'0.5',
											'param4'=>'0.5',
											'param5'=>'0.5',
											'param6'=>'0.5',
											'param7'=>'0.5',
											'param8'=>'0.005'
	
											);
											//有效训练概率
											$effective_probability = array(
													'param1'=>'0.037',
													'param2'=>'0.10',
													'param3'=>'0.5',
													'param4'=>'0.5',
													'param5'=>'0.5',
													'param6'=>'0.5',
													'param7'=>'0.5',
													'param8'=>'0.564'
													);
													break;
														//除去特殊类目后的概率
														default:
														//无效训练概率
														$invalid_probability = array(
														'param1'=>'0.434',
														'param2'=>'0.168',
														'param3'=>'0.01',
														'param4'=>'0.113',
														'param5'=>'0.263',
														'param6'=>'0.625',
														'param7'=>'0.208',
														'param8'=>'0.005'
	
														);
														//有效训练概率
														$effective_probability = array(
																'param1'=>'0.337',
														'param2'=>'0.10',
														'param3'=>'0.485',
	'param4'=>'0.561',
	'param5'=>'0.392',
	'param6'=>'0.047',
	'param7'=>'0.335',
	'param8'=>'0.564'
	);
	
	}
	
	//无效概率
	$x = array();
	
	//有效概率
	$y = array();
	
	$handle_rule = '';
	foreach ($filterFactor as $kkk =>$vvv) {
	if($vvv == 1){
	//无效概率
	$x[] = $invalid_probability[$kkk];
	//有效概率
	$y[] = $effective_probability[$kkk];
	} else {
	//无效概率
	$x[] = 1-$invalid_probability[$kkk];
	//有效概率
	$y[] = 1-$effective_probability[$kkk];
	}
	$handle_rule .= $vvv;
	
	}
	
	//无效概率结果
	$p_invalid_probability   = $x[0]*$x[1]*$x[2]*$x[3]*$x[4]*$x[5]*$x[6]*$x[7];
	//有效概率结果
	$p_effective_probability = $y[0]*$y[1]*$y[2]*$y[3]*$y[4]*$y[5]*$y[6]*$y[7];
	//概率结果
	$p_result = $p_invalid_probability / $p_effective_probability;
	if ($p_result <= 1) {
	$level = 0;
	} else if ($p_result > 1 && $p_result <= 10) {
	$level = 3;
	} else if ($p_result > 10 && $p_result <= 200) {
	$level = 2;
	} else {
	$level = 1;
	}
	//有效稿件稳定不需要再记录人工干预
	if($level > 0){
	$this->handleCheckworks($level,$value,$handle_rule);
	}
	unset($filterFactor);
	}
	//记录处理稿件的个数
	$countforeach++;
	}
	unset($lastWorks_Info);
	//记录处理结果
	$lastWorks_Info = array('lastworks_id'=>$listWorks[$countforeach-1]['works_id'],'rows'=>$countforeach);
	$cache->set($cacheName, $lastWorks_Info, $timestamp);
	//处理黑名单过期的用户
	$this->autohandleworksblack();
	} else {
	return $this->printmsg('亲,获取稿件为空或失败.');
	}
	} else {
	return $this->printmsg('亲,关键词特征库为空,或关键词全部暂停了.');
	}
	}
	/**
	 * 自动处理稿件黑名单里面过期的用户
	 *
	 *
	 */
	public function  autohandleworksblack() {
		$mCheck = new model_mk_checkuserblack();
		$listblack = $mCheck->select('','black_id,lastuptime')->items;
		if (!empty($listblack)) {
			foreach ($listblack as $k=>$v) {
				if((time()-$v[lastuptime]) >= 0) {
					$mCheck->delete("black_id = ".$v['black_id']);
				}
			}
		}
	}

	/**
	 * 检测稿件内容长度(正则)
	 *
	 *
	 */
	public function CheckworksLength($string = null) {
		preg_match_all("/./Us",$string,$match);
		// 返回单元个数
		return count($match[0]);
	}

	/**
	 * 检测该服务商最近发布稿件数量
	 * @param  is_check_pub = true 代表不用检查最近发稿数量
	 */
	public function CheckworksPubfrequency($arr_works,$is_check_pub = true) {
		if ($is_check_pub == false) {
			$mWork = new zbj_model_mk_works();
			$condition['user_id'] = $arr_works['user_id'];
			$condition[] = "createymd between '".date('Y-m-d',time())."' and '".date('Y-m-d',time())."'";
			$listWorks = $mWork->select($condition, 'count(1) as nums')->items;
			unset($condition);
			if ($listWorks['nums'] >= 60) {
				//mk_check_works_black
				$mCheck = new model_mk_checkuserblack();
				$worksblack = array(
						'user_id'	=>	$arr_works['user_id'],
						'nickname'	=>	$arr_works['nickname'],
						'worksnums'	=>	$listWorks['nums'],
						'creteymd'	=>	date("Y-m-d",time()),
						'cretetime'	=>	time(),
						'lastupdate'=>	date("Y-m-d",time()+1296000),
						'lastuptime'=>	time()+1296000
				);
				$mCheck->insert($worksblack);
				return true;
			} else {
				$mCheck = new model_mk_checkuserblack();
				$condition['user_id'] = $arr_works['user_id'];
				$listblack = $mCheck->select($condition, 'count(1) as nums')->items;
				if (!empty($listblack)) {
					return true;
				} else {
					return false;
				}
			}
		} else {
			$mCheck = new model_mk_checkuserblack();
			$condition['user_id'] = $arr_works['user_id'];
			$listblack = $mCheck->select($condition, 'count(1) as nums')->items;
			if (!empty($listblack)) {
				return true;
			} else {
				return false;
			}
		}
	}

	/**
	 * 处理记录检测后的稿件
	 *
	 *
	 */
	public function handleCheckworks($level,$arr_works,$handle_rule='') {
		//处理垃圾稿件
		if ($arr_works['mode'] == 10) {
			if ($arr_works['allot'] == 3) {
				$type = 5;
			} else {
				$type = 2;
			}
		} else {
			$type = 3;
		}
		$workscheckinfo = array(
				'type'		=>	$type,
				'pk_id'		=>	$arr_works['works_id'],
				'task_id'	=>	$arr_works['task_id'],
				'user_id'	=>	$arr_works['user_id'],
				'nickname'	=>	$arr_works['nickname'],
				'ip'		=>	$arr_works['ip'],
				'createdate'=>	$arr_works['createymd'],
				'createtime'=>	$arr_works['createtime'],
				'level'	    =>  $level,
				'handle_rule' => $handle_rule

		);
		$mCheck = new model_mk_check();
		$mCheck->insert($workscheckinfo);
	}

	/**
	 * 处理特征词成功过滤的次数
	 *
	 *
	 */
	public function handleCheckfrequency($wd_id) {
		$wd_id = (int) $wd_id;
		//设置缓存
		$cacheName = "boss_check_works_frequency_root_999";
		$cache = new zbj_lib_cache('memcache');
		$timestamp = 60*60;  //设置缓存时间一小时
		//初始化缓存数据
		$data = array();
		$data[] = array('wd_id'=>1,'frequency'=>0);
		//如果没有进行查询
		if ($cache->get($cacheName)) {
			$data = $cache->get($cacheName);
			if (!empty($data)) {
				$issetadd = false;
				foreach ($data as $k => $v) {
					if ($v['wd_id'] == $wd_id) {
						$data[$k]['frequency'] = $v['frequency'] + 1;
						$issetadd = true;
						break;
					}
				}
				if ($issetadd == false) {
					$data[] = array('wd_id'=> $wd_id,'frequency'=>1);
				}
				$cache->set($cacheName, $data, $timestamp);
			}
		} else {
			$cache->set($cacheName, $data, $timestamp);
		}
	}

	/**
	 * 处理缓存的关键词特征
	 *
	 */
	public function handlecacheCheckfrequency() {
		//设置缓存
		$cacheName = "boss_check_works_frequency_root_999";
		$cache = new zbj_lib_cache('memcache');
		//如果没有进行查询
		if ($cache->get($cacheName)) {
			$data = $cache->get($cacheName);
			if (!empty($data)) {
				foreach ($data as $k => $v) {
					$this->saveCheckfrequency($v['wd_id'],$v['frequency']);
				}
			}
		}
		$cache->del($cacheName);
	}

	/**
	 * 保存稿件过滤特征库频率到数据库
	 *
	 */
	public function saveCheckfrequency($wd_id,$frequency) {
		//define(DEBUG, 1);
		if ($wd_id > 0 && $frequency > 0) {
			$mCheckFilter = new model_mk_checkfilter;
			$condition['wd_id'] = (int) $wd_id;
			$data[] = 'frequency = frequency + '. (int) $frequency;
			$mCheckFilter->update($condition,$data);
		}
	}

	/**
	 * 往退款分析表(mk_refund_info)中插入记录
	 */
	public function pageAddRefundInfo() {
		set_time_limit(0);
		ini_set('memory_limit', '1024M');
		ini_set('max_execution_time', -1);
		$startRunTime = lib_BaseUtils::microtime_float();
		$date = date("Y-m-d", strtotime("-1 day"));
		$start = $date;
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		if ($_GET['debug']) {
			define(DEBUG, 1);
		}

		$m_task = new zbj_model_mk_task();
		$m_taskopis = new zbj_model_mk_taskopis();
		$m_order = new zbj_model_fn_order();
		$m_remark = new zbj_model_cp_remark();
		$m_actionlog = new zbj_model_mk_taskactionlog();
		$m_report = new zbj_model_mb_report();
		$m_taskinfo = new zbj_model_mk_taskinfo();
		$m_taskallot = new zbj_model_mk_taskallot();
		$m_tk = new zbj_model_fn_tk();

		$taskSql = "SELECT i.task_id,i.refund_type,i.refund_state,i.close_time,i.close_ymd,sum(i.refund_amount) as refund_amount,
		t.allot,t.mode,t.open_state,t.state,t.user_id,t.nickname,
		o.refund_option,o.refused,o.platform_income
FROM mk_task_info i
LEFT JOIN mk_task t ON i.task_id = t.task_id
LEFT JOIN mk_task_opis o ON i.task_id = o.task_id
WHERE i.close_ymd >=  '{$start}' AND i.close_ymd <='{$end}' AND i.refund_state = 1 group by i.task_id
		";
		$task = $m_task->query($taskSql, null, null, array('dbinfo' => 'co_market'));
		$condition[] = "dateymd >= '{$start}' and dateymd <= '{$end}'";
		$condition['state'] = 1;
		//先从退款表中查找到任务号
// 		$tk = $m_tk->select($condition, '*', null, null,null,array('dbinfo' => 'co_finance'))->items;
		if (!$task) {
			echo "没有退款记录！";
			return false;
		}
		//手动申请退款1：fn_tk.task_id = mk_task.task_id and state=1 手动申请退款（比稿（allot in(1,2)）和招标）,退款金额：fn_tk.amount
		//结束需求退款2：（fn_tk.task_id = mk_task.task_id and state=1 and mk_task.state=4）,退款金额：fn_tk.amount
		//关闭需求退款3：mk_task.open_state=1 and mk_task_opis.refused!=0 ,退款金额：fn_tk.amount？
		//协商支4付：fn_order.refund_state =2 and fn_order.product_pkid =mk_task.task_id and fn_order.stype =16 and fn_order.state=1,退款金额：该任务号下所有符合前面条件的记录对 fn_order.refund_amount 求和。
		//计件前台自动退款5：日志表cp_remark， cp_remark.isbuyer=1
		//争议退款6：mb_report表中type in (7,8,9,14,15,16,17,22,23 ) and method in (2,3,7)  and o_id =task_id and o_type=2
		//因为结束需求退款和关闭需求退款包含了所有退款，所以再满足其它退款之外在计算这两种退款

		$data = array();
		foreach ($task as $k=>$v) {
// 			$task = $m_task->selectOne("task_id = {$v['task_id']}", "allot,mode,open_state,state", null, null, null, array('dbinfo' => 'co_market'));
// 			$taskopis = $m_taskopis->selectOne("task_id = {$v['task_id']}", "refund_option,refused,platform_income", null, null, null, array('dbinfo' => 'co_market'));
			$tk = $m_tk->select("task_id = {$v['task_id']} and state=1", 'isbackfee', null, null,null,array('dbinfo' => 'co_finance'))->items;
			$data[$k]['task_id'] = $v['task_id'];
			$data[$k]['user_id'] = $v['user_id'];
			$data[$k]['nickname'] = $v['nickname'];
			$data[$k]['refundtime'] = $v['close_time'];
			$data[$k]['refundymd'] = $v['close_ymd'];
			$data[$k]['refund_option'] = $v['refund_option'];
			if ($v['mode'] == 10 && $v['allot'] == 3) {
				$data[$k]['refund_option'] = 188;//计件任务只有此原因
			}
			$data[$k]['amount'] = $v['refund_amount'];
			$data[$k]['operate_mode'] = 0;
			$data[$k]['ratio_mode'] = 0;
			$order = $m_order->selectOne("refund_state =2 and product_pkid = {$v['task_id']} and state=1 and stype=16", "count(1) as num", null, null, null, array('dbinfo' => 'co_finance'));
			$actionlog = $m_actionlog->selectOne("task_id = {$v['task_id']} and isbuyer=1", "count(1) as num", null, null, null, null);
			$report = $m_report->selectOne("type in (7,8,9,14,15,16,17,22,23) and method in (2,3,7)  and o_id ={$v['task_id']} and o_type=2", "count(1) as num", null, null, null, array('dbinfo' => 'co_member'));

			//operate_mode（0无，1手动申请，2结束需求，3关闭需求，4协商支付，5计件前台自动退款，6争议退款）
			if ($report && $report['num']) {
				$data[$k]['operate_mode'] = 6;
				$data[$k]['refund_option'] = 189;//争议退款只有此原因
			}else if($order && $order['num']) {
				$data[$k]['operate_mode'] = 4;
			}else if($tk && ($v['allot'] == 1 || $v['allot'] == 2) && $v['mode'] == 13) {
				$data[$k]['operate_mode'] = 1;
			}else if($actionlog && $actionlog['num'] && $v['mode'] == 10 && $v['allot'] == 3){
				$data[$k]['operate_mode'] = 5;
			}else if ($tk && $v['state'] == 4) {
				$data[$k]['operate_mode'] = 2;
			}else if ($v['open_state'] == 1 && $v['refused'] != 0) {
				$data[$k]['operate_mode'] = 3;
			}
			//ratio_mode（0无，1收取平台费后全部退款，2未收平台费全部退款，3部分选标退款，4协商退款（未全退））
			//收取平台费后全部退款1：fn_tk.isbackfee=0 and mk_task_info.refund_type=2 and mk_task_info.refund_state=1, 退款金额=fn_tk.refund_amount
			//未收平台费全部退款2：fn_tk.isbackfee=1 and mk_task_info.refund_type=1 and mk_task_info.refund_state=1,退款金额=fn_tk.refund_amount
			//部分选标退款3：mk_task_allot.task_id=mk_task.task_id 查询出的多条mk_task_allot表中记录 判断如果该任务号中所有记录的mk_task_allot.num=mk_task_allot.have_num 全部选标，否则是部分选 标，fn_tk.amount(包含平台服务费的退款) 退款金额：fn_tk.amount
			//协商退款（未全退）4：fn_order.refund_state =2 and fn_order.at_price >0 and fn_order.state=1，单笔退款金额fn_order.refund_amount,退款总金额：fn_tk.refund_amount
// 			$taskinfo = $m_taskinfo->selectOne("task_id = {$v['task_id']}", "refund_type,refund_state", null, null, null, array('dbinfo' => 'co_market'));
			$taskallot = $m_taskallot->selectOne("task_id = {$v['task_id']} and num != have_num","count(1) as num", null, null, null, array('dbinfo' => 'co_market'));
			$ordertype = $m_order->selectOne("refund_state =2 and product_pkid = {$v['task_id']} and state=1 and at_price>0", "count(1) as num", null, null, null, array('dbinfo' => 'co_finance'));
			if ($ordertype && $ordertype['num']) {
				$data[$k]['ratio_mode'] = 4;
			}else if($taskallot && $taskallot['num']) {
				$data[$k]['ratio_mode'] = 3;
			}else if ($v['platform_income']>0) {
				$data[$k]['ratio_mode'] = 1;
			}else {
				$data[$k]['ratio_mode'] = 2;
			}
		}
		$m_refundinfo = new model_mk_refundinfo();
		$m_refundinfo->addUpdateMultiple($data,array('amount','operate_mode','ratio_mode','refund_option'));
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}

	public function pageUpdateSellFollow () {
		$m_sell_follow = new zbj_model_mb_sellfollow();


		$manager_infos = $m_sell_follow->select(array(), 'mb_info.user_id, mb_info.manager_id, mb_info.manager_name', '', '',array('mb_info' => 'mb_info.user_id = mb_sell_follow.user_id'))->items;
		$temp = array();
		if ($manager_infos) {
			foreach ($manager_infos as  $manager_info) {
				$temp[$manager_info['user_id']] = $manager_info;
			}
			unset($manager_infos);
		}

		$follows = $m_sell_follow->select()->items;
		if ($follows) {
			foreach ($follows as $follow) {
				$data = array();
				if ($temp[$follow['user_id']]['manager_id']) {
					$data['manager_id'] = $temp[$follow['user_id']]['manager_id'];
					$data['manager_name'] = $temp[$follow['user_id']]['manager_name'];
				}

				if ($data) {
					$m_sell_follow->update(array('user_id' => $follow['user_id']), $data);

					echo $follow['user_id'] . '<br />';
				}
			}
		}

		echo '更新完成';
	}

	public function pageUpdateSellFollowLog () {
		$m_sell_follow = new zbj_model_mb_sellfollow();
		$m_sell_followlog = new model_mb_sellFollowLog();

		$manager_infos = $m_sell_follow->select(array(), 'mb_info.user_id, mb_info.manager_id, mb_info.manager_name', '', '',array('mb_info' => 'mb_info.user_id = mb_sell_follow.user_id'))->items;
		$temp = array();
		if ($manager_infos) {
			foreach ($manager_infos as  $manager_info) {
				$temp[$manager_info['user_id']] = $manager_info;
			}
			unset($manager_infos);
		}

		$follow_logs = $m_sell_followlog->select(array(), array('log_id', 'user_id', 'follow_purpose', 'visit_level'))->items;
		if ($follow_logs) {
			foreach ($follow_logs as $log) {
				$data = array();
				if ($temp[$log['user_id']]['manager_id']) {
					$data['manager_id'] = $temp[$log['user_id']]['manager_id'];
					$data['manager_name'] = $temp[$log['user_id']]['manager_name'];
				}

				if ((6 == $log['follow_purpose']) && (0 != $log['visit_level'])) {
					$data['is_manager_effective_follow'] = 1;

					$m_sell_follow->update(array('user_id' => $log['user_id']), array('is_manager_effective_follow' => 1));
				}

				if ($data) {
					$m_sell_followlog->update(array('log_id' => $log['log_id']), $data);

					echo $log['log_id'] . '<br />';
				}
			}
		}

		echo '更新完成';
	}

	public function pageUpdateSellContribute () {
		$page = $_GET['p']? $_GET['p']: 0;
		$m_paclog = new zbj_model_mb_sellerlimitspaclog();
		$limit = 5000;
		$m_paclog->setLimit($limit);
		$m_paclog->setPage($page);
		$pac_logs = $m_paclog->select(array('level in (1, 2, 3, 4)', 'type = 1'), array('log_id', 'user_id'), '', 'ORDER BY log_id')->items;

		if ($pac_logs) {
			foreach ($pac_logs as $log) {
				$s_user = new zbj_service_user($log['user_id']);

				$s_user->addSellContribute($log['log_id']);
				echo $log['log_id'] . "<br/>";
			}
		}

		echo '更新完成 ';
	}

	/**
	 * 工单预警状态计划任务
	 */
	public function pageOrderWarn () {
		$s_time_ymd = date("Y-m-d",strtotime("-90 day"));
		//近90天正在进行、非预警状态
		$condition['status'] = "1";
		$condition[] = "s_time_ymd>='{$s_time_ymd}'";

		$m_order = new model_cp_order();
		$order = $m_order->select($condition, "order_id,e_time,joinuserids,attr,category2_id")->items;
		if (!$order) return false;

		$m_category = new zbj_model_mk_recordcategory();
		$m_orderComment = new model_cp_ordercomment();
		$updateData = array();
		$time = time();
		$iswarn = 0;
		foreach ($order as $k => $v) {
			$iswarn = 0;
			if ($v['e_time'] < $time && $v['e_time']) {
				$iswarn = 1;
				$order[$k]['warnreason'] .= '1,';
			}
			if ($v['category2_id']) {
				$category = $m_category->selectOne(array('category_id'=>$v['category2_id']), 'range,handle_time,manager_isturn');
				$orderComment = $m_orderComment->selectOne("order_id={$v['order_id']} and action like '%将截止时间%'", "count(1) as num");
				if ($orderComment) {
					if ($category['range'] && $category['handle_time'] >0 && $category['manager_isturn']==1) {
						//当设置时间次数大于1时，预警状态
						if ($orderComment['num'] >1) {
							$iswarn = 1;
							$order[$k]['warnreason'] .= '2,';
						}
					}else{
						//当设置时间次数大于3时，预警状态
						if ($orderComment['num'] >3) {
							$iswarn = 1;
							$order[$k]['warnreason'] .= '2,';
						}
					}
				}
			}
			if (substr_count($v['joinuserids'], ',') > 4) {
				$iswarn = 1;
				$order[$k]['warnreason'] .= '3,';
			}
			if ($v['attr'] == 1) {
				$iswarn = 1;
				$order[$k]['warnreason'] .= '4,';
			}
			$updateData[$k]['iswarn'] = $iswarn;
			$updateData[$k]['warnreason'] = trim($order[$k]['warnreason'], ',');
			$updateData[$k]['order_id'] = $v['order_id'];
		}
		$updateData = array_merge($updateData);
		if ($updateData) {
// 			$m_order->addUpdateMultiple($updateData, array('iswarn'));
			define(DEBUG, 1);
			$this->updateMultiple($m_order, "cp_order", $updateData, array('iswarn', 'warnreason'));
		}
		echo "更新完成";
// 		1）工单超期；（status=1&&e_time<当前时间）
// 		2）工单延期次数用尽（说明：如果配置了工单处理时间的，可延期1次相应时长；没有配置工单处理时间的，可延期3次指定时长）；mk_record_category:设置时间的条件（range!=1 and handle_time>0 and manager_isturn=1）
// 		3）处理人人数大于等于3人；joinuserids
// 		4）紧急工单；attr=1
// 		5）同一个工单，有>=3条关联服务记录

	}
	/**
	 *
	 * @param unknown_type $model  模型对象
	 * @param unknown_type $tableName 表明
	 * @param unknown_type $data
	 * @param unknown_type $upfields 要更新的字段
	 * @param unknown_type $limit
	 * @return boolean
	 * 例如 $this->updateMultiple($m_order, "cp_order", array(array('order_id'=>1,'iswarn'=>1),array('order_id'=>2,'iswarn'=>1)), array('iswarn'));
	 */
	private function updateMultiple($model,$tableName, $data = array(), $upfields = array(), $limit = 1000) {
		if (!$data || !$upfields || $limit < 1) {
			return false;
		}
		$fields = array();
		$sql = "INSERT INTO " . $tableName;
		//获取需要添加的字段
		foreach ($data as $row) {
			foreach ($row as $key => $value) {
				$fields[$key] = $key;
			}
		}
		if (!$fields) {
			return false;
		}
		$sql .= '(`' . implode('`,`', $fields) . '`) VALUES';
		$page = ceil(count($data) / $limit);
		//违背唯一约束时更新
		$duplicate = '';
		foreach ($upfields as $value) {
			$duplicates[] = "`$value` = values(`$value`)";
		}
		if ($duplicates) {
			$duplicate = "ON DUPLICATE KEY UPDATE " . implode(',', $duplicates);
		}
		$sqls = array();
		for ($i = 0; $i < $page; $i++) {
			$pageData = array_slice($data, $i * $limit, $limit);
			$sqlvalues = array();
			foreach ($pageData as $row) {
				$values = array();
				foreach ($fields as $field) {
					$values[] = (string) "'$row[$field]'";
				}
				$sqlvalues[] = '(' . implode(',', $values) . ')';
			}
			$sqls[] = $sql . implode(',', $sqlvalues) . $duplicate;
		}
		if ($sqls) {
			foreach ($sqls as $value) {
				echo $value."<br/>";
				$model->_db->query($tableName, $value);
			}
		}
		return true;
	}

	/**
	 * @abstract自动派单生产生产者 每30秒执行一次，一次处理一个订单
	 */
	public function pageAutoRecommendProducer ($inPath) {
		return true; // 下线 lidacheng 2015－07-20
	}

	/**
	 * @abstract 更新自动派单当天限额及响应率 频率：每天一次 时间：01：00
	 */
	public function pageUpdateUserRecommendInfo ($inPath) {
		return true; // 下线 lidacheng 2015－07-20
	}

	/**
	 * @abstract 自动派单奖励 用户登陆若当日派单限额为0的时候，可获得一次派单机会 每五分钟执行一次
	 */
	public function pageGiveRecommendChance ($inPath) {
		return true; // 下线 lidacheng 2015－07-20
	}

	/**
	 * @abstract 自动派单，每天清空mb_recommend_info表today_num、bonus_limit、undeal_num。运行时间:00:00;每天运行一次
	 */
	public function pageClearRecommendInfo ($inPath) {
		return true; // 下线 lidacheng 2015－07-20
	}

	/**
	 * @abstract 自动派单，当天限额奖励。运行时间：05：00；每天运行一次
	 */
	public function pageRewardRecommendChance ($inPath) {
		return true; // 下线 lidacheng 2015－07-20
	}

	/**
	 * @abstract 自动派单，修正mb_recommend_info表中undeal_num数据。每天06：00点执行，每天运行一次
	 */
	public function pageCorrectRecommendInfo ($inPath) {
		return true; // 下线 lidacheng 2015－07-20
	}

	/**
	 * 服务包含刷钻等违规字下架
	 */
	public function pageDownService() {
		$httpHeader=array('call-user-id:'.$this->_userid,'call-sessionid: '.$this->_uniqid,'call-cookieid: '.$_COOKIE['_uq'],'call-ip: '.zbj_lib_BaseUtils::getIp(),'call-source: mainsite','call-version: t5s');
		$oSe = new Sse(zbj_lib_Constant::SEARCH_API_HOST, zbj_lib_Constant::SEARCH_API_PORT,$httpHeader);
		$kwlist = array('刷皇冠','刷钻','刷信誉','刷销量','刷单','刷爆款','刷收藏','耍单','刷淘宝店铺动态评','互刷','中差评处理','中差评删','中差评解决','出售微博粉丝','刷微博粉丝','刷微信粉丝','刷网络投票','微淘刷粉丝','论文');
		$kw = $_GET['kw']?array($_GET['kw']):$kwlist;
		$limit = $_GET['l']?$_GET[';']:200;
		foreach ($kw as $v) {
			$params = array(
					'cat' => 'serv',
					'size' => $limit,
					'page' => 0,
					'query' => $v
			);
			$oSe->setDebug(true);
			$serv_result = $oSe->search($params);
			$serv_list = (array) $serv_result['items'];
			$srvUser = new zbj_service_user();
			$mdlService = new zbj_model_sp_service();
			if ($serv_list) {
				foreach ($serv_list as $serv) {
					$id = $serv['saleId'];
					$msg = '含有刷钻等违规词，建议修改为店铺等级提升等委婉的词语';
					$item = array('status'=>'0','state'=>3,'msg'=>$msg,'deal_time'=>$this->_time);
					$mdlService->update(array('service_id'=>$id), $item);
	            	$srvUser->addSearchQueueSer($id, 'U');
	            	$srvUser->setId($v['pubUserId']);
	            	$srvUser->addSearchQueue($v['pubUserId'], 'U');
				}
			}
		}
	}

	/**
	 * 服务包含刷钻等违规字下架
	 */
	public function pageDownServiceNotice() {
		$mdlService = new zbj_model_sp_service();
		$ssmg = new SSendmsg ();
		$list = $mdlService->select("msg='含有刷钻等违规词，建议修改为店铺等级提升等委婉的词语'")->items;
		foreach ($list as $v) {
			//发送通知
			$sendmessage = '含有刷钻等违规词，建议修改为店铺等级提升等委婉的词语';
			$noticeTitle = '您出售的服务下架';
			$service_id = $v['service_id'];
			$userid = $v['user_id'];
			$noticeContent = "尊敬的" . $v['nickname'] . "您好！<br />您出售的服务：" . $v['subject'] . "，由于<b>" . $sendmessage . "</b>下架。您可以<a href='".zbj_lib_Constant::HOME_URL."/".$userid."/sid-" . $service_id . ".html' target='_blank'>点此进行修改</a>。";
			$msgData = array('type' => '3', 't_userid' => $userid, 't_nickname' => $v['nickname'], 'title' => $noticeTitle, 'cont' => $noticeContent, 'cat_id' => 6);
			$ssmg->sendMsg($msgData);
		}
	}

	/*
	 * 临时屏蔽部分需求的稿件
	 */
	public function pageTemporaryShieldWorks() {
		header("Content-type: text/html; charset=utf-8");
		//需要屏蔽稿件的任务号
		$task_id = array ('3848396','3135451','3724086','3539916','3948859','2987756','3456651','3447150','3921904','3578107','3627454','3907218','3879385','3582799','3932985','3800656','2440051','3045501','3374282','3428029','3881597','3919213','3769987','3694169','3288167','3914552','3294560','3435941','3562081','3895237','3839357','3141196','3575737','2700276','3071056','3191842','3250753','3276764','3321977','3316101','3329106','3463433','3529771','3476588','3577701','3634846','3634912','3792912','3803470','3918075','3923373','3925379','3929804','3930989','3935474','3932969','3521945','3601956','3701402','3760058','3019781','3576664','3263924','3413567','3395546','3904193','3912554','3957331','3293227','3023868','2497203','2800278','3260926','3422678','3912860','3931108','3935958','3937792','3937939','3941501','3906663','3211204','3943935','2470065','2665798','2931302','2981190','3060346','3097838','3115179','3116885','3145143','3187513','3222718','3249036','3276256','3290444','3285897','3292804','3312524','3330016','3388032','3427392','3466764','3547696','3590077','3619458','3644466','3829710','3926912','3898597','3907797','3590024','3946418','3518408','3360525','3390291','3460389','3934547','3347698','3185876','2919798','3505604','3610013','3085051','3170334','3209681','3207868','3259323','3305796','3388168','3550984','3806125','3811248','3873522','3243205','3825739','3912341','3777925','3614348','3617967','3773925','3154259','3163845','3228345','3786041','3602213','2973905','3094945','3141809','3236905','3314105','3454014','3550328','3553668','3575081','3575140','3593405','3604367','3806986','3912376','3934292','3945413','3935599','3643285','3785931','3345254','2516991','3093165','3442813','3796079','3081926','3216611','3575624','3580880','2956652','3576903','3591917','3910666','2955535','3060138','3064926','3136664','3166987','3179539','3242519','3232896','3234622','3246225','3246993','3253637','3285687','3281585','3292789','3304058','3320634','3334855','3347683','3355862','3361398','3371540','3399026','3405146','3449911','3444261','3449128','3458303','3498309','3514014','3526388','3558314','3564918','3573474','3575520','3575559','3575942','3578474','3608125','3633246','3649267','3651149','3656844','3710758','3765228','3772236','3923397','3907987','3898682','3939683','3944605','3944690','3541642','3548292','3685304','3512160','3263627','3374100','3421209','3700306','2860730','2978883','3345686','3380932','3403213','3566574','3649964','3929064','3191504','3373933','3424645','3800266','2803143','2889112','2968712','3049344','3060293','3067948','3081964','3083516','3093814','3131622','3157456','3137609','3139507','3143280','3141909','3151459','3174823','3190162','3190777','3191082','3201874','3203139','3241188','3242337','3250599','3264681','3278771','3291522','3300167','3301218','3304811','3325672','3310282','3315447','3325415','3325775','3330756','3339841','3373094','3376267','3362470','3378860','3387176','3405261','3387684','3394362','3398827','3409512','3452376','3448096','3460634','3478294','3497720','3538470','3560028','3594460','3595016','3601975','3619410','3624137','3700307','3793179','3821902','3816113','3930356','3569117','3571742','3572273','3563310','3744541','3030140','3120766','3142428','3165853','3171782','3178415','3181272','3183017','3193835','3278273','3276131','3297259','3322552','3370575','3370956','3374806','3378817','3392171','3420051','3426668','3595387','3807740','3222302','3030081','3043856','3071248','3109510','3119330','3143023','3148900','3174041','3157204','3158869','3170452','3170781','3172423','3172735','3182956','3220260','3198998','3224364','3224407','3211083','3214835','3229059','3264416','3279617','3285980','3287572','3291263','3294354','3296396','3300536','3301668','3306544','3310098','3313091','3316372','3319200','3349942','3370620','3387605','3416626','3408121','3409681','3410930','3416579','3431654','3454890','3447011','3448860','3450208','3456699','3457164','3468676','3482728','3503855','3513168','3527929','3529353','3560092','3565717','3566621','3569431','3574949','3575533','3577655','3594211','3594444','3579693','3611594','3630208','3640571','3649424','3819084','3925086','3508128','3540414','3560710','3561751','3596398','3797736','3834934','3218262','3455445','3637315','3197112','2754493','2764290','2958817','3025982','3030447','3045617','3067060','3046764','3060829','3066664','3077602','3118690','3108507','3121603','3122071','3148751','3116002','3146664','3140974','3171591','3152584','3153676','3158691','3162492','3190339','3176263','3178107','3179052','3179897','3182629','3183864','3184818','3208336','3192505','3210093','3199493','3216567','3227393','3206668','3217369','3219100','3222402','3226653','3229590','3232553','3233636','3252963','3250208','3250614','3253626','3284823','3286052','3309533','3296412','3299781','3300467','3302685','3303054','3305834','3306537','3307766','3308167','3308919','3312040','3320707','3332737','3333852','3335435','3338921','3340466','3346405','3349305','3351406','3351496','3352335','3354228','3354635','3354903','3355959','3356034','3357996','3359783','3362272','3363683','3365994','3368598','3370138','3373671','3375114','3376327','3377830','3378395','3379680','3381034','3382698','3385087','3390306','3392771','3420644','3400650','3403817','3404097','3404560','3409928','3413465','3445117','3448680','3450613','3451724','3431212','3454262','3438844','3444152','3452592','3459511','3460520','3463383','3464775','3467387','3475340','3475991','3497867','3500823','3504551','3506599','3515339','3517509','3519814','3523498','3524148','3526888','3527967','3532409','3534720','3540536','3542103','3544030','3569199','3577663','3594997','3593461','3609982','3617005','3620662','3623406','3623962','3626028','3629908','3631481','3632302','3636195','3639554','3642962','3646131','3651987','3654420','3959642','3512640','3509886','3512641','3125285','3135859','3179509','3398346','3403807','3428430','3409491','3415494','3420255','3427744','3453970','3410442','3464173','3468975','3499071','3506939','3156545','2655027','2657207','2951590','2956831','2960896','3054626','3054947','3058760','3063353','3070240','3094433','3091252','3093578','3095362','3095966','3095987','3096068','3096137','3096281','3092340','3098318','3098405','3099875','3104572','3124620','3106497','3106511','3106516','3107520','3106422','3106559','3106476','3112483','3095643','3118638','3118955','3124426','3127409','3133170','3158355','3138657','3139501','3139514','3139540','3139699','3139762','3140757','3145110','3148306','3151886','3153415','3154606','3159426','3164921','3164988','3165327','3166969','3167250','3167434','3167673','3168096','3171140','3170301','3171000','3176341','3197326','3166552','3181725','3183525','3183553','3189229','3191700','3192795','3199745','3201127','3201674','3202477','3203042','3203818','3213314','3213884','3215732','3220552','3221477','3222406','3223223','3233922','3242781','3265585','3247067','3250981','3252043','3262308','3265472','3269010','3282653','3272775','3280611','3281487','3288200','3289006','3292083','3309893','3313693','3319543','3319630','3325248','3326811','3333251','3334964','3337588','3337817','3338890','3339085','3340194','3340197','3341711','3342386','3345030','3345130','3345314','3345330','3345585','3346368','3347414','3347569','3347586','3347684','3348871','3349591','3350910','3351948','3353980','3353981','3353982','3355480','3355500','3355683','3356325','3357859','3359748','3359759','3359932','3359939','3362738','3365266','3366995','3368182','3368421','3368448','3378943','3370688','3371583','3371853','3377811','3380031','3385268','3387129','3388814','3389662','3389796','3390036','3390714','3391540','3391729','3393228','3395043','3395238','3398556','3418957','3399505','3399584','3400660','3400761','3400791','3400981','3401834','3401948','3424813','3402453','3402665','3405143','3405173','3408523','3408921','3412093','3412316','3416161','3417190','3422717','3423333','3423652','3426951','3428461','3435426','3437552','3440888','3445815','3448515','3451742','3452145','3453170','3455721','3470210','3498491','3464701','3506770','3473176','3476355','3500459','3513992','3514138','3499116','3509143','3515031','3515086','3515926','3521105','3522192','3550664','3553304','3561671','3561902','3566306','3567349','3569187','3569782','3573755','3573761','3577524','3584690','3589213','3595743','3596354','3606134','3599266','3599280','3601920','3605425','3609145','3611434','3613316','3617827','3616951','3619669','3622260','3622829','3623790','3627427','3656355','3664011','3684150','3688126','3698504','3713611','3731759','3747063','3749116','3753409','3758021','3763224','3774760','3783367','3842109','3870463','3909057','3912784','3920781','3929602','3929680','3906642','3940148','3949611','3953841','3553984','3563258','3573959','3583786','3601034','3600217','3604867','3669435','3720035');
		//已经处理过的任务
		$handleding = array();
		$handledingworks = array();
		foreach ( $task_id as $id ) {
			if (in_array ( $id, $handleding ) == false) {
				//define("DEBUG", 1);
				$mworks = new zbj_model_mk_works ();
				$condition ['task_id'] = $id;
				$condition ['issuccess'] = 0;
				$condition ['open_state'] = 0;
				$condition [] = " content like '%刷%'";
				$works = $mworks->select ( $condition, 'works_id', '' )->items;
				if (!empty ( $works )) {
					foreach ( $works as $k => $v ) {
						$worksobj = new zbj_service_works ( $v ['works_id'] );
						$worksobj->shield ();
						$handledingworks[] = $v ['works_id'];
					}
					//服务器处理完毕一条休息一秒再执行下一条
					sleep(1);
				}
				unset ( $condition );
				$handleding [] = $id;
			}
		}

		echo "成功处理".count($handleding)."条需求<br><br><br>屏蔽稿件ID";
		print_r($handledingworks);
	}
    
	/**
	 * 抓取老机会
	 * @author tanqing
	 * @date 2015年8月13日
	 */
	public function pageCreateChanceByOldTask(){
		$cache = new zbj_lib_cache("memcached");
        $cache_name = "boss.zhubajie.com.crontab.create.chance.by.old.task";
        $rs = $cache->get($cache_name);
        if ( $rs ) exit("暂停创建");

	    $start_ymd  ='2013-10-01';
	    //$start_ymd  ='2015-08-01';
	    $run_ymd = '2015-08-27';
	    $curr_ymd = date('Y-m-d');
	    //$curr_ymd = '2015-08-17';
	    
	    $curr_ymd_arr = explode('-',$curr_ymd);
	    $run_ymd_arr = explode('-', $run_ymd);
	    
	    $d1 = mktime(0,0,0,$curr_ymd_arr[1],$curr_ymd_arr[2],$curr_ymd_arr[0]);
	    $d2 = mktime(0,0,0,$run_ymd_arr[1],$run_ymd_arr[2],$run_ymd_arr[0]);
	    //两个时间差相差多少天
	    $days = round(($d1-$d2)/3600/24);
	    $ymd = date('Y-m-d',strtotime("-$days days",strtotime($start_ymd)));
	    
	    $m_task = new zbj_model_mk_task();
	    $sb_category = $this->gettrademarkcategory(); //商标
	    $bq_category = $this->getcopyrightcategory();
	    $soft_category = $this->getsoftcategory();
	    
	    $category = array_merge($sb_category,$bq_category,$soft_category);
	    $categorys = implode(',', $category);
	    
	    $m_chance = new zbj_model_mk_chance();
	    //查询当天的老客户量
	    $chanceCondition = array('create_ymd'=>$curr_ymd,'source'=>'19');
	    $tmp_chance = $m_chance->selectOne($chanceCondition,'count(1) as total');
	    
	    //查询最小的task_id
	    $tmp_chance3 = $m_chance->selectOne(array('source'=>'19'),'relation_id',null,'order by relation_id asc');
	    
	    $min_task_id = (int) $tmp_chance3['relation_id'];
	    
	    $cache = new zbj_lib_cache('memcache');
	    $cache_name = 'zhubiaoju.boss.create.old.taskid';
	    
	    if($min_task_id){
	        //
	        $where = 'task_id < '.$min_task_id;
	        $datas = $cache->get($cache_name);
	        if ($datas[$curr_ymd]){
	            $where = 'task_id < '.$datas[$curr_ymd];
	        }
	    }else{
	        $where = "t.hosted_date<='".$ymd."'";
	    }
	    
	    print_r($where);
	    //4889717
	    $limit = '';
	    //
	    $max_total = lib_BaseUtils::getStr($_GET['max_total'],'int');
	    $max_total = $max_total?$max_total:1000;;
	    
	    if ($tmp_chance['total']<$max_total){
	        //$diff = 1000-$tmp_chance['total'];
	       $limit = ' limit 0,200';
	    }else{
	        echo '今天已经抓取了1000条，执行完成';
	        exit;
	    }
	    
	    $total = $tmp_chance['total']; //当天的总记录数
	    $tmp_chance2 = $m_chance->selectOne($chanceCondition,array('chance_id','relation_id'));
	    
	    
	    //比稿（非计件悬赏）：mode=10 and allot in(1,2) 招标13  需求衣托管
	    $m_task = new zbj_model_mk_task();
	    $sql = "select t.task_id,t.user_id,t.hosted,t.category_id from mk_task t  where
		  ".$where."   and t.hosted=1 and t.category_id in ({$categorys}) order by task_id desc ".$limit;
	    $task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
	    echo $sql;
	    echo "<br/>";
	    
	    $m_info = new zbj_model_mb_info();
	    
	    
	    $chanceTask = $task;
	    if ($chanceTask) {
	        foreach ( $chanceTask as $k => $v ) {
	            if ($tmp_chance['total'] >1000){
	                break;
	            }
	            
	            $datas[$curr_ymd] = $v['task_id'];
	            $cache->set($cache_name, $datas,3600*24);
	            
	            echo "抓取如下任务进入版权机会",$v['task_id'],'<br />';
	            if ($this->_is_allot_createchance_by_old_task($v['user_id'])) {
	                $info = $m_info->selectOne ( array (
	                    'user_id' => $v ['user_id']
	                ), 'realtype,brandname,truename,mobile,address,email ', null, null, null, array (
	                    'dbinfo' => 'co_member'
	                ) );
	                $s_chance = new service_mkchance();
	                if (empty($info['mobile'])){
	                    echo '手机号不能为空<br/>';
	                    continue;
	                }
	                $chanceData = array();
	                $chanceData['user_type'] = $info['realtype'];
	                $chanceData['user_id'] = $v['user_id'];
	                $chanceData['user_name'] = $info['brandname'];
	                $chanceData['source'] =  19;   //老客户
	                $chance_type = 1;
	                if (in_array($v['category_id'], $sb_category)){
	                    $chance_type = 1;
	                }elseif (in_array($v['category_id'], $bq_category)){
	                    $chance_type =2;
	                }elseif (in_array($v['category_id'], $soft_category)){
	                    $chance_type = 26;
	                }
	                $chanceData['chance_type'] = $chance_type;
	                $chanceData['source_id'] = $v['task_id'];   //关联ID
	                $chanceData['manager_id'] = 0;
	                $chanceData['linkman'] = $info['truename'];
	                $chanceData['telephone'] = $info['mobile'];
	                $chanceData['address'] = $info['address'];
	                $chanceData['email'] = $info['email'];
	                $userData['user_id'] =  $v['user_id'];
	                $userData['nickname'] = $info['brandname'];
	                $result = $s_chance->createChance($chanceData, $userData);
	                if ($result['chance_id']) {
	                    $datas[$curr_ymd] = $v['task_id'];
	                    $cache->set($cache_name, $datas,3600*24);
	                    $tmp_chance['total'] ++;
	                    $this->addLog($result['chance_id'],'抓取八戒老客户','chance');
	                    echo "任务号{$v['task_id']}创建机会成功！<br/>";
	                }else{
	                    echo "任务号{$v['task_id']}创建机会失败！".$s_chance->getError()."<br/>";
	                };
	            }
	        }
	    }
	}
	/**
	 * 
	 * 
	 * @author tanqing
	 * @date 2015年8月14日
	 * @param unknown $user_id
	 * @return boolean
	 */
	private function _is_allot_createchance_by_old_task($user_id){
	    $m_chance = new zbj_model_mk_chance();
	    $temp_chance = $m_chance->selectOne(array('user_id'=>$user_id,'source'=>19),'count(1) as total');
	    if ($temp_chance['total']>0){
	        return false;
	    }
	    return true;
	}
	/**
	 * 商标类目
	 * 
	 * @author tanqing
	 * @date 2015年8月13日
	 */
	private function gettrademarkcategory(){
	    $category = array();  //商标
	    $category[] = 1448;  //LOGO设计(1448)
	    $category[] = 1363;  //VI系统设计(1363)
	    $category[] = 1368;  //SI连锁品牌形象设计(1368)
	    $category[] = 1004;  //导视系统设计(1004)
	    $category[]= 1212;   //包装设计(1212)
	    $category[]= 1404;   //服装设计(1404)
	    $category[]= 1406;   //内衣设计(1406)
	    $category[]= 1408;   //配饰设计(1408)
	    $category[]= 1410;   //箱包设计(1410)
	    $category[]= 1411;   //鞋靴设计(1411)
	    $category[]= 1375;   //网站UI设计(1375)
	    $category[]= 1381;   //软件界面设计(1381)
	    $category[]= 1378;   //移动应用UI设计(1378)
	    $category[]= 1243;   //品牌起名(1243)
	    $category[]= 1286;   //网店设计(1286)
	    $category[]= 1391;   //商标注册(1391)
	    $category[] = 836;   //专利注册(836)
	    $category[]= 1393;   //公司注册(1393)
	    $category[]= 1395;   //增资验资(1395)
	    $category[]= 1407;   //企业变更(1407)
	    $category[]= 1409;   //企业年检(1409)
	    $category[]= 1390;   //财务审计(1390)
	    $category[]= 1412;   //代理记账(1412)
	    $category[]= 1414;   //代理审计(1414)
	    $category[]= 1415;   //财税疑难(1415)
	    
	    
	    /*
	     $category[] = 1388;   //注册服务(1388)
	     $category[]= 1389;   //工商业务(1389)
	     $category[]= 1324;   //法律咨询(1324)
	     $category[]= 1325;   //商务咨询(1325)
	     $category[]= 319;   //店铺收藏(319)
	     $category[]= 891;   //直通车推广(891)
	     $category[]= 892;   //微商营销(892)
	     $category[]= 1271;   //店铺推广(1271)
	     $category[]= 1294;   //店铺活动策划(1294)
	     $category[]= 1296;   //店铺代运营(1296)
	     $category[]= 1303;   //微商开店服务(1303)
	     $category[]= 1327;   //跨境电商推广(1327)
	     $category[]= 1328;   //跨境电商设计(1328)
	     $category[]= 1329;   //开店培训服务(1329)
	     */
	    
	    return $category;
	}
	/**
	 * 版权类目
	 * 
	 * @author tanqing
	 * @date 2015年8月13日
	 */
	private function getcopyrightcategory(){
	    $categoty = array();
	    $bq_category[] = 165; //插画(165)
	    $bq_category[] = 1470; //原画(1470)
	    $bq_category[] = 1145; //画像(1145)
	    $bq_category[] = 1278; //卡通形象(1278)
	    $bq_category[] = 267; //四格漫画(267)
	    $bq_category[] = 1475; //其它漫画设计(1475)
	    $bq_category[] = 1282; //二维动画制作(1282)
	    $bq_category[] = 1284; //三维动画制作(1284)
	    $bq_category[] = 1285; //动画配音(1285)
	    $bq_category[] = 1287; //脚本(1287)
	    $bq_category[] = 1288; //分镜(1288)
	    $bq_category[] = 1290; //宣传片(1290)
	    $bq_category[] = 172; //广告(172)
	    $bq_category[] = 176; //微电影(176)
	    $bq_category[] = 178; //MV(178)
	    $bq_category[] = 1295; //剪辑(1295)
	    $bq_category[] = 1297; //场景搭建(1297)
	    $bq_category[] = 1298; //校色(1298)
	    $bq_category[] = 1299; //字幕(1299)
	    $bq_category[] = 1300; //特效(1300)
	    $bq_category[] = 1301; //配音(1301)
	    $bq_category[] = 180; //配乐(180)
	    $bq_category[] = 1362; //作曲(1362)
	    $bq_category[] = 195; //作词(195)
	    $bq_category[] = 196; //编曲(196)
	    $bq_category[] = 1365; //小样(1365)
	    $bq_category[] = 1367; //混音(1367)
	    $bq_category[] = 1369; //录音(1369)
	    $bq_category[] = 1331; //件二次开发(1331)
	    $bq_category[] = 1337; //软件定制开发(1337)
	    $bq_category[] = 382; //软件插件开发(382)
	    $bq_category[] = 1339; //软件汉化(1339)
	    $bq_category[] = 1340; //软件测试(1340)
	    $bq_category[] = 381; //脚本制作(381)
	    $bq_category[] = 1345; //数据采集(1345)
	    $bq_category[] = 1348; //小工具制作(1348)
	    $bq_category[] = 1351; //远程协助(1351)
	    
	    /*
	     $bq_category[] = 683; //动画配音(683)
	     $bq_category[] = 1255; //漫画设计(1255)
	     $bq_category[] = 1256; //动画设计(1256)
	     $bq_category[] = 1252; //影视文案(1252)
	     $bq_category[] = 1253; //影视拍摄(1253)
	     $bq_category[] = 1435; //游戏角色设计(1435)
	     $bq_category[] = 410; //游戏角色设计(410)
	     $bq_category[] = 1436; //场景设计(1436)
	     $bq_category[] = 412; //场景设计(412)
	     $bq_category[] = 1437; //游戏UI(1437)
	     $bq_category[] = 413; //游戏UI(413)
	     $bq_category[] = 415; //游戏音乐(415)
	     $bq_category[] = 1439; //游戏视频(1439)
	     $bq_category[] = 416; //游戏视频(416)
	     $bq_category[] = 1441; //原画设计(1441)
	     $bq_category[] = 411; //原画设计(411)
	     */
	    return $bq_category;
	}
	/**
	 * 软件著作类目
	 * @author tanqing
	 * @date 2015年8月13日
	 */
	private function getsoftcategory(){
	    $soft_category = array();
	    $soft_category[]= '1330';  //模版建站(1330)
	    $soft_category[]= '1332';  //二次开发(1332)
	    $soft_category[]= '1333';  //网站定制开发(1333)
	    $soft_category[]= '365';  //网站前端开发(365)
	    $soft_category[]= '367';  //网站维护(367)
	    $soft_category[]= '368';  //网站测试(368)
	    $soft_category[]= '1347';  //APP开发(1347)
	    $soft_category[]= '1349';  //微信开发(1349)
	    $soft_category[] = '410';  //游戏角色设计(410)
	    $soft_category[] = '411';  //原画设计(411)
	    $soft_category[] = '412';  //场景设计(412)
	    $soft_category[] = '413';  //游戏UI(413)
	    $soft_category[] = '415';  //游戏音乐(415)
	    $soft_category[] = '416';  //游戏视频(416)
	    $soft_category[] = '1443';  //游戏开发(1443)
	    
	    /*
	     $soft_category[] = '1304';  //软件二次开发(1304)
	     $soft_category[] = '1331';  //软件二次开发(1331)
	     $soft_category[] = '1306';  //软件定制开发(1306)
	     $soft_category[] = '1337';  //软件定制开发(1337)
	     $soft_category[] = '1307';  //软件插件开发(1307)
	     $soft_category[] = '382';  //软件插件开发(382)
	     $soft_category[] = '1309';  //软件汉化(1309)
	     $soft_category[] = '1339';  //软件汉化(1339)
	     $soft_category[] = '1311';  //软件测试(1311)
	     $soft_category[] = '1340';  //软件测试(1340)
	     $soft_category[] = '450';  //游戏开发(450)
	     $soft_category[]= '381';  //脚本制作(381)
	     $soft_category[]= '1345';  //数据采集(1345)
	     $soft_category[]= '1348';  //小工具制作(1348)
	     $soft_category[]= '1351';  //远程协助(1351)
	     */
	    
	    return $soft_category;
	}
	/**
	 * 从特定需求中创建商标版权机会
	 * 1）模式：比稿、招标
		2）状态：已选标
		3）类目：
		平面设计>LOGO/VI设计  下的所有三级类目
		起名取名>起名取名   下除“宝宝起名”外的所有三级类目

		1）模式：雇佣、服务
		2）状态：已打款
		3）类目：
		平面设计>LOGO/VI设计  下的所有三级类目
		起名取名>起名取名   下除“宝宝起名”外的所有三级类目
	 */
	public function pageChanceCreateByTask(){
		$startRunTime = lib_BaseUtils::microtime_float();
// 		$date = date("Y-m-d", strtotime("-1 day"));
// 		$start = date("Y-m", strtotime("-1 day"))."-01";

		$date = date("Y-m-d");
		//默认开始、结束日期为当天
		$start = $date;
		$end = $date;
		if (isset($_GET['start'])){
			$start = zbj_lib_BaseUtils::getStr($_GET['start']);
		}
		if (isset($_GET['end'])){
			$end = zbj_lib_BaseUtils::getStr($_GET['end']);
		}
		if (strtotime($start) < strtotime('2014-05-06')) {
			$start = "2014-05-06";
		}
		if (isset($_GET['debug'])){
			define(DEBUG, 1);
		}
		$createtime = time();
		$createymd = date('Y-m-d', time());
		//从搜索引擎获取机会
		$s_sse = new Sse(zbj_lib_Constant::SEARCH_API_HOST,zbj_lib_Constant::SEARCH_API_PORT);
		$kw = "商标";
		$limit = 200;
		$page = 0;
		$earliestendtime = strtotime($start);
// 		$earliestendtime = strtotime('2013-01-01');
		$latestendtime = $earliestendtime +24*3600;
		$sseResultArray = $s_sse->search(array('query'=>$kw,'cat'=>'req','size'=>$limit,'page'=>$page,'earliestendtime'=>$earliestendtime,'latestendtime'=>$latestendtime));
		$sseResult = $sseResultArray['items'];
		$sseChanceTask = array();
		if ($sseResult) {
			foreach ($sseResult as $k=>$v) {
				$sseChanceTask[$k]['task_id'] = $v['taskId'];
				$sseChanceTask[$k]['user_id'] = $v['pubUserId'];
			}
		}

		//从分类中获取机会
		/*
		$m_category = new zbj_model_mk_category();
		$cateCon[] = "parent_id in (73,1243) ";
		$categoty = $m_category->select($cateCon, 'category_id')->items;
		if (!$categoty) {
			echo "任务分类不存在，不能创建机会";
			return false;
		}
		
		print_r($categoty);
		$cateIds = "";
		foreach ($categoty as $k=>$v) {
			$cateIds .= "{$v['category_id']},";
		}
		*/
		
		
		
		
		
		$category = $this->gettrademarkcategory();
		$cateIds = implode(',',$category);
		/*
		$cateIds = trim($cateIds, ',');
		if (!$cateIds) {
			echo "任务分类不存在，不能创建机会";
			return false;
		}
		*/
		
		if ($start ==  $end){
		    $con_w_select_ymd ="w.select_ymd='{$start}' ";
		    
		}else{
		    $con_w_select_ymd ="w.select_ymd>='{$start}' and w.select_ymd<='{$end}'";
		}
		//比稿（非计件悬赏）：mode=10 and allot in(1,2) 招标13
		$sql = "select t.task_id,t.user_id,t.hosted from mk_task t left join mk_works w on t.task_id = w.task_id where
		(mode=10 and allot in(1,2) or mode=13) and t.state=3 and ".$con_w_select_ymd." and t.category_id in ({$cateIds})";
		$m_task = new zbj_model_mk_task();
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		
		echo "比稿（非计件悬赏）：mode=10 and allot in(1,2) 招标13";
		echo "<br/>";
		echo $sql;
		echo "<br/>";
		
		if ($start ==  $end){
		    $con_i_close_time ="i.close_ymd='{$start}'";
		
		}else{
		    $con_i_close_time ="i.close_ymd>='{$start}' and i.close_ymd<='{$end}'";
		}
		//雇佣、服务
		$sql1v1 = "select t.task_id,t.user_id,t.hosted from mk_task t left join mk_task_info i on t.task_id=i.task_id where mode in (11,12) and t.state=4 and ".$con_i_close_time."  and t.category_id in ({$cateIds})";
		$task1v1 = $m_task->query($sql1v1, null, null, array('dbinfo' => 'co_market'));
		$chanceTask = array_merge($sseChanceTask,$task, $task1v1);
		
		echo "雇佣、服务";
		echo "<br/>";
		echo $sql1v1;
		echo "<br/>";
		
		$m_info = new zbj_model_mb_info();
		$m_chance = new zbj_model_mk_chance();
		if ($chanceTask) {
			foreach($chanceTask as $k=>$v) {
				echo "抓取如下任务进入商标机会",$v['task_id'],'<br />';
				if ($this->_is_allow_create($v['user_id'])) {
					$info = $m_info->selectOne(array('user_id'=>$v['user_id']), 'realtype,brandname,truename,mobile,address,email ',null, null ,null, array('dbinfo' => 'co_member'));
					$s_chance = new service_mkchance();
					$chanceData = array();
					$chanceData['user_type'] = $info['realtype'];
					$chanceData['user_id'] = $v['user_id'];
					$chanceData['user_name'] = $info['brandname'];
					$chanceData['source'] = $v['hosted'] == 1? 7: 6;//7需求已托管机会，6需求未托管机会
					$chanceData['chance_type'] = 1;
					$chanceData['linkman'] = $info['truename'];
					$chanceData['source_id'] = $v['task_id'];   //关联ID
					$chanceData['manager_id'] = 0;
					
					$chanceData['telephone'] = $info['mobile'];
					$chanceData['address'] = $info['address'];
					$chanceData['email'] = $info['email'];
					$userData['user_id'] =  $v['user_id'];
					$userData['nickname'] = $info['brandname'];
					if ($s_chance->createChance($chanceData, $userData)) {
						echo "任务号{$v['task_id']}创建机会成功！<br/>";
					}else{
						echo "任务号{$v['task_id']}创建机会失败！<br/>";
					};
					
				}
			}
		}

// 		包装设计       3
// 		动漫设计       4
// 		工业设计       5
// 		装修设计       8
// 		网站建设       12
// 		软件开发       13
// 		APP开发        1342
// 		宣传文案       17
// 		方案策划       19
// 		影音服务       21
// 		UI设计          471
		
		/**
			版权
		 */
		/*
		$sql = "select t.task_id,t.user_id,t.hosted from mk_task t left join mk_works w on t.task_id = w.task_id where
		(mode=10 and allot in(1,2) or mode=13) and t.state=3 and w.select_ymd>='{$start}' and w.select_ymd<='{$end}' and t.category1id in (3,4,5,1394,12,13,1342,1232,21,471)";
		*/
		
		
		$bq_category = $this->getcopyrightcategory();
		$sql = "select t.task_id,t.user_id,t.hosted from mk_task t left join mk_works w on t.task_id = w.task_id where
		(mode=10 and allot in(1,2) or mode=13) and t.state=3 and ".$con_w_select_ymd." and t.category_id in (".implode(',',$bq_category).")";
		echo "<br/>版权<br/>";
		echo $sql;
		$task = $m_task->query ( $sql, null, null, array (
				'dbinfo' => 'co_market'
		) );
		// 雇佣、服务
		$chanceTask = $task;
		if ($chanceTask) {
			foreach ( $chanceTask as $k => $v ) {
				echo "抓取如下任务进入版权机会",$v['task_id'],'<br />';
				if ($this->_is_allow_create($v['user_id'])) {
					$info = $m_info->selectOne ( array (
							'user_id' => $v ['user_id']
					), 'realtype,brandname,truename,mobile,address,email ', null, null, null, array (
							'dbinfo' => 'co_member'
					) );
					$s_chance = new service_mkchance();
					$chanceData = array();
					$chanceData['user_type'] = $info['realtype'];
					$chanceData['user_id'] = $v['user_id'];
					$chanceData['user_name'] = $info['brandname'];
					$chanceData['source'] = $v['hosted'] == 1? 7: 6;//7需求已托管机会，6需求未托管机会
					$chanceData['chance_type'] = 2;
					$chanceData['source_id'] = $v['task_id'];   //关联ID
					$chanceData['manager_id'] = 0;
					$chanceData['linkman'] = $info['truename'];
					$chanceData['telephone'] = $info['mobile'];
					$chanceData['address'] = $info['address'];
					$chanceData['email'] = $info['email'];
					$userData['user_id'] =  $v['user_id'];
					$userData['nickname'] = $info['brandname'];
					if ($s_chance->createChance($chanceData, $userData)) {
						echo "任务号{$v['task_id']}创建机会成功！<br/>";
					}else{
						echo "任务号{$v['task_id']}创建机会失败！<br/>";
					};
				}
			}
		}
		
		
		$soft_category = $this->getsoftcategory();
		
		$sql = "select t.task_id,t.user_id,t.hosted from mk_task t left join mk_works w on t.task_id = w.task_id where
		(mode=10 and allot in(1,2) or mode=13) and t.state=3 and ".$con_w_select_ymd." and t.category_id in (".implode(',',$soft_category).")";
		echo "<br/>软著<br/>";
		echo $sql;
		$task = $m_task->query ( $sql, null, null, array (
				'dbinfo' => 'co_market'
		) );
		$chanceTask = $task;
		if ($chanceTask) {
			foreach ( $chanceTask as $k => $v ) {
				echo "抓取如下任务进入版权机会",$v['task_id'],'<br />';
				if ($this->_is_allow_create($v['user_id'])) {
					$info = $m_info->selectOne ( array (
							'user_id' => $v ['user_id']
					), 'realtype,brandname,truename,mobile,address,email ', null, null, null, array (
							'dbinfo' => 'co_member'
					) );
					$s_chance = new service_mkchance();
					$chanceData = array();
					$chanceData['user_type'] = $info['realtype'];
					$chanceData['user_id'] = $v['user_id'];
					$chanceData['user_name'] = $info['brandname'];
					$chanceData['source'] = $v['hosted'] == 1? 7: 6;//7需求已托管机会，6需求未托管机会
					$chanceData['chance_type'] = 26;
					$chanceData['source_id'] = $v['task_id'];   //关联ID
					$chanceData['manager_id'] = 0;
					$chanceData['linkman'] = $info['truename'];
					$chanceData['telephone'] = $info['mobile'];
					$chanceData['address'] = $info['address'];
					$chanceData['email'] = $info['email'];
					$userData['user_id'] =  $v['user_id'];
					$userData['nickname'] = $info['brandname'];
					if ($s_chance->createChance($chanceData, $userData)) {
						echo "任务号{$v['task_id']}创建机会成功！<br/>";
					}else{
						echo "任务号{$v['task_id']}创建机会失败！<br/>";
					};
				}
			}
		}
				
				
		/*
		比稿/招标的需求，发布后15天内未托管的；雇佣发起后15天内未托管的。这两种新增进知识产权机会。
		1）类目不变，去重；
		2）之前特定类目产生商标机会或版权机会的前提不便
		*/
		//比稿（非计件悬赏）：mode=10 and allot in(1,2) 招标13
		echo "<br/>商标比稿/招标的需求<br/>";
		$sql="select t.task_id,t.user_id from mk_task t  where  (t.mode=10 and t.allot in(1,2) or t.mode in (11,12,13)) and
				t.hosted=0 and t.createymd ='".date('Y-m-d',strtotime("-15 days"))."'   and t.category_id in ({$cateIds}) and t.state>0";
		echo $sql;
		echo "<br/>";
		$m_task = new zbj_model_mk_task();
		$task = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		$this->chanceTask($task);
		echo "<br/>版权<br/>";
		$sql = "select t.task_id,t.user_id from mk_task t where (t.mode=10 and t.allot in(1,2) or t.mode in (11,12,13)) and
		t.hosted=0 and t.createymd ='".date('Y-m-d',strtotime("-15 days"))."'  and t.category1id in (".implode(',',$bq_category).")";
		$task = $m_task->query ( $sql, null, null, array ('dbinfo' => 'co_market') );
		echo $sql."<br/>";
		$this->chanceTask($task,2);
		
		//软著
		$sql = "select t.task_id,t.user_id from mk_task t where (t.mode=10 and t.allot in(1,2) or t.mode in (11,12,13)) and
		t.hosted=0 and t.createymd ='".date('Y-m-d',strtotime("-15 days"))."'  and t.category1id in (".implode(',',$soft_category).")";
		$task = $m_task->query ( $sql, null, null, array ('dbinfo' => 'co_market') );
		echo "<br/>软著<br/>";
		echo $sql."<br/>";
		$this->chanceTask($task,26);
		
		//法律服务数据抓取 网站建设-企业建站数据
		/*
		echo "<br/>法律服务<br/>";
		//1167企业建站 109 LOGO设计 111VI设计 489商标设计 120名片设计  131工作证升级
		
		$lawStart = date("Y-m-d",strtotime("-8 days")); 
		$lawend = date("Y-m-d",strtotime("-1 days"));
		$sql = "select t.task_id,t.user_id,t.hosted from mk_task t  where
		 t.state=3  and t.isfrozen=0 and t.hosted=1 and t.hosted_date>='".date("Y-m-d",strtotime("-7 days"))."' and t.hosted_date<='{$lawend}' and t.category_id in(1448,1130,1243,1363)";
		
		$lawtask = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		echo $sql.'<br/>';
		$this->chanceTask($lawtask,25);
		
		$sql = "select t.task_id,t.user_id,t.hosted from mk_task t  where
		 t.state=3 and t.isfrozen=0 and  t.hosted=1 and t.hosted_date>='".date("Y-m-d",strtotime("-7 days"))."' and t.hosted_date<='{$lawend}' and t.category2id in(994,87)";
		//$sql="select t.task_id,t.user_id from mk_task t  where   t.createymd ='".date('Y-m-d',strtotime("-1 days"))."'   and t.category2id in (994,87) and t.state>0";
		$lawtask = $m_task->query($sql, null, null, array('dbinfo' => 'co_market'));
		$this->chanceTask($lawtask,25);
		echo $sql.'<br/>';
		*/
		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}
	/**
	 * 比稿/招标的需求，发布后15天内未托管的；雇佣发起后15天内未托管的。这两种新增进知识产权机会。
	 * @author tanqing
	 * @date 2014-8-25
	 * @param unknown $chanceTask
	 */
	private function chanceTask($chanceTask,$chance_type=1){
		if ($chanceTask) {
			$createtime = time();
			$createymd = date('Y-m-d', time());
			$m_info = new zbj_model_mb_info();
			$m_chance = new zbj_model_mk_chance();
			foreach($chanceTask as $k=>$v) {
				echo "抓取如下任务进入商标机会[$chance_type]",$v['task_id'],'<br />';
				$chance_type_group = array(1,2);
				if ($chance_type ==25) {
					$chance_type_group = array(3);
				}
				if ($this->_is_allow_create($v['user_id'],$chance_type_group)) {
					$info = $m_info->selectOne(array('user_id'=>$v['user_id']), 'realtype,brandname,truename,mobile,address,email ',null, null ,null, array('dbinfo' => 'co_member'));
					$data=array();
					/*
					$data['user_type'] = $info['realtype'];
					$data['user_id'] = $v['user_id'];
					$data['user_name'] = $info['brandname'];
					$data['source'] = 6;//需求未托管机会
					$data['chance_type'] = $chance_type;
					$data['relation_id'] = $v['task_id'];
					$data['manager_id'] = 0;
					$data['charge_person'] = $info['truename'];
					$data['phone'] = $info['mobile'];
					$data['address'] = $info['address'];
					$data['email'] = $info['email'];
					$data['create_time'] = $createtime;
					$data['create_ymd'] = $createymd;
					$s_chance = new zbj_service_mkchance();
					if ($s_chance->create($data) === false) {
						echo "任务号{$v['task_id']}创建机会失败！<br/>";
					}else{
						echo "任务号{$v['task_id']}创建机会成功！<br/>";
					}
					*/
					$s_chance = new service_mkchance();
					$chanceData = array();
					$chanceData['user_type'] = $info['realtype'];
					$chanceData['user_id'] = $v['user_id'];
					$chanceData['user_name'] = $info['brandname'];
					$chanceData['source'] = $v['hosted'] == 1?7:6;//7需求已托管机会，6需求未托管机会
					$chanceData['chance_type'] = $chance_type;
					$chanceData['source_id'] = $v['task_id'];   //关联ID
					$chanceData['manager_id'] = 0;
						
					$chanceData['linkman'] = $info['truename'];
					$chanceData['telephone'] = $info['mobile'];
					$chanceData['address'] = $info['address'];
					$chanceData['email'] = $info['email'];
					$userData['user_id'] =  $v['user_id'];
					$userData['nickname'] = $info['brandname'];
					if ($s_chance->createChance($chanceData, $userData)) {
						echo "任务号{$v['task_id']}创建机会成功！<br/>";
					}else{
						echo "任务号{$v['task_id']}创建机会失败！<br/>".$s_chance->getError();
						};
				}
			}
		}
	}

	/**
	 * 检查同一雇主90内是否有在跟进中的机会
	 * @access private
	 * @param int user_id
	 */
	private function _is_allow_create($user_id,$chance_type_group = array(1,2)) {
		$m_chance = new zbj_model_mk_chance();

		$condition = array('mk_chance.user_id' => $user_id);
		if ($chance_type_group) {
			$condition []= 'chance_type_group in ('.implode(',', $chance_type_group).')';
		}
		$item = array('mk_chance.chance_id', 'mk_chance_follow.is_giveup', 'mk_chance_follow.giveup_time');
		$left_join = array('mk_chance_follow' => 'mk_chance.chance_id = mk_chance_follow.chance_id');

		$chance_list = $m_chance->select($condition, $item, '', '', $left_join)->items;
		if ($chance_list) {
			foreach ($chance_list as $each_chance) {
				if (1 == $each_chance['is_giveup']) {
					if ((time() - $each_chance['giveup_time']) <= 90 *  24 * 60 * 60) {
						return false;
					}
				} else {
					$m_copyright = new zbj_model_mk_copyright();

					$condition = array('mk_copyright.chance_id' => $each_chance['chance_id'], 'mk_copyright_order.amount > 0');
					$item = array('mk_copyright_order.status', 'mk_copyright_order.hosted_time');
					$left_join = array('mk_copyright_order' => 'mk_copyright_order.copyright_id = mk_copyright.copyright_id');

					$copyright_order_list = $m_copyright->select($condition, $item, '', '', $left_join)->items;
					if (empty($copyright_order_list)) {
						return false;
					} else {
						foreach ($copyright_order_list as $each_order) {
							if ('0' == $each_order['status']) {
								return false;
							} else {
								if ((time() - $each_order['hosted_time']) <= 90 * 24 * 60 * 60) {
									return false;
								}
							}
						}
					}
				}
			}
		}

		return true;
	}

	/**
	 * 处理机会跟进相关
	 */
	public function pageChanceHandle () {
		//处理机会跟进超期
		$this->_handle_chance_follow_overtime();
	}

	/**
	 * 处理机会跟进超期
	 */
	private function _handle_chance_follow_overtime () {
		$m_follow = new model_mk_chanceFollow();
		/*
		$condition = array(
			'is_overtime' => 0,
			'is_giveup' => 0,
			'expire_time <= ' . $this->_time,
			'(`mk_copyright_order`.status = 0 OR `mk_copyright_order`.status IS NULL )',
			'(`mk_copyright_order`.discount_amount > 0 OR `mk_copyright_order`.discount_amount IS NULL )'
		);
		*/
		$item = array('`mk_chance_follow`.chance_id,`mk_chance_follow`.expire_time,`mk_chance_follow`.create_time');
		/*
		$left_join = array(
			'`mk_copyright`' => "`mk_copyright`.chance_id = `mk_chance_follow`.chance_id",
			'`mk_copyright_order` ' => "`mk_copyright_order`.copyright_id = `mk_copyright`.copyright_id"
		);
		*/
		$m_chance = new zbj_model_mk_chance();
		$follow_table = $m_follow->tableName();
		$chance_table = $m_chance->tableName();
		$condition = array();
		$condition[$follow_table.'.is_overtime'] = 0;
		$condition[$follow_table.'.is_giveup'] = 0;
		$condition[]=$follow_table.'.expire_time<='.$this->_time;
		$condition[$chance_table.'.lastest_paid_time']=0;
		$condition[]=$chance_table.'.chance_type_group in (1,2)'; //商标和案件
		$left_join = array(
				$follow_table=>$follow_table.".chance_id = ".$chance_table.'.chance_id',
		);
		$overtime_follow = $m_chance->select($condition,$item,'','',$left_join)->items;
		//$overtime_follow = $m_follow->select($condition, $item, '', '', $left_join)->items;
		if ($overtime_follow) {
			foreach ($overtime_follow as $key => $value) {
                if ( $value['expire_time'] == 0 ) {//无下次跟进时间
                    $create_h = date("H", $value['create_time']);
                    $create_w = date("w", $value['create_time']);
                    $create_ymd = date("Y-m-d", $value['create_time']);
                    if ( $create_w == 6 || $create_w == 0 || ( $create_w == 5 && $create_h >= 18 ) ) {
                        if ( strtotime(date("Y-m-d", strtotime("next monday", $value['create_time']))." 10:10:00") >= $this->_time ) continue;
                    }
                    if ( $create_h >= 0 && $create_h <= 9 ) {//创建的时间0-9点之间 超期时间 10:10
                        if ( strtotime($create_ymd." 10:10:00") >= $this->_time ) continue;
                    } elseif ( $create_h >= 18 && $create_h <= 23 ) {//创建的时间18-23点之间 超期时间 第二天10:10
                        if ( strtotime(date("Y-m-d", $value['create_time']+86400)." 10:10:00") >= $this->_time ) continue;
                    }
                    if ( $value['create_time']+600 > $this->_time) continue;
                }
				if ($m_follow->update(array('chance_id' => $value['chance_id']), array('is_overtime' => 1))) {
					$m_chance->update(array('chance_id' => $value['chance_id']), array('is_overtime' => 1));
				    $this->addLog($value['chance_id'], '机会跟进超期', 'chance');
				}
			}
		}
		$page = lib_BaseUtils::getStr($_GET['page'],'int',1);
		$page = $page?$page:1;
		$m_chance->setCount(1);
		$m_chance->setPage($page);
		$m_chance->setLimit(50);
		$chanceLists= $m_chance->select(array('lastest_paid_time>0','chance_type_group in (1,2)'),'chance_id,chance_type_group',null,'order by chance_id desc');
		if ($chanceLists->items) {
			foreach ($chanceLists->items as $chance){
				if ($chance['chance_type_group'] ==3) {
					$s_allot =new zbj_service_allot(76);
					$s_allot->processed($chance['chance_id']);
				}else{
					$s_chance = new service_mkchance($chance['chance_id']);
					$s_chance->processed();
				}
			}
		}
		
		echo date('Y-m-d H:i:s', $this->_time) . '执行';
	}
	/**
	 * 定期检查补加用户信用度
	 */
	public function pageCredit($inPath){
		//define('DEBUG', true);
		$cache = new zbj_lib_cache('memcache');
		$cachename='boss.controller.crontab.credit';
		$credit=$cache->get($cachename);
		if ($credit){
			if ($credit['dateymd']!=date('Y-m-d')){
				$cache->del($cachename);
			}elseif($credit['done']==1){
				echo "完成";
			}else{
				$id=$credit['id'];
			}
		}
		$limit=500;
		$tableMbInfo= new zbj_model_mb_info();
		$condition='creditlevel=4 ';
		if ($id){
			$condition.=" and user_id<$id";
		}
		$item='user_id';
		$aUserId=$tableMbInfo->select($condition,$item,'','order by  user_id desc limit 0,'.$limit)->items;
		if (!empty($aUserId)){
			$key=count($aUserId)-1;
			$alast=$aUserId[$key];
			$lastid=$alast['user_id'];
			foreach ($aUserId as $userid){
				$aUids[]=$userid['user_id'];
			}
			if (!empty($aUids)){
				$sUids = implode(',', $aUids);
				//验证服务商在7天内没有扣分
				$mdlMbCreditLog = new zbj_model_mb_creditlog();
				$weekago =date('Y-m-d',strtotime('-7 day'));
				$today = date('Y-m-d');
				$logUser = $mdlMbCreditLog->select("user_id in ($sUids)  and type in (1,2)  and addymd>'".$weekago."' and addymd<='".$today."'","user_id")->items;
				if ($logUser){
					foreach ($aUids as $k=>$v){
						foreach ($logUser as $delUser){
							if ($v==$delUser['user_id']){
								unset($aUids[$k]);
							}
						}
					}
					$sUids = implode(',', $aUids);
				}
				if ($sUids){
					//服务商在7天内有服务商行为
					$mdlWaiterLog = new zbj_model_mb_waiterlog();
					$waiterLog = $mdlWaiterLog->select("user_id in ($sUids) and dateymd>='$weekago' and dateymd<='$today'",'user_id','group by user_id')->items;
					if ($waiterLog){
						foreach ($waiterLog as $value){
							$oUser = new zbj_service_user($value['user_id']);
							$oUser->recoverCredit(2);
						}
					}
				}
			}
			$credit=array('id'=>$lastid,'dateymd'=>date('Y-m-d'));
			$cache->set($cachename,$credit,86400);
		}else{
			$credit=array('done'=>1,'dateymd'=>date('Y-m-d'));
			$cache->set($cachename,$credit,86400);
			echo "完成";
		}
	}
	/**
	 * 由于本代码需要很多真实数据在t6环境不好测试请在state环境测试数据
	 * 修复任务下面屏蔽稿件稿件号记录错误问题
	 * 请不要删除本代码以后还可以继续使用
	 */
	public function pageRepaircheckworksporint() {
		header("Content-type: text/html; charset=utf-8");
		$sdate = !empty($_GET['sdate']) ? $_GET['sdate'] : '2014-06-26';
		$edate = !empty($_GET['edate']) ? $_GET['edate'] : '2014-06-26';
		//define("DEBUG",1);
		//获取到需要处理的服务商ID和需要处理的稿件条数
		$oMdlLog = new zbj_model_mb_creditlog();
		$aLogList = $oMdlLog->select("addymd between ".$sdate." and ".$edate." and type = 1  and points = 1 and msg like '稿件审核扣分%'",'user_id,count(1)as nums','group by msg having(count(1) > 1)')->items;
		//$aLogList[] = array('user_id'=>18,'nums'=>80);
		echo "总共匹配出".count($aLogList).'个服务商审核扣分需要修复';
		//print_r($aLogList);
		if($aLogList) {
			foreach ($aLogList as $k=>$v) {
				echo "<br><a href='http://boss.zhubajie.com/crontab/handleRepaircheckworksporint?user_id=".$v['user_id']."&nums=".$v['nums']."' target='_blank'>处理用户ID".$v['user_id']."</a>";
			}
		}
	}
	/**
	 * 具体修复屏蔽稿件稿件号记录错误问题
	 * 请不要删除本代码以后还可以继续使用
	 * 直接传递用户ID和条数可以直接处理单个用户的数据 $_GET['user_id'];$_GET['nums'];
	 */
	public function pagehandleRepaircheckworksporint(){
		header("Content-type: text/html; charset=utf-8");
		$cache = new zbj_lib_cache('memcache');
		//保存处理成功的ID
		$cache_name = 'repaircheckworksporint_boss20140626';
		//保存处理失败的ID
		$cache_name_error = 'repaircheckworksporint_boss20140626_error';
		$timestamp = '3600';
		$user_id = $_GET['user_id'];
		$nums = $_GET['nums'];
		if($user_id&&$nums) {
			//获取该用户被屏蔽的稿件号
			$m_work = new zbj_model_mk_works();
			$condtion = array();
			$condtion['user_id'] = $user_id;
			$condtion['open_state'] = 1;
			$m_work->setLimit($nums);
			$worklist = $m_work->select($condtion,'works_id','',' order by works_id desc')->items;
			//print_r($worklist);
			//$worklist[] = array('works_id'=>'33331');
			//获取该用户扣分记录
			$oLog = new zbj_model_mb_creditlog();
			$condtion = "";
			$condtion .= " user_id = ".$user_id;
			$condtion .= " and type = 1";
			$condtion .= " and points = 1";
			$condtion .= " and msg like '稿件审核扣分%'";
			$oLog->setLimit($nums);
			$LogList = $oLog->select($condtion,'id','',' order by id desc')->items;
			if($worklist && $LogList) {
				foreach ($worklist as $k => $v) {
					$oLogsss = new zbj_model_mb_creditlog();
					$condition = array();
					$condition['id'] = $LogList[$k]['id'];
					$data = array();
					$data['msg'] = '稿件审核扣分:稿件ID:'.$v['works_id'];
					if($oLogsss->update($condition,$data)){
						if($cache->get($cache_name)){
							$id = array();
							$id = $cache->get($cache_name);
							$id [] = array('id'=>$LogList[$k]['id'],'works_id'=>$v['works_id']);
							$cache->set($cache_name,$id ,$timestamp);
						}else{
							$id = array();
							$id [] = array('id'=>$LogList[$k]['id'],'works_id'=>$v['works_id']);
							$cache->set($cache_name, $id,$timestamp);
						}
					}else{
						if($cache->get($cache_name_error)){
							$id = array();
							$id = $cache->get($cache_name_error);
							$id [] = array('id'=>$LogList[$k]['id'],'works_id'=>$v['works_id']);
							$cache->set($cache_name_error, $id,$timestamp);
						}else{
							$id = array();
							$id [] = array('id'=>$LogList[$k]['id'],'works_id'=>$v['works_id']);
							$cache->set($cache_name_error, $id,$timestamp);
						}
					}
				}
			}
			echo "<br>总计成功处理".count($cache->get($cache_name)).'条,总共失败处理'.count($cache->get($cache_name_error)).'条';
			//echo "<br>成功记录<br>".print_r($cache->get($cache_name));
			//echo "<br>失败记录<br>".print_r($cache->get($cache_name_error));
		}
	}



	/**
	 * 垃圾IP/垃圾用戶
	 * @author tanqing
	 * @date 2014-7-9
	 */
	public function  pageGarbage(){
		$s_user=new service_user();
		if (date("G")<2) {
			$date=date("Y-m-d",strtotime("-1 days"));
			$s_user->insertGarbageIp2db($date); //保存ip
			$s_user->insertGarbageAccountUser2db($date); //保存用戶
		}
		$date=date("Y-m-d");
		$s_user->insertGarbageIp2db($date); //保存ip
		$res=$s_user->insertGarbageAccountUser2db($date); //保存用戶
		var_dump($res);

	}

	/**
	 * 根据用户id批量屏蔽用户、稿件、稿件评论
	 */
	public function pageLockUserByUid() {
		$startRunTime = lib_BaseUtils::microtime_float();
		$uid_array = array(
				11062915
				,11159630
				);

		if ($_GET['debug']) {
			define(DEBUG, $value);
		}
		$page = $_GET['page'];
		$limit = $_GET['limit'];

		$mWorks = new zbj_model_mk_works();
		$mComment = new zbj_model_mk_workscomment();
		$refuse_desc = '异常实名认证用户，审核部统一进行锁定或屏蔽操作';
		for($i = ($page - 1) * $limit; $i < $page * $limit; $i ++) {
			$s_user = new zbj_service_user ( $uid_array [$i] );
			$s_user->set ( 'locks', 1 );
			$s_user->set ( 'lockstime', 0 );
			if ($s_user->save () === false) {
				echo "{$uid_array [$i]}     用户锁定失败<br/>";
			} else {
				$s_user->addUserLog ( $refuse_desc, 0, '', '', '', 0, 1022 );
			}

			//屏蔽稿件
			$wlist = $mWorks->select ( array ('user_id' => $uid_array [$i], 'open_state' => 0 ), 'works_id' )->items;
			//屏蔽原因
			$refuse_type = array (15);
			if ($wlist) {
				$sWorks = new service_works ();
				foreach ( $wlist as $value ) {
					if ($sWorks->shieldWorks ( $value ['works_id'], 1022, '许晓明', $refuse_type, $refuse_desc ) === false) {
						echo "{$value['works_id']}     稿件号屏蔽失败<br/>";
					}
				}
			}

			//屏蔽稿件评论
			$clist = $mComment->select ( array ('user_id' => $uid_array [$i], 'state' => 0 ), 'comment_id' )->items;
			//屏蔽原因
			$refuse_type = array (7);
			if ($clist) {
				$sWorksComment = new service_workscomment ();
				foreach ( $clist as $value ) {
					if ($sWorksComment->shieldComment ( $value ['comment_id'], 1022, '许晓明', $refuse_type, $refuse_desc ) === false) {
						echo "{$value['comment_id']}     稿件评论号屏蔽失败<br/>";
					}
				}
			}
		}

		echo '执行时间='.(lib_BaseUtils::microtime_float() - $startRunTime);
	}

	/**
	 * 服务提醒  30分钟提醒
	 * @author tanqing
	 * @date 2014-8-12
	 * @param unknown $inPath
	 */
	private function _record_remind() {
		$curTime = $this->_time-3600;
		$oneHourLater=$this->_time+3600;
		$condition = array ();
		$condition['status'] = 1;
		$condition['is_remind']=0;
		$condition[]=" cut_off_time between {$curTime} and {$oneHourLater} ";
		//服务提醒
		$m_record=new zbj_model_mk_record();
		$m_record->setLimit(20);
		$follows=$m_record->select($condition)->items;
		if(count($follows)){
// 			$s_msg = new service_msg();
			lib_BaseUtils::apiInit();
			$msg_service = new com\zhubajie\boss\interfaces\messageServiceClient(null);
			lib_BaseUtils::apigetclient($msg_service);

			$message_pack = new messagePack();
			$message_pack->type = messageType::BOSSMESSAGE;

			foreach ($follows as $k => $v) {
				$t=$v['cut_off_time']-time();
				if ($t<=1800 && $t>0) {
					$message_pack->title = '您有新的服务记录将超期';
					$message_pack->cont = '你有一条服务记录将在30分钟后超期，请尽快解决用户问题。';

					$message_params=new com\zhubajie\boss\dataobject\message\SentMessageParamsDo();
					$message_params->messagePack[] = $message_pack;
					$message_params->f_uid = $v['manager_id'];
					$message_params->product_type = messageProduct::RECORD;
					$message_params->product_id = $v['record_id'];
					$message_params->range = messageRange::SELECT_USER;
					$message_params->to_uids = array($v['manager_id']);

					$msg_service->sentMessage($message_params);


// 					$title='您有新的服务记录将超期';
// 					$cont='你有一条服务记录将在30分钟后超期，请尽快解决用户问题。';
// 					$type=4;
// 					$pkid=$v['record_id'];
// 					$s_msg->add($v['manager_id'], $v['manager_name'], $v['manager_id'], $v['manager_name'],$title, $cont, $type, $v['record_id'], $options = '');
					$m_record->update(array('record_id'=>$v['record_id']), 'is_remind = 1');
					echo '提醒完成';
				}
			}
		}
	}
	/**
	 * 根据用户id清楚联系电话
	 */
	public function pageClearPhoneByUid() {
		$uid = zbj_lib_BaseUtils::getStr($_GET['id']);
		if (!$uid) {
			echo "用户id不存在";exit;
		}
		$m_info = new zbj_model_mb_info();
		if ($m_info->update(array('user_id'=>$uid), array('mobile'=>'')) === false) {
			echo "更新失败";
			return false;
		}
		echo "清除成功";
		return true;
	}
	/*
	 * @更新表zbj_model_fn_tk中字段category_id
	 *
	 * */
	public function pageUpdateData(){
		$limit = zbj_lib_BaseUtils::getStr($_GET['limit']);
		if(! $limit){
			$limit = 50;
		}
		$model = new zbj_model_fn_tk();
		$model->setLimit($limit);
		//define('DEBUG',true);
		$list = $model->select(array('category_id'=>0),'task_id')->items;

		$model_mk_task = new zbj_model_mk_task();
		for($i = 1; $i <=count($list); $i++){
			$list_data = $model_mk_task->selectOne(array('task_id'=>$list[$i]['task_id']),'category_id');
			$result = $model->update(array('task_id'=>$list[$i]['task_id']),array('category_id'=>$list_data['category_id']));
		}
	}
	/**
	 * 清除客服已经处理的任务信息
	 * @param unknown $inPath
	 */
	function pagecleanallot($inPath) {
	    if($_GET['debug'] == 1){
	        define(DEBUG,1);
	    }
		$config_id = zbj_lib_BaseUtils::getStr ( $_REQUEST ['config_id'], 'int' );
		if(!in_array($config_id, array(18,19,20,21,50))){
			return '有效的config_id为18,19,20,21,50';
		}
		$page = zbj_lib_BaseUtils::getStr ( $_REQUEST ['page'], 'int' );
		if ($page <= 0) {
			$page = 1;
		}
		define ( 'NUM', 50 );
		$s_allot = new zbj_service_allot ( $config_id );
		$date=null;
		if($_REQUEST['date'] && zbj_lib_BaseUtils::isDate($_REQUEST['date'])){
			$date=$_REQUEST['date'];
		}
		$data = $s_allot->getallotlist ( 0, 0, 0, $date, $date, NUM, $page );
		if (is_array ( $data->items ) && $data->totalSize) {
			$doclean=0;
			foreach ( $data->items as $item ) {
				$result = $this->cleanallot ( $config_id, $item ['rid'], $s_allot );
				if ($result == 0) {
					echo "{$item['rid']}不支持的处理方法。<br />";
				} elseif ($result == 1) {
					$doclean=1;
					echo "成功清理了任务{$item['rid']}的状态为已处理<br />";
				} elseif ($result == 2) {
					echo "任务{$item['rid']}的并没有处理跳过清理<br />";
				}
			}
			if(count($data->items)==NUM){//进入下一页清理
				if($doclean==1){
					$next_page=$page;
				}else{//进入下一页清理
					$next_page=$page+1;
				}
			echo <<<EOT
<a href="/crontab/cleanallot?config_id=$config_id&date=$date&page=$next_page">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/cleanallot?config_id=$config_id&date=$date&page=$next_page'
	},3000);
</script>
EOT;
			}else{//最后一页
				echo "全部清理完成。";
			}
		}else{
			echo '没有任务要进行清理';
		}
	}
	/**
	 *
	 * @param unknown $config_id
	 * @param unknown $rid
	 * @param zbj_service_allot $s_allot
	 */
	private function cleanallot($config_id,$rid,$s_allot){
		switch ($config_id){
			case 18:
			case 19:
			case 20:
			case 21:
			case 50:
				$model=new model_mk_chanceFollow();
				$follow = $model->selectOne(array('chance_id' => $rid));
				if (0 == $follow['is_sys']) {
					$s_allot->processed($rid);
					return 1;
				}
				//
				$m_copyright=new zbj_model_mk_copyright();
				$copyright=$m_copyright->selectOne(array('chance_id'=>$rid));
				if(!count($copyright)){
					return 0;
				}
				$m_copyorder=new zbj_model_mk_copyrightorder();
				$order=$m_copyorder->selectOne(array('copyright_id'=>$copyright['copyright_id'],'status'=>1));
				if (count ( $order )) {
					$s_allot->processed ( $rid );
					return 1;
				}
				return 2;
				break;
			default:
				return 0;
		}
	}
	/*
	 * 公司架构树(更新部门冗余信息表)
	 * */
	public function pageblocktree($inPath){
	    $array_pid = array();
	    $m_groups = new zbj_model_cp_usergroups();
	    $m_groupoption = new zbj_model_cp_groupoption();
        $group_list = array();

	    $temp = $m_groups->select(array('group_id != 22'),'group_id, name, pid,group_type')->items;
		
	    lib_BaseUtils::apiInit();
	    $role_serviece = new com\zhubajie\boss\interfaces\RoleServiceClient(NULl);
	    lib_BaseUtils::apigetclient($role_serviece);
	    
	    $query_params = new \com\zhubajie\boss\dataobject\role\QueryParamsDO();
	    $role_list = $role_serviece->query($query_params)->data;
	    
	    $userClient=new userServiceClient(null);
	    lib_BaseUtils::apigetclient($userClient);
	    
	    $teamClient=new com\zhubajie\boss\interfaces\teamServiceClient(null);
	    lib_BaseUtils::apigetclient($teamClient);
	    $teamList=$teamClient->getMiniList();
	    $teamListArray=array();
	    if ($teamList->success) {
	    	if ($teamList->items) {
	    		foreach ($teamList->items as $v){
	    			$teamListArray[$v->team_name]=$v->team_id;
	    		}
	    	}
	    }
	    if (is_array($temp)) {
	        foreach ($temp as $each_group) {
	            $m_user = new zbj_model_cp_user();
	            $temp_members = $m_user->select(array('group_id' => $each_group['group_id'], 'isleave != 1', 'user_id != 1028'), 'user_id, role, name, nickname, worknum, mobi, email, wechat, options, sex, qq, job_grade, motto')->items;
	            $members = array();
	            $member_list = array();
	            if (is_array($temp_members)) {
                    foreach ($temp_members as $each_member) {
                    	$each_member[group_ids] = array();
                    	$each_member[group_path] = array();
                    	$each_member[group_ids][] = $each_group['group_id'];
                    	$each_member[group_path][] = $each_group['name'];
                    	
                    	$each_member['department']='';
                    	$each_member['group_id'] = 0;
                    	if ($each_group['group_type']==GroupType::DEPARTMENT) {
                    		$each_member['department']=$each_group['name'];
                    		$each_member['group_id'] = (int)$each_group['group_id'];
                    	}else{
                    		$groupInfo=array();
                    		$depa_id=$userClient->getGroupID($each_member['user_id'], GroupType::DEPARTMENT);
                    		if ($depa_id) {
  	                  			$groupInfo=$m_groups->selectOne(array('group_id'=>$depa_id));
  	                  			$each_member['department']=$groupInfo['name'];
  	                  			$each_member['group_id'] = (int)$depa_id;
                    		}
                    	}
                    	$each_member['team_id'] = (int)$teamListArray[trim($each_member['department'])];

                    	$pinyin = new zbj_lib_GetPin();
                    	$each_member['namePinYin'] = $pinyin->getAllPY($each_member['name']);
                    	$each_member['namePinYinSlim'] = $pinyin->getFirstPY($each_member['name']);
                    	$arr = array();
                    	$arr = unserialize($each_member['options']);
                    	if (empty($arr['files'][0]['file'])) {
                    	    $each_member['userface']=lib_Constant::BOSS_URL.'/assets/img/avatar_default.gif';
                    	}else{
                    	    $each_member['userface']=lib_Constant::USER_FACE_URL.$arr['files'][0]['file'];
                    	}
                    	if (isset($arr['entry_ymd']) && $arr['entry_ymd']) {
                    		$entry_year = date('Y', strtotime($arr['entry_ymd']));
                    		$entry_mouth = date('m-d', strtotime($arr['entry_ymd']));
                    		$now_year = date('Y');
                    		$now_mouth = date('m-d');
                    		if ((($now_year - $entry_year) > 0)) {
                    			$each_member['pig_level'] = ($now_mouth > $entry_mouth)? ($now_year - $entry_year): ($now_year - $entry_year - 1);
                    		} else {
                    			$each_member['pig_level'] = 0;
                    		}
                    		
                    		$each_member['entry_ymd'] = $arr['entry_ymd'];
                    	} else {
                    		$each_member['pig_level'] = 0;
                    	}
                    	if ($arr['political_landscape']) {
                    		$each_member['political_landscape'] = $arr['political_landscape'];
                    	}else{
                    		$each_member['political_landscape'] = '';
                    	}
                    	$each_member['age'] = $arr['age'];
                    	if ($arr['political_id']) {
                    		$each_member['political_id'] = $arr['political_id'];
                    	}else{
                    		$each_member['political_id'] = '';
                    	}
                    	
                    	if ($arr['level']) {
                    		$each_member['level'] = $arr['level'];
                    	}else{
                    		$each_member['level'] = '';
                    	}
                    	if ($arr['user_attribute']) {
                    		$each_member['user_attribute'] = $arr['user_attribute'];
                    	}else{
                    		$each_member['user_attribute'] = 0;
                    	}
                    	
                    	if ($arr['user_attr']) {
                    		$each_member['user_attr'] = $arr['user_attr'];
                    	}else{
                    		$each_member['user_attr'] = 0;
                    	}
                    	
                    	$each_member['user_level'] = $each_member['pig_level'];
                    	$each_member['pig_level'] = lib_BaseUtils::number2chinese($each_member['pig_level']);
                    	$each_member['qq'] = $each_member['qq']? (int)$each_member['qq']: 0;
                    	$each_member['role'] = ($each_member['role'] && isset($role_list[$each_member['role']]))? $role_list[$each_member['role']]->role_name: '';
                    	$m_badge = new model_cp_badge();
                    	$list = $m_badge->select(array('user_id' => $each_member['user_id']),'goods_id,badge_name,badge_url')->items;
                    	$each_member['badge_list'] = $list;
                    	unset($each_member['options']);

                        $members[$each_member['user_id']] = $each_member;
                    }
	            }
	            $each_group['members'] = json_encode($members);
	            $each_group['child'] = array();

	            $group_list[$each_group['group_id']] = $each_group;
	        }
	    }
	    unset($temp);

	    for (; count($group_list) > 0; ) {
	        $array_pid = array();
	        if (is_array($group_list)) {
	            foreach ($group_list as $each_group) {
	                if ($each_group['pid']) {
	                    $array_pid[] = $each_group['pid'];
	                }
	            }
	            foreach ($group_list as $each_group) {
	                if (! in_array($each_group['group_id'], $array_pid)) {
                        $members = array();

                        $members = json_decode($each_group['members'], true);
                        foreach ($each_group['child'] as $each_children) {
//                         	if (22 == $each_children['group_id']) {//离职组不加入父级
//                         		continue;
//                         	}
                        	
                        	$children_members = json_decode($each_children['members'], true);
                        	foreach ($children_members as $key => $value) {
                        		array_unshift($value['group_ids'], $each_group['group_id']);
                        		array_unshift($value['group_path'], $each_group['name']);
                        		$members[$key] = $value;
                        	}
                        }
                        unset($each_group['child']);

                        $group_list[$each_group['group_id']]['members'] = $each_group['members'] = json_encode($members);
                        if (isset($group_list[$each_group['pid']])) {
                        	$group_list[$each_group['pid']]['child'][$each_group['group_id']] = $each_group;
                        }

                        $data = array(
                            'group_id' => $each_group['group_id'],
                            'member' => json_encode($members),
                        	'number' => count($members),
                        );

                        $m_groupoption->insert($data, true);

	                    unset($group_list[$each_group['group_id']]);
	                }
	            }
	        }
	    }

	    var_dump($group_list);
	}

	/**
	 * 去除无效公告置顶
	 */
	public function pageRemoveTopicTop() {
		zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);//具体APPID、SECRET参见具体项目
		$topic_service = new com\zhubajie\boss\interfaces\TopicServiceClient(null);
		zbj_lib_ApiClient::build($topic_service);

		$query_params = new QueryParamsDO();
		$query_params->max_end_time = time();
		$query_params->is_top = 1;

		$boss_topic_list = $topic_service->query($query_params);
		if ($boss_topic_list->success && is_array($boss_topic_list->data)) {
			foreach ($boss_topic_list->data as $each_item) {
				$topic_service->untop($each_item->topic_id);
			}
		}
	}

	/*
	/*
	 *更新cp_user中字段department
	 */
	public function pageUpdateDepartment($inPath) {
	    $limit = 200;
	    $page = $_REQUEST ['page'] ? intval ( $_REQUEST ['page'] ) : 1;
	    $m_user = new zbj_model_cp_user();
	    $m_user->setLimit($limit);
	    $m_user->setPage($page);
	    $list = $m_user->select(array('group_id !=0'),'user_id')->items;
	    foreach ($list as $key => $value) {
	        $user_id = $value['user_id'];
	        try {
	            lib_BaseUtils::apiInit();
	            $client = new com\zhubajie\boss\interfaces\userServiceClient(null);
	            lib_BaseUtils::apigetclient($client);
	            $department_id = $client->getGroupID($user_id, GroupType::DEPARTMENT);
	        } catch (Exception $e) {
	            return $this->printmsg($e->getMessage()."查询不到你所在的部门！");
	        }
	        $item = array(
	            'department' => $department_id,
	        );
	        $result = $m_user->update('user_id = '.$user_id,$item);
	    }
	}
	
	/**
	 * 退还雇主平台服务费
	 */
	public function pageRefundPlatFee() {
		$m_refund_log = new model_cp_refundplatfeelog();
		
		$condition = array('is_refund' => 0);
		$each_item = $m_refund_log->selectOne($condition);
		if ($each_item) {
			lib_BaseUtils::apiInit();
			$order_operate_service = new com\zhubajie\order\interfaces\OrderOperateServiceClient(null);
			lib_BaseUtils::apigetclient($order_operate_service);
			
			$s_task = new zbj_service_task($each_item['task_id']);
			$s_task = $s_task->init();
			
			$requrie_params = new com\zhubajie\order\dataobject\orderoperate\CreateRequireParamDO();
			$requrie_params->c_task_id = $each_item['task_id'];
			$requrie_params->user_id = $s_task->get('user_id');
			$requrie_params->operatetype = OperateType::PLATFORMFEE;
			$requrie_params->amount = $each_item['amount'];
			$requrie_params->sourcetype = $each_item['refund_mode'];
			
			$response = $order_operate_service->serviceAuthorize($requrie_params);
			if ($response->success) {
				$m_refund_log->update(array('log_id' => $each_item['log_id']), array('is_refund' => 1));
			} else {
				echo $response->message;
			}
		}
	}

	
	/**
	 * 认证信息同步异极付
	 */
	public function pageConfidenceCertify() {
		try {
			zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
			$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
			zbj_lib_ApiClient::build($auth_service);
			
			$q_notice = new SQueue('user_auth_notice' );
			$notic_info = unserialize($q_notice->get());
			if (! $notic_info->check_id) {
				return;
			}
			
			$query_params = new com\zhubajie\user\dataobject\auth\QueryParamsDO();
			$query_params->check_id = $notic_info->check_id;
			$auth_info = $auth_service->query($query_params);
			if ($auth_info->success) {
				switch ($auth_info->data[$notic_info->check_id]['auth_type']) {
					case 1:
						$result = $auth_service->confidenceCertifyPersonal($notic_info->check_id);
						break;
					case 2:
						$result = $auth_service->confidenceAbroadPersonal($notic_info->check_id);
						break;
					case 4:
						$result = $auth_service->confidenceCertifyCorporate($notic_info->check_id);
						break;
					case 5:
						$result = $auth_service->confidenceAbroadCorporate($notic_info->check_id);
						break;
					default:
						break;
				}
			}
			
			if (! $result->success) {
				$data = array(
					'check_id' => $notic_info->check_id,
					'type' => 1,
					'message' => $result->message,
				);
				$response = $auth_service->updateExceptionLog($data);
				if (! $response->success) {
					$auth_service->notice($notic_info);
				}
			}
		} catch (Exception $e) {
		}
	}
	
	/*
	 * 更新奖品列表
	 * 
	 * */
	public function pageUpdatePrizeList() {
	    $prize_id = zbj_lib_BaseUtils::getStr($_GET['prize_id']);
	    $prize_name = zbj_lib_BaseUtils::getStr($_GET['name']);
	    $url = zbj_lib_BaseUtils::getStr($_GET['url']);
	    $rate = zbj_lib_BaseUtils::getStr($_GET['rate']);
	    $is_prize = zbj_lib_BaseUtils::getStr($_GET['is_prize']);
	    $limit_num = zbj_lib_BaseUtils::getStr($_GET['limit_num']);
	    $validity_date = zbj_lib_BaseUtils::getStr($_GET['validity_date']);
	    
	    $data = array();
	    if ($prize_name) {
	        $data['prize_name'] = $prize_name;
	    }
	    if ($url) {
	        $data['prize_pic'] = $url;
	    }
	    if ($rate) {
	        $data['prize_rate'] = $rate;
	    }
	    if ($is_prize) {
	        $data['is_prize'] = $is_prize;
	    }
	    if ($limit_num) {
	    	$data['limit_num'] = $limit_num;
	    } else {
	    	$data['limit_num'] = 0;
	    }
	    if ($validity_date) {
	    	$data['validity_date'] = $validity_date;
	    } else {
	    	$data['validity_date'] = date('Y-m-d');
	    }
	    
	    if ($data && $prize_id) {
	        $m_prize = new model_cp_competitionprize();
	        $result = $m_prize->update(array('prize_id' => $prize_id), $data);
	    }
	}
	
/**
 * 手动加入队列操作
 */
public function pageAddCertifyQueue() {
	set_time_limit (0);
	$check_id=zbj_lib_BaseUtils::getStr($_GET['check_id'], 'int');
	try {
		zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
		$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
		zbj_lib_ApiClient::build($auth_service);
		$query_params = new com\zhubajie\user\dataobject\auth\NoticeDO();
		if (!empty($check_id)) {
			$query_params->check_id = $check_id;
			$result = $auth_service->notice($query_params);
			if (! $result->success) {
				throw new Exception('加入队列失败', 0);
			}
		}else{
			$logList = $auth_service->queryAuthException(0);
			if ($logList->success) {
			    if (!empty($logList->data)) {
				foreach ($logList->data as $v) {
					$query_params = new com\zhubajie\user\dataobject\auth\NoticeDO();
					$query_params->check_id = $v['check_id'];
					$result = $auth_service->notice($query_params);
					
					if (! $result->success) {
						throw new Exception('加入队列失败', 0);
					}
					$data = array(
					'log_id' => $v['log_id'],
					'is_deal' => 1,
					);
					$response = $auth_service->updateExceptionLog($data);
					sleep(1);
				}
			}
			}
		}
		die('处理完成');
	} catch (Exception $e) {
		return $this->printmsg( "系统出错：" . $e->getMessage(), 1);
	}
}

	/**
	 * 临时认证接口
	 */
	public function pageVerifyTemp() {
		try {
			zbj_lib_ApiClient::init(lib_Constant::API_BOSS_APPID, lib_Constant::API_BOSS_SECRET);
			$auth_service = new com\zhubajie\user\interfaces\AuthServiceClient(null);
			zbj_lib_ApiClient::build($auth_service);
			
			$check_id=zbj_lib_BaseUtils::getStr($_GET['check_id'], 'int');
			$notic_info->check_id=$check_id;
			
			$query_params = new com\zhubajie\user\dataobject\auth\QueryParamsDO();
			$query_params->check_id = $notic_info->check_id;
			$auth_info = $auth_service->query($query_params);
			if ($auth_info->success) {
				switch ($auth_info->data[$notic_info->check_id]['auth_type']) {
					case 1:
						$result = $auth_service->confidenceCertifyPersonal($notic_info->check_id);
						break;
					case 2:
						$result = $auth_service->confidenceAbroadPersonal($notic_info->check_id);
						break;
					case 4:
						$result = $auth_service->confidenceCertifyCorporate($notic_info->check_id);
						break;
					case 5:						
						$result =  $auth_service->confidenceAbroadCorporate($notic_info->check_id);
                        break;
					default:
						break;
				}
			}
			echo'<pre>';
			var_dump($result); 
			echo'</pre>';
		} catch (Exception $e) {
			return $this->printmsg( "系统出错：" . $e->getMessage(), 1);
		}
		return json_encode($result);
	}
	/**
	 * 认证信息同步异极付
	 */
	function pageConfidenceCertifyCli(){
		if (PHP_SAPI != 'cli') exit;
		while(true){
			$this->pageConfidenceCertify();
			sleep(2);
		}
	}
	/**
	 * 计算置顶时间距离当前时间多少年
	 */
	private function _getYear($date){
		list($by,$bm,$bd)=explode('-',$date);
		$cm=date('n');
		$cd=date('j');
		$age=date('Y')-$by-1;
		if ($cm>$bm || $cm==$bm && $cd>$bd) $age++;
		return $age;
	}
	/**
	 * 更新用户信息
	 * @author tanqing
	 * @date 2014-12-15
	 */
	public function pageUpdateUserInfo(){
		header("Content-type: text/html; charset=utf-8");
		$page=zbj_lib_BaseUtils::getStr($_GET['page'],'int');
		$limit=100;
		$page=$page?$page:1;
		$m_user=new zbj_model_cp_user();
		$m_user->setCount(true);
		$m_user->setPage($page);
		$m_user->setLimit($limit);
		$datas=$m_user->select(array('user_id>0'));
		$count=$datas->totalSize;
		echo "total:".$count;
		echo "<br/>";
		if (($page-1)*$limit>$count) {
			exit('执行完成');
		}
		lib_BaseUtils::apiInit ();
		$ArchivesClient = new ArchivesServiceClient ( null );
		lib_BaseUtils::apigetclient ( $ArchivesClient );
		/*
		
		$SerachInputDO = new com\zhubajie\boss\dataobject\archives\SerachInputDO();
		$SerachInputDO->page = $page;
		$SerachInputDO->limit = 100;
		$lists = $ArchivesClient->getList($SerachInputDO);
		
		if ($lists->success) {
			foreach ($lists->datas as $v){
				$v['truename'];
				if ($v['truename']) {
					$info = $m_user->selectOne(array('name'=>$v['truename']));
					$ArchivesDO = new com\zhubajie\boss\dataobject\archives\ArchivesDO();
					$ArchivesDO->archives_id = $v['archives_id'];
					$ArchivesDO->user_id = $info['user_id'];
					$ArchivesClient->addArchives($ArchivesDO);	
				}
			}
		}
		exit ( '<meta http-equiv="refresh" content="2;URL=?page=' . ($page + 1) . '" />' );
		exit;
		*/
		
		//岗位
		/*
		lib_BaseUtils::apiInit ();
		$roleClient=new com\zhubajie\boss\interfaces\RoleServiceClient(null);
		lib_BaseUtils::apigetclient ( $roleClient );
		$QueryParamsDO=new com\zhubajie\boss\dataobject\role\QueryParamsDO();
		$userRoleList=$roleClient->query($QueryParamsDO);
		$roleList=array();
		if ($userRoleList->success) {
			if ($userRoleList->data) {
				foreach ($userRoleList->data as $v){
					//$positions[$v->sequence_id][$v->role_name]=$v->role_id;
					$roles[$v->role_id]=$v->role_name;
				}
			}
		}
		*/
		
		lib_BaseUtils::apiInit();
		$hrClient = new com\zhubajie\boss\interfaces\hrServiceClient(null);
		lib_BaseUtils::apigetclient($hrClient);
		
		
		$cache = new zbj_lib_cache('memcache');
		$cache_name = 'boss2.hr.info.postlist';
		$postList = $cache->get($cache_name);
		if (!$postList) {
			$queryPostFormDO= new com\zhubajie\boss\dataobject\hr\queryPostFormDO();
			$queryPostFormDO->limit = 1000;
			$queryPostFormDO->page = 1;
			$postListResult = $hrClient->getPostList($queryPostFormDO);
			$postList = array();
			if ($postListResult->items) {
				foreach ($postListResult->items as $v){
					$postList[$v->post_id] = $v->name;
				}
			}
			$cache->set($cache_name, $postList,3600);
		}
		
		foreach ($datas->items as $user){
			$insert=$info=array();
			if ($user['user_id']) {
				//$info=$ArchivesClient->getExtInfoById(array('user_id'=>$user['user_id']));
				$hrInfo = $hrClient->getExtInfoById($user['user_id']);
				$insert = array();
				if ($hrInfo->datas['entry_ymd']) {
					$options=unserialize($user['options']);
					$options['entry_ymd'] = $hrInfo->datas['entry_ymd'];
					$options['political_landscape'] = $hrInfo->datas['political_id'];
					$options['political_id'] = $hrInfo->datas['political_id'];
					$options['level'] = $hrInfo->datas['level'];
					
					if ($user['birthday'] && $user['birthday']!='0000-00-00') {
						$options['age'] =$this->_getYear($user['birthday']);
					}else{
						$options['age'] = 0;
					}
					//$options['position_id'] = $hrInfo->datas['position_id'];//岗位id
					//$options['position_name'] = $roles[$hrInfo->datas['position_name']];//岗位名称
					
					$options['series_id'] = $hrInfo->datas['series_id'];
					$options['station_id'] = $hrInfo->datas['station_id'];
					$options['position_id'] = $hrInfo->datas['position_id'];
					
					$options['series_name'] = $postList[$hrInfo->datas['series_id']]?$postList[$hrInfo->datas['series_id']]:'';
					$options['station_name'] = $postList[$hrInfo->datas['station_id']]?$postList[$hrInfo->datas['station_id']]:'';
					$options['position_name'] = $postList[$hrInfo->datas['position_id']]?$postList[$hrInfo->datas['position_id']]:'';
					
					//$options['user_attribute'] = $info->datas['user_attribute'];
					$options['user_attribute'] = $info->datas['user_attr'];
					$options['user_attr'] = $info->datas['user_attr'];
					$insert['options']=serialize($options);
				}
				if ($insert) {
					$m_user->update(array('user_id'=>$user['user_id']),$insert);
					echo $user['user_id'].'--'.$user['truename'];
					echo "<br/>";
				}
				/*
				if ($info->datas) {
					if ($info->datas['entry_ymd']) {
						$options=unserialize($user['options']);
						$options['entry_ymd']=$info->datas['entry_ymd'];
						$options['political_landscape'] = $info->datas['political_landscape'];
						$options['level'] = $info->datas['level'];
						$options['position_id'] = $info->datas['position_name'];//岗位id
						$options['position_name'] = $roles[$info->datas['position_name']];//岗位名称
						$options['user_attribute'] = $info->datas['user_attribute'];
						$insert['options']=serialize($options);
					}
					if ($insert) {
						$m_user->update(array('user_id'=>$user['user_id']),$insert);
						echo $user['user_id'].'--'.$user['truename'];
						echo "<br/>";
					}
				}
				*/
			}
		}
		exit ( '<meta http-equiv="refresh" content="2;URL=?page=' . ($page + 1) . '" />' );
	}
	/**
	 * 添加花名入口
	 * @author tanqing
	 * @date 2014-12-15
	 */
	public function pageAddNickname(){
		//exit;
		header("Content-type: text/html; charset=utf-8");
		$nameid=zbj_lib_BaseUtils::getStr($_GET['nameid'],'int');
		$user_id=zbj_lib_BaseUtils::getStr($_GET['user_id'],'int');
		$name=zbj_lib_BaseUtils::getStr($_GET['name']);
		$addnames=zbj_lib_BaseUtils::getStr($_GET['addnames'],'int');
		$upnickname=zbj_lib_BaseUtils::getStr($_GET['upnickname'],'int');
		$addnickname=zbj_lib_BaseUtils::getStr($_GET['addnickname'],'int');
		$category=zbj_lib_BaseUtils::getStr($_GET['category'],'int');
		if ($addnickname) {
			lib_BaseUtils::apiInit();
			$userClient=new userServiceClient(null);
			lib_BaseUtils::apigetclient($userClient);
			$userNicknamesDO=new userNicknamesDO();
			$userNicknamesDO->id=(int)$nameid;
			$userNicknamesDO->name=trim($name);
			if (isset($_GET['user_id'])) {
				$userNicknamesDO->user_id=$user_id;
			}
			if (isset($_GET['category'])) {
				$userNicknamesDO->category=(int)$category;
			}
			$res=$userClient->addUserNicknames($userNicknamesDO);
			if ($res->sucess) {
				echo '花名库名称更新成功'.$res->message;
			}else{
				echo '花名库名称更新失败'.$res->message;
			}
			echo "<br/>";
		}
		if ($user_id && $upnickname) {
			$m_user = new zbj_model_cp_user();
			$res=$m_user->update(array('user_id'=>$user_id),array('nickname'=>trim($name)));
			if ($res) {
				echo '用户花名更改成功';
			}else{
				echo '用户花名更新失败';
			}
			echo "<br/>";
		}
		
		if ($addnames) {
			$names=array(
					'599'=>array(
							'烈烟石', '赤焰刀', '紫无忧', '寒冰玉钩', '米离', '火正尺', '赤岱宗', '风螺角', '黄风怪', '悟饭', '鬼谷子', '善财童子', '捧珠龙女', '芭蕉扇', '燃灯古佛', '黑山老妖', '小钻风', '灵感大仙', '嫘祖', '玉晨子', '花神', '骨精灵', '五云老祖', '逍遥奇侠', '汐之月', '黑水晶', '飞天舞', '肥头太郎', '拉拉秀 ', '冰火小刀', '侠客漂漂', '暗夜精灵', '鹤轩', '茹雪', '月婵', '雅芙', '玄光', '司寒羽', '苍泠', '垂雪 ', '北潇', '庆谨月', '碧烟 ', '钟离夜', '百里芷', '落尘', '安凌雪', '安月媚', '冷落洛', '南宫领风', '莫星辰', '林潆子', '柠檬夏', '文依静', '龙吉公主', '寒山拾得', '白霜序', '木荫荫', '寒雪樱', '魔魇', '铁拐李', '张果老', '女土蝠', '牛金牛', '箕水豹', '参水猿', '轸水蚓', '星日马', '娄金狗', '觜火猴', '胃土彘', '虚日鼠', '室火猪', '穷奇', '共工', '虚耗', '化蛇', '英招', '玄蜂', '呲铁', '山臊', '商羊', '讹兽', '民鸟', '钦原', '腓腓', '应声虫', '庆忌', '并封', '夫诸', '当康', '南海蝴蝶', '九婴', '飞诞鸟', '一角兽', '傲因', '人面鸮', '九耳犬', '天鹿', '丹雀'
						)
			);
			lib_BaseUtils::apiInit();
			$userClient=new userServiceClient(null);
			lib_BaseUtils::apigetclient($userClient);
			if ($names) {
				foreach ($names as $category=>$v){
					foreach ($v as $val){
						$userNicknamesDO=new userNicknamesDO();
						$userNicknamesDO->is_open=1;
						$userNicknamesDO->category=$category;
						$userNicknamesDO->name=trim($val);
						$res=$userClient->addUserNicknames($userNicknamesDO);
						if ($res->sucess) {
							echo $val.'--新增成功';
						}else{
							echo $val."--新增失败";
						}
						echo "<br/>";
					}
				}
			}
		}
		
	}
	
	
	public function pageAddFirstGroup () {
		$name = lib_BaseUtils::getStr($_GET['name']);
		if (!$name) {
			echo "请填写组名";exit;
		}
		$m_group = new zbj_model_cp_usergroups();
		$data['name'] = $name;
		$data['pid'] = 1;
		$data['block_id'] = 0;
		$data['group_type'] = 1;
		$data['manager'] = 0;
		if ($m_group->insert($data) === false) {
			echo "add error";
		}else{
			echo " add  sucess";
		}
	}
	
	/**
	 * 临时更改用户的微信号
	 */
	public function pageeditweixin(){
		header("Content-Type:text/html;charset=utf-8");
		$page = zbj_lib_BaseUtils::getStr($_GET['page'],'int');
		$limit = zbj_lib_BaseUtils::getStr($_GET['limit'],'int');
		$m_user=new zbj_model_cp_user();
		$page = $page?$page:1;
		$limit=$limit?$limit:100;
		$m_user->setPage($page);
		$m_user->setLimit($limit);
		$m_user->setCount(true);
		$users=$m_user->select('group_id!=22  and isleave=0 and name is not null' ,'user_id,name,email');
		echo "total:".$users->totalSize."<br/>";
		if ($users->totalSize <$page * $limit) {
			exit('全部更新完成');
		}
		if ($users->totalSize){
			if ($users->items) {
				foreach ($users->items as $v){
					if ($v['email']) {
						$email=$v['email'];
						$emailArray = explode('@', $v['email']);
						$res=$m_user->update(array('user_id'=>$v['user_id']),array('weixin_open_id'=>$emailArray[0]));
						if ($res!==false) {
							echo $v['name'].$v['user_id']."更新成功<br/>";
						}else{
							echo $v['name'].$v['user_id'].'<span style="color:red;">更新失败</span><br/>';
						}
					}
				}
			}
		}
		exit ( '<meta http-equiv="refresh" content="2;URL=?page=' . ($page + 1) . '" />' );
	}
	
	/*
	 * @积分数据更新到冗余字段
	 *
	 * */
	public function pageScoreOption() {
	    $limit = 100;
	    $page = isset($_GET['page']) ? intval($_GET['page']) : 1;
	    $m_pigcoin = new model_cp_pigcoin();
	    $m_pigcoin->setLimit($limit);
	    $m_pigcoin->setPage($page);
	    $m_pigcoin->setCount(true);
	    $temp = $m_pigcoin->select(array('total_score != 0'), '*')->items;
	    foreach ($temp as $key => $value) {
	        $options = array(
	            'total_score' => $value['total_score'],
	            'second_competition' => $value['total_score'],
	        );
	         
	        $result = $m_pigcoin->update(array('user_id' => $value['user_id']), array('option_data' => serialize($options), 'total_score' => 0));
	        if($result) {
	            echo $result.'成功！';
	        }else {
	            echo $result.'失败！';
	        }
	    }
	}
	
	public function pagePerformance2014() {
		$data = array(
					array('user_name'=>'刘超','score'=>3.25,'check_name'=>'郭军'),
				);
		//绩效评估时间
		$check_date = '2015-01-30';
		$check_time = strtotime('2015-01-30 14:00:00');
		$m_performance = new model_cp_performance();
		
		$insert_data = array();
		$m_user = new zbj_model_cp_user();
		foreach ($data as $v) {
			$temp = array();
			$user = $m_user->selectOne(array('name'=>$v['user_name']), 'user_id,group_id');
			$temp['user_id'] = $user['user_id'];
			$temp['group_id'] = $user['group_id'];
			$temp['year'] = 2014;
			$temp['season'] = 0;
			$temp['performance_score'] = $v['score'];
			$temp['state'] = 2;
			$check_user = $m_user->selectOne(array('name'=>$v['check_name']), 'user_id');
			$temp['check_user_id'] = $check_user['user_id'];
			$temp['check_date'] = $check_date;
			$temp['check_time'] = $check_time;
			$insert_data[] = $temp;
		}
		$m_performance->addUpdateMultiple($insert_data,array('performance_score'));
// 		print_r($insert_data);
	}
	/**
	 * nps电话采集列表插入数据
	 * 5分钟执行一次
	 * 用户首次提交托管并结束，且(没有服务记录或者有已处理的服务记录)
	 * mk_task.state=4 and mk_task.endymd=date() and mk_task_opis.hosted_numth and (mk_record.state=2,或者mk_record.record_id不存在)
	 */
	public function pageSurveyPhoneUser() {
		$m_phone_user = new model_mb_surveyphoneuser();
		$phone_user = $m_phone_user->selectOne(null, 'task_id', null, 'order by phone_user_id desc');
		$condition = array();
		if ($phone_user && $phone_user['task_id']) {
			$condition[] =  "mk_task.task_id> {$phone_user['task_id']}";
		}
		$condition['mk_task.endymd'] = date('Y-m-d');
// 		$condition[] = "mk_task.endymd >= '2014-12-01'";
		$condition['mk_task.state'] = 4;
		$condition['mk_task_opis.hosted_numth'] = 1;
		
		$leftjoin = array(
				'mk_task_opis' => 'mk_task_opis.task_id = mk_task.task_id'
				);
		$m_task = new zbj_model_mk_task();
		$m_task->setLimit(100);
		$items = 'mk_task.task_id, mk_task.category_id, mk_task.user_id';
		$task = $m_task->select($condition, $items, null, 'order by mk_task.task_id', $leftjoin,array('dbinfo' => 'co_market'))->items;
		if (empty($task)) {
			echo "没有要采集的数据";
			return false;
		}
		$create_time = time();
		$create_ymd = date('Y-m-d');
		$data = array();
		
		$record_items = 'state';
		$record_leftjoin = array(
				'mk_record' => 'mk_record_task.record_id = mk_record.record_id'
				);
		$m_record_task = new zbj_model_mk_recordtask();
		foreach ($task as $v) {
			$is_add = false;
			$record_task = $m_record_task->select(array('task_id'=>$v['task_id']), $record_items, null, null, $record_leftjoin,array('dbinfo' => 'co_market'))->items;
			if (empty($record_task)) {
				$is_add = true;
			}else{
				$finish_num = 0;
				foreach ($record_task as $rec) {
					if ($rec['state'] == 2) {
						$finish_num += 1;
					}
				}
				if ($finish_num == count($record_task)) {
					$is_add = true;
				}
			}
			if ($is_add) {
				$temp = array();
				$temp['user_id'] = $v['user_id'];
				$temp['task_id'] = $v['task_id'];
				$temp['category_id'] = $v['category_id'];
				$temp['create_time'] = $create_time;
				$temp['create_ymd'] = $create_ymd;
				$data[] = $temp;
			}
		}
		
		if ($m_phone_user->addMultiple($data)) {
			echo "执行成功";
		}else{
			echo "执行失败";
		}
		
	}

    /**
     * 删除chance_queen数据 @author litao
     */
    public function pageDelChanceQueen() {
        $chance_id = (int)$_GET['id'];
        if ($chance_id) {
            $condition['chance_id'] = $chance_id;
            $mdl_chancequeen = new model_mk_chancequeen();
            if ($mdl_chancequeen->delete($condition) === false) {
                return $this->printmsg('删除失败',-2);
            }
            return $this->printmsg('删除成功',-2);
        } else {
            $ymd = zbj_lib_BaseUtils::getStr($_GET['ymd']);
            $ymd = $ymd ? $ymd : date("Y-m-d", $this->_time);
            $mdl_chance = new zbj_model_mk_chance();
            $mdl_chancequeen = new model_mk_chancequeen();

            $chance_table = $mdl_chance->tableName();
            $queen_table = $mdl_chancequeen->tableName();

            $leftjoin = array($queen_table => $chance_table.".chance_id=".$queen_table.".chance_id");
            $condition = array(
                $queen_table.".manager_id > 0",
                $chance_table.".manager_id = 0",
                $chance_table.".create_ymd = '".$ymd."'"
            );
            $items = $chance_table.".chance_id,".$chance_table.".manager_id";
            $orderby = "order by ".$chance_table.".chance_id DESC";
            $chances = $mdl_chance->select($condition, $items, "", $orderby, $leftjoin)->items;
            $log = "抢单数据检查开始：<br />";
            if ( $chances ) {
                foreach ( $chances as $k => $v ) {
                    $cond['chance_id'] = $v['chance_id'];
                    if ($mdl_chancequeen->delete($cond) === false) {
                        $log .= "机会ID：".$v['chance_id']."删除失败；<br />";
                    } else {
                        $log .= "机会ID：".$v['chance_id']."删除成功；<br />";
                    }
                }
            } else {
                $log .= "无数据可执行<br />";
            }
            $log .= "执行完毕";
            exit($log);
        }
    }
    /**
     * 销售机会分配
     * @param unknown $inPath
     */
    public function pageallotsellerchance($inPath){
        header ( 'Content-Type:text/plain;charset=utf-8' );
        if(date('H:i:s') > '23:00:00'){
            return '不在分配时间内';
        }
        if(date('H:i:s') < '09:00:00'){
            return '不在分配时间内';
        }
        $model=zbj_model_api::get('model_mb_chance');
        $condition=array();
        $condition['saler_id']=0;
        $model->setLimit(30);
        $data=$model->select($condition);
        if(!empty($data) && count($data->items)>=0){
            foreach ($data->items as $d){
                echo "开始分配".$d['chance_id'],"分配到队列";
                if ($d['user_id']) {
                    $s_user = new zbj_service_user($d['user_id']);
                    $ip = $s_user->get('regip');
                    $config_id = service_user::userip2allot($ip);
                } else {
                    $config_id=6;
                }
                if($config_id){
                    $s_allot=new zbj_service_allot($config_id);
                    $next_user_id = $s_allot->getnextuser(1, 1);
                }
                if (!$next_user_id) {
                    echo "没有要分配的客服";
                    continue;
                }
                echo "取得的用户后台ID为".$next_user_id.PHP_EOL;
                $s_manager=new zbj_service_manager($next_user_id);
                $update=array();
                $update['saler_id']=$s_manager->get('user_id');
                $update['saler_name']=$s_manager->get('name');
                lib_BaseUtils::apiInit(5,array('membership_sdk'));
                $s_change=new com\zhubajie\membership\interfaces\ChanceServiceClient(null);
                lib_BaseUtils::apigetclient($s_change);
                $result = $s_change->allotSaler($d['chance_id'], $next_user_id, 0);
                if(!$result->success){
                    continue;
                }
                if($d['user_id']){
                    $s_allot->createlog($d['user_id'],$next_user_id,1);
                }else{
                    $s_allot->createlog($d['chance_id'],$next_user_id,1);
                }
            }
        }
    }

    /**
     * 会员销售第七期 2015/11/10 joey
     * 将新入驻的服务商分直接进入公海，5分钟执行一次
     * @return boolean
     */
    public function pageAllotNewService() {
        $condition = array();//封装获取断约用户的条件
        $limit = intval($_REQUEST['limit']);
        if($limit<=0){
            $limit=20;
        }
        $page = 1;
        $m_break_log = new model_mb_sellerlimitsV2breakfollowlog();
        $break_log = $m_break_log->selectOne(array('type'=>4), 'details_id', null, 'order by log_id desc');
        if ($break_log && $break_log['details_id']) {
            $condition[] = "`uc_id` > {$break_log['details_id']}";
        }
        $date = date('Y-m-d');
        $condition[] = "((`type_end_ymd` <= '{$date}' and `type_end_time` < {$this->_time} and `membership_type` not in (1,2,3,4)) or membership_type is null or type_end_time is null or type_end_ymd is null)";
        $condition[] ="`join_ymd`>='2015-06-11'";
        $m_user_category = new model_mb_usercategory();
        $leftjoin = array(
            'mb_sellerlimitsV2_user' => 'mb_sellerlimitsV2_user.user_id = mb_user_category.user_id'
        );
        $m_user_category->setPage($page);
        $m_user_category->setLimit($limit);

        $user_category = $m_user_category->select($condition, 'mb_user_category.user_id,uc_id', 'group by mb_user_category.user_id', 'order by uc_id', $leftjoin, array('dbinfo' => 'co_member'))->items;

        if (!$user_category) {
            return "没有新入驻的服务商";
        }
        print_r($user_category);

        lib_BaseUtils::apiInit(10, array('membership_sdk'));
        $s_user_client = new com\zhubajie\membership\interfaces\UserServiceClient(null);
        $s_follow_client = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
        lib_BaseUtils::apigetclient($s_user_client);
        lib_BaseUtils::apigetclient($s_follow_client);

        $m_sellfollow = new model_mb_sellFollow();
        foreach ($user_category as $detail) {
            // 检测mb_sell_follow表中是否该用户的记录，没有就创建一条
            $sellfollow = $m_sellfollow->selectOne(array('user_id'=>$detail['user_id']),'count(1) as num,is_sea,seller_id');
            if (!$sellfollow['num']) {
                if ($m_sellfollow->insert(array('user_id'=>$detail['user_id'],'is_sea'=>2)) === false) {
                    return "插入跟进记录失败";
                }

                // 调用follow跟进接口，通知搜索引擎更新数据
                $params = array();
                $params['user_id'] = $detail['user_id'];
                $params['source'] = 4;
                $params['is_sea'] = 1;
                $params['enter_sea_reason'] = 4;
                $params['remark'] = '会员销售第七期,服务商自动进入公海';
                $params['expire_time'] = $this->_time+24*3600*30; // 30天后超期
                $follow_result = $s_follow_client->follow($params);
                print_r($follow_result);

                // 调用跟进日志，标识该用户已在跟进表中
                $break_log_data = array();
                $break_log_data['details_id'] = $detail['uc_id'];
                $break_log_data['user_id'] = $detail['user_id'];
                $break_log_data['type'] = 4; // 新入驻
                $break_log_data['create_ymd'] = $this->_ymd;
                $m_break_log->insert($break_log_data);
                echo "{$detail['user_id']}已自动进入公海";
            }
        }
        echo "操作完成";
    }

    /**
     * 将新入驻的服务商分配给售前销售顾问，5分钟执行一次
     * @return boolean
     */
    public function pageAllotNewService_bak() {
        $condition = array();//封装获取断约用户的条件
        $limit = intval($_REQUEST['limit']);
        if($limit<=0){
            $limit=20;
        }
        $page = 1;
        $m_break_log = new model_mb_sellerlimitsV2breakfollowlog();
        $break_log = $m_break_log->selectOne(array('type'=>4), 'details_id', null, 'order by log_id desc');
        if ($break_log && $break_log['details_id']) {
            $condition[] = "`uc_id` > {$break_log['details_id']}";
        }
        $date = date('Y-m-d');
        $condition[] = "((`type_end_ymd` <= '{$date}' and `type_end_time` < {$this->_time} and `membership_type` not in (1,2,3,4)) or membership_type is null or type_end_time is null or type_end_ymd is null)";
        $condition[] ="`join_ymd`>='2015-06-11'";
        $m_user_category = new model_mb_usercategory();
        $leftjoin = array(
          'mb_sellerlimitsV2_user' => 'mb_sellerlimitsV2_user.user_id = mb_user_category.user_id'  
        );
        $m_user_category->setPage($page);
        $m_user_category->setLimit($limit);
//         define(DEBUG, $value);
        $user_category = $m_user_category->select($condition, 'mb_user_category.user_id,uc_id', 'group by mb_user_category.user_id', 'order by uc_id', $leftjoin, array('dbinfo' => 'co_member'))->items;
        
        if (!$user_category) {
            return "没有新入驻的服务商";
        }
        print_r($user_category);
//         exit;
        lib_BaseUtils::apiInit(10, array('membership_sdk'));
        $s_user_client = new com\zhubajie\membership\interfaces\UserServiceClient(null);
        $s_follow_client = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
        lib_BaseUtils::apigetclient($s_user_client);
        lib_BaseUtils::apigetclient($s_follow_client);
//         $s_allot = new zbj_service_allot(6);
        $m_sellfollow = new model_mb_sellFollow();
        foreach ($user_category as $detail) {
            $s_user=new zbj_service_user($detail['user_id']);
            $ip=$s_user->get('regip');
            $config_id=service_user::userip2allot($ip);
            echo "开始分配".$detail['user_id'],"分配到队列".$config_id;
            if($config_id){
                $s_allot=new zbj_service_allot($config_id);
                $next_user_id = $s_allot->getnextuser(0, 0);
            }
            if (!$next_user_id) {
                return "没有要分配的客服";
            }
            echo "取得的用户后台ID为".$next_user_id.PHP_EOL;
            //检测mb_sell_follow表中是否该用户的记录，没有就创建一条
            $sellfollow = $m_sellfollow->selectOne(array('user_id'=>$detail['user_id']),'count(1) as num,is_sea,seller_id');
            $is_sea = 0;
            $seller_id = 0;
//             $s_user=new zbj_service_user($detail['user_id']);
//             $s_user->get('regIp');
//             print_r($sellfollow);
            if (!$sellfollow['num']) {
                if ($m_sellfollow->insert(array('user_id'=>$detail['user_id'])) === false) {
                    return "插入跟进记录失败";
                }
            }else{
                //跟进记录存在，并且不在公海时
                $is_sea = $sellfollow['is_sea'];
                $seller_id = $sellfollow['seller_id'];
            }
            
            if ($is_sea != 2 && !$seller_id) {
                // 检查是否已达分配上限  会员销售第七期 2015/10/30
                $service_sell_follow = new service_sellFollow();
                $res = $service_sell_follow->checkAllotLimit($next_user_id);
                if (!$res) {
                    return "id为{$next_user_id}的销售,已达分配上限,此次分配终止";
                }
                //调用设置销售顾问接口
                $lock_result = $s_user_client->updateFollowSeller($detail['user_id'], $next_user_id);
                if (!$lock_result->success) {
                    return "锁定销售顾问接口失败:".$lock_result->message;
                }
                $m_cp_user = new zbj_model_cp_user();
                $next_user = $m_cp_user->selectOne(array('user_id'=>$next_user_id), 'name');
                $this->addLog ( $detail ['user_id'], "系统已将新入驻服务商 {$detail['user_id']} （服务商ID）分配给售前销售顾问{$next_user['name']}", 'user' );
                //设置成功后，往break_follow_log中插入数据
                $break_log_data = array();
                $break_log_data['details_id'] = $detail['uc_id'];
                $break_log_data['user_id'] = $detail['user_id'];
                $break_log_data['type'] = 4;
                $break_log_data['create_ymd'] = $this->_ymd;
                $m_break_log->insert($break_log_data);
                
                //调用follow跟进接口
                $params = array();
                $params['user_id'] = $detail['user_id'];
                $params['source'] = 4;
                $params['expire_time'] = $this->_time+24*3600;
                $follow_result = $s_follow_client->follow($params);
                print_r($follow_result);
                //调用allot createlog方法
                $s_allot->createlog($detail['user_id'], $next_user_id);
            }else{
                //不满足条件的也往break_follow_log中插入数据
                $break_log_data = array();
                $break_log_data['details_id'] = $detail['uc_id'];
                $break_log_data['user_id'] = $detail['user_id'];
                $break_log_data['type'] = 4;
                $break_log_data['create_ymd'] = $this->_ymd;
                $m_break_log->insert($break_log_data);
                echo "{$detail['user_id']}不符合条件，不进行分配";
            }
        }
        echo "操作完成";
    }
    
    /**
     * 断约7天后将原来的售前、售后解锁，重新分配,5分钟执行一次
     */
    public function pageUnlockBreakByday() {
        header ( 'Content-Type:text/plain;charset=utf-8' );
        $before_date = date('Y-m-d', strtotime('-7 day'));
        $before_time = $this->_time-7*24*3600;
        
        $condition = array();
        $m_break_log = new model_mb_sellerlimitsV2breakfollowlog();
        $break_log = $m_break_log->selectOne(array('type'=>1), 'details_id', null, 'order by log_id desc');
        if ($break_log && $break_log['details_id']) {
            $condition[] = "`details_id` > {$break_log['details_id']}";
        }
        $condition[] = "`valid_end_ymd` <='{$before_date}'";
        $condition[] = "`valid_end_time` < {$before_time}";
        $m_pac_detail = new model_mb_sellerlimitsV2pacdetails();
        $m_pac_detail->setLimit(5);
        $m_pac_detail->setPage(1);
        $pac_detail = $m_pac_detail->select($condition, 'details_id,user_id', 'group by user_id', 'order by details_id', null, array('dbinfo' => 'co_member'))->items;
//         print_r($pac_detail);
//         exit;
        if (!$pac_detail) {
            return "没有断约7天的服务商";
        }
        lib_BaseUtils::apiInit(10, array('membership_sdk'));
        $s_user_client = new com\zhubajie\membership\interfaces\UserServiceClient(null);
        $s_follow_client = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
        lib_BaseUtils::apigetclient($s_user_client);
        lib_BaseUtils::apigetclient($s_follow_client);
        
        foreach ($pac_detail as $detail) {
            //解锁服务顾问
            $s_user_client->updateFollowManager($detail['user_id'], 0);
            //解锁销售顾问
            $s_user_client->updateFollowSeller($detail['user_id'], 0);
            
            $this->addLog ( $detail ['user_id'], "签约服务商 {$detail['user_id']} （服务商ID） 断约7天后系统已将售前顾问及服务顾问自动解锁", 'user' );
            //调用解锁跟进
            $params = array();
            $params['user_id'] = $detail['user_id'];
            $params['is_sea'] = 1;
            $params['enter_sea_reason'] = 4;
            $follow_result = $s_follow_client->follow($params);
            
            //清理阀值
            $s_allot = new zbj_service_allot(6);
            $s_allot->processed($detail['user_id']);
            $s_allot = new zbj_service_allot(97);
            $s_allot->processed($detail['user_id']);
            //调用设置销售顾问接口
            
            $s_user=new zbj_service_user($detail['user_id']);
            $ip=$s_user->get('regip');
            $config_id=service_user::userip2allot($ip);
            echo "开始分配".$detail['user_id'],"分配到队列".$config_id;
            if($config_id){
                $s_allot=new zbj_service_allot($config_id);
                $next_user_id = $s_allot->getnextuser(1, 1,1);
            }
            if (!$next_user_id) {
                return "没有要分配的客服";
            }
            echo "取得的用户后台ID为".$next_user_id.PHP_EOL;
            $lock_result = $s_user_client->updateFollowSeller($detail['user_id'], $next_user_id);
            if (!$lock_result->success) {
                return "锁定销售顾问接口失败";
            }
            //设置成功后，往break_follow_log中插入数据
            $break_log_data = array();
            $break_log_data['details_id'] = $detail['details_id'];
            $break_log_data['user_id'] = $detail['user_id'];
            $break_log_data['create_ymd'] = $this->_ymd;
            $m_break_log->insert($break_log_data);
            
            //调用follow跟进接口
            $params = array();
            $params['user_id'] = $detail['user_id'];
            $params['source'] = 4;
            $params['expire_time'] = $this->_time+24*3600;
            $follow_result = $s_follow_client->follow($params);
            //调用allot createlog方法
            $s_allot->createlog($detail['user_id'], $next_user_id,1);
            $m_cp_user = new zbj_model_cp_user();
            $next_user = $m_cp_user->selectOne(array('user_id'=>$next_user_id), 'name');
            $this->addLog ( $detail ['user_id'], "系统已将断约7天的签约服务商自动分配d售前顾问{$next_user['name']}", 'user' );
            print_r($follow_result);
        }
        echo "执行成功";
    }

    /**
     * 猪标局首地区判断缓存 @author litao
     * cacheName www.zhubiaoju.com.main.index.get.region
     */
    public function pageCreateCache($inPath) {
        if ( (int)$_GET['uid'] != 2284) {
            exit("您木有权限，请联系李淘");
        }
        $url = $this->getUrlParams($inPath);
        $d = (int)$url['d'];
        $regionCacheName = zbj_lib_BaseUtils::getStr($_GET['name']);
        $cache = new zbj_lib_cache('memcache');
        $cache->set($regionCacheName, 1, 10*86400);
        if ( $d ) {
            $cache->del($regionCacheName);
        }
        exit( "执行成功" );
    }
    /**
     * 服务商销售锁定
     * @param unknown $inPath
     */
    public function pagelockuserforsaler($inPath){
        define('CURL_NUM', 10);
        $batch = $_REQUEST['batch'];
        $currentpage=intval($_GET['page'])?intval($_GET['page']):1;
//         $class = 'controller_crontab_seller'.$batch;
//         $seller = new $class;
//         $data = $seller->data();
        $data = array(
array('user_id'=>33650,'manager_id'=>5007),
        );
        $datas=array_slice($data, ($currentpage-1)*CURL_NUM,CURL_NUM);
		if(empty($datas)){
			echo "运行完成";exit;
		}else{
			print_r($datas);
		}
		lib_BaseUtils::apiInit(5,array('membership_sdk'));
        $s_user=new com\zhubajie\membership\interfaces\UserServiceClient(null);
        lib_BaseUtils::apigetclient($s_user);
//         $followuser=$s_user->getfollowuser( $urlparams ['uid']);
        $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
        lib_BaseUtils::apigetclient($follow_service);
        foreach($datas as $data){
            $result=$s_user->updateFollowSeller((int)$data['user_id'], (int)$data['manager_id']);
            $params = array(
                'user_id' => (int)$data ['user_id'], //项目内调用时可不传
                'source' => 3, //0系统分配；1机会分配；2自主认领；3主管锁定；
                'expire_time' =>  1454255999, //下次跟进时间戳，根据具体业务选择是否传递
                'remark'=>'批量人工锁定'
            );
            $follow_service->follow($params);
            $this->addLog($data['user_id'], "系统已将服务商 {$data['user_id']} （服务商ID）通过批量人工锁定给售前销售顾问{$data['manager_id']}", 'user');
        }
		
		
		$uppage=$currentpage-1;
        $downpage=$currentpage+1;
		 echo <<<EOT
<a href="/crontab/lockuserforsaler?page=$downpage&batch=$batch">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/lockuserforsaler?page=$downpage&batch=$batch';
	},3000);
</script>
EOT;
    }
    /**
     * 服务商销售锁定
     * @param unknown $inPath
     */
    public function pagelockuserformanager($inPath){
        define('CURL_NUM', 5);
        $currentpage=intval($_GET['page'])?intval($_GET['page']):1;
        $data=array(
            array('user_id'=>18,'manager_id'=>204)
        );
        $datas=array_slice($data, ($currentpage-1)*CURL_NUM,CURL_NUM);
        if(empty($datas)){
            echo "运行完成";exit;
        }else{
            print_r($datas);
        }
        lib_BaseUtils::apiInit(5,array('membership_sdk'));
        $s_user=new com\zhubajie\membership\interfaces\UserServiceClient(null);
        lib_BaseUtils::apigetclient($s_user);
        $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
        lib_BaseUtils::apigetclient($follow_service);
        foreach($datas as $data){
            echo (int)$data ['user_id'], (int)$data ['manager_id'];
            $result=$s_user->updateFollowManager((int)$data ['user_id'], (int)$data ['manager_id']);
            $params = array(
                'user_id' => (int)$data ['user_id'], //项目内调用时可不传
                'source' => 0, //0系统分配；1机会分配；2自主认领；3主管锁定；
                'expire_time' => time()+86400, //下次跟进时间戳，根据具体业务选择是否传递
            );
            $follow_service->follow($params);
        }
        $uppage=$currentpage-1;
        $downpage=$currentpage+1;
        echo <<<EOT
<a href="/crontab/lockuserformanager?page=$downpage">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/lockuserformanager?page=$downpage'
	},3000);
</script>
EOT;
    }		 
    /**
     * 服务商销售锁定
     * @param unknown $inPath
     */
    public function pageunlockuserformanager($inPath){
        define('CURL_NUM', 5);
        $currentpage=intval($_GET['page'])?intval($_GET['page']):1;
        $data=array(
            array('user_id'=>10913241, 'manager'=>222),
        );
        $datas=array_slice($data, ($currentpage-1)*CURL_NUM,CURL_NUM);
        if(empty($datas)){
            echo "运行完成";exit;
        }else{
            print_r($datas);
        }
        lib_BaseUtils::apiInit(5,array('membership_sdk'));
        $s_user=new com\zhubajie\membership\interfaces\UserServiceClient(null);
        lib_BaseUtils::apigetclient($s_user);
        //         $followuser=$s_user->getfollowuser( $urlparams ['uid']);
        $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
        lib_BaseUtils::apigetclient($follow_service);
        foreach($datas as $data){
            $result=$s_user->updateFollowManager((int)$data ['user_id'], 0);
            $params = array(
                'user_id' => (int)$data ['user_id'], //项目内调用时可不传
                'is_sea' => 2,
                'enter_sea_reason' => 3,
                'remark'=>'人工解锁 '
            );
            $follow_service->follow($params);
        }
        $uppage=$currentpage-1;
        $downpage=$currentpage+1;
        echo <<<EOT
<a href="/crontab/lockuserforsaler?page=$downpage">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/unlockuserformanager?page=$downpage'
	},3000);
</script>
EOT;
    }
    /**
     * 分配CRM系统中的机会
     * @param unknown $inPath
     */
    public  function pageallotcrm($inPath){
		return true;
        header("Content-type: text/html; charset=utf-8");
        $t1 = microtime(true);
        if(date('H:i:s') > '23:00:00'){
            return '不在分配时间内';
        }
        if(date('H:i:s') < '09:00:00'){
            return '不在分配时间内';
        }
        $num=intval($_GET['num']);
        if($num<0){
            $num=30;
        }
        if(date('H:i:s') < '09:20:00'){
            $num=10;
        }
		$passCheck=false;
		//解决堆积商机
		$temDate=strtotime('2015-10-09 23:59:59');
		if(time()<=$temDate || $_GET['xdebug']==1){
			$passCheck=true;
		}

//         $s_allot=new zbj_service_allot(96);
//         if (count($s_allot->getusers(1,0))<=0){
//             return '没有在线用户';
//         }
        $s_cache = new zbj_lib_cache('memcache');
        
        $cache_name ='boss.zhubajie.com.crontab.allotcrm';
        if (isset($_GET['cache'])){
            $cacheValue = lib_BaseUtils::getStr($_GET['cache']);
            $s_cache->set($cache_name, $cacheValue);
        }
        $allot_flag = $s_cache->get($cache_name);
        
        if(!$num){
            $num=10;
        }
        
		echo 'num:'.$num.'<br/>';
        lib_BaseUtils::apiInit();
        $s_api=new com\zhubajie\boss\interfaces\bschanceServiceClient(null);
        lib_BaseUtils::apigetclient($s_api);
        
        $m_allotconfig = new zbj_model_cp_allotconfig();
        $m_allot = new zbj_model_cp_allot();
        $m_bstoct  = new model_mk_bstoct();
        $m_bstoctcontacts = new  model_mk_bstoctcontacts();
        $allots = $m_allotconfig->select(array('pid'=>96))->items;
        if ($allots){
            foreach ($allots as $v){
                $config_ids [$v['id']] = $v['id'];
            }
        }
        
        $crmchances = $m_bstoct->select(array('allotymd'=>date('Y-m-d'),'follow_uid !=0'),array('bs_to_ct_id','config_id','follow_uid','count(1) as total'),'group by follow_uid,config_id');
        $chanceAllotManagerArray = array();
        if ($crmchances->items){
            foreach ($crmchances->items as $v){
                $chanceAllotManagerArray[$v['config_id']][$v['follow_uid']] = $v['total'];
            }
        }
        
        //查询重点类目
        if ($config_ids){
            //在线的可以分配的顾问
			if($passCheck==true){
				$allotOnlineManager = $m_allot->select(array('config_id in ('.implode(',', $config_ids).')'),array('config_id','max','manager_id'),null,'order by lastallottime asc')->items;
			}
			else{
				$allotOnlineManager = $m_allot->select(array('isonline'=>1,'config_id in ('.implode(',', $config_ids).')'),array('config_id','max','manager_id'),null,'order by lastallottime asc')->items;
			}

            //$allotOnlineManager = $m_allot->select(array('config_id in ('.implode(',', $config_ids).')'),array('config_id','max','manager_id'),'*',null,'order by lastallottime asc')->items;
            if ($allotOnlineManager){
                foreach ($allotOnlineManager as $v){
                    if ($chanceAllotManagerArray[$v['config_id']][$v['manager_id']] < $v['max']){
                        $configManagerArray[$v['config_id']][] = $v['manager_id'];
                        $managerConfigArray[$v['manager_id']][$v['config_id']] = $v['config_id'];
                        
                        $arr[$v['config_id']][$v['manager_id']] = $v['max'];
                    }
                }
            }
            $s_crmchance = new service_crmchance();
            //查询待受理商机
            foreach ($config_ids as $config_id){
                echo 'allot.config_id:'.$config_id;
                echo "<br/>";
                
                if (empty($configManagerArray[$config_id])){
                    echo "没有在线用户";
                    echo "<br/>";
                    continue;
                }
                $s_allot = new zbj_service_allot($config_id);
                $createUsers = $s_allot->getusers();
                
                
                $allotManagers = array_slice($configManagerArray[$config_id],0,$num);
                //方案2
                foreach ($allotManagers as $manager_id){
                    //验证产能
                    if ($arr[$config_id][$manager_id] <= $chanceAllotManagerArray[$config_id][$manager_id]){
                        echo $manager_id." max ".$arr[$config_id][$manager_id] .' alloted:'.$chanceAllotManagerArray[$config_id][$manager_id];
                        continue ;
                    }
                    
                    $create_uid = 0;
                    $ct_id = 0;
                    $bs_to_ct_id = null;
                    $allotChanceArray = array(); //模拟没有机会
                    $log = '';
                    $user_id = null;
					/*
					 *#暂去掉判断是否有待受理商机.2015-10-10
					 *$unAcceptResult = $s_api->checkUnAcceptByManager($manager_id);
					 *if(false === $unAcceptResult->success && $passCheck!=true){
					 */
                    if(1==2){
                       echo $manager_id.'您还有待受理机会';
                       echo "<br/>";
                       continue;
                    }else{
                        echo 'alloting: manager_id：'.$manager_id.'      ';
                        $where = array();
                        $con = array();
                        $common_con = array();
                        $common_con['follow_uid'] = 0;
                        $common_con['status'] = 0;
                        $common_con['ordertime'] = 0;
                        $common_con['allottime'] = 0;
                        $allot_112=false;
                        if (in_array(112,$managerConfigArray[$manager_id])){
                            //unset($managerConfigArray[$manager_id][112]);
                            $allot_112=true;
                        }
                        if (count($managerConfigArray[$manager_id]) == 1){
                            $con['config_id'] = $managerConfigArray[$manager_id];
                        }else{
                            $con[] = 'config_id in ('.implode(',', $managerConfigArray[$manager_id]).')';
                        }
                        if (empty($managerConfigArray[$manager_id])){
                            echo '没有1';
                            echo '<br/>';
                            continue;
                        }
                        //所有类目 重点加急客户
                        if ($allot_112){
                            $con[] = 'isurgent>0';
                        }
                        $where = array_merge($con,$common_con);
                        $bsInfo = $m_bstoct->selectOne($where,array('bs_to_ct_id'),null,'order by isurgent desc,bs_to_ct_id desc');
                        if (empty($bsInfo)){
                            //重点类目中
                            $where = array();
                            $con = array();
                            if ($allot_112){
                                unset($managerConfigArray[$manager_id][112]);
                            }
                            if ($managerConfigArray[$manager_id]){
                                echo '没有2';
                                echo '<br/>';
                                if (count($managerConfigArray[$manager_id]) == 1){
                                    $con['config_id'] = $managerConfigArray[$manager_id][$config_id];
                                }else{
                                    $con[] = 'config_id in ('.implode(',', $managerConfigArray[$manager_id]).')';
                                }
                                $where = array_merge($con,$common_con);
                                $bsInfo = $m_bstoct->selectOne($where,array('bs_to_ct_id'),null,'order by isurgent desc,bs_to_ct_id desc');
                            }
                        }
                        if (empty($bsInfo) && $allot_112){
                            //普通类目
                            $where  = array();
                            $common_con['config_id'] = 112;
                            $today_com[] = 'createymd="'.date("Y-m-d").'"';
                            $where = array_merge($today_com,$common_con);
                            //当天的非重点客户
                            $bsInfo = $m_bstoct->selectOne($where,array('bs_to_ct_id'),null,'order by bs_to_ct_id asc');
                            if (empty($bsInfo)){
                                //昨天之前的非重点客户
                                $bsInfo = $m_bstoct->selectOne($common_con,array('bs_to_ct_id'),null,'order by bs_to_ct_id ASC');
                            }
                        }
                        if ($bsInfo){
                            $log = '分配给在线用户';
                            echo '机会id:'.$bsInfo['bs_to_ct_id'];
                            echo "<br/>";
                            $allot_bstoctid =$bsInfo['bs_to_ct_id'];
                            
                            if ($bsInfo['create_uid'] && in_array($bsInfo['create_uid'], $createUsers)){
                                $log = '分配给创建人';
                                $manager_id = $bsInfo['create_uid'];
                            }else {
                                if ($bsInfo['ct_id']){
                                    $bsContactsInfo = $m_bstoctcontacts->selectOne(array('ct_id'=>$bsInfo['ct_id']));
                                    if ($bsContactsInfo['ct_mobile']){
                                        $user_id = $s_crmchance->getFollowUserByPhone($bsContactsInfo['ct_mobile']);
                                        if ($user_id){
                                            $manager_id = $user_id;
                                            $log = '分配给相同手机号';
                                        }
                                    }
                                }
                            }
                            $s_api->delGrabChanceRedis($allot_bstoctid,$config_id);
                            $chanceBussinessDo=new \com\zhubajie\boss\dataobject\bschance\ChanceBussinessDo();
                            $chanceBussinessDo->bs_to_ct_id=$allot_bstoctid;
                            $chanceBussinessDo->follow_uid=$manager_id;
                            $chanceBussinessDo->allottime=time();
                            $next_follow_time = $s_crmchance->getFollowTime();
                            $chanceBussinessDo->next_follow_time = date('Y-m-d H:i:s',$next_follow_time);
                            $result=$s_api->UpdateBussinessChance($chanceBussinessDo);
                            echo $allot_bstoctid.'分配给了'.$manager_id.'<br/>';
                            $log .=$manager_id;
                            echo "<br/>";
                            if($result->success){
                                $chanceAllotManagerArray[$config_id][$manager_id] +=1;
                                $s_allot->createlog($allot_bstoctid,$manager_id);
                                //$s_allot->processed($val['bs_to_ct_id']);
                                $this->addLog2($allot_bstoctid,$log,service_crmchance::getLogType(),2);
                            }
                        }else{
                            echo "没有机会可分了";
                            echo "<br/>";
                            continue;
                        }
                        
                    }
                }
                
            }
        }
        $t2 = microtime(true);
        echo "<br/>";
        echo "执行耗时：";
        echo $t2 - $t1;
        exit;
        /*
        $businessFilter=new com\zhubajie\boss\dataobject\bschance\BusinessFilter();
        
        
        
        $s_cache = new zbj_lib_cache('memcache');
        $cache_name ='boss.zhubajie.com.crontab.allotcrm';
        $cache_name2 ='boss.zhubajie.com.crontab.allotcrm2';
        if (isset($_GET['cache'])){
            $cacheValue = lib_BaseUtils::getStr($_GET['cache']);
            $s_cache->set($cache_name, $cacheValue);
        }
        if (isset($_GET['cache2'])){
            $cacheValue = lib_BaseUtils::getStr($_GET['cache2']);
            $s_cache->set($cache_name2, $cacheValue);
        }
        $allotcrm = $s_cache->get($cache_name);
        $allotcrm2 = $s_cache->get($cache_name2);
        if ($allotcrm  ==1 ){
            $m_allotconfig = new zbj_model_cp_allotconfig();
            $allots = $m_allotconfig->select(array('pid'=>96))->items;
            if ($allots){
                foreach ($allots as $v){
                    $config_ids [] = $v['id'];
                }
            }
        }else{
            $config_ids [] = 112;
        }
        $m_allot = new zbj_model_cp_allot();
        $m_bstoct  = new model_mk_bstoct();
        $crmchances = $m_bstoct->select(array('allotymd'=>date('Y-m-d'),'follow_uid !=0'),array('bs_to_ct_id','config_id','follow_uid','count(1) as total'),'group by follow_uid,config_id');
        $chanceAllotManagerArray = array();
        if ($crmchances->items){
            foreach ($crmchances->items as $v){
                $chanceAllotManagerArray[$v['config_id']][$v['follow_uid']] = $v['total'];
            }
        }
        
        $allotManager = $m_allot->select(array('isonline'=>1,'config_id in ('.implode(',', $config_ids).')'),array('config_id','max','manager_id'))->items;
        $arr = array(); 
        if ($allotManager){
            foreach ($allotManager as $v){
                if ($chanceAllotManagerArray[$v['config_id']][$v['manager_id']] < $v['max']){
                    $arr[$v['config_id']][$v['manager_id']] = $v['max'];
                }
            }
        }
        echo '可以分配的人员';
        print_r($arr);
        if(empty($arr)){
            echo '没有可分配的用户';
            exit;
        }
        
        if (!$num){
            $num =10;
        }
        $bsid = lib_BaseUtils::getStr($_GET['id']);
        $tmp_config_id = lib_BaseUtils::getStr($_GET['config_id']);
        
        if ($config_ids && $allotcrm2 !=1){
            foreach ($config_ids as $config_id){
                $s_allot=new zbj_service_allot($config_id);
                $createUsers = $s_allot->getusers();
                echo $config_id;
                echo '<br/>';
                $user_id = $s_allot->getnextuser(1, 0,1,0 ,null,array_keys($arr[$config_id]));
                if (!$user_id){
                    echo '没有在线用户<br/>';
                    echo "<br/>";
                    continue;
                }
                if ($arr[$config_id][$user_id] <= $chanceAllotManagerArray[$config_id][$user_id]){
                    echo $user_id." max ".$arr[$config_id][$user_id] .' alloted:'.$chanceAllotManagerArray[$config_id][$user_id];
                    //echo $user_id." max ".$chanceAllotManagerArray[$config_id][$user_id] .' alloted:'.$arr[$config_id][$user_id];
                    echo "<br/>";
                    echo "<br/>";
                    //$m_allot->update(array('config_id'=>$config_id,'manager_id'=>$user_id),array('lastallottime'=>time()));
                    continue ;
                }
                
                $grabParamsDO = new com\zhubajie\boss\dataobject\bschance\grabParamsDO();
                $grabParamsDO->manager_id = $user_id;
                $grabParamsDO->is_allot = true;
                $grabParamsDO->config_ids = array($config_id);
                $s_crmchance = new service_crmchance();
                $next_follow_time = $s_crmchance->getFollowTime();
                $grabParamsDO->next_follow_time = $next_follow_time;
                if (!$user_id || !$config_id) {
                    echo '没有在线用户或者没有权限<br/>';
                    continue;
                }
                $grabParamsDO->config_managers = array($config_id=>$createUsers);
                $result = $s_api->grabChance($grabParamsDO);
                if ($result->success){
                    $chanceAllotManagerArray[$config_id][$user_id] +=1;
                    $bs_to_ct_id = $result->ext_params['bs_to_ct_id'];
	        		echo $bs_to_ct_id;
	        		$log = '分配成功,'.service_crmchance::getGrabChanceStatus($result->code);
	        		echo $log;
	        		echo "<br/>";
	        		$user_id = $result->ext_params['manager_id'];
	        		$s_allot->createlog($bs_to_ct_id,$user_id);
	        		//$s_allot->processed($val['bs_to_ct_id']);
	        		$this->addLog2($bs_to_ct_id,$log,service_crmchance::getLogType(),2);
                }else{
                    echo $result->message;
                    echo "<br/>";
                }
            }
        }
        
        if ($config_ids  && $allotcrm2 ==1){
            foreach ($config_ids as $config_id){
                $m_bstoct->setPage(1);
                $m_bstoct->setLimit($num);
                $condition = array();
                if ($tmp_config_id){
                    $condition['config_id'] = $tmp_config_id;
                }else{
                    $condition['config_id'] = $config_id;
                }
                $condition['follow_uid'] = 0;
                if ($bsid){
                    $condition['bs_to_ct_id'] = $bsid;
                }
                $unAllot = $m_bstoct->select($condition)->items;
                if ($unAllot){
                    foreach ($unAllot as $val){
                        $config_id = $val['config_id'];
                        $s_allot=new zbj_service_allot($config_id);
                        echo 'config_id:'.$config_id.';bsid'.$val['bs_to_ct_id'];
                        echo "<br/>";
                        if (in_array($val['create_uid'], $s_allot->getusers())) {
                            $user_id = $val['create_uid'];
                            $log = '分配给创建人';
                        } else {
                            $s_crmchance = new service_crmchance();
                            //$chanceResult = $s_api->getUnAllotChance(array($config_id), 1, $num);
                            $businessFilter = new com\zhubajie\boss\dataobject\bschance\BusinessFilter();
                            $businessFilter->bs_to_ct_id = $val['bs_to_ct_id'];
                            $chanceResult = $s_api->GetBussinessContactor($businessFilter);
                            $user_id = $s_crmchance->getFollowUserByPhone($chanceResult->data_obj->items[0]['ct_mobile']);
                            if ($user_id && in_array($user_id, $s_allot->getusers())){
                                $log = '分配给相同手机号码的商机顾问';
                            }else{
                                $user_id = $s_allot->getnextuser(1, 0,1,0 ,null,array_keys($arr[$config_id]));
                                $log = '分配给在线顾问';
                            }
                        }
                        if (!$user_id){
                            echo $config_id.'没有用户';
                            echo "<br/>";
                            continue;
                        }
                        if ($arr[$config_id][$user_id] <= $chanceAllotManagerArray[$config_id][$user_id]){
                            echo $user_id." max ".$arr[$config_id][$user_id] .' alloted:'.$chanceAllotManagerArray[$config_id][$user_id];
                            echo "<br/>";
                            echo "<br/>";
                            //$m_allot->update(array('config_id'=>$config_id,'manager_id'=>$user_id),array('lastallottime'=>time()));
                            continue ;
                        }
                        $s_api->delGrabChanceRedis($val['bs_to_ct_id'],$config_id);
                        $chanceBussinessDo=new \com\zhubajie\boss\dataobject\bschance\ChanceBussinessDo();
                        $chanceBussinessDo->bs_to_ct_id=$val['bs_to_ct_id'];
                        $chanceBussinessDo->follow_uid=$user_id;
                        $chanceBussinessDo->allottime=time();
                        $s_crmchance = new service_crmchance();
                        $next_follow_time = $s_crmchance->getFollowTime();
                        $chanceBussinessDo->next_follow_time = date('Y-m-d H:i:s',$next_follow_time);
                        $result=$s_api->UpdateBussinessChance($chanceBussinessDo);
                        echo $val['bs_to_ct_id'].'分配给了'.$user_id.'<br/>';
                        echo "<br/>";
                        if($result->success){
                            $chanceAllotManagerArray[$config_id][$user_id] +=1;
                            $s_allot->createlog($val['bs_to_ct_id'],$user_id);
                            //$s_allot->processed($val['bs_to_ct_id']);
                            $this->addLog2($val['bs_to_ct_id'],$log,service_crmchance::getLogType(),2);
                        }
                    }
                }
            }
        }
        */
    }
	/**
     * 按天生成组织架构快照
     * 
     * @auth yuanzhuang
     * @access public
     */
    public function pageGroupSnapshot() {
    	$year = date('Y');
    	$month = date('m');
    	
    	$m_groups = new zbj_model_cp_usergroups();
    	$m_groups_snapshot = new model_cp_user_groups_snapshot();
    	$m_groups_snapshot_log = new model_cp_user_groups_snapshot_log();
    	
    	//insert cp_user_groups_snapshot_log;
    	$items = array(
    		'cp_user_groups.group_id',
    		'cp_user_groups.pid',
    		'cp_user_groups.name as group_name',
    		'cp_user_groups.group_type',
			'cp_user_groups_option.number',
    	);
    	$left_join = array(
    		'cp_user_groups_option' => 'cp_user_groups_option.group_id = cp_user_groups.group_id',
    	);
    	$all_groups = $m_groups->select(array(), $items, '', '', $left_join)->items;
    	if (is_array($all_groups)) {
    		$values = array();
    		foreach ($all_groups as $each_item) {
    			$values[] = '(' . $each_item['group_id'] . ',' . $each_item['pid'] . ',"' . $each_item['group_name'] . '",' . $each_item['group_type'] . ',' . ($each_item['number']? $each_item['number']: 0) . ',' . date('Y') . ',"' . date('Y-m') . '","' . date('Y-m-d') . '")';
    		}
    		
    		$sql = 'INSERT INTO `cp_user_groups_snapshot_log` (group_id, pid, group_name, group_type, group_num, year, month, create_date) VALUES ' . implode(',', $values);
    		$m_groups_snapshot_log->query($sql);
    	}
    	
    	//update cp_user_groups_snapshot
    	$condition = array(
    		'year' => date('Y'),
    		'month' => date('Y-m'),
    	);
    	$items = array(
    		'group_id',
    		'group_type',
    		'sum(group_num) as total_num',
    		'group_name',
    		'count(1) as days',
    	);
    	
    	$summary_data = $m_groups_snapshot_log->select($condition, $items, 'GROUP BY group_id')->items;
    	if (is_array($summary_data)) {
    		$values = array();
    		foreach ($summary_data as $each_item) {
    			$each_item['number'] = (int)ceil($each_item['total_num'] / $each_item['days']);
    			$values[] = '(' . $each_item['group_id'] . ',"' . $each_item['group_name'] . '",' . $each_item['group_type'] . ',' . $each_item['number'] . ',' . date('Y') . ',"' . date('Y-m') . '")';
    		}
    	}
    	
    	$sql = 'REPLACE INTO `cp_user_groups_snapshot` (group_id, group_name, group_type, group_num, year, month) VALUES ' . implode(',', $values);
    	$m_groups_snapshot->query($sql);
    }
    
    /**
     * select t.task_id,hall_id,package_id,paytype_id,hosted_amount,state from mk_task t left join mk_task_hall h on t.task_id = h.task_id
where t.createymd>='2015-07-10' and hosted=1  and paytype_id =1 and package_id in (1,3,4,5,6,7,9,10,12,16,18,19,22,24) and hall_id>0
     * 修复悬赏专场任务mk_task.paytype与rwd_package表中paytype_id不一致的问题
     */
    public function pageFixRewardHallTaskPayType() {
        $page = lib_BaseUtils::getStr($_GET['page'], 'int');
        $page = $page ? $page : 1;
        $limit = 10;
        
        $m_task = new zbj_model_mk_task();
        $condition = array();
        $condition['hosted'] = 1;
        $condition['paytype_id'] = 1;
        $condition[] = "`createymd`>='2015-07-01' and `hall_id` > 0 and `package_id` in (1,3,4,5,6,7,9,10,12,16,18,19,22,24) and `state` in(2,3)";
        $leftjoin = array(
          'mk_task_hall'=>'mk_task.task_id = mk_task_hall.task_id'  
        );
        $m_task->setPage($page);
        $m_task->setLimit($limit);
        $task = $m_task->select($condition, 'mk_task.task_id, package_id', null, null,$leftjoin)->items;
        
        if (!$task) {
            return "没有可以执行的任务";
        }
        //获取套餐对应的paytype
        $m_package = new model_rwd_package();
        $package = $m_package->select(null, 'package_id,paytype_id')->items;
        if (!$package){
            return "套餐信息不存在";
        }
        $package_array = array();
        foreach ($package as $pac) {
            $package_array[$pac['package_id']] = $pac['paytype_id'];
        }
        foreach ($task as $t) {
            if ($m_task->update(array('task_id'=>$t['task_id']), array('paytype_id'=>$package_array[$t['package_id']])) === false) {
                echo "任务号：{$t['task_id']}更新失败！<br/>";
            }
        }
        echo "执行完毕";
    }
    /**
     * 任务加价后，根据修改的价格转化为相应的套餐
     * 目前仅支持自定义转自定义，套餐转套餐
     */
    public function pageRewardModifyPackage() {
        header("Content-type: text/html; charset=utf-8");
        $dateymd = '2015-08-10';//上线时间
        $before_day = date('Y-m-d', strtotime('-10 day'));//一定时间内失败记录进行修复
        $limit = 2;
        
        $condition = array();
        $condition[] = "mk_task_addamount.dateymd>='{$dateymd}' and mk_task_addamount.dateymd>='{$before_day}'";
        $condition[] = "hall_id > 0";
        $condition['mk_task_addamount.type'] = 0;//加价
        $condition[] = "mk_task.state in (1,2,3)";//任务没有结束时，可以升级，任务结束时升级没有意义
        
        $m_log = new model_rwd_modifytaskpackagelog();
        $log = $m_log->selectOne("`create_ymd` >= '{$dateymd}'", 'addamount_id', null, 'order by log_id desc');
        if ($log) {
            $condition[] = "`addamount_id` > {$log['addamount_id']}";
        }
        $leftjoin = array(
            'mk_task' => 'mk_task.task_id = mk_task_addamount.task_id',
            'mk_task_hall' => 'mk_task_hall.task_id = mk_task_addamount.task_id' 
        );
        $items = 'mk_task.task_id, hosted_amount, addamount_id,hall_id, package_id';
        $m_addmount = new zbj_model_mk_taskaddamount();
        $m_addmount->setLimit($limit);
        //查找出专场加价任务
//         define(DEBUG, $value);
        $addmount_array = $m_addmount->select($condition, $items, null, 'order by addamount_id', $leftjoin)->items;
//         print_r($addmount_array);
        if (empty($addmount_array)) {
            return "没有加价任务需要转化套餐";
        }
        $m_package = new  model_rwd_package();
        $m_task_hall = new zbj_model_mk_taskhall();
        
        foreach ($addmount_array as $v) {
            $cur_package = array();//当前任务套餐信息
            $new_package = array();
            $new_package_condition = array();
            $add_log_data = array();
            $add_log_data['addamount_id'] = $v['addamount_id'];
            $add_log_data['task_id'] = $v['task_id'];
            $add_log_data['is_succ'] = 1;
            $add_log_data['create_time'] = time();
            $add_log_data['create_ymd'] = date('Y-m-d');
            $cur_package = $m_package->selectOne(array('package_id'=>$v['package_id']), 'type, amount, service_amount');
            if ($cur_package) {
                $new_package = $this->_getTaskUpPackage($v['task_id']);
                if ($new_package && $new_package['package_id'] && $new_package['package_id'] != $v['package_id']) {
                    if ($this->_updateTaskPackage($v['task_id'], $new_package['package_id'], $new_package['paytype_id']) == false) {
                        $add_log_data['is_succ'] = 2;
                        echo "任务号：{$v['task_id']}套餐升级失败<br/>";
                    }else {
                        echo "任务号：{$v['task_id']}套餐升级成功<br/>";
                    }
                    
                }else{
                    echo "任务号：{$v['task_id']}没有达到套餐升级条件，无须升级<br/>";
                }
            }else {
                //非套餐任务
            }
            $m_log->insert($add_log_data);
        }
        
        //查出日志表中没有执行成功的记录，再次执行更新套餐操作
        $fail_condition = array();
        $fail_condition['is_succ'] = 2;
        $fail_condition[] = "`create_ymd` >= '{$before_day}'";
        $fail_log_array = $m_log->select($fail_condition, 'task_id, log_id')->items;
        $m_log->setLimit($limit);
        if ($fail_log_array) {
            foreach ($fail_log_array as $fail) {
                $cur_fail_package = $this->_getTaskUpPackage($fail['task_id']);//当前
                //根据任务号获取要升级的package_id以及paytype_id
                if ($cur_fail_package) {
                    if ($this->_updateTaskPackage($fail['task_id'], $cur_fail_package['package_id'], $cur_fail_package['paytype_id'])) {
                        $m_log->update(array('log_id'=>$fail['log_id']), array('is_succ'=>1));
                    }
                }
            }
        }
//         print_r($addmount_array);
    }
    /**
     * 根据任务号获取升级的套餐信息
     */
    private function _getTaskUpPackage($task_id) {
        $cur_package = array();//当前任务套餐信息
        $new_package = array();
        $new_package_condition = array();
        
        $m_package = new model_rwd_package();
        $m_task = new zbj_model_mk_task();
        $task_hall_leftjoin = array(
          'mk_task_hall' => 'mk_task.task_id = mk_task_hall.task_id'  
        );
        $task_array = $m_task->selectOne(array('mk_task.task_id'=>$task_id), 'hosted_amount,hall_id, package_id', null, null, $task_hall_leftjoin);
        $cur_package = $m_package->selectOne(array('package_id'=>$task_array['package_id']), 'type, amount, service_amount');
        if ($cur_package) {
            $task_amount = $task_array['hosted_amount'] + $cur_package['service_amount'];//当前任务金额，根据金额进行匹配新的套餐
            $new_package_condition['type'] = $cur_package['type'];
            $new_package_condition['hall_id'] = $task_array['hall_id'];
            if ($cur_package['type'] == 1) {
                //套餐任务
                $new_package_condition[] = "`amount` <={$task_amount}";
                $new_package = $m_package->selectOne($new_package_condition, 'package_id, paytype_id', null, 'order by `amount` desc');
            }else {
                //自定义任务
                $new_package_condition[] = "`define_low_amount` <={$task_amount}";
                $new_package = $m_package->selectOne($new_package_condition, 'package_id, paytype_id', null, 'order by `define_low_amount` desc');
            }
        }
        return $new_package;
    }
    
    private function _updateTaskPackage($task_id, $package_id, $paytype_id) {
        $result = true;
        
        $m_task = new zbj_model_mk_task();
        $m_task_hall = new zbj_model_mk_taskhall();
        $m_task_package = new model_rwd_taskpackage();
        //更新表mk_task.paytype_id
        if ($m_task->update(array('task_id'=>$task_id), array('paytype_id'=>$paytype_id)) === false) {
            $result = false;
        }
        
        //更新表mk_task_hall.package_id
        if ($m_task_hall->update(array('task_id'=>$task_id), array('package_id'=>$package_id)) === false) {
            $result = false;
        }
        //更新表rwd_task_package.package_id
        if ($m_task_package->update(array('task_id'=>$task_id), array('package_id'=>$package_id)) === false) {
            $result = false;
        }
        return $result;
    }

    /**
     * 同步专场套餐数据
     * 主要是解决创建任务时:zhubajie_market.mk_task_hall 和 zhubajie_reward.rwd_task_package的数据同步
     * 每天凌晨同步前一天的数据
     */
    public function pageSyncHallPackageData(){
        $d = isset($_GET['d'])?$_GET['d']:1;
        if(!is_numeric($d) || $d<0){
            return '非法参数';
        }
        //得到当前两天的所有数据
        $date = date("Y-m-d",strtotime("-{$d} day"));

        $m_task_hall = new zbj_model_mk_taskhall();
        $cond[] = "`create_ymd` = '{$date}'";
        $obj_mk_list = $m_task_hall->select($cond,"task_id,hall_id,package_id,create_ymd,create_time","");
        if(!$obj_mk_list->items){
            return '没有要执行的套餐任务';
        }
        $arr_mk_task_index = array();
        $arr_mk_task_ids = array();
        foreach($obj_mk_list->items as $key=>$val){
            $arr_mk_task_ids[] = $val['task_id'];
            $arr_mk_task_index[$val['task_id']] = $val;
        }
        unset($obj_mk_list);

        $task_ids = implode(",",$arr_mk_task_ids);
        $cond1[] = "`create_ymd` = '{$date}' and `task_id` in ({$task_ids})";

        //得到当前两天的所有数据
        $m_rwd_package = new model_rwd_taskpackage();
        $obj_rwd_list = $m_rwd_package->select($cond1,"task_id");
        $arr_diff_task_ids = array();
        if(!$obj_rwd_list->items){
            $arr_diff_task_ids = $arr_mk_task_ids;
        }else{
            $arr_rwd_task_ids = array();
            foreach($obj_rwd_list->items as $key=>$val){
                $arr_rwd_task_ids[] = $val['task_id'];
            }
            $arr_diff_task_ids = array_diff($arr_mk_task_ids,$arr_rwd_task_ids);
        }

        unset($arr_mk_task_ids);
        unset($obj_rwd_list);

        foreach($arr_diff_task_ids as $key=>$val){
            $arr_edit_data['task_id'] = $val;
            $arr_edit_data['hall_id'] = $arr_mk_task_index[$val]['hall_id'];
            $arr_edit_data['package_id'] = $arr_mk_task_index[$val]['package_id'];
            $arr_edit_data['create_time'] = $arr_mk_task_index[$val]['create_time'];
            $arr_edit_data['create_ymd'] = $arr_mk_task_index[$val]['create_ymd'];
            $arr_edit_data['create_type'] = 1;//通过定时任务创建的记录
            $m_rwd_package->insert($arr_edit_data);
        }
    }
    
    
    public function pageconvusersalt(){
        $m_user=zbj_model_api::get('zbj_model_cp_userinfo');
        $condition=array();
        $condition['slat']='';
        $data=$m_user->select($condition)->items;
        foreach ($data as $u){
            $u['slat']=lib_BaseUtils::uuid();
//             unset($u['user_id']);
            $m_user->update(array('user_id'=>$u['user_id']),$u);
        }
    }

    /**
     *根据task_id生成rwd_package记录
     */
    public function pageCreateHallPackageData(){
        $task_id = intval($_GET['id']);
        if(!$task_id){
            exit("error task_id!");
        }
        $m_task_hall = new zbj_model_mk_taskhall();
        $cond[] = "`task_id` = {$task_id}";
        $arr_task_hall = $m_task_hall->selectOne($cond,"task_id,hall_id,package_id,create_ymd,create_time");
        if(!$arr_task_hall){
            exit("illegal task_id!");
        }

        $m_rwd_package = new model_rwd_taskpackage();
        $arr_rwd_package = $m_rwd_package->selectOne($cond,"task_id");
        if($arr_rwd_package){
            exit("record exists!");
        }
        $arr_edit_data['task_id'] = $task_id;
        $arr_edit_data['hall_id'] = $arr_task_hall['hall_id'];
        $arr_edit_data['package_id'] = $arr_task_hall['package_id'];
        $arr_edit_data['create_time'] = $arr_task_hall['create_time'];
        $arr_edit_data['create_ymd'] = $arr_task_hall['create_ymd'];
        $arr_edit_data['create_type'] = 2;//通过task_id手动创建的记录
        $res = $m_rwd_package->insert($arr_edit_data);
        if($res===false){
            exit("error!");
        }
        echo "success!";
    }
    /**
     * 会员销售第七期 历史数据处理 之 文件上传
     * 将数据保存到临时数据表中
     *
     * @param
     * @return bool
     * @author : joey
     * @data:2015/11/03
     */
    public function pageDataUpload151103($inPath) {
        exit("非法调用！");
        // 获取需要操作的模型
        $m_sell_unlock = new model_mb_sellUnlockExceptionT();

        if (!empty($_FILES)) {
            if ($_FILES['error'] != 0) {
                echo "上传文件失败！";
                return;
            }
            //$PHPExcel = new PHPExcel();
            $file =  $_FILES['excel'][tmp_name];
            $objReader = PHPExcel_IOFactory::createReader('Excel2007');
            $objPHPExcel = $objReader->load($file);
            $sheet = $objPHPExcel->getSheet(0);
            $highestRow = $sheet->getHighestRow();           //取得总行数
            //$highestColumn = $sheet->getHighestColumn();
            //$highestColumm =  PHPExcel_Cell::columnIndexFromString($highestColumn);
            $array = array();
            for ($row = 2; $row<=$highestRow; $row++){//行数是以第1行开始
                $data = null;
                $user_id = $sheet->getCellByColumnAndRow(0, $row)->getValue();
                $array[] = $user_id;
            }
            $array = array_filter($array); // 去空
            $user_ids = "";
            foreach($array as $a) {
                $user_ids .= "(" . (int)$a . "),";
            }
            $user_ids = trim($user_ids,",");
            $sql = "INSERT INTO mb_sell_unlock_exception_t(user_id) VALUES " . $user_ids;
            $m_sell_unlock->query($sql);
            echo "Done!";

        } else {
            $upload_form = <<<EOF
<form action="/crontab/dataupload151103" method="post" enctype="multipart/form-data">上传Excel数据文件<input type="file" name="excel" />
<input type="submit" />
</form>
EOF;
            echo $upload_form;
            return;

        }
    }

    /**
     * 会员销售第七期 历史数据处理
     *
     * @param
     * @return bool
     * @author : joey
     * @data:2015/11/03
     */
    public function pageData151103() {
        exit("非法调用！");
        define(STEP, 10); //定义步长

        // 检测是否通过url参数手动设置过断点参数
        $mark = lib_BaseUtils::getStr($_GET['mark'], 'int');
        if ($mark > 0) {
            $mark_num = $mark;
            setcookie('_mark_num', $mark_num, time() + 86000, '/', $_SERVER ['HTTP_HOST'], 0, 1);
        } else {
            // 获取客户端保存在cookie中的断点标记
            $mark_num = lib_BaseUtils::getStr($_COOKIE['_mark_num'], 'int');

            // 判断标记是否存在，若不存在；则将其置为0
            if (!$mark_num) {
                $mark_num = 0;
                setcookie('_mark_num', '0', time() + 86000, '/', $_SERVER ['HTTP_HOST'], 0, 1);
            }
        }

        // 获取需要操作的模型
        $m_sell_unlock = new model_mb_sellUnlockExceptionT();
        //$m_sell_follow_sync = new model_mb_sellFollowSync();
        $m_sellfollow = new model_mb_sellFollow();

        // 每次处理10条数据
        $sql = "SELECT user_id,seller_id FROM mb_sell_follow WHERE 1 ORDER BY user_id LIMIT {$mark_num}," . STEP;
        $res = $m_sellfollow->query($sql);

        if ($res) {
            lib_BaseUtils::apiInit(10, array('membership_sdk'));
            $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
            lib_BaseUtils::apigetclient($follow_service);
            $user_service = new com\zhubajie\membership\interfaces\UserServiceClient(null);
            lib_BaseUtils::apigetclient($user_service);
            foreach ($res as $each_item) {
                // 若已解锁，则跳过此条记录
                if (0 == $each_item['seller_id']) {
                    continue;
                }
                // 检查是否属于保留数据
                $excpt = $m_sell_unlock->selectOne(array("user_id"=>$each_item['user_id']));
                if (empty($excpt)) { // 不属于保留数据，则解锁
                    //unlock user
                    $user_service->updateFollowSeller($each_item['user_id'], 0);
                    //add follow log
                    $follow_data = array(
                        'user_id' => $each_item['user_id'],
                        'is_sea' => 1,
                        'enter_sea_reason' => 2,
                        'remark' => '会员第七期，非保留数据，系统批量解锁',
                    );
                    $follow_service->follow($follow_data);
                    $this->addLog($each_item['user_id'],'会员第七期，非保留数据，系统批量解锁','user');
                    echo $each_item['user_id'] . '<br/>';
                }
            }
        } else {
            echo "例程结束!";
        }
        // 修改断点标记
        setcookie('_mark_num', $mark_num+=STEP, time() + 86000, '/', $_SERVER ['HTTP_HOST'], 0, 1);
        echo "断点标记 --- " . $mark_num;
    }


    /**
     * 会员销售第七期 历史数据处理 (跑数据过程中产生的“脏”数据)
     *
     * @param
     * @return bool
     * @author : joey
     * @data:2015/11/11
     */
    public function pageData151111() {
        define(STEP, 10); //定义步长

        // 检测是否通过url参数手动设置过断点参数
        $mark = lib_BaseUtils::getStr($_GET['mark'], 'int');
        if ($mark > 0) {
            $mark_num = $mark;
            setcookie('_mark_num', $mark_num, time() + 86000, '/', $_SERVER ['HTTP_HOST'], 0, 1);
        } else {
            // 获取客户端保存在cookie中的断点标记
            $mark_num = lib_BaseUtils::getStr($_COOKIE['_mark_num'], 'int');

            // 判断标记是否存在，若不存在；则将其置为0
            if (!$mark_num) {
                $mark_num = 0;
                setcookie('_mark_num', '0', time() + 86000, '/', $_SERVER ['HTTP_HOST'], 0, 1);
            }
        }

        // 获取需要操作的模型
        $m_sellfollow = new model_mb_sellFollow();

        // 每次处理10条数据
        $sql = "SELECT user_id,seller_id FROM mb_sell_follow WHERE seller_id=0 AND is_sea=0 ORDER BY user_id LIMIT {$mark_num}," . STEP;
        $res = $m_sellfollow->query($sql);

        if ($res) {
            lib_BaseUtils::apiInit(10, array('membership_sdk'));
            $follow_service = new com\zhubajie\membership\interfaces\FollowServiceClient(null);
            lib_BaseUtils::apigetclient($follow_service);

            foreach ($res as $each_item) {
                //add follow log
                $follow_data = array(
                    'user_id' => $each_item['user_id'],
                    'is_sea' => 1,
                    'enter_sea_reason' => 2,
                    'remark' => '系统数据异常处理',
                );
                $follow_service->follow($follow_data);
                $this->addLog($each_item['user_id'],'系统数据异常处理','user');
                echo $each_item['user_id'] . '<br/>';
            }
        } else {
            echo "例程结束!";
        }
        // 修改断点标记
        setcookie('_mark_num', $mark_num+=STEP, time() + 86000, '/', $_SERVER ['HTTP_HOST'], 0, 1);
        echo "断点标记 --- " . $mark_num;
    }




	/*
	 *修复订单分配审核bug专用【禁止调用】
	 *lstmango
	 *2015-09-29
	 */
	private function checkTaskNeedVerify($taskid){
		$srvTask = new zbj_service_task($taskid);
		$srvTask = $srvTask->init();
		$task = $srvTask->get('*');
		if(!$task){
			echo "{$task['task_id']}订单丢失<br />";
			return false;
		}
		$taskAllotPoolModule = zbj_model_api::get('zbj_model_mk_allotpool');
		$condi[] = 'task_id='.$taskid;
		$taskAllotPool = $taskAllotPoolModule->selectOne($condi, 'task_id,createtime');
		if($taskAllotPool){//已进入分配池
			$showTime=date('Y-m-d H:i:s',$taskAllotPool['createtime']);
			echo "{$task['task_id']}已进入分配池，进入分配池时间{$showTime}<br />";
			#return false;
		}

		$taskallot=new zbj_service_allot_taskallot();
		$result=$taskallot->checkTaskNeedAllot($srvTask);
		$showTime=date('Y-m-d H:i:s',$taskAllotPool['createtime']);
		if($result==true && (time()-40*60)<$task['createtime']){
			echo "{$task['task_id']}符合分配规则，该订单创建时间{$showTime}<br />";
			return false;
		}
		if($result==true && (time()-40*60)>=$task['createtime']){
			echo "{$task['task_id']}该订单超时未分配{$showTime}<br />";
			$cpRemarkModule = zbj_model_api::get('zbj_model_cp_remark');
			$rcondi[] = 'pk_id='.$taskid;
			$rcondi[] = "action='/crontab_allottaskmanager2/crontab_checktaskneedverify'";
			$remark1 = $cpRemarkModule->selectOne($rcondi, 'remark_id');
			$rcondi2[] = 'pk_id='.$taskid;
			$rcondi2[] = "action='/crontab_reallottaskmanager2/crontab_checktaskneedverify'";
			$remark2 = $cpRemarkModule->selectOne($rcondi2, 'remark_id');
			if(!$remark1 && !$remark2){
				$this->addLog($taskid, "该订单超时未分配,进入审核库");
			}
		}
		return true;

	}

	/*
     *手动回收redis服务[禁止调用]
	 *后期重构可能会下掉
	 */
	public function pagedoRedisChance(){
		//防止乱调用
		if(md5($_GET['xdebug'])!='330d7a9a4e85ffef5b71f4470739367f'){
			return;
		}
		lib_BaseUtils::apiInit();
		$crmClient = new com\zhubajie\boss\interfaces\bschanceServiceClient(null);
		lib_BaseUtils::apigetclient($crmClient);
		if($_GET['cid'] && $_GET['ac']!=1){
			$config_id=(int)$_GET['cid'];
			$res = $crmClient->getRedisChanceList($config_id);
			var_dump($res);
		}
		if($_GET['ac']==1 && $_GET['cid']){
			$config_id=(int)$_GET['cid'];
			$res = $crmClient->getRedisChanceList($config_id);
			var_dump($res);
			if($res->items){
				if($_GET['id']){
					$removeResult = $crmClient->delGrabChanceRedis(intval($_GET['id']),intval($_GET['cid']));
					var_dump($removeResult);
				}
				else{
					foreach($res->items as $bsId){
						var_dump($bsId);
						$removeResult = $crmClient->delGrabChanceRedis($bsId,intval($_GET['cid']));
						var_dump($removeResult);
					}
				}
			}
		}
	}
	/**
	 * 服务商销售锁定
	 * @param unknown $inPath
	 */
	public function pageaddsellsync($inPath){
	    define('CURL_NUM', 20);
	    $batch = $_REQUEST['batch'];
	    $currentpage=intval($_GET['page'])?intval($_GET['page']):1;
	    //         $class = 'controller_crontab_seller'.$batch;
	    //         $seller = new $class;
	    //         $data = $seller->data();
	    $data = array(

	    );
	    $datas=array_slice($data, ($currentpage-1)*CURL_NUM,CURL_NUM);
	    if(empty($datas)){
	        echo "运行完成";exit;
	    }else{
	        print_r($datas);
	    }
	    $m_sync=new model_mb_sellFollowSync();
	    foreach($datas as $data){
	        $result=$m_sync->insert(array('user_id'=>$data));
	        $this->addLog($data['user_id'], "系统已将服务商 {$data['user_id']} （服务商ID）通过批量人工锁定给售前销售顾问{$data['manager_id']}", 'user');
	    }
	    $uppage=$currentpage-1;
	    $downpage=$currentpage+1;
	    echo <<<EOT
<a href="/crontab/addsellsync?page=$downpage&batch=$batch">如果不能跳转点这里</a>
<script>
window.setTimeout(function (){
	window.location='/crontab/addsellsync?page=$downpage&batch=$batch';
	},3000);
</script>
EOT;
	}

	/**
	 * 更新案例属性值
	 * @author fanruipeng@zhubajie.com
	 * @date 2015-10-23
	 */
	public function pageCaseDeleteAttrValue($inPath) {
		$startTime = $this->_getMillisecond();
		define(STEP, 50); //定义步长
        // define(DEBUG, 1);
        set_time_limit(120); // 脚本执行时间
        //ignore_user_abort(true); // 客户端断开后，仍继续执行脚本
		$asynMdl = new zbj_model_cm_attrvalueasyn();
		$asynMdl->setLimit(STEP);
		$fileAttrMdl = new zbj_model_cm_fileattr();
		$fileAttrMdl->setLimit(STEP);
		$attrMdl = new zbj_model_cm_attrvalue();
		$con = array("status" => 0);
		$item = "id, attr_id, attrvalue_id_old, attrvalue_name_old, attrvalue_id_new, attrvalue_name_new, add_time, status";
		$success = 0; //计数器
		$fail = 0;
		while($asyRes = $asynMdl->select($con,$item)->items) {
			foreach($asyRes as $value) {
				try{
					$asynMdl->beginTransaction('cm');
					echo date("Y-m-d h:i:s"). ' 正在处理'. $value['attrvalue_id_old'].$value['attrvalue_name_old'].'<br>';
					$conf = array("attrvalue_id"=>$value['attrvalue_id_old']);
					if($value['attrvalue_id_new'] == '0'){
						$updateItem = array('attrvalue_name'=>$value['attrvalue_name_new']);
						$updateRes = $fileAttrMdl->update($conf,$updateItem);
						if($updateRes || $updateRes == 0) {
							echo date("Y-m-d h:i:s"). ' 更新成功'. $value['attrvalue_name_new'].'<br>';
							$synUpRes = $asynMdl->update(array('id'=>$value['id']),array('status'=>1));
							if($synUpRes){
								$asynMdl->commit('cm');
								$success ++;
								echo date("Y-m-d h:i:s"). $value['attrvalue_name_new']." 更新完成 <br>";
							} else {
								throw new Exception("syn表更新错误");
							}
						}else {
							throw new Exception("更新出错");
						}
					} else {
						$updateItem = array('attrvalue_id'=>$value['attrvalue_id_new'],'attrvalue_name'=>$value['attrvalue_name_new']);
						$updateRes = $fileAttrMdl->update($conf,$updateItem);
						if($updateRes || $updateRes == 0) {
							echo date("Y-m-d h:i:s"). ' 更新成功'. $value['attrvalue_name_old'].'<br>';
							$delRes = $attrMdl->delete($conf);
							if($delRes){
								$synUpRes = $asynMdl->update(array('id'=>$value['id']),array('status'=>1));
								if($synUpRes){
									$asynMdl->commit('cm');
									$success ++;
									echo date("Y-m-d h:i:s"). $value['attrvalue_name_old']." deleted <br>";
								} else {
									throw new Exception("syn表更新错误");
								}
							} else {
								$synUpRes = $asynMdl->update(array('id'=>$value['id']),array('status'=>2));
								if($synUpRes){
									$asynMdl->commit('cm');
									$fail ++;
									echo date("Y-m-d h:i:s").' '.$value['attrvalue_name_old']." failed <br>";
								} else {
									throw new Exception("syn表更新错误");
								}
							}
						}else {
							throw new Exception("更新出错");
						}
					}
				} catch (Exception $e) {
					echo $e->getMessage();
					$asynMdl->rollBack('cm');
				}
			}
		}
		$all = $fail + $success;
		echo date("Y-m-d h:i:s").' update '.$all.' items. success:'.$success.' fail:'.$fail.'<br>';
		$endtime = $this->_getMillisecond();
		$spend = $endtime - $startTime;
		echo "执行时间".$spend."毫秒";
	}

	 /**
     * @return float
     * 获取当前的毫秒数
     */
    private function _getMillisecond() {
        list($s1, $s2) = explode(' ', microtime());
        return (float)sprintf('%.0f', (floatval($s1) + floatval($s2)) * 1000);
    }
}
