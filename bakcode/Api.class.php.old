<?php

use com\zhubajie\task\interfaces\EventSystemServiceClient;
use com\zhubajie\task\dataobject\eventsystem\EventDTO;
use com\zhubajie\task\dataobject\eventsystem\ListenerDTO;


/**
 * 第三方接口类
 * @author lidacheng
 * @vesion 1.0
 */
class zbj_lib_Api {
	
	static $_error = array();
	
	/**
	 * 需求创建成功后调用
	 * @param	int		$taskid
	 */
	public static function taskCreated($taskid,$delay=0){
		try{
			$event = 'task.created';
			$param = array('task_id'=>$taskid);
			self::throwTaskEvent($param,$event,$delay);
		}catch(Exception $e){
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
	
	/**
	 * 需求被编辑后调用
	 * @param	int		$taskid
	 */
	public static function taskEdited($taskid,$delay=0){
		try{
			$event = 'task.edited';
			$param = array('task_id'=>$taskid);
			self::throwTaskEvent($param,$event,$delay);
		}catch(Exception $e){
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
	
	/**
	 * 需求托管后调用
	 * @param	int		$taskid
	 */
	public static function taskHosted($taskid,$price,$delay=0){
		try{
			$event = 'task.hosted';
			$param = array('task_id'=>$taskid, 'price'=>$price);
			self::throwTaskEvent($param,$event,$delay);
		}catch(Exception $e){
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
	
	/**
	 * 需求追加赏金后调用
	 * @param	int		$taskid
	 */
	public static function taskAppendedAmount($taskid,$delay=0){
		try{
			$event = 'task.appendedAmount';
			$param = array('task_id'=>$taskid);
			self::throwTaskEvent($param,$event,$delay);
		}catch(Exception $e){
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
	
	/**
	 * 需求被关闭后调用 
	 * $refused关闭原因
	 */
	public static function taskClosed($taskid,$refused=0,$delay=0){
		$event = 'task.closed';
		$param = array('task_id'=>$taskid,'refused'=>$refused);
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 需求重新开启后调用
	 * @param	int		$taskid
	 */
	public static function taskReOpened($taskid,$delay=0){
		try{
			$event = 'task.reopened';
			$param = array('task_id'=>$taskid);
			self::throwTaskEvent($param,$event,$delay);
		}catch(Exception $e){
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
	
	/**
	 * 需求结束后调用
	 * @param	int		$taskid
	 */
	public static function taskFinished($taskid,$delay=0){
		try{
			$event = 'task.finished';
			$param = array('task_id'=>$taskid);
			self::throwTaskEvent($param,$event,$delay);
		}catch(Exception $e){
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}

	/**
	 * 已交稿后调用 
	 */
	public static function worksCreated($workid,$taskid,$userid=0,$delay=0){
		$event = 'works.created';
		$param = array('task_id'=>$taskid,'work_id'=>$workid,'user_id'=>$userid);
		return self::throwTaskEvent($param,$event,$delay);
	}

	/**
	 * 稿件中标后调用 
	 */
	public static function worksSuccess($workid,$taskid,$delay=0)
	{
		$event = 'works.success';
		$param = array('task_id'=>$taskid,'work_id'=>$workid);
		return self::throwTaskEvent($param,$event,$delay);
	}

	/**
	 * 稿件被取消中标后调用
	 */
	public static function worksSuccessCancel($workid,$taskid,$delay=0)
	{
		return true;
		/*$event = 'works.success.cancel';
		$param = array('task_id'=>$taskid,'work_id'=>$workid);
		return self::throwTaskEvent($param,$event,$delay);*/
	}

	/**
	 * 稿件被设置为淘汰后
	 */
	public static function worksEliminated(array $param,$delay=0)
	{
		$event = 'works.success.eliminate';
		return self::throwTaskEvent($param,$event,$delay);
	}

	/**
	 * 稿件被取消淘汰后
	 */
	public static function worksUnEliminated(array $param,$delay=0)
	{
		$event = 'works.success.uneliminate';
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 稿件被设置为备选后
	 */
	public static function worksAlternatived(array $param,$delay=0){
		$event = 'works.alternatived';
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 稿件被设置为无效后
	 */
	public static function worksInvalided(array $param,$delay=0){
		$event = 'works.invalided';
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 稿件被屏蔽后
	 */
	public static function worksShielded(array $param,$delay=0){
		$event = 'works.shielded';
		return self::throwTaskEvent($param,$event,$delay);
	}
		
	/**
	 * 需求邀请了服务商参与
	 */
	public static function taskInvited($task_id,array $seller,$delay=0){
		$event = 'task.invited';
		$param = array('task_id'=>$task_id,'user_ids'=>serialize($seller));
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 需求分配售前交易顾问后
	 * @param	int	$type	1：交易顾问，2：审核顾问，3：售后顾问
	 */
	public static function taskAllotedManager($taskid,$managerid,$type,$delay=0){
		$event = 'task.alloted.manager';
		$param = array('task_id'=>$taskid,'manager_id'=>$managerid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 需求需要分配交易顾问
	 * @param	int	$type	1：交易顾问，2：审核顾问，3：售后顾问
	 */
	public static function taskNeedAllotManager($taskid,$type,$delay=0){
		$event = 'task.need.allot';
		$param = array('task_id'=>$taskid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}

    /**
     * 需求分配审核顾问
     * @param $taskid   //需求号
     * @param $managerId    审核人员id
     * @return bool
     */
    public static function taskVerifyManager($taskid){
        $event = 'task.need.verify';
        $param = array('task_id' => $taskid);
        return self:: throwTaskEvent($param, $event);
    }
	
	/**
	 * 需求重置了交易顾问后
	 * @param	int	$type	1：交易顾问，2：审核顾问，3：售后顾问
	 */
	public static function taskResetedManager($taskid,$managerid,$type,$delay=0){
		$event = 'task.reseted.manager';
		$param = array('task_id'=>$taskid,'manager_id'=>$managerid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 需求分配售前交易顾问比率大于80%时[manager_id] 
	 * @param	int	$type	1：交易顾问，2：审核顾问，3：售后顾问
	 */
	public static function allotMgrGt80($managerid,$type,$taskid=0,$delay=0){
		$event = 'task.allot.mgr.gt80';
		$param = array('manager_id'=>$managerid,'task_id'=>$taskid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}

	/**
	 * 商机需要分配交易顾问
	 * @param	int	$type	1：交易顾问，2：审核顾问，3：售后顾问
	 */
	public static function bschanceNeedAllotManager($taskid,$type,$delay=0){
		$event = 'bschance.need.allot';
		$param = array('task_id'=>$taskid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}

	
	/**
	 * 跟进标记被重置后调用[task_info.pub_type=0] 
	 * @param	int	$type	1：交易顾问，2：审核顾问，3：售后顾问
	 */
	public static function followTagReseted($taskid,$type,$delay=0){
		$event = 'task.follow.tag.reseted';
		$param = array('task_id'=>$taskid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 需求选标期已过
	 * @param	int	
	 */
	public static function taskSelectWorksExpired($taskid,$user_id,$endtime,$delay=0){
		$event = 'task.selectworks.expired';
		$param = array('task_id'=>$taskid,'user_id'=>$user_id, 'endtime'=>$endtime);
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 发票已创建
	 * @param	int	
	 */
	public static function invoiceCreated($invoice_id,$taskid,$type,$delay=0){
		$event = 'invoice.created';
		$param = array('task_id'=>$taskid,'invoice_id'=>$invoice_id, 'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}
	
	/**
	 * 需求已跟进完成：公开发布
	 * @param	int	
	 * @param	string	$type	可以是publish|giveup|followed|closed
	 */
	public static function taskFollowed($taskid,$type='publish',$delay=0){
		$event = 'task.followed';
		$param = array('task_id'=>$taskid,'type'=>$type);
		return self::throwTaskEvent($param,$event,$delay);
	}

	/**
	 * 服务商放弃选标
	 * @param $task_id
	 * @param $reason_type 1 未联系雇主 2 价格偏低
	 * @return bool
	 */
	public static function userGiveUpBid($task_id,$user_id,$reason_types = array()){

		$event = 'task.usergiveupbid';
		$param = array('task_id'=>$task_id,'user_id'=>$user_id,'reason_types'=>$reason_types);
		return self::throwTaskEvent($param,$event);
	}

	/**
	 * 首次开始派单
	 * @param $task_id
	 * @return bool
	 */
	public static function taskRecmdFirst($task_id){

		$event = 'task.recmd.first';
		$param = array('task_id'=>$task_id);
		return self::throwTaskEvent($param,$event);
	}

	/**
	 * 首次跟单未联系上雇主
	 * @param $task_id
	 * @param $user_id
	 */
	public static function firstFollowUnContact($task_id,$user_id){
		$event = 'task.firstfollowuncontact';
		$param = array('task_id'=>$task_id,'user_id'=>$user_id);
		return self::throwTaskEvent($param,$event);
	}


	public static function sellerRemindSelectWorkNotice($task_id,$user_id){
		$event = 'seller.remindselectworknotice';
		$param = array('task_id'=>$task_id,'user_id'=>$user_id);
		return self::throwTaskEvent($param,$event);
	}


	/**
	 * 公开发布
	 * @param $task_id
	 */
	public static function taskDirectpub($task_id){
		$event = 'task.directpub';
		$param = array('task_id'=>$task_id);
		return self::throwTaskEvent($param,$event);
	}

	/**
	 * 申请协助回复
	 * @param $task_id
	 * @param $user_id
	 * @return bool
	 */
	public static function applyAssistReplyed($task_id,$user_id){
		$event = 'task.assistreplyed';
		$param = array('task_id'=>$task_id,"user_id"=>$user_id);
		return self::throwTaskEvent($param,$event);
	}

	/**
	 * 服务商拒绝
	 * @param $task_id
	 * @param $reason_type
	 * @return bool
	 */
	public static function userRejectBid($task_id,$user_id,$reason_type ){
		$event = 'task.rejectbid';
		$param = array('task_id'=>$task_id,'user_id'=>$user_id,"reason_type"=>$reason_type);
		return self::throwTaskEvent($param,$event);
	}


	/**
	 * 临近稿件征集日期
	 * @param $task_id
	 * @return bool
	 */
	public static function taskUptoEnddate($task_id ){
		$event = 'task.uptoenddate';
		$param = array('task_id'=>$task_id);
		return self::throwTaskEvent($param,$event);
	}

	/**
	 * 通用的抛出需求事件
	 * @param 	array 	$params
	 * @param	strign	$event
	 * @param	int		$delay	小于等于0表示不延迟发送
	 * @throws Exception
	 * @return bool
	 */
	public static function throwTaskEvent(array $params,$event,$delay=0){
		try {
			if(empty($params)){
				throw new Exception('消息参数[params]不能为空');
			}
			if(empty($event)){
				throw new Exception('事件名称[event]不能为空');
			}
			
			self::initApi();
			$payapi = new EventSystemServiceClient(NULL);
			zbj_lib_ApiClient::build($payapi);

			//事件抛出时间
			$params['_throwtime'] = time();
			
			$eventDo = new EventDTO();
			$eventDo->event = $event;
			$eventDo->bodys = $params;
			if(is_int($delay) && $delay>0){
				$eventDo->delaytime = time() + $delay; // 延迟执行
			}

			$result = $payapi->throwEvent($eventDo);

			if($result->success !== true){
				throw new Exception($result->message);
			}
		} catch(Exception $e) {
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
				
	/**
	 * 通用的需求事件分发器
	 * @param 	array 	$params
	 * @param	string	$event
	 * @param	string	$listener
	 * @param	int		$delay	小于等于0表示不延迟发送
	 * @throws Exception
	 * @return bool
	 */
	public static function taskEventDispatcher(array $params,$event,$listener,$delay=0){
		try {
			if(!is_array($params) || empty($params)){
				throw new Exception('消息参数[params]错误');
			}
			if(!is_string($event) || empty($event)){
				throw new Exception('事件名称[event]错误');
			}
			if(!is_string($listener) || empty($listener)){
				throw new Exception('事件监听器[listener]错误');
			}
			
			self::initApi();
			$payapi = new EventSystemServiceClient(NULL);
			zbj_lib_ApiClient::build($payapi);
			
			$eventDo = new EventDTO();
			$eventDo->event = $event;
			$eventDo->bodys = $params;
			if(is_int($delay) && $delay>0){
				$eventDo->delaytime = time() + $delay; // 延迟执行
			}
			
			$listenerDo = new ListenerDTO();
			$listenerDo->callback = $listener;
			
			$result = $payapi->dispatcher($eventDo,$listenerDo);
			
			if($result->success !== true){
				throw new Exception($result->message);
			}
		} catch(Exception $e) {
			self::setError($e->getMessage(),$e->getCode());
			return false;
		}
		
		return true;
	}
		
	/**
	 * 获取接口调用失败的错误信息
	 * @return string
	 */
	public static function getError($type='msg'){
		return self::$_error[$type];
	}
	
	/**
	 * 获取接口调用失败的错误信息
	 * @return string
	 */
	public static function setError($msg='',$code=0){
		self::$_error['msg'] = $msg;
		self::$_error['code'] = $code;
	}
	
	
	/**
	 * 初始化接口
	 */
	private static function initApi(){
		zbj_lib_ApiClient::init(zbj_lib_Constant::ZBJAPI_APPID,zbj_lib_Constant::ZBJAPI_APPSECRET,8);
	}
}
