<?php

/**
 * 交易系统-跟进系统相关
 * @author lidacheng
 */
class consumer_service_follow extends components_baseservice{
	
	//当前业务主数据表
	protected $marter_table = 'zbj_model_mk_follow';
	
	public function __construct($id=0){
		parent::__construct();
		$this->setId($id);
	}
	
			
	/**
	 * 重置跟进系统数据
	 * @param	$data
	 * @throw Exception
	 * */
	public function reset($data){
		$data['task_id'] = intval($data['task_id']);
		if($data['task_id'] < 4800000) return true;
		
		$srvTask = new zbj_service_task($data['task_id']);
		$srvTask = $srvTask->init();
		$task = $srvTask->get('*');
		
		if(empty($task['task_id'])){
			throw new Exception("需求[{$data['task_id']}]不存在");
		}
		
		$taskinfo = $srvTask->get('task_info.*');
		$option = @unserialize($taskinfo['option']);
		if(!is_array($option) || empty($option)){
			throw new Exception('获取需求数据失败');
		}
		
		/*
		 *if($task['state']<=2 && $taskinfo['pub_type']>0 && 
		 *    !in_array($option['allot_filter'],array('special','previous'))){// 分配过，但不是手动分配的，更新
		 */
		if(1){// 分配过，但不是手动分配的，更新
			$srvTaskAlloter = new zbj_service_allot_taskallot();
			if($srvTaskAlloter->checkTaskNeedAllot($srvTask) !== true){ // 已经不满足分配规则了
				$needReset = true;
			}else if($srvTaskAlloter->checkTaskManagerNeedReset($srvTask) === true){ // 交易顾问需要重置
				$needReset = true;
			}
			if($needReset){ // 重置分配标识并重新分配交易顾问
				$reset = $this->resetTaskFollowState($srvTask);
			}
		}

		unset($srvTask,$data,$task,$srvTaskAlloter);
		
		return true;
	}
			
	/**
	 * 打跟进系统标记
	 * @param	$data
	 * @throw Exception
	 * */
	public function setFollowTag($data){
		$data['task_id'] = intval($data['task_id']);
		if($data['task_id'] < 4800000) return true;
		
		$srvTask = new zbj_service_task($data['task_id']);
		$srvTask = $srvTask->init();
		$task = $srvTask->get('*');
		$buymode = in_array((int)$task['mode'],array(11,12));
		
		if(empty($task['task_id'])){
			throw new Exception("需求[{$data['task_id']}]不存在");
		}
		if($task['manager_id']==0){
			throw new Exception("未分配交易顾问");
		}
		try{
			$this->_beginTransaction('mk');
			
			// 打标签
			if($this->setTaskFollowState($srvTask) !== true){
				throw new Exception("设置需求标签失败");
			}
			
			// 写跟进记录 ,日志
			$srvFollow = new zbj_service_taskfollow();
			$srvFollow->setTransaction(false);
			if($srvFollow->setFollow($data['task_id']) !== true){
				throw new Exception($srvFollow->getError());
			}
			
			$this->_commit('mk');	
		}catch(Exception $e){
			$this->_rollBack('mk');
			throw new Exception($e->getMessage());
		}
		
		return true;
	}
	
	
	
	
	
	
	/**
	 * 检查是否需要跟进
	 * @parma	array	$task
	 * @return bool
	 * @throw Exception
	 * */
	protected function checkNeedFollowCommon($task){
		// 查是否有交稿
		$tsignModel = zbj_model_api::get('zbj_model_mk_tasksign');
		$tasksign = $tsignModel->selectOne("task_id='{$task['task_id']}'",'user_id');
		
		// 是否购买了置顶
		$order = array();
		$odModel = zbj_model_api::get('zbj_model_fn_orderdata');
		$orderdata = $odModel->selectOne("product_pkid='{$task['task_id']}' and user_id='{$task['user_id']}' and ptype=22 and stype=77");
		if(is_numeric($orderdata['order_id'])){ // 付款？
			$orderModel = zbj_model_api::get('zbj_model_fn_order');
			$order = $orderModel->selectOne("order_id='{$orderdata['order_id']}' and ispay=1");
		}
		
		return !is_numeric($tasksign['user_id']) && !is_numeric($order['order_id']);
	}
	
	/**
	 * 检查并更新需求跟进状态
	 * @parma	object	$srvTask
	 * @return bool
	 * @throw Exception
	 * */
	protected function setTaskFollowState(&$srvTask){
		$task = $srvTask->get('*');
		$taskinfo = $srvTask->get('task_info.*');
				
		$option = @unserialize($taskinfo['option']);
		if(empty($task)){
			throw new Exception('获取需求数据失败');
		}
		if(empty($option)){
			throw new Exception('获取需求冗余数据失败');
		}
		
		if($task['manager_id']==0){
			throw new Exception("需求还未分配交易顾问");
		}
		
		$logs = array('打上特殊标记[9]');
		$buymode = in_array((int)$task['mode'],array(11,12));
		if($taskinfo['pub_type']!=9 && ($buymode || (!$buymode && $task['state']<3))){
			$uptask['cpo_ishide'] = 1;
			$uptask['audit_state'] = 4;
			$logs[] = '列表隐藏[1],限制查看[4]';
			
			// 发送审核通知
			if(empty($option['auditnoticed'])){
				$option['auditnoticed'] = $needNotice = 1;
			}
		}
		if($taskinfo['pub_type']!=9 && !$buymode && $task['state']>=3){
			$uptask['cpo_ishide'] = 0;
			$uptask['audit_state'] = 3;
			$logs[] = '隐藏[0],查看[3]';
		}
		
		$uptask['task_info.pub_type'] = 9;
		$option['followTaged'] = 1; // 打过特殊标记了
		$option['recmtBidOnly'] = 0;// 暂不启用
		$uptask['task_info.option'] = serialize($option);
		
		if($srvTask->set($uptask) === false){
			throw new Exception('设置待更新数据失败');
		}
		if($srvTask->save() === false){
			throw new Exception('重置需求跟进状态失败');
		}
		if($taskinfo['pub_type']!=9){
			$srvAllotLog = new zbj_service_taskallotlog();
			$srvAllotLog->addTaskAllotLog($task['task_id'],$logs);
		}
				
		if($uptask['cpo_ishide']==1){
			$taskModel = zbj_model_api::get('zbj_model_mk_task');
			$taskModel->upTaskSearch($task['task_id'],'U');
		}
		unset($srvTask,$taskModel,$option,$uptask,$logs);
		
		if($needNotice){
			$msgparam = array('task_id'=>$task['task_id'],'user_id'=>$task['user_id'],'sendtime'=>time());
			zbj_lib_Api::throwTaskEvent($msgparam,'task.followmode.9',300);
		}
		
		return true;
	}
	
	/**
	 * 重置需求跟进状态
	 * @parma	object	$srvTask
	 * @return bool
	 * @throw Exception
	 * */
	protected function resetTaskFollowState(&$srvTask){
		$option = @unserialize($srvTask->get('task_info.option'));
		if(empty($option)){
			throw new Exception('获取需求冗余数据失败');
		}
				
		$uptask['cpo_ishide'] = 0;
		$uptask['task_info.pub_type'] = 0;
		
		$option['recmtBidOnly'] = 0;
		$uptask['task_info.option'] = serialize($option);
							
		$srvTask->get('audit_state')>=4 && $uptask['audit_state'] = 3;
		
		try{
			$this->_beginTransaction('mk');
			
			if($srvTask->set($uptask) === false){
				throw new Exception('设置待更新数据失败');
			}
			if($srvTask->save() === false){
				throw new Exception('重置需求跟进状态失败');
			}
			
			$srvAllotLog = new zbj_service_taskallotlog();
			$srvAllotLog->addTaskAllotLog($srvTask->get('task_id'),array('特殊标记、查看状态和列表隐藏数据已重置[9]'));
			
			$taskModel = zbj_model_api::get('zbj_model_mk_task');
			$taskModel->upTaskSearch($srvTask->get('task_id'),'U');
			
			$throw = zbj_lib_Api::followTagReseted($srvTask->get('task_id'),1);
			if($throw !==  true){
				throw new Exception(zbj_lib_Api::getError());
			}
		
			$this->_commit('mk');	
		}catch(Exception $e){
			$this->_rollBack('mk');
			throw new Exception($e->getMessage());
		}
		
		unset($srvTask,$taskModel,$option,$uptask);
		
		return true;
	}
}
