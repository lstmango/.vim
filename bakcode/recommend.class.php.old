<?php

use com\zhubajie\task\dataobject\task\PubError;

use com\zhubajie\task\dataobject\taskdispatch\QueryOptionDTO;
use com\zhubajie\task\dataobject\taskdispatch\ReceivedTaskOptionDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendStatus;
use com\zhubajie\task\dataobject\taskrecommend\RecallResultCode;
use com\zhubajie\alg\interfaces\JdyServiceClient;
use com\zhubajie\alg\dataobject\UserStatusModel;
use com\zhubajie\user\dataobject\bid\BID_UNWORK_TYPE;
use com\zhubajie\task\dataobject\taskrecommend\RecommendParamDTO;
use com\zhubajie\task\dataobject\taskrecommend\RecommendCountParamDTO;
use com\zhubajie\task\dataobject\taskrecommend\TaskCountDO;
use com\zhubajie\task\dataobject\taskrecommend\GetConditionList;
use com\zhubajie\task\dataobject\taskrecommend\SendUserParamsDO;
use com\zhubajie\task\dataobject\taskrecommend\ConditionParamsDO;
use com\zhubajie\user\dataobject\user\BidStatusResultDTO;
use com\zhubajie\user\dataobject\user\BidStatusParamDTO;
use com\zhubajie\task\dataobject\common\OperateOption;
use com\zhubajie\membership\dataobject\User\MembershipRights;

use com\zhubajie\task\dataobject\taskrecommend\RHOptionDTO;

/**
 * 推荐任务、派单
 * @author lidacheng
 * @copyright lidacheng, 2015-01-28
 **/
class service_recommend extends service_abstract {

	protected $id;
	protected $marter_table     = 'model_mk_recommend';

    protected $taskSrv          = null;
    protected $recdopSrv        = null;
    protected $userSrv          = null;
    protected $task_id          = null;
    protected $user_id          = null;
    protected $works_limit_num  = 3;
    protected $is_invite        = false;

    //派单有效时间
    const RECOMMENDAVALIABLE    = 600;
    //系统派单 时间
    const RECOMMENTIME          = 10800;//3h
    //派单服务商上限
    const RECOMMENDUSERSNUM     = 3;
    //0佣金上线时间
    const FREETASKDATE          = "2015-06-12";

	public function __construct($id=0){
		parent::__construct($id);

        zbj_lib_ApiClient::init(APPID, SECRET ,30 , array("zbj_sdk","zbj_alg_sdk"));
	}

	/**
	 * 获取指定服务商收到的派单，支持分页
	 * @param	ReceivedTaskOptionDTO		$option
	 * @return object
	 * @throw Exception
	 */
	public function getUserReceivedTask(ReceivedTaskOptionDTO $option) {
		$queryopt = $option->option;
		
		$recmdModel = $this->model();
		
		$tableRecmd = $recmdModel->tableName();
		$tableTask = 'mk_task';
		
		$userid = intval($queryopt->user_id);
		$page = intval($option->page);
		$pagesize = intval($option->pagesize);
		$orderby = zbj_lib_BaseUtils::getStr(trim($option->orderby));
		
		empty($orderby) && $orderby = "{$tableRecmd}.senddate desc,{$tableRecmd}.id desc";
		
		if($userid<=0){
			throw new Exception('请指定正确的服务商ID号', PubError::PARAM_ERROR);
		}
		if($page<=0){
			throw new Exception('请指定正确的页码', PubError::PARAM_ERROR);
		}
		if($pagesize<1 || $pagesize>100){
			throw new Exception('每页显示数量只能为1-100条', PubError::PARAM_ERROR);
		}
		
		$actiontype = array();
		$types = (array)$queryopt->action_type;
		foreach($types as $type){
			$type = intval($type);
			$type > 0 && $actiontype[] = $type;
		}
		
		$condition = array("{$tableRecmd}.user_id='{$userid}'");
		if(strtotime($queryopt->senddate) > 0){
			$condition[] = "{$tableRecmd}.senddate='{$queryopt->senddate}'";
		}
		if(!empty($actiontype)){
			$condition[] = $tableRecmd.'.action_type in('.implode(',',$actiontype).')';
		}
		
		$recmdModel->setCount(true);
		$recmdModel->setPage($page);
		$recmdModel->setLimit($pagesize);
		
		$fields = "{$tableTask}.*,{$tableRecmd}.id as recmd_id,{$tableRecmd}.is_sys,{$tableRecmd}.action_type,{$tableRecmd}.operatetime,{$tableRecmd}.sendtime";
		$leftjoin = array($tableTask => "{$tableRecmd}.task_id={$tableTask}.task_id");
		$result = $recmdModel->select($condition,$fields,'','order by '.$orderby,$leftjoin);
	
		return $result;
	}
	
	
	/**
	 * 威客抢单行为更新[不带事务]
	 * @param 	object	$srvTask
	 * @param	int		$user_id
	 * @param 	int 	$actionType
	 * @param 	array	$params
	 * @return bool
	 * @throw Exception
	 */
	public function updateAction(&$srvTask,$user_id,$actionType,array $params){
		try{
			$user_id = intval($user_id);
			$actionType = intval($actionType);
			if($user_id <= 0){
				throw new Exception('请指定服务商ID号',-1);
			}
			if($actionType <= 0){
				throw new Exception('请指定更新的类型',-1);
			}
			
			$srvTask && $taskInfo = $srvTask->get('*');
			if(empty($taskInfo['task_id'])){
				throw new Exception('获取需求数据失败',-1);
			}
			
			// 更新参数
			$updata = array(
				'action_type'	=> $actionType,
				'operatetime'	=> $this->_time,
				'operatedate'	=> $this->_ymd,
                'works_source'  =>$params['works_source']
            );

			if($actionType == 2){// 抢标
				$updata['works_id'] = intval($params['works_id']);
				$updata['works_type'] 	= intval($params['works_type']);
			}
			if($params['action_notes']){
				$updata['action_notes'] = zbj_lib_BaseUtils::getStr($params['action_notes']);
			}
			
			if((isset($updata['works_id']) && $updata['works_id'] <= 0) || 
				(isset($updata['works_type']) && $updata['works_type']<=0)){
				throw new Exception('需要更新的数据异常',-1);
			}
			
			$upcondition = array(
				'task_id'	=> $taskInfo['task_id'],
				'user_id'	=> $user_id,
			);
			
			//派单记录
			$recmdModel = $this->model();
			$recmdModel->setDbEntry();
	        $recmd = $recmdModel->selectOne($upcondition);
			if(empty($recmd['id'])){
				return true; // 未派单
			}

            //系统放弃
            if($actionType == RecommendStatus::SYSTYM_ABANDON && $recmd['action_type']!=1){
                $this->setError(0,"系统放弃失败，派单当前状态不支持！");
                return false;
            }

			if(($recmdModel->update($upcondition,$updata)) === false){
				throw new Exception('更新派单明细失败 '.$recmdModel->getError(), -1);
			}

            //有服务商淘汰，开启 自动派单
            if(in_array($actionType,array(5,6,7,8,9,11))){
                $recdopSrv = new service_recommend_option($taskInfo['task_id']);
                if( false === $recdopSrv->changeEnableState(true)){
                    throw new Exception($recmdModel->getError(), -1);
                }
            }

	        $recmdAction = array();
	        $recmdAction['task_id'] 	= $taskInfo['task_id'];
	        $recmdAction['task2_id'] 	= $recmd['task2_id'];
	        $recmdAction['user_id'] 	= $user_id;
	        $recmdAction['buyer_id'] 	= $taskInfo['user_id'];
	        $recmdAction['is_sys'] 		= $recmd['is_sys'];
	        $recmdAction['category_id'] = $taskInfo['category_id'];
	        $recmdAction['amount'] 		= $taskInfo['amount'];
	        $recmdAction['manage_id'] 	= $recmd['manager_id']?$recmd['manager_id']:$taskInfo['manager_id'];
			
			$recmdActionModel = new model_mb_recommendaction();
            //如果存在服务商行为记录
            if($recmdActionInfo = $recmdActionModel->oneActionTypeLog($user_id,$recmdAction['task_id'],$actionType)){
                $recmdActionModel->setPkid($recmdActionInfo['action_id']);
                if( false === $recmdActionModel->updateLog()){
                    throw new Exception($recmdActionModel->getError());
                }
            }else{
                //新增用户行为记录
                if($recmdActionModel->createLog($recmdAction,$actionType) === false){
                    throw new Exception('写入抢单动作信息失败 '.$recmdActionModel->getError());
                }
                //服务商派单抢单数据统计
                //派单期间统计
                if($recmd['is_sys'] >= 1 && in_array($actionType,array(1,2,6,8))){
                    $recmdInfoSrv = new service_recommend_info();
                    if($recmd['action_type']==RecommendStatus::RECOMMEND &&
                        false === $recmdInfoSrv->count($user_id,$taskInfo['amount'],$actionType,$taskInfo['category1id'],$this->is_invite)){
                        throw new Exception('维护用户抢单数据失败'.$recmdInfoSrv->getError(), -1);
                    }elseif($actionType ==RecommendStatus::USER_ACCEPT &&
                        in_array($recmd['action_type'],array(RecommendStatus::USER_REJECT,RecommendStatus::SYSTYM_ABANDON))){
                        //需求公开后 派单服务商再次抢标
                        if(false === $recmdInfoSrv->reCount($user_id,$recmd['senddate'],$recmd['action_type'])){
                            throw new Exception('维护用户抢单数据失败'.$recmdInfoSrv->getError(), -1);
                        }

                    }
                }
            }

            if(in_array($actionType,array(2,6,10))){
                $recmdInfoModel = new model_mb_recommend_info($user_id);
                $accept_num = $recmdInfoModel->getData('accept_num');
                $reject_num = $recmdInfoModel->getData('reject_num');

                switch($actionType){
                    case RecommendStatus::BD_ABANDON:
                    case RecommendStatus::USER_ACCEPT:
                        $accept_num += 1;
                        $recmdInfoModel->set('accept_num',$accept_num);
                        break;
                    case RecommendStatus::USER_REJECT:
                        $reject_num += 1;
                        $recmdInfoModel->set('reject_num',$reject_num);
                        break;
                    default:{}
                }
                if($recmdInfoModel->save() === false){
                	throw new Exception('维护用户抢单数据失败'.$recmdInfoModel->getError(), -1);
                }
                if($this->updateResponse($user_id) === false){
                	throw new Exception('更新威客响应率失败'.$this->getError(), -1);
                }
            }
		
		}catch(Exception $e){
			$this->setError(RecallResultCode::SYSTEM_ERROR, $e->getMessage());
			return false;
		}
		
		return true;
	}
	
	/**
	 * 更新威客最近七天派单响应率
	 * @param int user_id
	 * @return int
	 * @author songpengbo
	 */
	public function updateResponse($user_id){

		$userId=intval($user_id);
		$model = new model_mk_recommend_info();
		$time = date("Y-m-d",strtotime('-7 day'));
		$condition['user_id']=$userId;
		$condition[]="date >='{$time}'";
        $fields = 'sum(recommend_num) as totle, sum(undeal_num) as undeal  ';
        if(false === ($info =$model->selectOne($condition,$fields,"","","",array('type'=>'main')))){
            return false;
        }

        //7天派单响应率
        $response_rate = 0;
        $total_num = $info['totle'];
        $undeal_num = $info['undeal'];
        if($total_num < 5){
            //派单总数小于5 响应率100
            $response_rate =100;
        }else{
            $response_rate=intval((($total_num-$undeal_num)*100)/$total_num);
        }

		$mb_recmd_info=new model_mb_recommend_info();
		$result=$mb_recmd_info->update(array('user_id'=>$userId),array('response_rate'=>$response_rate));

        $params['user_id']=$userId;
        $params['type']=BID_UNWORK_TYPE::RESPONSE_RATE;
        $params['response_rate']=$response_rate;
        $event="task.responsechanged";
        if( $result && (lib_Api::throwTaskEvent($params, $event)===false)){
            return false;
        }

		return $result;
	}
	/**
	 * 创建推荐表
	 * @param int task_id
	 * @return array user
	 * @author songpengbo
	 */
	public function create($task_info,$user,$is_sys,$manage){

		try{

            $task_id    = intval($task_info['task_id']);
            $buyer_id   = $task_info['user_id'];

            if(!$buyer_id){
                throw new Exception("未找到对应任务信息",-2);
            }

            //派单选项表更新操作
            if(!$this->is_invite && false === $this->recdopSrv->recmd()){
                throw new Exception("派单选项表:".$this->recdopSrv->getError());
            }

            //没有服务商
            if(empty($user)){
                return true;
            }
            //交易顾问信息
            $manage_id=intval($manage->manager_id);
            $manage_name=zbj_lib_BaseUtils::getStr($manage->manager_name)?:"";

            $recmdModel = $this->model();
            $recmdListModel = new model_mk_recommend_list();
            $recmdListSrv = new service_recommend_list($task_id);

            //验证是否派过单
            if(true === $recmdListSrv->isRecommend($user)){
                throw new Exception("已派单给该服务商！",-5);
            }

            $_r_list = array();
            foreach ($user as $k=>$v){

                $item[$k]['task_id']=$task_id;
                $item[$k]['user_id']=intval($v);
                $item[$k]['buyer_id']=$buyer_id;
                $item[$k]['is_sys']=$is_sys;
                $item[$k]['action_type']=1;
                $item[$k]['action_notes']='';
                $item[$k]['amount']=$task_info['amount'];
                $item[$k]['manager_id']=$manage_id;
                $item[$k]['manager_name']=$manage_name;
                $item[$k]['operatetime']=$this->_time;
                $item[$k]['operatedate']=$this->_ymd;
                $item[$k]['sendtime']=$this->_time;
                $item[$k]['senddate']=$this->_ymd;

                $_r_list[] = array(
                    'task_id'=>$task_id,
                    'user_id'=>intval($v),
                    'type'   =>$is_sys,
                    'time'   =>$this->_time,
                    'reason_type'=>intval($manage->options['reason_type']),
                    'reason_other'=>(string)$manage->options['reason_other'],
                );
            }


            //统计 历史派单 数据
            $recmdInfoSrv = new service_recommend_info();
            if( false === $recmdInfoSrv->multiCount($item,$task_info['category1id'])){
                throw new Exception($recmdInfoSrv->getError());
            }

            //插入派单记录表
            if($recmdModel->addMultiple($item) === false || $recmdListModel->addMultiple($_r_list)===false){
                throw new Exception('写入威客推荐表失败'.$recmdModel->getError(),-1);
            }

            //服务商派单统计
            foreach ($user as $k=>$v){
                $user_id=intval($v);
                $mb_recmd_info= zbj_model_api::get("model_mb_recommend_info",$user_id);
                $userId=$mb_recmd_info->getData('user_id');
                if(!$userId){
                    $mb_recmd_info->setPkid(0);
                    $items['user_id']=$user_id;
                    $items['recommend_num']=1;
                    $items['today_num']=1;

                    if($mb_recmd_info->insert($items) === false) throw new Exception('写入抢单信息失败'.$mb_recmd_info->getError(),-1);
                }else{
                    $today_num=$mb_recmd_info->getData('today_num');
                    $recommend_num=$mb_recmd_info->getData('recommend_num');
                    $recommend_num+=1;
                    $today_num+=1;
                    $mb_recmd_info->set('recommend_num',$recommend_num);
                    $mb_recmd_info->set('today_num',$today_num);

                    if($mb_recmd_info->save()=== false) throw new Exception('更新抢单信息失败'.$mb_recmd_info->getError(),-1);
                }
            }

			return true;
		}Catch (Exception $e){
			$this->setError($e->getCode(), $e->getMessage());
			return false;
		}
	}
	/**
	 * 抢单
	 * @param int task_id
	 * @param list<UserRecallDO> data
	 * @return bool
	 * @author songpengbo
	 * @throw Exception
	 */
	public function recall($task_id,$type,$user,$operateOption =array()){

        $type          = intval($type);
        $works_ids     = array();
        $this->task_id = intval($task_id);

        try{

			$this->_beginTransaction('mk');
			$this->_beginTransaction('mb');
            $this->_beginTransaction('fn');

            $srvWork = new service_works();
            $srvWorkStep = new service_worktaskstep();
            $srvWork->setTransaction(false);
            $srvWorkStep->setTransaction(false);
            $this->userSrv = new service_user();
            $condition = array();

            $this->taskSrv = service_task_factory::build($this->task_id);
            $this->taskSrv->setLock();
            $this->setLock();

            //验证需求状态
            if($this->taskSrv->get("state") >= 3 ){
                throw new Exception("该订单已选标",RecallResultCode::HAS_CHOOSE);
            }
            if($this->taskSrv->get("mode") != 13 ){
                throw new Exception("该需求模式不允许投标！",RecallResultCode::SYSTEM_ERROR);
            }
            if($this->taskSrv->get('endtime') && $this->taskSrv->get('endtime') < time()){
                throw new Exception('对不起，投标期已经过了！',RecallResultCode::SYSTEM_ERROR);
            }
            //投标需要条件
            $recmd_status = $this->taskSrv->get("task_opis.recmd_status") ;//1标识派单中
            $special_type = $this->taskSrv->get("task_opis.special_type");//默认1为网建专场
            //需求的有效稿件数量
            $this->works_limit_num = (int)$this->taskSrv->taskWorksLimitNumber();
            $this->works_limit_num <= 0 && $this->works_limit_num = $this->taskSrv->get("task_extends.recmd_limit_num");
            //传入参数
            foreach ($user as $v){

				$status = intval($v->status);
				$user_id = intval($v->user_id);
				$user_ids[]=$user_id;

                $this->userSrv->setId($user_id);


                //避免重复抢单
                //检测需求投标空额
                $condition['task_id']   = $this->task_id;
                $recmds = $this->model()->select($condition,'*','','','',array('lock'=>'FOR UPDATE'))->items;
                $recmd      = array();//该服务商投标记录
                $recmd_count= 0;      //已有有效稿件数
                if(!empty($recmds)){
                    foreach($recmds as $_recmd){
                        if(in_array($_recmd['action_type'],array(2,3,4))){
                            ++$recmd_count;
                        }
                        $_recmd['user_id'] == $user_id  && $recmd = $_recmd;
                    }
                }

                //定向邀请服务商抢标
                //未派单需求三小时内不允许定向派单服务商抢标
                //定向邀请或是定向派单
                $this->is_invite = ($v->is_invite || $recmd['is_sys']==3)?:false;
                if($this->is_invite && $recmd_status==0 && $this->taskSrv->get("task_extends.public_release_time")> time()-60*60*3){
                    throw new Exception("该时间不允许定向派单服务商抢标",RecallResultCode::SYSTEM_ERROR);
                }

                //派单期间 不允许非派单服务商抢标
                if(empty($recmd) && $recmd_status == 1){
                    throw new Exception('对不起，当前状态只允许派单服务商抢单！',RecallResultCode::PARAM_ERROR);
                }

                //存在派单抢标记录
                if($recmd){

                    if( $recmd_status == 1 && in_array($recmd['action_type'],array(RecommendStatus::RECOMMEND,RecommendStatus::SYSTYM_ABANDON)) && $recmd['sendtime'] <= time()-60*10){
                        $error = sprintf("您于%s未响应这条官方派单，目前无法再参与投标！",date("Y-m-d H:i:s",$recmd['sendtime']+10*60));
                        throw new Exception($error,RecallResultCode::PARAM_ERROR);
                    }elseif($recmd_status == 1 && $recmd['action_type'] == RecommendStatus::USER_REJECT){
                        $error = sprintf("您于%s拒绝过这条官方派单，目前无法再参与投标！",date("Y-m-d H:i:s",$recmd['operatetime']));
                        throw new Exception($error,RecallResultCode::PARAM_ERROR);
                    }elseif(!in_array($recmd['action_type'],array(RecommendStatus::RECOMMEND,RecommendStatus::SYSTYM_ABANDON,RecommendStatus::USER_REJECT))){
                        $error = $recmd['is_sys'] >0 ?"您已经投过标了，请在历史派单中查看，并尽快联系雇主！":"您已经投过标了，请尽快联系雇主！";
                        throw new Exception($error,RecallResultCode::PARAM_ERROR);
                    }

                }

                //投标已满提示
                if($recmd_count>=$this->works_limit_num){
                    throw new Exception("抢标已满",RecallResultCode::HAS_FULL);
                }

                //满足投标条件
                if( false === $this->checkIsCanBid($user_id,$this->is_invite)){
                    throw new Exception("您当前不满足投标条件：".$this->getError(),$this->getError("code"));
                }
                //服务商会员特权检查
                if( false === $this->checkMemberShipLeftRight($user_id,$special_type,$this->is_invite,$recmd)){
                    throw new Exception($this->getError(),$this->getError("code"));
                }

                //需求公开，服务商投标
                if(empty($recmd)){
                    if( false === $this->createRecommend($this->taskSrv->get("*"),$user_id,$special_type)){
                        return false;
					}
				}

                /*抢单修改*/
                $works = array();
                $works['user_id'] = $user_id;
                $works['nickname'] = zbj_lib_BaseUtils::getStr($v->nickname);
                $works['task_id'] = $task_id;
                $works['content'] = $special_type==1?"网建专场投标":"0佣金投标";
                $works['fromsite'] = 3;
                $works['works_source'] = $type==1?0:4;
                $works['ip'] = zbj_lib_BaseUtils::getStr($v->ip);

                //交稿来源统计
                $works_from = array(
                    'pub_site'=>(int)$operateOption[OperateOption::OPERATOR_FROM]?:1,
                    'pub_product'=>$special_type==1?1:2,//1 网建专场 2 0佣金专场
                );
                $work_id = $srvWork->create($works, array(),$works_from);
                if(!$work_id){
                    throw new Exception('创建稿件失败，错误原因：'.$srvWork->getError(),-6);
                }

                //工作台
                $worktask = array();
                $worktask['done']       = 0 ;
                $worktask['dotype']     = 10 ;
                $worktask['roletype']   = 0 ;
                $worktask['user_id']    = $user_id ;
                $worktask['task_id'] = $task_id ;
                $worktask['works_id'] = $work_id ;
                $worktask['expiretime'] = time()+1200 ;

                $pkid = $srvWorkStep->create($worktask);
                if($pkid <= 0){
                    throw new Exception('创建待办事项失败',-7);
                }

                $upparam = array(
					'action_notes'	=> zbj_lib_BaseUtils::getStr($v->notes),
					'works_id'		=> $work_id,
					'works_source'	=> $type==2?2:1, // 0未抢单，1网站抢单，2移动端抢单宝
					'works_type'	=> $this->is_invite?3:($recmd['id']>0?1:2), // 0未抢单，1派单后抢标，2未派单直接抢标 3 定向邀请服务商抢标
				);

                if($this->updateAction($this->taskSrv, $user_id, $status, $upparam) === false){
                    throw new Exception("更新威客抢单行为失败".$this->getError(),RecallResultCode::SYSTEM_ERROR);
                }

                // 系统派单 会员额度不减少
                if(empty($recmd) || $recmd['is_sys'] ==0 ){

                    if(!$this->userSrv->useMemberShipRight(MembershipRights::BID_NUM,1,$task_id) ){
                        throw new Exception("会员额度同步失败!!".$this->userSrv->getError());
                    }
                }

                //服务商抢标
                $user_recall['user_id'] = $user_id;
                $user_recall['task_id'] = $task_id;
                $event="task.recmd.recall";
                if(lib_Api::throwTaskEvent($user_recall, $event)===false){
                    throw new Exception("服务器发生了异常",RecallResultCode::SYSTEM_ERROR);
                }

                $works_ids[]=$work_id;

            }

			$this->_commit('mk');
			$this->_commit('mb');
			$this->_commit('fn');
			return $works_ids;

		}Catch (Exception $e){
			$this->setError($e->getCode(), $e->getMessage());
			$this->_rollBack('mk');
			$this->_rollBack('mb');
			$this->_rollBack('fn');
			return false;
		}
	}

    /**
     * 服务商拒绝抢单
     * @param $task_id
     * @param $users
     * @return array|bool
     * @throws Exception
     */
    public function recdUserReject($task_id , $users ,$actionType,$operate_option=array())
    {

        $task_id    =   intval( $task_id );
        $user_ids = $works_ids  =   array();
        $this->checkParam( $task_id , $users );

        try{

            $this->_beginTransaction('mk');
            $this->_beginTransaction('mb');

            $srvWorkTask = service_task_factory::build($task_id);
            foreach ($users as $v){
                $status     =   intval($v->status);
                $user_id    =   intval($v->user_id);
                $user_ids[] =   $user_id;

                //判断威客抢单状态
                if( $status != RecommendStatus::USER_REJECT ){
                    throw new Exception("不支持的威客抢单状态",RecallResultCode::PARAM_ERROR);
                }

                if($recmd=$this->model()->selectOne(array('task_id'=>$task_id,'user_id'=>$user_id))){
                    if( $recmd['action_type'] != RecommendStatus::RECOMMEND ){
                        throw new Exception("您已经拒绝过了，您可以在历史派单中查看",RecallResultCode::PARAM_ERROR);
                    }
                }else{
                    throw new Exception("未找到对应派单记录",RecallResultCode::PARAM_ERROR);
                }

                $action_notes=$v->notes?zbj_lib_BaseUtils::getStr($v->notes):'';

                $upparam = array(
                    'action_notes'=>$action_notes,
                    'works_source'=>(int)$operate_option[OperateOption::OPERATOR_FROM]==3?2:1,
                );

                if($this->updateAction($srvWorkTask, $user_id, $status, $upparam) === false){
                    throw new Exception("更新威客抢单行为失败".$this->getError(),RecallResultCode::SYSTEM_ERROR);
                }

                //服务商拒绝抢标
                $user_recall['user_id'] = $user_id;
                $user_recall['task_id'] = $task_id;
                $event="task.recmd.reject";
                if(lib_Api::throwTaskEvent($user_recall, $event)===false){
                    throw new Exception("服务器发生了异常",RecallResultCode::SYSTEM_ERROR);
                }

            }


            $this->_commit('mk');
            $this->_commit('mb');
            return $works_ids;

        }Catch (Exception $e){
            $this->_rollBack('mk');
            $this->_rollBack('mb');
            throw new Exception($e->getMessage(),$e->getCode());
        }
    }

    /**
     * 更新 所派需求单的行为状态
     * @param $task_id
     * @param $users
     * @param $actionType
     * @return mixed
     * @throws Exception
     */
    public function baseUpdateActionType( $task_id , $users ,$actionType=0,$operate_option=array())
    {
        $task_id    =   intval( $task_id );
        $actionType =   intval( $actionType );
        $this->checkParam( $task_id , $users );

        try{
            $this->_beginTransaction('mk');
            $this->_beginTransaction('mb');
            $userSrv = new service_user();

            $srvWorkTask = service_task_factory::build($task_id);
            if(!$srvWorkTask->get("task_id")){
                throw new Exception("未找到对应任务信息",RecallResultCode::PARAM_ERROR);
            }

            foreach ($users as $v){
                $status     =   $actionType?$actionType:intval($v->status);
                $user_id    =   intval($v->user_id);

                $action_notes=$v->notes?zbj_lib_BaseUtils::getStr($v->notes):'';

                //检验是否通知引擎暂时优先执行
                $userSrv->setId($user_id);
                if(!$this->isNotifiedJdyGrabOrderByActionType( $task_id , $user_id ,$status ) && !$userSrv->notifyJdyGrabOrder())
                {
                    //通知搜索引擎失败
                    throw new Exception($userSrv->getError());
                }

                $upparam = array('action_notes'	=> $action_notes);
                if($this->updateAction($srvWorkTask, $user_id, $status, $upparam) === false){
                    throw new Exception("更新抢单行为失败 ".$this->getError(),RecallResultCode::SYSTEM_ERROR);
                }
                //系统超时推送webim
                if($actionType == RecommendStatus::SYSTYM_ABANDON){
                    $param['user_id'] = $user_id;
                    $param['task_id'] = $task_id;
                    $event="task.recmd.systymabandon";
                    if(lib_Api::throwTaskEvent($param, $event)===false){
                        throw new Exception("服务器发生了异常",RecallResultCode::SYSTEM_ERROR);
                    }
                }

            }

            $this->_commit('mk');
            $this->_commit('mb');

        }catch (Exception $e){

            $this->_rollBack('mk');
            $this->_rollBack('mb');
            throw new Exception($e->getMessage(),$e->getCode());
        }

    }

    /**
     * 参数验证
     */
    private function checkParam( $task_id  , $user ){

        if( $task_id < 0  )
        {
            throw new Exception("请指定正确的任务ID号",RecallResultCode::PARAM_ERROR);
        }

        if(empty($user))
        {
            throw new Exception("请传入威客抢单数据",RecallResultCode::PARAM_ERROR);
        }

        return false;

    }

    /**
     * 更新派单记录的状态接口
     * @author merlin
     * @date 2015-04-09
     * @param $task_id
     * @param $actionType
     * @param $users
     * @return bool
     * @throws Exception
     */
    public function updateRecdActionType( $task_id,$actionType,$users,$operate_option=array() ){

        if( $task_id < 0 || empty($actionType) || empty($users)  ){
            throw new Exception("传入参数不全面！",RecallResultCode::PARAM_ERROR);
        }
        $method = "";

        switch($actionType){

            case RecommendStatus::USER_REJECT ://威客拒绝抢单
            {
                $method = "recdUserReject";
                break;
            }
            case RecommendStatus::BD_ABANDON :{}
            case RecommendStatus::BUYER_CHOOSE :{}
            case RecommendStatus::TRADE_SUCCESS :{}
            case RecommendStatus::BUYER_REJECT :{
            }
            case RecommendStatus::KF_REJECT :{
            }
            case RecommendStatus::SYSTYM_ABANDON :{}
            case RecommendStatus::QB_ABANDON :{}
            default:{
                $method = "baseUpdateActionType";
            }
        }

        try{
            if(!empty($method) && method_exists($this,$method)){
                return $this->$method( $task_id , $users ,$actionType,$operate_option);
            }else{
                throw new Exception("更新状态目前不支持！");
            }
        }catch (Exception $e) {
            throw new Exception($e->getMessage(),$e->getCode());
        }

    }


    public function checkUserIs3MonthVindicate($user_id){

        try {

            $instance = new com\zhubajie\user\interfaces\SecurityServiceClient(NULL);
            zbj_lib_ApiClient::build($instance);
            $param = new com\zhubajie\user\dataobject\servicesecurity\EmployerGuaranteeParamDO;
            $param->user_id = $user_id;
            $param->iscache = false;
            $param->isself = false;
            $result = $instance->getSecurityUserByUserId($param);

            if($result->success == false){
                throw new Exception($result->message);
            }

            if( $result->employerGuaranteeDO->issecurityuser !=1 || empty($result->employerGuaranteeDO->xiaobao_4))
            {
                throw new Exception("未加入三个月维护保障！");
            }

        }catch( Exception $e ) {

            $this->setError($e->getCode(),$e->getMessage());
            return false;

        }

        return true;

    }

    /**
     * 是否已通知过 搜索引擎
     * @param $action_type 用户行为 1被推荐 2参与 3中标 4成功交易 5买家拒绝 6威客拒绝 7交易客服拒绝 8系统放弃 9抢标后放弃 10被动放弃
     * @return bool
     */
    public function isNotifiedJdyGrabOrderByActionType($task_id , $user_id ,$actionType)
    {

        if(!in_array( $actionType , array(2,6,8,10))  )
        {
            return true;
        }

        $recmd=$this->model()->selectOne(array('task_id'=>$task_id,'user_id'=>$user_id));

        if( $recmd['action_type'] != RecommendStatus::RECOMMEND || $recmd['is_sys'] ==0  )
        {
            return true;
        }

        return false;

    }

    /**
     * 单个需求派单
     * @param $task_id
     */
    public function sendRecd($task_id,SendUserParamsDO $manage,$auto = false){

		$task_id            = intval($task_id);

        $this->taskSrv      = service_task_factory::build($task_id);
        $this->recdopSrv    = new service_recommend_option($task_id);

        //派单类型
        $is_sys = $type = $manage->type;
        $this->is_invite = $is_sys==3 ? true : false ;

        //检测是否可以派单
        if(false === $this->checkCanRecd($auto)){

            //非定向派单处理
            if(!$this->is_invite && $this->recdopSrv->stopRecmd($this->getError())===false){
                throw new Exception("更新派单状态失败:".$this->recdopSrv->getError());
            }

            throw new Exception($this->getError());

        }




        try{

            $this->_beginTransaction('mk');
            $this->_beginTransaction('mb');
            //服务商id
            //定向派单才存在服务商id
            $wks = $manage->seller_user?array_unique((array)$manage->seller_user):array();

            //还需派单服务商数量
            $num = count($wks);
//            非定向派单 所需服务商数量
            if(!$this->is_invite){
                //需求派单服务商上限
                $limit_num = $this->taskSrv->get("task_extends.recmd_limit_num");
                $v_num = $this->validNum($task_id);
                $limit_num = intval($limit_num) > 0 ? $limit_num : 1 ;
                $num = $limit_num - $v_num > 0 ? 1 : 0 ;

                if($limit_num <= $v_num){
                    //自动派单开关关闭
                    $this->recdopSrv->changeEnableState(false);
                }

            }

            //未指定服务商id，则获取系统推荐服务商
            if(empty($wks) && false === ($wks = $this->getRecommeduserList($task_id,$this->taskSrv->get('user_id')) )){

                throw new Exception("获取系统推荐服务商失败：".$this->getError(),-2);
            }

            $total = count($wks);
            $wks   = $num > 0 && $total > $num ? array_slice($wks,0,$num) :$wks ;

            //派单记录操作
            if($this->create($this->taskSrv->get(), $wks,$is_sys,$manage)=== false){
                throw new Exception("派单失败:".$this->getError(),-4);
            }

            //事件通知
            $evtparam = array(
                'task_id'	=> $task_id,
                'user_ids'	=> serialize((array)$wks),
                'is_sys'	=> $is_sys,
                'manager_id'	=> $manage->manager_id,
                'manager_name'	=> $manage->manager_name,
            );

            //系统派单
            if(in_array($is_sys,array(1,2))){
                lib_Api::throwTaskEvent($evtparam, 'task.recmd.operated');

                if(!empty($wks) && $total>0){

                    $api_jdy = new com\zhubajie\alg\interfaces\JdyServiceClient(null);
                    zbj_lib_ApiClient::build($api_jdy);
                    $notice=$api_jdy->recommendNotice($wks);
                    if(!$notice->success) throw new Exception("派单通知搜索引擎失败",-5);

                    if(lib_Api::throwTaskEvent($evtparam, 'task.dispatched')===false){
                        throw new Exception("派单通知失败[1]",-5);
                    }
                }
            }elseif($is_sys==3){
                lib_Api::throwTaskEvent($evtparam, 'task.recmd.invite');
            }


            $this->_commit('mk');
            $this->_commit('mb');

            return count($wks);

        }catch (Exception $e){
            $this->_rollBack('mk');
            $this->_rollBack('mb');
            $this->setError($e->getCode(),$e->getMessage());
            return false;
        }
    }

    /**
     * 是否可以派单
     * @param bool $auto true :系统派单 false:人工派单
     * @return bool
     */
    public function checkCanRecd($auto = false){

        try {

            if(!$this->taskSrv->get("task_id")){
                throw new Exception("该需求不存在！");
            }
            if($this->taskSrv->get("endtime") < time()){
                throw new Exception("该需求投标期已过！");
            }

            if($this->taskSrv->get("mode") != 13){
                throw new Exception("该需求不是招标需求！");
            }

            if($this->taskSrv->get("state") >=3){
                throw new Exception("该需求已选稿！");
            }

            if($this->taskSrv->get("open_state")){
                throw new Exception("该需求已关闭！");
            }

            if($this->taskSrv->get("isfrozen")){
                throw new Exception("该需求已被冻结！");
            }

            //系统派单
            $auto && !$this->recdopSrv && $this->recdopSrv = new service_recommend_option($this->taskSrv->get("task_id"));

            if($auto && $this->taskSrv->get('task_opis.recmd_status') != 1){
				throw new Exception("非派单中需求，不需派单检测",-1);
			}

			if($auto && !$this->recdopSrv->get("task_id")){
				throw new Exception("未找到该需求派单记录，无需派单检测！");
			}

            if($auto && $this->recdopSrv->get("is_stop") == 1){
                throw new Exception("该需求已停止派单！");
            }

            return  true;
        } catch (Exception $e) {
            $this->setError(0,$e->getMessage());
            return false;
        }

    }
    /**
     * //TODO merlin 未处理
     * 获取抢单条件
     * @param $task_id
     * @param $search_type
     * @param int $type
     * @return GetConditionList
     */
    public function getCondition($task_id,$search_type,$type=2) {

        $result=new GetConditionList();
        try{
            $type=intval($type);
            $search_type=intval($search_type);
            if(!in_array($type, array(1,2))) throw new Exception("类型参数错误",-1);
            if(!in_array($search_type, array(1,2,3))) throw new Exception("搜索参数错误",-1);
            $s_recmd_con=new service_recommend_conditions();
            $results=$s_recmd_con->getConList($task_id,$search_type);
            if($results === false){
                throw new Exception("获取抢单条件失败".$s_recmd_con->getError(),-2);
            }
            if(!empty($results->items)){
                $val = array();
                $category_id=intval($results->items[0]['category_id']);
                $result->category_id=$category_id;
                foreach($results->items as $value)
                {
                    if (isset($val[$value['ext_id']]))
                    {
                        array_push($val[$value['ext_id']], $value);
                    }
                    else
                    {
                        $val[$value['ext_id']][0] = $value;
                    }
                }

                $values = array();

                foreach ($val as $k=>$v){
                    if($k==0){
                        foreach ($v as $g){
                            $item=new ConditionParamsDO();
                            $item->type=1;
                            $item->key=$g['ext_name'];
                            $item->value=$g['val_name'];
                            $result->data[]=$item;
                        }
                    }else{
                        foreach ($v as $g){
                            if($type === 1){
                                $values[$k].=$g['val_id'].'-'.$g['val_name'].'|';
                            }elseif($type === 2){
                                $values[$k].=$g['val_name'].',';
                            }
                        }
                    }
                }
                foreach ($values as $key=>$vs){
                    $item=new ConditionParamsDO();
                    $item->type=0;
                    $item->key=$key;
                    if($type === 1){
                        $item->value=rtrim($vs,'|');
                    }elseif($type === 2){
                        $item->value=rtrim($vs,',');
                    }
                    $result->data[]=$item;
                }
            }else{
                throw new Exception("未找到对应抢单条件",-3);
            }

            $result->success= true;
        }Catch (Exception $e){
            $result->success= false;
            $result->code=$e->getCode();
            $result->message=$e->getMessage();
        }
        return $result;
    }

    /**
     * 获取单个需求，还需派单数量
     * @param $task_id
     * @return int
     */
    public function getNeedRecdUserNum($task_id){

        if(!$task_id){
            return 0;
        }

        $num = 0;
        $condition = array(
            'task_id'       =>$task_id,
            'action_type < 3',//1 和 2 符合条件
            'is_sys in(0,1,2)'
        );

        if($info = $this->model()->selectOne($condition," count(1) as num ")){
            $num = $info['num'];
        }

        !$this->taskSrv && $this->taskSrv = service_task_factory::build($task_id);
        //需求派单服务商上限
        $limit_num = $this->taskSrv->get("task_extends.recmd_limit_num");
        $limit_num = intval($limit_num) > 0 ? $limit_num : 1 ;
        return $limit_num - $num > 0 ? 1 : 0 ;
    }

    /**
     * 获取符合派单服务商
     * @param $task_id
     * @return array|bool
     */
    private function getRecommeduserList($task_id,$buyer_id){

        try{

            if(false === ($users = $this->getRecommendUsers($task_id,$buyer_id))){
                return false;
            }

            $conditions = $users_info = array();

            //获取抢单条件
            $condition  = $this->getCondition($task_id,2,2);
            foreach($condition->data as $v){
                $conditions[$v->key]=$v->value;
            }
            if(!empty($conditions['user_id'])){
                unset($conditions['user_id']);
            }

            //取派单时需求金额
            if(array_key_exists("amount",$conditions)){
                $task_amount = $this->taskSrv->getRecmdBidModeAmount();
                if($task_amount != $conditions['amount']){
                    $conditionsSrv = new service_recommend_conditions();
                    $conditions['amount'] = $task_amount;
                    $conditionsSrv->updateCondition($task_id,"amount",$task_amount,2);
                }

            }
            $api_jdy = new com\zhubajie\alg\interfaces\JdyServiceClient(null);
            zbj_lib_ApiClient::build($api_jdy);
            $wk=$api_jdy->usersForRecommend($users, $conditions);
            if($wk->success === false){
                throw new Exception("查找推荐服务商失败",-3);
            }

            $users_info = array(
                'total'=> intval($wk->total),
                'users'=> array_unique($wk->users),
            );

            return $users_info['users'];

        }catch (Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }
    }

    /**
     *	获取历史派单
     * @return Object
	 */
	public function getHistoryList(RecommendParamDTO $recommend){
		$option = $recommend->option;
		$userId = (int)$option[RHOptionDTO::USER_ID];

		$page = intval($recommend->page);
    	$page <= 0 && $page = 1;

    	$pageSize = intval($recommend->pageSize);
    	($pageSize<=0 || $pageSize>100) && $pageSize = 10;

    	$startDate = lib_BaseUtils::getStr(trim($option[RHOptionDTO::START_DATE]));
		$endDate = lib_BaseUtils::getStr(trim($option[RHOptionDTO::END_DATE]));

		$recommendType = $option[RHOptionDTO::RECOMMEND_TYPE];

		if(0 >= $userId){
			throw new Exception("该用户无权操作");
		}

		//计算当前日期
		$date = $this->recommendDate($startDate, $endDate);

		$tabRecmd = $this->model()->tableName();
		$tabTask = 'mk_task';

		$condition = array();
		$condition[] = "{$tabRecmd}.user_id='{$userId}'";
		$condition[] = "{$tabRecmd}.is_sys >= 1";
		$condition[] = "{$tabRecmd}.senddate >= '$date[start_date]' and {$tabRecmd}.senddate <= '$date[end_date]'";

        //判断历史派单筛选条件	累计接单（2,3,4,5,7,9）	主动拒绝（6）	超时（8）
		switch($recommendType){
			case 1:
				$condition[] = "{$tabRecmd}.action_type in(2,3,4,5,7,9)";
				break;
			case 2:
				$condition[] = "{$tabRecmd}.action_type in(5,6,7)";
				break;
			case 3:
				$condition[] = "{$tabRecmd}.action_type=8";
				break;
			case 4:
				$condition[] = "{$tabRecmd}.action_type in(1,6,8,10)";
				break;
			default:
				
				break;
		}
		
		$item = array(
			'mk_recommend.id',
			'mk_recommend.task_id',
			'mk_task.title',
			'mk_recommend.amount',
			'mk_task.hosted',
			'mk_task.mode',
			'mk_task.user_id',//雇主
			'mk_recommend.action_notes',
			'mk_task.nickname',
			'mk_recommend.user_id as recommend_user_id',//推荐服务商id
			'mk_recommend.sendtime',
			'mk_recommend.senddate',
			'mk_recommend.action_type',
			'mk_recommend.works_id',
			'mk_recommend.is_sys',
	);
		$left_join = array($tabTask => "{$tabTask}.task_id = {$tabRecmd}.task_id");

		$recommendModel = $this->model();
		$recommendModel->setLimit($pageSize);
		$recommendModel->setPage($page);
		$recommendModel->setCount(true);
		
	    return $recommendModel->select($condition, $item, ' order by mk_recommend.id desc', '', $left_join);

	}

	/**
	 * 获取历史派单统计
	 * @return Object
	 */
	public function getCount(RecommendCountParamDTO $paramDTO){
		$userId = (int)$paramDTO->userId;
		$startDate = lib_BaseUtils::getStr(trim($paramDTO->startdate));
		$endDate = lib_BaseUtils::getStr(trim($paramDTO->enddate));

		if(0 >= $userId){
			throw new Exception("该用户无权操作");
		}

		$date = $this->recommendDate($startDate, $endDate);

		$condi = array();
		$condi[] = " user_id = '$userId'";
		$condi[] = " date >= '$date[start_date]' and date <= '$date[end_date]'";
		$item = 'sum(recommend_num) recommend_num,sum(accept_num) accept_num,sum(reject_num) reject_num,sum(invite_undeal_num) invite_undeal_num, sum(recommend_price) recommend_price';
		$model = new model_mk_recommend_info();

        if(false === ($info = $model->selectOne($condi,$item))){
            throw new Exception("查询服务商派单统计出错！");
        }
        $info['undeal_num'] = $info['recommend_num']-$info['accept_num']-$info['reject_num']-$info['invite_undeal_num'];

		return $info;
		 
	}

	/**
	 * 计算历史派单查询日期
	 * @return array
	 */
	public function recommendDate($startDate, $endDate){

		empty($endDate) && $endDate = date('Y-m-d');
		empty($startDate) && $startDate = date('Y-m-d', strtotime("-1 year"));

        // 线上环境，限制最小时间
        (strtotime($startDate) < strtotime(self::FREETASKDATE)) && $startDate = self::FREETASKDATE;

		$error = !(lib_BaseUtils::chkdate($startDate)) || !(lib_BaseUtils::chkdate($endDate));
		if($error || ((strtotime($endDate) - strtotime($startDate)) > 31622400)){
			$endDate = date('Y-m-d');
			$startDate = date('Y-m-d', strtotime("-1 year"));
		}

		return array(
			'start_date'	=> $startDate,
			'end_date'		=> $endDate,
		);
	}

    /**
     * 获取单个需求的状态
     * @param $task_id
     */
    public function getTaskCount($task_id){

        try{

            $result = array(
                'is_recommend'          =>0,
                'state'                  =>0,
                'works_limit'           =>0,
                'avaliable_num'         =>0,
                'recommend_users_num'  =>0,
                'involved_users_num'   =>0
            );

            $srvWorkTask = service_task_factory::build($task_id);

            //非派单中 即公开发布
            $result['is_recommend'] = $srvWorkTask->get("task_opis.recmd_status")!=0?1:0;
            $result['state']        = $srvWorkTask->get("task_opis.recmd_status")==1?0:1;
            $result['works_limit']  = $srvWorkTask->taskWorksLimitNumber();
            $condition['task_id']=$task_id;
            if($r_infos = $this->model()->select($condition,"is_sys,action_type")->items){

                foreach($r_infos as $_info){
                    $_info['is_sys']>=1 && ++$result['recommend_users_num'];
                    in_array($_info['action_type'],array(2,3,4)) && ++$result['avaliable_num'];
                    in_array($_info['action_type'],array(2,3,4,5,7,9,10)) && ++$result['involved_users_num'];
                }
            }

            $taskCountResult = new TaskCountDO($result);
            return $taskCountResult;

        }catch (Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }
    }

    /**
     * 获取单个需求派单抢单userid
     * @param $task_id
     */
    public function getRecommendUsers($task_id,$buyer_id){

        if(!$task_id){
            $this->setError(0,"需求id为空~");
            return false;
        }

        $userss = array();

        if($users = $this->model()->select(array('task_id'=>$task_id),'user_id,buyer_id')->items){
            foreach($users as $k=>$v){
                $userss[$v['user_id']] = $v['user_id'];
            }
        }

        //添加雇主id
        $userss[] = $buyer_id;

        return $userss;
    }

    /**
     * 创建派单记录
     * @param $task_info
     * @param $user_id
     * @param int $special_type
     * @param int $is_sys
     * @return bool
     */
    private function createRecommend( $task_info ,$user_id ,$special_type = 1,$is_sys = 0){

        try{

            //
            $item['task_id'] =$task_info['task_id'];
            $item['user_id'] =$user_id;
            $item['buyer_id']= $task_info['user_id'];
            $item['amount']  =$task_info['amount'];
            $item['is_sys']  =$is_sys;
            $item['action_type']=1;
            $item['action_notes']='';
            $item['manager_id']=0;
            $item['manager_name']='';
            $item['special_type']=$special_type;
            $item['operatetime']=$this->_time;
            $item['operatedate']=$this->_ymd;
            $item['sendtime']=$this->_time;
            $item['senddate']=$this->_ymd;

            if($this->model()->insert($item) === false){
                throw new Exception('写入威客推荐表失败'.$this->model()->getError(),RecallResultCode::SYSTEM_ERROR);
            }

            $mb_recmd_info=new model_mb_recommend_info($user_id);
            $userId=$mb_recmd_info->getData('user_id');
            if(!$userId){
                $mb_recmd_info=new model_mb_recommend_info();
                $items['user_id']=$user_id;
                $items['recommend_num']=1;
                $items['today_num']=1;
                $items['response_rate']=100;//默认订单响应率100

                if($mb_recmd_info->insert($items) === false) throw new Exception('写入威客抢单信息失败'.$mb_recmd_info->getError(),RecallResultCode::SYSTEM_ERROR);
            }else{
                $today_num=$mb_recmd_info->getData('today_num');
                $recommend_num=$mb_recmd_info->getData('recommend_num');
                $recommend_num+=1;
                $today_num+=1;
                $mb_recmd_info->set('recommend_num',$recommend_num);
                $mb_recmd_info->set('today_num',$today_num);
            }
            if($mb_recmd_info->save()=== false) throw new Exception('维护威客抢单信息失败'.$mb_recmd_info->getError(),RecallResultCode::SYSTEM_ERROR);

        }catch (Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }

    }

	/**
	 * 自动放弃，服务商派单记录
	 */
	public function giveUp($task_id,$user_id){

		try{

			if(!$task_id || !$user_id){
				throw new Exception("传入参数不完整。");
			}

			$this->_beginTransaction('mk');

			$condition = array(
				'task_id' => $task_id,
				'user_id' => $user_id,
			);
			if( false === ($recdInfo = $this->model()->selectOne($condition))){
				throw new Exception("为查到有效派单记录。");
			}
//			$task
			$this->_conmmit('mk');

		}catch (Exception $e){
			$this->_rollback('mk');
		}
	}

    /**
     * 上班
     * @param $user_id
     * @return bool
     */
    public function onDuty($user_id){

        try{

            //服务商抢标
            $user_recall['user_id'] = $user_id;
            $event="task.recmd.onduty";
            if(lib_Api::throwTaskEvent($user_recall, $event)===false){
                throw new Exception("服务器发生了异常",RecallResultCode::SYSTEM_ERROR);
            }

            return true;
        }catch (Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }
    }

    /**
     * 获取服务商 投标限制条件状态
     * @param
     * $user_id
     * @param $task_id
     */
    private function getUserBidStatus($user_id,$task_id){

        $bidStatusResultDTO = new BidStatusResultDTO();
        try{

            $userService = new com\zhubajie\user\interfaces\UserServiceClient(NULL);
            zbj_lib_ApiClient::build($userService);
            $param = new BidStatusParamDTO();
            $param->user_id = $user_id;
            $param->task_id = $task_id;
            $result = $userService->bidStatus($param);
            if( false === $result->success){
                throw new Exception($result->message);
            }
            $bidStatusResultDTO = $result->data;
        }catch (Exception $e){
            $this->setError(0,$e->getMessage());
            return false;
        }

        return $bidStatusResultDTO;
    }


    /**
     * 检测是否满足投标条件
     * @return bool
     */
    private function checkIsCanBid($user_id,$is_invite = false){

        try{

            if(!$this->task_id ){
                throw new Exception("未找到需求id",RecallResultCode::PARAM_ERROR);
            }

            $bidUserStatus = $this->getUserBidStatus($user_id,$this->task_id);
            if($bidUserStatus->creditpoints <=80){
                throw new Exception("您当前诚信值不足80！");
            }

            !$this->taskSrv || $this->taskSrv = service_task_factory::build($this->task_id);

            $task_detail = $this->taskSrv->getTaskDetail();
            //需求满足条件
            $tendcondition = $this->taskSrv->getTenderCondition($task_detail);

            if($tendcondition->is_require_realname && $bidUserStatus->realname_status !==true){
//                throw new Exception("需要实名认证！");
            }
            if($tendcondition->is_require_complete && $bidUserStatus->security_status !==true){
                throw new Exception("需加入保证完成！");
            }
            if($tendcondition->is_require_maintain && $bidUserStatus->maintain_status !==true){
                throw new Exception("需保证维护！");
            }
            if($tendcondition->is_require_original && $bidUserStatus->originworks_status !==true){
                throw new Exception("需保证原创！");
            }

            if($tendcondition->is_require_sourcecode && $bidUserStatus->sourcecode_status !==true){
                throw new Exception("需保证提供源码！");
            }

            if($tendcondition->is_require_effect && $bidUserStatus->effect_status !==true){
                throw new Exception("需保证推广效果！");
            }
                        
            //定向邀请服务商取消类目限制
            if( !$is_invite && $bidUserStatus->is_resident !==true){
                throw new Exception("未入驻该类目需求！",RecallResultCode::NOT_RESIDENT);
            }

            return true;
        }catch (Exception $e){
            $this->setError($e->getCode(),$e->getMessage());
            return false;
        }

    }

    /**
     * 检测服务商特权
     * @param $user_id 服务商id
     * @param $user_id 服务商id
     * @param $is_invite 是否邀请服务商
     * @return bool
     */
    private function checkMemberShipLeftRight($user_id,$special_type=1,$is_invite=false,$recmd=array()){


        try{

            if(!$this->userSrv){
                $this->userSrv = new service_user($user_id);
            }

            //额度检查
            $membership_info = $this->userSrv->getMembershipInfo();
            $left_rights = $membership_info['left_rights'];

            //未派单抢标 检测投标额度
            if($recmd['is_sys'] <= 0 && $left_rights[MembershipRights::BID_NUM] <= 0){
                throw new Exception("当日可投标额度不足！",RecallResultCode::BID_LEFT_NUM);
            }


            //限额
            //邀请服务商金额不限制
            if( !$is_invite && empty($recmd) &&
                $left_rights[MembershipRights::RECOMMEND_MAX_TASK_AMOUNT] < $this->taskSrv->getRecmdBidModeAmount()){
                $message = "您当前为普通服务商,不能参与%s以上需求！";
                throw new Exception(sprintf($message,$left_rights[MembershipRights::RECOMMEND_MAX_TASK_AMOUNT]),RecallResultCode::AMOUNT_ERROR);
            }
            return true;
        }catch (Exception $e){
            $this->setError($e->getCode(),$e->getMessage());
            return false;
        }
    }

    /**
     * 取需求有效投标数量
     * @return bool|int
     */
    public function validNum($task_id){

        if(!$task_id){
            return false;
        }

        //有效的投标稿件数量
        $num = 0;

        $condition = array(
            'task_id'       =>$task_id,
            'action_type in(1,2,3,4)',
        );

        if($info = $this->model()->select($condition," is_sys,action_type ")->items){

            foreach($info as $val){
                if($val['is_sys']==3 && $val['action_type']==1){
                    continue;
                }
                ++$num;
            }
        }

        return intval($num);


    }


}