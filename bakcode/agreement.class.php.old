<?php

/**
 * 合同协议
 * @date 2014.4.11
 */
class zbj_service_agreement extends zbj_components_baseservice {

	//当前业务ID
	protected $id;
	
	protected $ymd;
	
	protected $_userid;

	//当前业务主数据表
	protected $marter_table = 'zbj_model_mk_taskagreement';

	function __construct($id = 0) {
		parent::__construct();
		$this->id = $id;
		$this->ymd = date('Y-m-d', $this->_time);
	}
	
	
	/**
	 * 设置当前登录用户
	 * 
	 * @return  id|false 
	 */
	public function setLoginUser($uid){
		$uid = intval($uid);
		if($uid<=0) return false;
		$this->_userid = $uid;
	}

	/**
	 * 创建交易协议
	 * 
	 * @return  id|false 
	 */
	public function create($tid,$content,$files=array(),$data=array()){
		$id = false;
		$tid = intval($tid);
		if(empty($content) || !is_array($content) || $tid<=0) {
			$this->setError(0, '缺少关键数据');
			return false;
		}
		$files = empty($files)?array():$files;
		$filestr = empty($files)?'':json_encode($files);
		
		$data = empty($data)?array():$data;
		$datastr = empty($data)?'':json_encode($data);
		$cond = array();
		if($content['haspremoney']&&$content['premoney']) {
			$cond[] = array('id'=>'1','value'=>round(floatval($content['premoney']),2));
		}

		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();
				
		$entity = array('task_id'=>$tid);
		
		if(in_array($srvTask->get('mode'),array(11,12,13)) 
			//|| (in_array($srvTask->get('mode'), array(10)) && in_array($srvTask->get('allot'),array(1)))
		){ // 雇佣、招标
			$orderdata = $srvTask->getOneWinOrder();
			if(empty($orderdata['sl_user_id'])){
				$this->setError(0,'获取交易数据失败');
				return false;
			}
			$entity['sl_user_id'] = $orderdata['sl_user_id'];
			$entity['sl_nickname'] = $orderdata['sl_nickname'];
			$entity['by_user_id'] = $orderdata['user_id'];
			$entity['by_nickname'] = $orderdata['nickname'];
			$entity['pub_user_id'] = $this->_userid;
			
			$entity['sl_is_agree'] = 1;
			$entity['sl_agreetime'] = $this->_time;
			
			$entity['by_is_agree'] = 0;
			$entity['by_agreetime'] = 0;

			if ($this->_userid==$entity['sl_user_id']) { //发起者的类型
				$entity['pub_user_type'] = 2;

				$entity['sl_is_agree'] = 1;
				$entity['sl_agreetime'] = $this->_time;
				$entity['by_is_agree'] = 0;
				$entity['by_agreetime'] = 0;
			}else{
				$entity['pub_user_type'] = 1;

				$entity['sl_is_agree'] = 0;
				$entity['sl_agreetime'] = 0;
				$entity['by_is_agree'] = 1;
				$entity['by_agreetime'] = $this->_time;
			}
			$entity['is_active'] = 0;
			$entity['is_invalid'] = 0;

		}else{
			$this->setError(0,'暂不支持该交易模式');
			return false;
		}
		$entity['createymd'] = $this->ymd;
		$entity['createtime'] = $this->_time;
		$entity['content'] = serialize($content);
		$entity['files'] = $filestr;
		$entity['data'] = $datastr;
		
		$this->set($entity);
		
		try{
			$this->_beginTransaction('mk');
			
			if($this->save() === false) {
				throw new Exception('生成交易协议失败'. $this->getError());
			}
			if($srvTask->addTradeLog($entity['pub_user_type']==1?0:1,10) == false){
				throw new Exception('添加交易日志失败'. $srvTask->getError());
			}
			$id = $this->getLastId();

			if($cond){
				$m_taskagreementcondrel = new zbj_model_mk_taskagreementcondrel();
				$m_taskagreementcond = new zbj_model_mk_taskagreementcond();
				foreach($cond as $_cond) {
					$m_taskagreementcond->setPkid($_cond['id']);
					$taskagreementcond = $m_taskagreementcond->get();
					if ( $taskagreementcond ) {
						$m_taskagreementcondrel->set('agreeid', $id);
						$m_taskagreementcondrel->set('agree_cond_id', intval($_cond['id']));
						$m_taskagreementcondrel->set('name', $taskagreementcond['name']);
						$m_taskagreementcondrel->set('value', $_cond['value']);
						$m_taskagreementcondrel->set('status', 0);
						$m_taskagreementcondrel->set('task_id', $tid);
						if($m_taskagreementcondrel->save()===false){
							throw new Exception('添加交易协议附加条件失败'. $m_taskagreementcondrel->getError());
						}
					}
					
				}
			}
                        
                        if($srvTask->upAgreementStep(3) === false){
                            throw new Exception('更新交易协议状态失败');
                        }
			$this->_commit('mk');
		}catch(Exception $e){
			$this->_rollBack('mk');
			$this->setError(0,$e->getMessage());
			return false;
		}
		
		if($entity['pub_user_type']==1){ // 协议发起者类型，1雇主，2服务商
			$msgparam = array('task_id'=>$tid,'agrmentid'=>$id,'buyer_id'=>$entity['by_user_id']);
			zbj_lib_Api::throwTaskEvent($msgparam,'buyer.pubed.agreement');
		}else{
			$msgparam = array('task_id'=>$tid,'agrmentid'=>$id,'seller_id'=>$entity['sl_user_id']);
			zbj_lib_Api::throwTaskEvent($msgparam,'seller.pubed.agreement');
		}
		
		return $id;
	}
	
	/**
	 * 同意合同协议
	 * 
	 * @return  bool 
	 */
	public function agree(){

		$this->setError(0, 'agree功能已禁用');
		return false;
		
		
		$tid = intval($this->get('task_id'));
		$sellerid = $this->get('sl_user_id');
		$buyerid = $this->get('by_user_id');
		
		if($tid<=0 || empty($sellerid) || empty($buyerid)){
			$this->setError(0, '获取协议信息失败');
			return false;
		}
		if ( $this->_userid == $sellerid ) {
			$role = 'sl_';
		}else if ( $this->_userid == $buyerid ) {
			$role = 'by_';
		}else{
			$this->setError(0, '您无权操作该协议');
			return false;
		}
		if($this->get($role.'is_agree')==1){
			$this->setError(0, '您已经同意了该协议');
			return false;
		}
		$updata = array(
			$role.'is_agree'	=> 1,
			$role.'agreetime'	=> $this->_time,
		);
		
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();
		if($srvTask->get('hosted')!=1){
			$this->setError(0, '该交易还未托管赏金');
			return false;
		}
		try{
			$this->_beginTransaction('mk,mb,fn');
			
			$taCondRelModel = new zbj_model_mk_taskagreementcondrel();
			$taCondRel = $taCondRelModel->selectOne("agreeid='{$this->id}' and status=0");
			if(!is_numeric($taCondRel['agree_cond_rel_id']) && !$srvTask->setAgreementActive(true)){// 暂无其他附加条件
				throw new Exception($srvTask->getError());
			}

			$this->set($updata);
			if($this->save() == false) {
				throw new Exception('操作交易协议失败'. $this->getError());
			}
			if($srvTask->addTradeLog($role=='by_'?0:1,11) == false){
				throw new Exception('添加交易日志失败'. $srvTask->getError());
			}
			
			$this->_commit('mk,mb,fn');
		}catch(Exception $e){
			$this->_rollBack('mk,mb,fn');
			$this->setError(0,$e->getMessage());
			return false;
		}
		$srvTask->upAgreementStep(4);
		
		if($role=='by_'){
			$msgparam = array('task_id'=>$tid,'agrmentid'=>$this->id,'buyer_id'=>$buyerid);
			zbj_lib_Api::throwTaskEvent($msgparam,'buyer.signed.agreement');
		}else{
			$msgparam = array('task_id'=>$tid,'agrmentid'=>$this->id,'seller_id'=>$sellerid);
			zbj_lib_Api::throwTaskEvent($msgparam,'seller.signed.agreement');
		}
         
		//交易协议分期付款，发送短信通知给服务商和雇主 20150429 by houxiaopeng
		$this->taskAgreeSendMsg();

		return true;
	}

	/**
	 * 交易协议分期付款，发送短信通知给服务商和雇主 by houxiaopeng 20150429
	 * @return 
	 */
	private function taskAgreeSendMsg(){
		return false; // 暂不开放
		if(!$this->id){
			return false;
		}
		//当交易协议雇主服务商都同意的时候抛出短信提示事件 20150429 by houxiaopeng
		$agrcont = $this->get('content');
		if($agrcont[0]==='{'){
			$agrcont = json_decode($agrcont,true);
		}else{
			$agrcont = (array)(@unserialize($agrcont));
		}
		$agrcont['stepon'] = (array)$agrcont['stepon'];
		$agrcont['stepDate'] = (array)$agrcont['stepDate'];
		if(empty($agrcont['stepDate']) || empty($agrcont['stepon'])){
			return false;
		}
		
		$indexArray = array();
		foreach($agrcont['stepon'] as $index=>$on){
			$on == 1 && $indexArray[] = $index;		
		}
		
		if(empty($indexArray)){
			return true;
		}
		
		$evtparam = array('agreeid'=>$this->id,'task_id'=>$this->get('task_id'));
		foreach($indexArray as $index){
			$date = $agrcont['stepDate'][$index];
			if(strtotime($date)<=0 || empty($date)){ continue; }
			$randnum = rand(0,59);
			$expiretime = strtotime("{$date} 10:{$randnum}:{$randnum}") - time();
            zbj_lib_Constant::DOMAIN!='zhubajie.com' && $expiretime = 0;
            //抛出事件，执行发送信息通知
			zbj_lib_Api::throwTaskEvent($evtparam,'task.api.agree',$expiretime);
		}
		return true;
	}

	/**
	 * 交易协议生效以后调用
	 * @return boolean 
	 */
	public function afterActive($dis_transaction=false)
	{
		$agreementData = $this->get('*');
		$tid = $agreementData['task_id'];
		if(!$tid){
			$this->setError(0,'任务id不能为空');
			return false;
		}
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();

		// 通知vk开始工作
		if(in_array($srvTask->get('mode'),array(11,12))){
			$orders = $srvTask->getOneWinOrder();
			if(empty($orders)){
				$this->setError(0, '无法获取交易订单');
				return false;
			}
			if($orders['isaccept_sl']!=1 && $srvTask->sellerSureDeal($dis_transaction)==false) { // 已经同意过了则不同意
				$this->setError(0, '更新交易状态失败'. $srvTask->getError());
				return false;
			}
				
			$buyercont = "交易协议达成，服务商已开始工作，为保障服务效果，请您与服务商保持沟通，跟进项目。<a target=\"_blank\" href=\"http:\/\/app.zhubajie.com/bz/\">下载猪八戒APP</a>，用手机随时随地与对方联系。<br>如有需求变更，请及时签署<a href=\"javascript:void(0);\" id=\"AddonsAgreement\">补充协议</a>，以避免交易纠纷。";
			$sellercont = "交易协议达成，请按照协议约定完成工作。如有需求变更，请及时签署<a href=\"javascript:void(0);\" id=\"AddonsAgreement\">补充协议</a>，以避免交易纠纷。";
			$srvTask->upNoticeLog(0,$buyercont,0,4);
			$srvTask->upNoticeLog(1,$sellercont,0,4);
		}

		if(in_array($srvTask->get('mode'),array(13))){ //如果是招标则不进行雇佣的步骤了
			$cont = '您与服务商共同签署了交易协议，如有需求变更，请及时签署补充协议，以避免交易纠纷。<a href="javascript:void(0);" id="viewAgreement">查看交易协议></a>';
			$srvWorks = $srvTask->getSuccessWorkObject();
			$srvWorks->addWorksSourceLog(1,1,$cont,array('type'=>7));

			return true;
		}
		
		//给双方发送站内信
		// to雇主
		$sellerid = $agreementData['sl_user_id'];
		$buyerid = $agreementData['by_user_id'];

		// to雇主
		$other = array(
			'task_id'	=> $tid,
			'task_title'	=> $srvTask->get('title'),
			'buyer_userid'	=> $buyerid,
			'seller_userid'	=> $sellerid,
		//	'infomobile'	=> 1
			'link'	=> zbj_lib_Constant::TASK_URL.'/'.$tid
		);
		$title = '交易协议已达成 服务商已开始工作';
		$to_who = new zbj_service_user($buyerid);
		if($this->get('mode')==11){
			zbj_service_taskmsg::sendmsg($to_who, 'srvbuyer', $title, array(9),$other);
		}else{
			zbj_service_taskmsg::sendmsg($to_who, 'employbuyer', $title, array(11),$other);
		}
		
		// to服务商
		$other = array(
			'task_id'	=> $tid,
			'task_title'	=> $srvTask->get('title'),
			'buyer_userid'	=> $buyerid,
			'seller_userid'	=> $sellerid,
			'infomobile'	=> 1,
			'link'	=> zbj_lib_Constant::TASK_URL.'/'.$tid
		);
		$title = '交易协议已达成 可以开始工作';
		$to_who = new zbj_service_user($sellerid);
		if($this->get('mode')==11){
			zbj_service_taskmsg::sendmsg($to_who, 'srvseller', $title, array(16),$other);
		}else{
			zbj_service_taskmsg::sendmsg($to_who, 'employseller', $title, array(14),$other);
		}

		return true;
	}
	
	/**
	 * 修改雇佣合同协议
	 * 
	 * @return  id|false 
	 */
	public function editMaster($content,$files=array(),$data=array()){
		if(empty($this->id)){
			$this->setError(0, '缺少主键id');
			return false;
		}
		$tid = intval($this->get('task_id'));
		if(empty($content) || !is_array($content)) {
			$this->setError(0, '缺少关键数据');
			return false;
		}
		if($tid<=0){
			$this->setError(0, '获取交易协议数据失败');
			return false;
		}
		if($this->_userid != $this->get('pub_user_id')){
			$this->setError(0, '对不起，您没有修改的权限');
			return false;
		}
		if($this->get('sl_is_agree')==1 && $this->get('by_is_agree')==1){
			$this->setError(0, '交易双方都已同意该协议，不可修改');
			return false;
		}
		$oldcontent = $this->get('content');
		if($oldcontent[0]==='{'){// 数据过渡，从JSON过渡到serialize
			$oldcontent = json_decode($oldcontent,true);
		}else{
			$oldcontent = (array)(@unserialize($oldcontent));
		}
		$newcontent = $content;
		unset($oldcontent['agid'],$newcontent['agid']); // 排除agid字段
		//@todo显示此次更改的内容

		if(json_encode($oldcontent)==json_encode($newcontent)){
			$this->setError(0, '协议内容没有任何变化');
			return false;
		}
		$agreecond = new zbj_model_mk_taskagreementcondrel();
		$cond = array();
		$cond_ids = array();
		if($content['haspremoney']&&$content['premoney']) {
			$cond[] = array('id'=>'1','value'=>round(floatval($content['premoney']),2));
			$cond_ids[] = 1;
		}
		$agree_cond_del = array();
		$agree_cond_del['agreeid'] = $this->id;
		if($cond_ids){
			$agree_cond_del[] = "agree_cond_id NOT IN(".join(',',$cond_ids).")";
		}
		$agreecond->delete($agree_cond_del);

		if($cond){
			foreach($cond as $_cond){
				$agreecond = new zbj_model_mk_taskagreementcondrel();
				$data = $agreecond->selectOne(array('agreeid'=>$this->id, 'agree_cond_id'=>$_cond['id']));
				if($data){
					$agreecond->setPkid($data['agree_cond_rel_id']);
					$agreecond->set('value', $_cond['value']);
				}else{
					$m_agreecond = new zbj_model_mk_taskagreementcond($_cond['id']);
					$m_agreecond = $m_agreecond->get();
					if($m_agreecond){
						$agreecond->set('agreeid', $this->id);
						$agreecond->set('agree_cond_id', $_cond['id']);
						$agreecond->set('value', $_cond['value']);
						$agreecond->set('name', $m_agreecond['name']);
						$agreecond->set('status',0);
						$agreecond->set('task_id', $tid);
					}
				}
				if(!$agreecond->save()){
					$this->setError(0, '附加条件保存失败，'.$agreecond->getError());
					return false;
				}
			}
		}

		$files = empty($files)?array():$files;
		$filestr = empty($files)?'':json_encode($files);
		
		$data = empty($data)?array():$data;
		$datastr = empty($data)?'':json_encode($data);
				
		$entity = array();
		$entity['content'] = serialize($content);
		$entity['files'] = $filestr;
		$entity['data'] = $datastr;
		
		$this->set($entity);
		if($this->save() === false) {
			$this->setError(0, '编辑交易协议失败'. $this->getError());
			return false;
		}
		return true;
	}
	
	/**
	 * 创建雇佣合同附加协议
	 * 
	 * @return  id|false 
	 */
	public function createAddons($entity,$content,$files=array(),$data=array()){
		$pubuid = intval($entity['user_id']);
		$tid = intval($entity['task_id']);
		unset($entity['user_id']);
		if(empty($content) || !is_array($content) || $pubuid<=0 || $tid<=0 || !is_numeric($entity['agreeid'])) {
			$this->setError(0, '缺少关键数据');
			return false;
		}
		$files = empty($files)?array():$files;
		$filestr = empty($files)?'':json_encode($files);
		
		$data = empty($data)?array():$data;
		$datastr = empty($data)?'':json_encode($data);
		
		$srvTask = new zbj_service_task($tid);
		$srvTask = $srvTask->init();
		
		if(in_array($srvTask->get('mode'),array(11,12,13)) 
			//|| (in_array($srvTask->get('mode'),array(10)) && in_array($srvTask->get('allot'),array(1)))
			){ // 雇佣
			$orderdata = $srvTask->getOneWinOrder();
			if(empty($orderdata['sl_user_id'])){
				$this->setError(0,'获取交易数据失败');
				return false;
			}
			$byerpub = $pubuid==$orderdata['user_id']?true:false;
			
			$entity['sl_user_id'] = $orderdata['sl_user_id'];
			$entity['by_user_id'] = $orderdata['user_id'];
			$entity['pub_user_id'] = $pubuid;
			
			$entity['sl_is_agree'] = !$byerpub?1:0;
			$entity['sl_agreetime'] = !$byerpub?$this->_time:0;
			
			$entity['by_is_agree'] = $byerpub?1:0;
			$entity['by_agreetime'] = $byerpub?$this->_time:0;
			
		}else{
			$this->setError(0,'暂不支持该交易模式');
			return false;
		}
		
		$entity['createymd'] = $this->ymd;
		$entity['createtime'] = $this->_time;
		$entity['content'] = serialize($content);
		$entity['files'] = $filestr;
		$entity['data'] = $datastr;
		
		$addonsModel = new zbj_model_mk_taskagreementaddons();
		if($addonsModel->insert($entity) === false) {
			$this->setError(0, '生成合同附加协议失败'. $addonsModel->getError());
			return false;
		}

		return true;
	}
	
	/**
	 * 修改雇佣合同附加协议
	 * 
	 * @return  id|false 
	 */
	public function editAddons($agid,$content,$files=array(),$data=array()){
		if(empty($agid)){
			$this->setError(0, '缺少主键id');
			return false;
		}
		if(empty($content) || !is_array($content)) {
			$this->setError(0, '缺少关键数据');
			return false;
		}
		$addonsModel = new zbj_model_mk_taskagreementaddons();
		$addons = $addonsModel->selectOne("addons_id='{$agid}'");

		if(intval($addons['addons_id'])<=0){
			$this->setError(0, '获取附加协议数据失败');
			return false;
		}
		if($this->_userid != $addons['pub_user_id']){
			$this->setError(0, '对不起，您没有修改的权限');
			return false;
		}
		if($addons['by_is_agree']==1 && $addons['sl_is_agree']==1){
			$this->setError(0, '交易双方都已同意该协议，不可修改');
			return false;
		}
		$files = empty($files)?array():$files;
		$filestr = empty($files)?'':json_encode($files);
		
		$data = empty($data)?array():$data;
		$datastr = empty($data)?'':json_encode($data);
				
		$entity = array();
		$entity['content'] = serialize($content);
		$entity['files'] = $filestr;
		$entity['data'] = $datastr;
		
		if($addonsModel->update("addons_id='{$agid}'",$entity) === false) {
			$this->setError(0, '编辑附加协议失败'. $addonsModel->getError());
			return false;
		}
		return true;
	}
	
}
